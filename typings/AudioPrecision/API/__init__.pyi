import typing, abc
from System.Collections import IEnumerable, IEnumerator, IDictionary
from System import DateTime, Array_1, EventHandler, Exception, EventArgs, MulticastDelegate, IAsyncResult, AsyncCallback, MarshalByRefObject, Attribute, Enum, TimeSpan, Environment
from System.Reflection import MethodBase, MethodInfo
from System.Runtime.Serialization import SerializationInfo, StreamingContext
from System.Drawing import Color, FontStyle
from System.Drawing.Drawing2D import DashStyle
from System.Collections.Generic import IEnumerable_1

class A2dpSinkStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Command(self) -> BluetoothAvrcpCommand: ...
    @Command.setter
    def Command(self, value: BluetoothAvrcpCommand) -> BluetoothAvrcpCommand: ...
    @property
    def Delay(self) -> float: ...
    @Delay.setter
    def Delay(self, value: float) -> float: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class A2dpSinkStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> A2dpSinkStep: ...
    def Add(self) -> A2dpSinkStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class A2dpSourceStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    @property
    def StreamingStarted(self) -> bool: ...
    @StreamingStarted.setter
    def StreamingStarted(self, value: bool) -> bool: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class A2dpSourceStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> A2dpSourceStep: ...
    def Add(self) -> A2dpSourceStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class AcousticInputReferences:
    @property
    def CalibratorFrequency(self) -> float: ...
    @CalibratorFrequency.setter
    def CalibratorFrequency(self, value: float) -> float: ...
    @property
    def CalibratorFrequencyTolerance(self) -> float: ...
    @CalibratorFrequencyTolerance.setter
    def CalibratorFrequencyTolerance(self, value: float) -> float: ...
    @property
    def CalibratorLevel(self) -> DoubleSetting: ...
    @property
    def Count(self) -> int: ...
    def Calibrate(self, channel: int) -> None: ...
    def GetExpectedSensitivity(self, channel: int) -> float: ...
    def GetSensitivity(self, channel: int) -> float: ...
    def GetSensitivityTolerance(self, channel: int) -> float: ...
    def GetSerialNum(self, channel: int) -> str: ...
    def ResetToDefault(self) -> None: ...
    def SetSensitivityTolerance(self, channel: int, dB: float) -> None: ...
    def SetSerialNum(self, channel: int, serialNum: str) -> None: ...
    # Skipped SetExpectedSensitivity due to it being static, abstract and generic.

    SetExpectedSensitivity : SetExpectedSensitivity_MethodGroup
    class SetExpectedSensitivity_MethodGroup:
        @typing.overload
        def __call__(self, channel: int, voltsPerPascal: float) -> None:...
        @typing.overload
        def __call__(self, channel: int, tedsChannel: TransducerTedsChannel) -> None:...

    # Skipped SetSensitivity due to it being static, abstract and generic.

    SetSensitivity : SetSensitivity_MethodGroup
    class SetSensitivity_MethodGroup:
        @typing.overload
        def __call__(self, channel: int, voltsPerPascal: float) -> None:...
        @typing.overload
        def __call__(self, channel: int, tedsChannel: TransducerTedsChannel) -> None:...



class AcousticOutputReferences:
    @property
    def OutputLevelRegulation(self) -> AcousticRegulationSettings: ...
    @property
    def ReferenceFrequency(self) -> float: ...
    @ReferenceFrequency.setter
    def ReferenceFrequency(self, value: float) -> float: ...
    @property
    def VoltageRatio(self) -> float: ...
    @VoltageRatio.setter
    def VoltageRatio(self, value: float) -> float: ...


class AcousticRegulationSettings:
    @property
    def AdjustSource(self) -> RegulationSource: ...
    @AdjustSource.setter
    def AdjustSource(self, value: RegulationSource) -> RegulationSource: ...
    @property
    def InitialSteps(self) -> int: ...
    @InitialSteps.setter
    def InitialSteps(self, value: int) -> int: ...
    @property
    def RegulationInput(self) -> APxInputSelection: ...
    @RegulationInput.setter
    def RegulationInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def StartValue(self) -> DoubleSetting: ...
    @property
    def StopValue(self) -> DoubleSetting: ...
    @property
    def TargetChannel(self) -> InputChannelIndex: ...
    @TargetChannel.setter
    def TargetChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def TargetChannelType(self) -> RegulationTargetChannel: ...
    @TargetChannelType.setter
    def TargetChannelType(self, value: RegulationTargetChannel) -> RegulationTargetChannel: ...
    @property
    def TargetType(self) -> RegulationTarget: ...
    @TargetType.setter
    def TargetType(self, value: RegulationTarget) -> RegulationTarget: ...
    @property
    def TargetValue(self) -> DoubleSetting: ...
    @property
    def TargetValueType(self) -> RegulationTargetValueType: ...
    @TargetValueType.setter
    def TargetValueType(self, value: RegulationTargetValueType) -> RegulationTargetValueType: ...
    def RegulateAndSetOutputLevel(self) -> None: ...


class AcousticResponse:
    @property
    def AcquiredWaveform(self) -> AcquiredWaveformGraph: ...
    @property
    def AdditionalAcquisitionTime(self) -> DoubleSetting: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def AutoDelayCompensation(self) -> bool: ...
    @AutoDelayCompensation.setter
    def AutoDelayCompensation(self, value: bool) -> bool: ...
    @property
    def Averages(self) -> int: ...
    @Averages.setter
    def Averages(self, value: int) -> int: ...
    @property
    def CrossCorrelation(self) -> XYGraph: ...
    @property
    def Delay(self) -> MeterGraph: ...
    @property
    def Deviation(self) -> DeviationMeterWithSmoothingGraph: ...
    @property
    def DiscardDistribution(self) -> TimingDistribution: ...
    @property
    def DistortionProductLevel(self) -> HarmonicXYGraph: ...
    @property
    def DistortionProductRatio(self) -> NormalizedHarmonicRatioXYGraph: ...
    @property
    def Duration(self) -> DoubleSetting: ...
    @property
    def EnergyTimeCurve(self) -> TimeDomainWithWindowXYGraph: ...
    @property
    def EQSettings(self) -> GenEqSettings: ...
    @property
    def FastSweepAutoDuration(self) -> bool: ...
    @FastSweepAutoDuration.setter
    def FastSweepAutoDuration(self, value: bool) -> bool: ...
    @property
    def FastSweepGeneratorSettings(self) -> FrequencySweepParameters: ...
    @property
    def FrequencyCorrectionEnabled(self) -> bool: ...
    @FrequencyCorrectionEnabled.setter
    def FrequencyCorrectionEnabled(self, value: bool) -> bool: ...
    @property
    def FrequencyShift(self) -> MeterGraph: ...
    @property
    def Function(self) -> BenchTestFunction: ...
    @property
    def Generator(self) -> ContinuousSweepGenerator: ...
    @property
    def GeneratorWithPilot(self) -> ContinuousSweepPilotGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def GroupDelay(self) -> XYGraph: ...
    @property
    def HasError(self) -> bool: ...
    @property
    def HasWarnings(self) -> bool: ...
    @property
    def ImpulseResponse(self) -> ImpulseResponseWithWindowGraph: ...
    @property
    def IsStarted(self) -> bool: ...
    @property
    def LastErrorCode(self) -> APError: ...
    @property
    def LastErrorMessage(self) -> str: ...
    @property
    def Level(self) -> XYGraph: ...
    @property
    def LevelAndDistortion(self) -> XYDistortionGraph: ...
    @property
    def MeasureDistribution(self) -> TimingDistribution: ...
    @property
    def MeasureThdN(self) -> bool: ...
    @MeasureThdN.setter
    def MeasureThdN(self, value: bool) -> bool: ...
    @property
    def NestedSweep(self) -> NestedSweepSettings: ...
    @property
    def OpenLoop(self) -> bool: ...
    @OpenLoop.setter
    def OpenLoop(self, value: bool) -> bool: ...
    @property
    def Phase(self) -> PhaseXYGraph: ...
    @property
    def PreMeasurementDelay(self) -> DoubleSetting: ...
    @property
    def ReferenceWaveform(self) -> XYGraph: ...
    @property
    def RelativeLevel(self) -> RelativeLevelXYGraph: ...
    @property
    def Repeat(self) -> bool: ...
    @Repeat.setter
    def Repeat(self, value: bool) -> bool: ...
    @property
    def RubAndBuzz(self) -> RubAndBuzzGraph: ...
    @property
    def RubAndBuzzCrestFactor(self) -> RubAndBuzzGraph: ...
    @property
    def RubAndBuzzLoudness(self) -> XYGraph: ...
    @property
    def RubAndBuzzPeakRatio(self) -> RubAndBuzzGraph: ...
    @property
    def SoneTracResidualWaveform(self) -> SoneTracResidualGraph: ...
    @property
    def SoneTracRubAndBuzz(self) -> SoneTracRubAndBuzzGraph: ...
    @property
    def StartFrequency(self) -> DoubleSetting: ...
    @property
    def StopFrequency(self) -> DoubleSetting: ...
    @property
    def SweepType(self) -> FastFrequencyResponseSweepType: ...
    @SweepType.setter
    def SweepType(self, value: FastFrequencyResponseSweepType) -> FastFrequencyResponseSweepType: ...
    @property
    def ThdLevel(self) -> XYGraph: ...
    @property
    def ThdNLevel(self) -> XYGraph: ...
    @property
    def ThdNRatio(self) -> ThdNRatioXyGraph: ...
    @property
    def ThdRatio(self) -> NormalizedDistortionRatioXYGraph: ...
    @property
    def TransitionDistribution(self) -> TimingDistribution: ...
    @property
    def TriggerSettings(self) -> TriggerSettings: ...
    @property
    def Warnings(self) -> str: ...
    def Analyze(self) -> None: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def Generate(self) -> None: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Show(self) -> None: ...
    def Start(self) -> None: ...
    def Stop(self) -> None: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class AcousticResponseMeasurement:
    @property
    def AcquiredWaveform(self) -> AcquiredWaveformGraph: ...
    @property
    def AdditionalAcquisitionTime(self) -> DoubleSetting: ...
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def AutoDelayCompensation(self) -> bool: ...
    @AutoDelayCompensation.setter
    def AutoDelayCompensation(self, value: bool) -> bool: ...
    @property
    def Averages(self) -> int: ...
    @Averages.setter
    def Averages(self, value: int) -> int: ...
    @property
    def CrossCorrelation(self) -> XYGraph: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def Delay(self) -> MeterGraph: ...
    @property
    def Deviation(self) -> DeviationMeterWithSmoothingGraph: ...
    @property
    def DiscardDistribution(self) -> TimingDistribution: ...
    @property
    def DistortionProductLevel(self) -> HarmonicXYGraph: ...
    @property
    def DistortionProductRatio(self) -> NormalizedHarmonicRatioXYGraph: ...
    @property
    def EnergyTimeCurve(self) -> TimeDomainWithWindowXYGraph: ...
    @property
    def FastSweepAutoDuration(self) -> bool: ...
    @FastSweepAutoDuration.setter
    def FastSweepAutoDuration(self, value: bool) -> bool: ...
    @property
    def FastSweepGeneratorSettings(self) -> FrequencySweepParameters: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def FrequencyCorrectionEnabled(self) -> bool: ...
    @FrequencyCorrectionEnabled.setter
    def FrequencyCorrectionEnabled(self, value: bool) -> bool: ...
    @property
    def FrequencyShift(self) -> MeterGraph: ...
    @property
    def Generator(self) -> ContinuousSweepGenerator: ...
    @property
    def GeneratorWithPilot(self) -> ContinuousSweepPilotGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def GroupDelay(self) -> XYGraph: ...
    @property
    def HasWarnings(self) -> bool: ...
    @property
    def HighpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def HighpassFilterType(self) -> MeasurementHighpassFilterType: ...
    @HighpassFilterType.setter
    def HighpassFilterType(self, value: MeasurementHighpassFilterType) -> MeasurementHighpassFilterType: ...
    @property
    def ImpulseResponse(self) -> ImpulseResponseWithWindowGraph: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Level(self) -> XYGraph: ...
    @property
    def LevelAndDistortion(self) -> XYDistortionGraph: ...
    @property
    def LowpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def LowpassFilterType(self) -> MeasurementLowpassFilterType: ...
    @LowpassFilterType.setter
    def LowpassFilterType(self, value: MeasurementLowpassFilterType) -> MeasurementLowpassFilterType: ...
    @property
    def MeasureDistribution(self) -> TimingDistribution: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def MeasureThdN(self) -> bool: ...
    @MeasureThdN.setter
    def MeasureThdN(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NestedSweep(self) -> NestedSweepSettings: ...
    @property
    def NoiseWeighting(self) -> WeightingFilterType: ...
    @NoiseWeighting.setter
    def NoiseWeighting(self, value: WeightingFilterType) -> WeightingFilterType: ...
    @property
    def OpenLoop(self) -> bool: ...
    @OpenLoop.setter
    def OpenLoop(self, value: bool) -> bool: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def Phase(self) -> PhaseXYGraph: ...
    @property
    def ReferenceWaveform(self) -> XYGraph: ...
    @property
    def RelativeLevel(self) -> RelativeLevelXYGraph: ...
    @property
    def RubAndBuzz(self) -> RubAndBuzzGraph: ...
    @property
    def RubAndBuzzCrestFactor(self) -> RubAndBuzzGraph: ...
    @property
    def RubAndBuzzLoudness(self) -> XYGraph: ...
    @property
    def RubAndBuzzPeakRatio(self) -> RubAndBuzzGraph: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def SoneTracResidualWaveform(self) -> SoneTracResidualGraph: ...
    @property
    def SoneTracRubAndBuzz(self) -> SoneTracRubAndBuzzGraph: ...
    @property
    def SweepType(self) -> FastFrequencyResponseSweepType: ...
    @SweepType.setter
    def SweepType(self, value: FastFrequencyResponseSweepType) -> FastFrequencyResponseSweepType: ...
    @property
    def ThdLevel(self) -> XYGraph: ...
    @property
    def ThdNLevel(self) -> XYGraph: ...
    @property
    def ThdNRatio(self) -> ThdNRatioXyGraph: ...
    @property
    def ThdRatio(self) -> NormalizedDistortionRatioXYGraph: ...
    @property
    def TransitionDistribution(self) -> TimingDistribution: ...
    @property
    def TriggerSettings(self) -> TriggerSettings: ...
    @property
    def Warnings(self) -> str: ...
    def Analyze(self) -> None: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def Generate(self) -> None: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class AcousticResponseResults:
    @property
    def AcquiredWaveform(self) -> AcquiredWaveformGraph: ...
    @property
    def CrossCorrelation(self) -> XYGraph: ...
    @property
    def Delay(self) -> MeterGraph: ...
    @property
    def Deviation(self) -> DeviationMeterWithSmoothingGraph: ...
    @property
    def DistortionProductLevel(self) -> HarmonicXYGraph: ...
    @property
    def DistortionProductRatio(self) -> NormalizedHarmonicRatioXYGraph: ...
    @property
    def EnergyTimeCurve(self) -> TimeDomainWithWindowXYGraph: ...
    @property
    def FrequencyShift(self) -> MeterGraph: ...
    @property
    def GroupDelay(self) -> XYGraph: ...
    @property
    def ImpulseResponse(self) -> ImpulseResponseWithWindowGraph: ...
    @property
    def Level(self) -> XYGraph: ...
    @property
    def LevelAndDistortion(self) -> XYDistortionGraph: ...
    @property
    def Phase(self) -> PhaseXYGraph: ...
    @property
    def ReferenceWaveform(self) -> XYGraph: ...
    @property
    def RelativeLevel(self) -> RelativeLevelXYGraph: ...
    @property
    def RubAndBuzz(self) -> RubAndBuzzGraph: ...
    @property
    def RubAndBuzzCrestFactor(self) -> RubAndBuzzGraph: ...
    @property
    def RubAndBuzzLoudness(self) -> XYGraph: ...
    @property
    def RubAndBuzzPeakRatio(self) -> RubAndBuzzGraph: ...
    @property
    def SoneTracResidualWaveform(self) -> SoneTracResidualGraph: ...
    @property
    def SoneTracRubAndBuzz(self) -> SoneTracRubAndBuzzGraph: ...
    @property
    def ThdLevel(self) -> XYGraph: ...
    @property
    def ThdNLevel(self) -> XYGraph: ...
    @property
    def ThdNRatio(self) -> ThdNRatioXyGraph: ...
    @property
    def ThdRatio(self) -> NormalizedDistortionRatioXYGraph: ...


class AcousticResponseSettings:
    @property
    def AdditionalAcquisitionTime(self) -> DoubleSetting: ...
    @property
    def AutoDelayCompensation(self) -> bool: ...
    @AutoDelayCompensation.setter
    def AutoDelayCompensation(self, value: bool) -> bool: ...
    @property
    def Averages(self) -> int: ...
    @Averages.setter
    def Averages(self, value: int) -> int: ...
    @property
    def DiscardDistribution(self) -> TimingDistribution: ...
    @property
    def FastSweepAutoDuration(self) -> bool: ...
    @FastSweepAutoDuration.setter
    def FastSweepAutoDuration(self, value: bool) -> bool: ...
    @property
    def FastSweepGeneratorSettings(self) -> FrequencySweepParameters: ...
    @property
    def FrequencyCorrectionEnabled(self) -> bool: ...
    @FrequencyCorrectionEnabled.setter
    def FrequencyCorrectionEnabled(self, value: bool) -> bool: ...
    @property
    def Generator(self) -> ContinuousSweepGenerator: ...
    @property
    def HasWarnings(self) -> bool: ...
    @property
    def MeasureDistribution(self) -> TimingDistribution: ...
    @property
    def MeasureThdN(self) -> bool: ...
    @MeasureThdN.setter
    def MeasureThdN(self, value: bool) -> bool: ...
    @property
    def OpenLoop(self) -> bool: ...
    @OpenLoop.setter
    def OpenLoop(self, value: bool) -> bool: ...
    @property
    def SweepType(self) -> FastFrequencyResponseSweepType: ...
    @SweepType.setter
    def SweepType(self, value: FastFrequencyResponseSweepType) -> FastFrequencyResponseSweepType: ...
    @property
    def TransitionDistribution(self) -> TimingDistribution: ...
    @property
    def TriggerSettings(self) -> TriggerSettings: ...
    @property
    def Warnings(self) -> str: ...


class AcqLengthType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Auto : AcqLengthType # 0
    Generator : AcqLengthType # 1
    Seconds : AcqLengthType # 2
    Samples : AcqLengthType # 3


class AcquiredWaveformGraph:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def InterpolationOn(self) -> bool: ...
    @InterpolationOn.setter
    def InterpolationOn(self, value: bool) -> bool: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def ExportWav(self, fileName: str, audioFileType: FileAudioType, bitDepth: SavedAcquisitionBitDepthType, dataType: SourceDataType, dataIndex: int, replaceFileIfExists: bool) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def HasDataOnAxis(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> bool: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetData due to it being static, abstract and generic.

    GetData : GetData_MethodGroup
    class GetData_MethodGroup:
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> XYValues:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int) -> XYValues:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class AcquisitionSettings:
    @property
    def AcquisitionSamples(self) -> int: ...
    @AcquisitionSamples.setter
    def AcquisitionSamples(self, value: int) -> int: ...
    @property
    def AcquisitionSeconds(self) -> float: ...
    @AcquisitionSeconds.setter
    def AcquisitionSeconds(self, value: float) -> float: ...
    @property
    def AcquisitionType(self) -> AcqLengthType: ...
    @AcquisitionType.setter
    def AcquisitionType(self, value: AcqLengthType) -> AcqLengthType: ...
    @property
    def AnalogInputBandwidth(self) -> SignalAnalyzerBandwidthType: ...
    @AnalogInputBandwidth.setter
    def AnalogInputBandwidth(self, value: SignalAnalyzerBandwidthType) -> SignalAnalyzerBandwidthType: ...
    @property
    def Averages(self) -> int: ...
    @Averages.setter
    def Averages(self, value: int) -> int: ...
    @property
    def DelayTimeInSamples(self) -> float: ...
    @DelayTimeInSamples.setter
    def DelayTimeInSamples(self, value: float) -> float: ...
    @property
    def DelayTimeInSeconds(self) -> float: ...
    @DelayTimeInSeconds.setter
    def DelayTimeInSeconds(self, value: float) -> float: ...
    @property
    def LevelTriggerSlope(self) -> LevelSlopeType: ...
    @LevelTriggerSlope.setter
    def LevelTriggerSlope(self, value: LevelSlopeType) -> LevelSlopeType: ...
    @property
    def NestedSweep(self) -> NestedSweepSettings: ...
    @property
    def PdmSignalSource(self) -> PdmSignalSource: ...
    @PdmSignalSource.setter
    def PdmSignalSource(self, value: PdmSignalSource) -> PdmSignalSource: ...
    @property
    def SaveToFileSettings(self) -> SaveAcquisitionToFileSettings: ...
    @property
    def TriggerChannel(self) -> InputChannelIndex: ...
    @TriggerChannel.setter
    def TriggerChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def TriggerInput(self) -> APxInputSelection: ...
    @TriggerInput.setter
    def TriggerInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def TriggerLevel(self) -> DoubleSetting: ...
    @property
    def TriggerTimeout(self) -> float: ...
    @TriggerTimeout.setter
    def TriggerTimeout(self, value: float) -> float: ...
    @property
    def TriggerType(self) -> TriggerType: ...
    @TriggerType.setter
    def TriggerType(self, value: TriggerType) -> TriggerType: ...
    @property
    def UseDelayTimeInSeconds(self) -> bool: ...
    @UseDelayTimeInSeconds.setter
    def UseDelayTimeInSeconds(self, value: bool) -> bool: ...


class ActiveDataBitsType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ActiveBits : ActiveDataBitsType # 0
    DataBits : ActiveDataBitsType # 1


class AdcBandwidth(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    bw1p75k : AdcBandwidth # 0
    bw3k : AdcBandwidth # 1
    bw3p5k : AdcBandwidth # 2
    bw5k : AdcBandwidth # 3
    bw7k : AdcBandwidth # 4
    bw10k : AdcBandwidth # 5
    bw20k44kHz : AdcBandwidth # 6
    bw20k : AdcBandwidth # 7
    bw40k88kHz : AdcBandwidth # 8
    bw45k : AdcBandwidth # 9
    bw80k176kHz : AdcBandwidth # 10
    bw90k : AdcBandwidth # 11
    bw250k : AdcBandwidth # 12
    bw500k : AdcBandwidth # 13
    bw1M : AdcBandwidth # 14


class AdcTestSettings:
    @property
    def PinVoltageMaximum(self) -> float: ...
    @PinVoltageMaximum.setter
    def PinVoltageMaximum(self, value: float) -> float: ...
    @property
    def PinVoltageMinimum(self) -> float: ...
    @PinVoltageMinimum.setter
    def PinVoltageMinimum(self, value: float) -> float: ...
    @property
    def PinVoltageProtection(self) -> bool: ...
    @PinVoltageProtection.setter
    def PinVoltageProtection(self, value: bool) -> bool: ...
    @property
    def Unit(self) -> str: ...
    @property
    def VBias(self) -> float: ...
    @VBias.setter
    def VBias(self, value: float) -> float: ...
    @property
    def VBiasAutoOn(self) -> bool: ...
    @VBiasAutoOn.setter
    def VBiasAutoOn(self, value: bool) -> bool: ...
    @property
    def VBiasEnabled(self) -> bool: ...
    @VBiasEnabled.setter
    def VBiasEnabled(self, value: bool) -> bool: ...


class AdvancedAnalogOutputSettings:
    @property
    def ConfigTrackCh1(self) -> bool: ...
    @ConfigTrackCh1.setter
    def ConfigTrackCh1(self, value: bool) -> bool: ...
    def GetChannelInvert(self, ch: OutputChannelIndex) -> bool: ...
    def GetConfiguration(self, ch: OutputChannelIndex) -> AnalogBalancedOutputConfigurationType: ...
    def SetChannelInvert(self, ch: OutputChannelIndex, invert: bool) -> None: ...
    def SetConfiguration(self, ch: OutputChannelIndex, config: AnalogBalancedOutputConfigurationType) -> None: ...


class AdvancedDigitalOutputSettings:
    @property
    def AutoIncLa(self) -> bool: ...
    @AutoIncLa.setter
    def AutoIncLa(self, value: bool) -> bool: ...
    @property
    def AutoIncTod(self) -> bool: ...
    @AutoIncTod.setter
    def AutoIncTod(self, value: bool) -> bool: ...
    @property
    def CommonModeFreq(self) -> DoubleSetting: ...
    @property
    def CommonModeLevel(self) -> DoubleSetting: ...
    @property
    def CommonModeOn(self) -> bool: ...
    @CommonModeOn.setter
    def CommonModeOn(self, value: bool) -> bool: ...
    @property
    def CrcChA(self) -> int: ...
    @CrcChA.setter
    def CrcChA(self, value: int) -> int: ...
    @property
    def CrcChB(self) -> int: ...
    @CrcChB.setter
    def CrcChB(self, value: int) -> int: ...
    @property
    def Invert(self) -> bool: ...
    @Invert.setter
    def Invert(self, value: bool) -> bool: ...
    @property
    def NoiseLevel(self) -> DoubleSetting: ...
    @property
    def NoiseOn(self) -> bool: ...
    @NoiseOn.setter
    def NoiseOn(self, value: bool) -> bool: ...
    @property
    def OutputLevelMode(self) -> OutputLevelType: ...
    @OutputLevelMode.setter
    def OutputLevelMode(self, value: OutputLevelType) -> OutputLevelType: ...
    @property
    def ParityError(self) -> bool: ...
    @ParityError.setter
    def ParityError(self, value: bool) -> bool: ...
    @property
    def RiseTime(self) -> DoubleSetting: ...
    @property
    def RiseTimeMode(self) -> RiseTimeType: ...
    @RiseTimeMode.setter
    def RiseTimeMode(self, value: RiseTimeType) -> RiseTimeType: ...
    @property
    def UserDefinedCrcChA(self) -> bool: ...
    @UserDefinedCrcChA.setter
    def UserDefinedCrcChA(self, value: bool) -> bool: ...
    @property
    def UserDefinedCrcChB(self) -> bool: ...
    @UserDefinedCrcChB.setter
    def UserDefinedCrcChB(self, value: bool) -> bool: ...
    @property
    def WaveformLevel(self) -> DoubleSetting: ...


class AllSwitcherChannelSelection(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : AllSwitcherChannelSelection # 0
    Ch1 : AllSwitcherChannelSelection # 1
    Ch2 : AllSwitcherChannelSelection # 2
    Ch3 : AllSwitcherChannelSelection # 3
    Ch4 : AllSwitcherChannelSelection # 4
    Ch5 : AllSwitcherChannelSelection # 5
    Ch6 : AllSwitcherChannelSelection # 6
    Ch7 : AllSwitcherChannelSelection # 7
    Ch8 : AllSwitcherChannelSelection # 8
    Ch9 : AllSwitcherChannelSelection # 9
    Ch10 : AllSwitcherChannelSelection # 10
    Ch11 : AllSwitcherChannelSelection # 11
    Ch12 : AllSwitcherChannelSelection # 12
    AllButChA : AllSwitcherChannelSelection # 13


class AmplifierSenseChannel(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Left : AmplifierSenseChannel # 0
    Right : AmplifierSenseChannel # 1


class AnalogAmplifierInputOutputFault(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    AbortMeasurement : AnalogAmplifierInputOutputFault # 0
    ContinueMeasurement : AnalogAmplifierInputOutputFault # 1


class AnalogBalancedOutputConfigurationType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Normal : AnalogBalancedOutputConfigurationType # 0
    CMTST : AnalogBalancedOutputConfigurationType # 1
    CMTST_Pin2 : AnalogBalancedOutputConfigurationType # 2
    CMTST_Pin3 : AnalogBalancedOutputConfigurationType # 3
    SingleEnded : AnalogBalancedOutputConfigurationType # 4


class AnalogBalancedSourceImpedance(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    SourceImpedance_40 : AnalogBalancedSourceImpedance # 0
    SourceImpedance_100 : AnalogBalancedSourceImpedance # 1
    SourceImpedance_150 : AnalogBalancedSourceImpedance # 2
    SourceImpedance_200 : AnalogBalancedSourceImpedance # 3
    SourceImpedance_600 : AnalogBalancedSourceImpedance # 4
    SourceImpedance_0p2 : AnalogBalancedSourceImpedance # 5
    SourceImpedance_0p3 : AnalogBalancedSourceImpedance # 6


class AnalogConnectorType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Unbalanced : AnalogConnectorType # 0
    Balanced : AnalogConnectorType # 1
    Loopback : AnalogConnectorType # 2


class AnalogInputChannelSettings:
    @property
    def ChannelCount(self) -> int: ...
    @ChannelCount.setter
    def ChannelCount(self, value: int) -> int: ...
    @property
    def SingleInputChannel(self) -> SingleInputChannelIndex: ...
    @SingleInputChannel.setter
    def SingleInputChannel(self, value: SingleInputChannelIndex) -> SingleInputChannelIndex: ...
    # Skipped GetDcCoupled due to it being static, abstract and generic.

    GetDcCoupled : GetDcCoupled_MethodGroup
    class GetDcCoupled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped SetDcCoupled due to it being static, abstract and generic.

    SetDcCoupled : SetDcCoupled_MethodGroup
    class SetDcCoupled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, dcCoupled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, dcCoupled: bool) -> None:...



class AnalogInputFaultStatus(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Okay : AnalogInputFaultStatus # 0
    Ch1Protect : AnalogInputFaultStatus # 1
    Ch2Protect : AnalogInputFaultStatus # 2


class AnalogInputRanges:
    @property
    def AutoRange(self) -> bool: ...
    @AutoRange.setter
    def AutoRange(self, value: bool) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def TrackFirstChannel(self) -> bool: ...
    @TrackFirstChannel.setter
    def TrackFirstChannel(self, value: bool) -> bool: ...
    @property
    def Unit(self) -> str: ...
    @Unit.setter
    def Unit(self, value: str) -> str: ...
    @property
    def UnitList(self) -> Array_1[str]: ...
    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> str:...
        @typing.overload
        def __call__(self, ch: str) -> str:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str) -> str:...
        @typing.overload
        def __call__(self, ch: str, unit: str) -> str:...

    # Skipped GetValue due to it being static, abstract and generic.

    GetValue : GetValue_MethodGroup
    class GetValue_MethodGroup:
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> float:...
        @typing.overload
        def __call__(self, ch: str) -> float:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str) -> float:...
        @typing.overload
        def __call__(self, ch: str, unit: str) -> float:...

    # Skipped SetValue due to it being static, abstract and generic.

    SetValue : SetValue_MethodGroup
    class SetValue_MethodGroup:
        @typing.overload
        def __call__(self, ch: InputChannelIndex, level: float) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, level: str) -> None:...
        @typing.overload
        def __call__(self, ch: str, level: float) -> None:...
        @typing.overload
        def __call__(self, ch: str, level: str) -> None:...



class AnalogInputReferences:
    @property
    def dBm(self) -> DoubleSetting: ...
    @property
    def dBrA(self) -> DoubleSetting: ...
    @property
    def dBrAOffset(self) -> DoubleSetting: ...
    @property
    def dBrB(self) -> DoubleSetting: ...
    @property
    def dBrBOffset(self) -> DoubleSetting: ...
    @property
    def dBSpl1(self) -> DoubleSetting: ...
    @property
    def dBSpl1CalibratorLevel(self) -> DoubleSetting: ...
    @property
    def dBSpl2(self) -> DoubleSetting: ...
    @property
    def dBSpl2CalibratorLevel(self) -> DoubleSetting: ...
    @property
    def Watts(self) -> DoubleSetting: ...
    def SetReferenceFromInput(self, dbReference: DbReferenceType, channel: int) -> None: ...


class AnalogInputSettings:
    @property
    def ChannelCount(self) -> int: ...
    @ChannelCount.setter
    def ChannelCount(self, value: int) -> int: ...
    @property
    def ResidualOnly(self) -> bool: ...
    @ResidualOnly.setter
    def ResidualOnly(self, value: bool) -> bool: ...
    @property
    def SingleInputChannel(self) -> SingleInputChannelIndex: ...
    @SingleInputChannel.setter
    def SingleInputChannel(self, value: SingleInputChannelIndex) -> SingleInputChannelIndex: ...
    @property
    def TedsCalibration(self) -> TedsCalibration: ...
    @property
    def TedsSysCheck(self) -> TedsSysCheck: ...
    @property
    def UseHighPerformanceSineAnalyzer(self) -> bool: ...
    @UseHighPerformanceSineAnalyzer.setter
    def UseHighPerformanceSineAnalyzer(self, value: bool) -> bool: ...
    # Skipped GetConnectorType due to it being static, abstract and generic.

    GetConnectorType : GetConnectorType_MethodGroup
    class GetConnectorType_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> AnalogConnectorType:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> AnalogConnectorType:...

    # Skipped GetDcCoupled due to it being static, abstract and generic.

    GetDcCoupled : GetDcCoupled_MethodGroup
    class GetDcCoupled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetTermination due to it being static, abstract and generic.

    GetTermination : GetTermination_MethodGroup
    class GetTermination_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> AnalogInputTermination:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> AnalogInputTermination:...

    # Skipped IsLoopbackValid due to it being static, abstract and generic.

    IsLoopbackValid : IsLoopbackValid_MethodGroup
    class IsLoopbackValid_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped SetConnectorType due to it being static, abstract and generic.

    SetConnectorType : SetConnectorType_MethodGroup
    class SetConnectorType_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, connectorType: AnalogConnectorType) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, connectorType: AnalogConnectorType) -> None:...

    # Skipped SetDcCoupled due to it being static, abstract and generic.

    SetDcCoupled : SetDcCoupled_MethodGroup
    class SetDcCoupled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, dcCoupled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, dcCoupled: bool) -> None:...

    # Skipped SetTermination due to it being static, abstract and generic.

    SetTermination : SetTermination_MethodGroup
    class SetTermination_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, termination: AnalogInputTermination) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, termination: AnalogInputTermination) -> None:...



class AnalogInputTermination(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    InputTermination_300 : AnalogInputTermination # 0
    InputTermination_600 : AnalogInputTermination # 1
    InputTermination_Unbal_100k : AnalogInputTermination # 2
    InputTermination_Bal_200k : AnalogInputTermination # 3


class AnalogOutputFaultStatus(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Okay : AnalogOutputFaultStatus # 0
    Ch1Ovl : AnalogOutputFaultStatus # 1
    Ch2Ovl : AnalogOutputFaultStatus # 2


class AnalogOutputMonitor:
    @property
    def AdcTest(self) -> AdcTestSettings: ...
    @property
    def AdvancedAnalogOutput(self) -> AdvancedAnalogOutputSettings: ...
    @property
    def BalancedSourceImpedance(self) -> AnalogBalancedSourceImpedance: ...
    @BalancedSourceImpedance.setter
    def BalancedSourceImpedance(self, value: AnalogBalancedSourceImpedance) -> AnalogBalancedSourceImpedance: ...
    @property
    def Ch1Enabled(self) -> bool: ...
    @Ch1Enabled.setter
    def Ch1Enabled(self, value: bool) -> bool: ...
    @property
    def Ch2Enabled(self) -> bool: ...
    @Ch2Enabled.setter
    def Ch2Enabled(self, value: bool) -> bool: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def Connector(self) -> OutputConnectorType: ...
    @Connector.setter
    def Connector(self, value: OutputConnectorType) -> OutputConnectorType: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def TrackFirstChannel(self) -> bool: ...
    @TrackFirstChannel.setter
    def TrackFirstChannel(self, value: bool) -> bool: ...
    @property
    def UnbalancedSourceImpedance(self) -> AnalogUnbalancedSourceImpedance: ...
    @UnbalancedSourceImpedance.setter
    def UnbalancedSourceImpedance(self, value: AnalogUnbalancedSourceImpedance) -> AnalogUnbalancedSourceImpedance: ...
    @property
    def UndockedHeight(self) -> int: ...
    @UndockedHeight.setter
    def UndockedHeight(self, value: int) -> int: ...
    @property
    def UndockedLeft(self) -> int: ...
    @UndockedLeft.setter
    def UndockedLeft(self, value: int) -> int: ...
    @property
    def UndockedTop(self) -> int: ...
    @UndockedTop.setter
    def UndockedTop(self, value: int) -> int: ...
    @property
    def UndockedWidth(self) -> int: ...
    @UndockedWidth.setter
    def UndockedWidth(self, value: int) -> int: ...
    @property
    def Unit(self) -> str: ...
    @Unit.setter
    def Unit(self, value: str) -> str: ...
    @property
    def UnitList(self) -> Array_1[str]: ...
    def Dock(self) -> None: ...
    def Maximize(self) -> None: ...
    def Minimize(self) -> None: ...
    def Restore(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped GetLevel due to it being static, abstract and generic.

    GetLevel : GetLevel_MethodGroup
    class GetLevel_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> float:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, unit: str) -> float:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> str:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, unit: str) -> str:...

    # Skipped SetLevel due to it being static, abstract and generic.

    SetLevel : SetLevel_MethodGroup
    class SetLevel_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, level: float) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, level: str) -> None:...



class AnalogOutputMonitorSettings:
    @property
    def AdcTest(self) -> AdcTestSettings: ...
    @property
    def AdvancedAnalogOutput(self) -> AdvancedAnalogOutputSettings: ...
    @property
    def BalancedSourceImpedance(self) -> AnalogBalancedSourceImpedance: ...
    @BalancedSourceImpedance.setter
    def BalancedSourceImpedance(self, value: AnalogBalancedSourceImpedance) -> AnalogBalancedSourceImpedance: ...
    @property
    def Ch1Enabled(self) -> bool: ...
    @Ch1Enabled.setter
    def Ch1Enabled(self, value: bool) -> bool: ...
    @property
    def Ch2Enabled(self) -> bool: ...
    @Ch2Enabled.setter
    def Ch2Enabled(self, value: bool) -> bool: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def Connector(self) -> OutputConnectorType: ...
    @Connector.setter
    def Connector(self, value: OutputConnectorType) -> OutputConnectorType: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def TrackFirstChannel(self) -> bool: ...
    @TrackFirstChannel.setter
    def TrackFirstChannel(self, value: bool) -> bool: ...
    @property
    def UnbalancedSourceImpedance(self) -> AnalogUnbalancedSourceImpedance: ...
    @UnbalancedSourceImpedance.setter
    def UnbalancedSourceImpedance(self, value: AnalogUnbalancedSourceImpedance) -> AnalogUnbalancedSourceImpedance: ...
    @property
    def Unit(self) -> str: ...
    @Unit.setter
    def Unit(self, value: str) -> str: ...
    @property
    def UnitList(self) -> Array_1[str]: ...
    # Skipped GetLevel due to it being static, abstract and generic.

    GetLevel : GetLevel_MethodGroup
    class GetLevel_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> float:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, unit: str) -> float:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> str:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, unit: str) -> str:...

    # Skipped SetLevel due to it being static, abstract and generic.

    SetLevel : SetLevel_MethodGroup
    class SetLevel_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, level: float) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, level: str) -> None:...



class AnalogOutputRanges:
    @property
    def AutoRange(self) -> bool: ...
    @AutoRange.setter
    def AutoRange(self, value: bool) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def TrackFirstChannel(self) -> bool: ...
    @TrackFirstChannel.setter
    def TrackFirstChannel(self, value: bool) -> bool: ...
    @property
    def Unit(self) -> str: ...
    @Unit.setter
    def Unit(self, value: str) -> str: ...
    @property
    def UnitList(self) -> Array_1[str]: ...
    def GetMaxValue(self, ch: OutputChannelIndex) -> float: ...
    # Skipped GetMaxText due to it being static, abstract and generic.

    GetMaxText : GetMaxText_MethodGroup
    class GetMaxText_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> str:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, unit: str) -> str:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> str:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, unit: str) -> str:...

    # Skipped GetValue due to it being static, abstract and generic.

    GetValue : GetValue_MethodGroup
    class GetValue_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> float:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, unit: str) -> float:...

    # Skipped SetValue due to it being static, abstract and generic.

    SetValue : SetValue_MethodGroup
    class SetValue_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, level: float) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, level: str) -> None:...



class AnalogOutputReferences:
    @property
    def dBm(self) -> DoubleSetting: ...
    @property
    def dBrG(self) -> DoubleSetting: ...
    @property
    def Watts(self) -> DoubleSetting: ...


class AnalogOutputSettings:
    @property
    def AdvancedAnalogOutput(self) -> AdvancedAnalogOutputSettings: ...
    @property
    def AnalogOutputRanges(self) -> Array_1[float]: ...
    @property
    def BalancedSourceImpedance(self) -> AnalogBalancedSourceImpedance: ...
    @BalancedSourceImpedance.setter
    def BalancedSourceImpedance(self, value: AnalogBalancedSourceImpedance) -> AnalogBalancedSourceImpedance: ...
    @property
    def ChannelCount(self) -> int: ...
    @ChannelCount.setter
    def ChannelCount(self, value: int) -> int: ...
    @property
    def CommonModeConfiguration(self) -> AnalogBalancedOutputConfigurationType: ...
    @CommonModeConfiguration.setter
    def CommonModeConfiguration(self, value: AnalogBalancedOutputConfigurationType) -> AnalogBalancedOutputConfigurationType: ...
    @property
    def OutputRanges(self) -> AnalogOutputRanges: ...
    @property
    def UnbalancedSourceImpedance(self) -> AnalogUnbalancedSourceImpedance: ...
    @UnbalancedSourceImpedance.setter
    def UnbalancedSourceImpedance(self, value: AnalogUnbalancedSourceImpedance) -> AnalogUnbalancedSourceImpedance: ...


class AnalogRanges:
    @property
    def AutoRange(self) -> bool: ...
    @AutoRange.setter
    def AutoRange(self, value: bool) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def TrackFirstChannel(self) -> bool: ...
    @TrackFirstChannel.setter
    def TrackFirstChannel(self, value: bool) -> bool: ...
    @property
    def Unit(self) -> str: ...
    @Unit.setter
    def Unit(self, value: str) -> str: ...
    @property
    def UnitList(self) -> Array_1[str]: ...


class AnalogSineGeneratorMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    HighPerformanceSineGenerator : AnalogSineGeneratorMode # 0
    DacGenerator : AnalogSineGeneratorMode # 1


class AnalogUnbalancedSourceImpedance(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    SourceImpedance_20 : AnalogUnbalancedSourceImpedance # 0
    SourceImpedance_50 : AnalogUnbalancedSourceImpedance # 1
    SourceImpedance_75 : AnalogUnbalancedSourceImpedance # 2
    SourceImpedance_100 : AnalogUnbalancedSourceImpedance # 3
    SourceImpedance_600 : AnalogUnbalancedSourceImpedance # 4
    SourceImpedance_0p2 : AnalogUnbalancedSourceImpedance # 5
    SourceImpedance_0p3 : AnalogUnbalancedSourceImpedance # 6


class AnalyzerRegulationSettings:
    @property
    def AdjustSource(self) -> RegulationSource: ...
    @AdjustSource.setter
    def AdjustSource(self, value: RegulationSource) -> RegulationSource: ...
    @property
    def InitialSteps(self) -> int: ...
    @InitialSteps.setter
    def InitialSteps(self, value: int) -> int: ...
    @property
    def RegulationInput(self) -> APxInputSelection: ...
    @RegulationInput.setter
    def RegulationInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def StartValue(self) -> DoubleSetting: ...
    @property
    def StopValue(self) -> DoubleSetting: ...
    @property
    def TargetChannel(self) -> InputChannelIndex: ...
    @TargetChannel.setter
    def TargetChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def TargetChannelType(self) -> RegulationTargetChannel: ...
    @TargetChannelType.setter
    def TargetChannelType(self, value: RegulationTargetChannel) -> RegulationTargetChannel: ...
    @property
    def TargetType(self) -> RegulationTarget: ...
    @TargetType.setter
    def TargetType(self, value: RegulationTarget) -> RegulationTarget: ...
    @property
    def TargetValue(self) -> DoubleSetting: ...
    @property
    def TargetValueType(self) -> RegulationTargetValueType: ...
    @TargetValueType.setter
    def TargetValueType(self, value: RegulationTargetValueType) -> RegulationTargetValueType: ...
    def Start(self) -> float: ...


class AnsiS322FitLimitsToDataXyResult:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsReferenceFileValid(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimitData: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def ReferenceFilePath(self) -> str: ...
    @ReferenceFilePath.setter
    def ReferenceFilePath(self, value: str) -> str: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def Source(self) -> Graph: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def Trace(self) -> FitLimitToDataXyDataTrace: ...
    @property
    def UpperLimit(self) -> GraphLimitData: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def RefreshReferenceFileData(self) -> None: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class AnsiS322ImdFrequencySweepGenerator:
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def Split(self) -> bool: ...
    @Split.setter
    def Split(self, value: bool) -> bool: ...
    @property
    def StartFrequency1(self) -> DoubleSetting: ...
    @property
    def StartFrequency2(self) -> DoubleReadOnlySetting: ...
    @property
    def StopFrequency1(self) -> DoubleSetting: ...
    @property
    def StopFrequency2(self) -> DoubleReadOnlySetting: ...
    @property
    def SweepParameters(self) -> FrequencySweepParameters: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class AnsiS322ImdFrequencySweepMeasurement:
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def DifferenceFrequencyDistortion(self) -> DifferenceFrequencyDistortionXyGraph: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> AnsiS322ImdFrequencySweepGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def Settling(self) -> AnsiS322ImdFrequencySweepSettlingParametersCollection: ...
    @property
    def TotalDifferenceFrequencyDistortion(self) -> XYGraph: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class AnsiS322ImdFrequencySweepSettlingParametersCollection:
    @property
    def TotalFrequencyDistortionSettlingParams(self) -> SettlingParameters: ...


class APError(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ErrorLoadingProject : APError # 0
    InvalidFileFormat : APError # 1
    ErrorDuringExport : APError # 2
    ImportErrorRunningMeasurement : APError # 3
    ImportError : APError # 4
    ImportErrorInvalidUnits : APError # 5
    ImportErrorNoMatchingData : APError # 6
    ImportErrorFileRead : APError # 7
    ImportErrorInvalidFile : APError # 8
    ImportErrorTrackFirstFailed : APError # 9
    ImportErrorValuesNotSequential : APError # 10
    InvalidProjectFile : APError # 11
    OldVersionProjectFile : APError # 12
    UnitError : APError # 13
    BlobError : APError # 14
    NonCompatibleUnitForReferencedValue : APError # 15
    NonCompatibleUnitForExport : APError # 16
    ValueError : APError # 17
    ErrorSavingProject : APError # 18
    ErrorOverwritingProjectFile : APError # 19
    CannotActivateInvalidSignalPathName : APError # 20
    ProjectItemNameNotUnique : APError # 21
    SequenceReportEmpty : APError # 22
    SequenceEmptyError : APError # 23
    SequenceInProgressError : APError # 24
    BenchModeInProgressError : APError # 25
    SequenceContainsInvalidStepsError : APError # 26
    OffsetResultNegative : APError # 27
    ReportMarginsInvalid : APError # 28
    ReportGenerationFailed : APError # 29
    ReportOutOfMemory : APError # 30
    ResourceNotFound : APError # 31
    InternalError : APError # 32
    InternalErrorCanContinue : APError # 33
    FatalError : APError # 34
    SystemUnstableError : APError # 35
    ValueOutOfRange : APError # 36
    InvalidMultiInputConfiguration : APError # 37
    InvalidIOConfiguration : APError # 38
    InvalidInputConnector : APError # 39
    InvalidOutputConnector : APError # 40
    SerializationError : APError # 41
    XMLValidationError : APError # 42
    XMLValidationFileNotFound : APError # 43
    PcUnresponsive : APError # 44
    DigitalInputUnlocked : APError # 45
    DigitalOutputUnlocked : APError # 46
    ReceivingNonPcm : APError # 47
    InstrumentConnectionLost : APError # 48
    SampleRateMismatch : APError # 49
    StartupFailure : APError # 50
    MaximumSignalPathsExceeded : APError # 51
    CopyLimitPointsError : APError # 52
    InvalidHardwareConfiguration : APError # 53
    AmplOutOfRange : APError # 54
    FirmwareRevTooNew : APError # 55
    FirmwareRevTooOld : APError # 56
    OperationNotValidForMenuOrToolbarItem : APError # 57
    InvalidMeasurementType : APError # 58
    InvalidMeasurementResultType : APError # 59
    MeasurementResultTypeNameAlreadyExists : APError # 60
    FirmwareUpdateRequired : APError # 61
    MeasurementNotValidInCurrentConfiguration : APError # 62
    StartupFailureInRemoting : APError # 63
    FaultyHardwareConfiguration : APError # 64
    SetGeneratorLevelForTargetDigitalInterfaceLevelFailed : APError # 65
    SetGeneratorLevelForTargetAverageJitterLevelFailed : APError # 66
    SetGeneratorLevelForTargetBandpassLevelFailed : APError # 67
    SetGeneratorLevelForTargetBitErrorFailed : APError # 68
    SetGeneratorLevelForTargetCrestFactorFailed : APError # 69
    SetGeneratorLevelForTargetDcLevelFailed : APError # 70
    SetGeneratorLevelForTargetFrequencyFailed : APError # 71
    SetGeneratorLevelForTargetGainFailed : APError # 72
    SetGeneratorLevelForTargetImdRatioFailed : APError # 73
    SetGeneratorLevelForTargetPeakLevelFailed : APError # 74
    SetGeneratorLevelForTargetPhaseFailed : APError # 75
    SetGeneratorLevelForTargetLevelFailed : APError # 76
    SetGeneratorLevelForTargetLevelRatioFailed : APError # 77
    SetGeneratorLevelForTargetSinadFailed : APError # 78
    SetGeneratorLevelForTargetTHDNFailed : APError # 79
    SetGeneratorLevelForTargetTHDNRatioFailed : APError # 80
    SetGeneratorLevelForTargetDcxVoltsFailed : APError # 81
    SetGeneratorLevelForTargetDcxOhmsFailed : APError # 82
    SetGeneratorLevelForTargetSampleRateFailed : APError # 83
    SetGeneratorLevelForMaxDigitalInterfaceLevelFailed : APError # 84
    SetGeneratorLevelForMaxAverageJitterLevelFailed : APError # 85
    SetGeneratorLevelForMaxBandpassLevelFailed : APError # 86
    SetGeneratorLevelForMaxBitErrorFailed : APError # 87
    SetGeneratorLevelForMaxCrestFactorFailed : APError # 88
    SetGeneratorLevelForMaxDcLevelFailed : APError # 89
    SetGeneratorLevelForMaxFrequencyFailed : APError # 90
    SetGeneratorLevelForMaxGainFailed : APError # 91
    SetGeneratorLevelForMaxImdRatioFailed : APError # 92
    SetGeneratorLevelForMaxPeakLevelFailed : APError # 93
    SetGeneratorLevelForMaxPhaseFailed : APError # 94
    SetGeneratorLevelForMaxSinadFailed : APError # 95
    SetGeneratorLevelForMaxLevelFailed : APError # 96
    SetGeneratorLevelForMaxLevelRatioFailed : APError # 97
    SetGeneratorLevelForMaxTHDNFailed : APError # 98
    SetGeneratorLevelForMaxTHDNRatioFailed : APError # 99
    SetGeneratorLevelForMaxDcxVoltsFailed : APError # 100
    SetGeneratorLevelForMaxDcxOhmsFailed : APError # 101
    SetGeneratorLevelForMaxSampleRateFailed : APError # 102
    SetGeneratorLevelForMinDigitalInterfaceLevelFailed : APError # 103
    SetGeneratorLevelForMinAverageJitterLevelFailed : APError # 104
    SetGeneratorLevelForMinBandpassLevelFailed : APError # 105
    SetGeneratorLevelForMinBitErrorFailed : APError # 106
    SetGeneratorLevelForMinCrestFactorFailed : APError # 107
    SetGeneratorLevelForMinDcLevelFailed : APError # 108
    SetGeneratorLevelForMinFrequencyFailed : APError # 109
    SetGeneratorLevelForMinGainFailed : APError # 110
    SetGeneratorLevelForMinImdRatioFailed : APError # 111
    SetGeneratorLevelForMinPeakLevelFailed : APError # 112
    SetGeneratorLevelForMinPhaseFailed : APError # 113
    SetGeneratorLevelForMinLevelFailed : APError # 114
    SetGeneratorLevelForMinLevelRatioFailed : APError # 115
    SetGeneratorLevelForMinSinadFailed : APError # 116
    SetGeneratorLevelForMinTHDNFailed : APError # 117
    SetGeneratorLevelForMinTHDNRatioFailed : APError # 118
    SetGeneratorLevelForMinDcxVoltsFailed : APError # 119
    SetGeneratorLevelForMinDcxOhmsFailed : APError # 120
    SetGeneratorLevelForMinSampleRateFailed : APError # 121
    ReachedMaxGeneratorLevel : APError # 122
    InsufficientProgressInNelderMeadSolver : APError # 123
    ReachedMaxIterationsForNelderMeadSolver : APError # 124
    TargetChannelInvalid : APError # 125
    SettingOutOfRange : APError # 126
    SettingOutOfRangeNoValue : APError # 127
    AutomationStartupError : APError # 128
    ComponentLibraryInitializationError : APError # 129
    LimitOffsetMismatch : APError # 130
    NoDataToExportError : APError # 131
    SaveError : APError # 132
    CopyGraphDataFailed : APError # 133
    CopyGraphDataTrackFirstFailed : APError # 134
    FftTooLarge : APError # 135
    InvalidFftLength : APError # 136
    CustomFftLengthNotAllowed : APError # 137
    AnalogInputOutOfRange : APError # 138
    InvalidMeasurementKeyName : APError # 139
    IndexOutOfRange : APError # 140
    CannotDeleteLastItem : APError # 141
    AnalogInputRanged : APError # 142
    CannotAddMeasurement : APError # 143
    CannotDeleteMeasurement : APError # 144
    InvalidSignalPathName : APError # 145
    InvalidMeasurementName : APError # 146
    InvalidStepName : APError # 147
    InvalidCommandLine : APError # 148
    InvalidSwitcherConfiguration : APError # 149
    InvalidSwitcherConfigurationName : APError # 150
    ItemNotFound : APError # 151
    ElementNotActive : APError # 152
    FileTooNew : APError # 153
    MeasurementStepEmptyError : APError # 154
    DataNotAvailable : APError # 155
    RunMeasurementError : APError # 156
    RunSignalPathError : APError # 157
    RunSequenceError : APError # 158
    ImportErrorNoData : APError # 159
    ErrorCreatingReportFolder : APError # 160
    CannotDeleteLimitChannelWithTrackFirst : APError # 161
    FileNotFound : APError # 162
    FilenameNotValid : APError # 163
    InvalidWaveformFile : APError # 164
    InvalidMultichannelWaveformSettings : APError # 165
    CannotStartGeneratorWithoutWaveform : APError # 166
    NumberOfChannelsChangedDuringAcquisition : APError # 167
    InvalidImageFile : APError # 168
    HdmiSampleRateOutOfRange : APError # 169
    AutomationStartupErrorIncompatibleVersions : APError # 170
    InvalidPhaseReferenceChannel : APError # 171
    InvalidDbraReferenceChannel : APError # 172
    InvalidDbrbReferenceChannel : APError # 173
    InvalidDbrGReferenceChannel : APError # 174
    InvalidMeasuredChannel : APError # 175
    InvalidTriggerChannel : APError # 176
    WaveformNotSupportedOnSelectedOutput : APError # 177
    WaveformNotPlayableWithCurrentSerialOutputSettings : APError # 178
    EncodedWaveformNotSupportedOnSelectedOutput : APError # 179
    EncodedWaveformNotSupportedOnSelectedASIOInput : APError # 180
    DtsxWaveformNotCompatibleWithTransmitMode : APError # 181
    CannotPlayEncodedWaveformInAnalogOutputMode : APError # 182
    UnknownSignalType : APError # 183
    UnsupportedSampleRate : APError # 184
    UnsupportedSampleRateForHdmi : APError # 185
    InvalidSampleRateContactTechSupport : APError # 186
    UnsupportedDtsSampleRate : APError # 187
    UnsupportedDolbyDigitalSampleRate : APError # 188
    UnknownSignalTypeUnavailable : APError # 189
    WaveformNotSupportedInCurrentVideoMode : APError # 190
    WaveformRequiresDigitalOption : APError # 191
    UnsupportedDevelopmentVersionModule : APError # 192
    BoardUpgradeNeeded : APError # 193
    StepSizeRequiresTooManySweepPoints : APError # 194
    IncrementMustBePositive : APError # 195
    SweepPointsNotDefined : APError # 196
    TooManySweepPoints : APError # 197
    SweepPointsNotSequential : APError # 198
    SweepStartAndStopNotUnique : APError # 199
    SweepSkippedAllPoints : APError # 200
    LimitPointsNotSequential : APError # 201
    UnlockProjectPasswordError : APError # 202
    PasswordError : APError # 203
    CannotAutoSetGeneratorLevelWithWaveformSelected : APError # 204
    ErrorCreatingTemplateGroup : APError # 205
    ValueDouble_NaNError : APError # 206
    InvalidSerialConfigurationName : APError # 207
    EdidSizeError : APError # 208
    EdidTooLong : APError # 209
    EdidIllegalBlockType : APError # 210
    InvalidEdidFile : APError # 211
    EdidMonitorBlocksMustBeUnique : APError # 212
    EdidMonitorBlocksRequired : APError # 213
    EdidBlockDoesNotFit : APError # 214
    EdidCannotBeNull : APError # 215
    EdidBlockInvalidChecksum : APError # 216
    EdidHasErrors : APError # 217
    EdidVersionNotSupported : APError # 218
    EdidMissingRequiredElements : APError # 219
    EdidUnexpectedMonitorElements : APError # 220
    EdidIncompatibleDescriptors : APError # 221
    RenameFileError : APError # 222
    DeleteFileError : APError # 223
    OpenFileError : APError # 224
    MoveFileError : APError # 225
    DeleteFolderError : APError # 226
    RenameFolderError : APError # 227
    MaximumWavFileSizeError : APError # 228
    UnsupportedStreamType : APError # 229
    SampleRateChangedDuringAcquisition : APError # 230
    ChirpCannotBeGenerated : APError # 231
    CannotSaveChirpGeneratorWaveformWhenNotOpenLoop : APError # 232
    CannotSaveChirpGeneratorWaveformWhenInvalid : APError # 233
    CannotGenerateWaveform : APError # 234
    MeasuredPilotToneRespFreqIsOutsideDetectionRange : APError # 235
    NotEnoughSilenceToMeasureDC : APError # 236
    NotEnoughTimeBeforeZero : APError # 237
    TooMuchDataForMonoWavFile : APError # 238
    TooMuchDataForMultiChannelWavFile : APError # 239
    TooMuchDataForExtensibleMultiChannelWavFile : APError # 240
    CannotSaveEncryptedContent : APError # 241
    RecordingFailedToFindEncodedAudioStream : APError # 242
    MoveProjectTemplateErrorFileAlreadyExists : APError # 243
    DigitalErrorRateNoData : APError # 244
    PcUnresponsiveWhenRecording : APError # 245
    LoadFileError : APError # 246
    ExcelMaxRowsExceeded : APError # 247
    ExcelMaxColsExceeded : APError # 248
    XlsxMaxRowsExceeded : APError # 249
    XlsxMaxColsExceeded : APError # 250
    ExcelMaximumExceeded : APError # 251
    CannotSetLimitDataOnChannelWithTrackFirst : APError # 252
    CustomLineStyleNotSupported : APError # 253
    FramingError : APError # 254
    InfoFrameSettingsNotAvailableInAutoMode : APError # 255
    ChannelStatusSettingsNotAvailableInAutoMode : APError # 256
    UserBitsSettingsNotAvailableInAutoMode : APError # 257
    PreEmphasisAudioDoesNotApply : APError # 258
    PreEmphasisNonAudioDoesNotApply : APError # 259
    WordLength24BitDoesNotApply : APError # 260
    WordLength20BitDoesNotApply : APError # 261
    StatusBitDoesNotApply : APError # 262
    InvalidStringLength : APError # 263
    CUBytesNotSettableContactTechSupport : APError # 264
    ChannelStatusBytesBNotSettableWhenTrackingA : APError # 265
    WaveformRequiresAG52Option : APError # 266
    CannotTurnOffInterpolation : APError # 267
    MetadataFieldNotAssigned : APError # 268
    SequenceStepTimeoutExpired : APError # 269
    SweepTimeoutExpired : APError # 270
    MeasurementTimeoutExpired : APError # 271
    DimGeneratorNotAvailableForOutput : APError # 272
    DimGeneratorNotAvailable : APError # 273
    DimGeneratorNotAvailableWithoutAG52 : APError # 274
    GeneratorDisabledForExternalOutput : APError # 275
    GeneratorOnlyAvailableForDigital : APError # 276
    AuxControlStatesForContinueAndCancelCannotBeSame : APError # 277
    AuxControlStatesNotUnique : APError # 278
    AuxControlStateNotSet : APError # 279
    InvalidPhaseMode : APError # 280
    InvalidPromptConfiguration : APError # 281
    ImportErrorNoMatchingResults : APError # 282
    GraphsDoNotHaveRequestedDataForExport : APError # 283
    DtsRateDoesNotApply : APError # 284
    GraphsFailedLimitChecks : APError # 285
    MeasurementRecorderTimeout : APError # 286
    ObsoleteMeasurement : APError # 287
    LogSweepNotAllowed : APError # 288
    LogSweepCantGoToZero : APError # 289
    CannotAutoSetGeneratorLevelWhenInputFile : APError # 290
    CopyToClipboardError : APError # 291
    PasteFromClipboardError : APError # 292
    FileAnalyzeError : APError # 293
    FileAnalysisNotAllowedInDemoMode : APError # 294
    FileAnalysisNotAllowForThisMeasurement : APError # 295
    FileAnalysisRequiresFileInput : APError # 296
    NoFilesSelectedForAnalysis : APError # 297
    EndOfInputStream : APError # 298
    FileTooShort : APError # 299
    GeneratorOnNotAvailable : APError # 300
    StartNotAvailable : APError # 301
    LoadAttachedItemDuplicateFileNameError : APError # 302
    LoadAttachedItemDuplicateFileContentsError : APError # 303
    RequestedBandwidthNotAllowed : APError # 304
    RequestedBandwidthRequiresHBW52Module : APError # 305
    PersistentInvalidReading : APError # 306
    SpecifiedReadingInvalid : APError # 307
    MeasuredChannelNotPresent : APError # 308
    TrackingChannelOutOfRange : APError # 309
    ChannelOutOfRange : APError # 310
    SignalTypeSettingNotAvailable : APError # 311
    ImportDataInvalidResultType : APError # 312
    DataArrayLengthMismatch : APError # 313
    EditCustomLayoutError : APError # 314
    UnknownAttachment : APError # 315
    ReportShowFailed : APError # 316
    ReportExportNotAvailbleForCustom : APError # 317
    ReportExportFormatNotSupported : APError # 318
    ReportAppendFileIOException : APError # 319
    TriggerTimeoutExpired : APError # 320
    ImportDataEmptyError : APError # 321
    AnsiReferenceDataDoesNotSpanRequiredRange : APError # 322
    AnsiReferenceDataInvalidXyData : APError # 323
    AnsiFrequencyPointsNotFound : APError # 324
    AudibleMonitorPcAudioDeviceNotAvalible : APError # 325
    ResultTypeNotAllowedForMeasurement : APError # 326
    ObsoleteMeasurementResult : APError # 327
    CannotAddResultsToThisMeasurement : APError # 328
    AddinLoadError : APError # 329
    CustomProcessingLoadError : APError # 330
    TooManyDataSpecifications : APError # 331
    DerivedResultSettingNotApplicable : APError # 332
    InvalidDataSet : APError # 333
    InvalidGraphResultType : APError # 334
    InvalidHarmonicSelection : APError # 335
    InvalidChannelSelection : APError # 336
    CannotSetLimitOnGraph : APError # 337
    ReportPreWord2007 : APError # 338
    CannotCalculateGeometricMean : APError # 339
    MSWordRequired : APError # 340
    ImportErrorNotAllowed : APError # 341
    AudibleMonitorDisabledForCurrentInput : APError # 342
    AudibleMonitorError : APError # 343
    StartProgramError : APError # 344
    EQTableMustBeMonotonicallyIncreasing : APError # 345
    EQTableFrequenciesAndLevelsMustBeValid : APError # 346
    EQTableMinFrequencyError : APError # 347
    EQTableMaxFrequencyError : APError # 348
    EQTableMustHaveAtLeastTwoEntries : APError # 349
    EQTableRelativeLevelsOutOfRange : APError # 350
    EQTableMustHaveUniqueFrequencies : APError # 351
    EQMaximumFrequencyTooLow : APError # 352
    EQMinFrequencyTooHigh : APError # 353
    ContinuousSweepStartFreqLessThanEqMin : APError # 354
    ContinuousSweepStopFreqGreaterThanEqMax : APError # 355
    InvalidMultitoneTable : APError # 356
    DuplicateTonesInMultitone : APError # 357
    CannotEditMultitoneDefinition : APError # 358
    ImportMultitoneInvalidColumn : APError # 359
    ImportMultitoneInvalidSampleRate : APError # 360
    ImportMultitoneInvalidLength : APError # 361
    ImportMultitoneInvalidSampleRateOrLength : APError # 362
    InvalidMultitoneData : APError # 363
    ImportMultitoneNumTonesMismatch : APError # 364
    ImportMultitoneToneBinMismatch : APError # 365
    ExportMultitoneAsWav : APError # 366
    ExportSweepAsWav : APError # 367
    ExportResultAsWavError : APError # 368
    MultitoneCrosstalkError : APError # 369
    ExportInvalidFormat : APError # 370
    SampleRateErrorTooLarge : APError # 371
    MultitoneTonesTooCloseToAnalyze : APError # 372
    MultitoneNotEnoughTones : APError # 373
    MultitoneTooManyTones : APError # 374
    ExportMultitoneInvalidLength : APError # 375
    MultitoneMinMaxError : APError # 376
    WaveFileUnspportedChannels : APError # 377
    WaveFileNumberOfChannelsExceeded : APError # 378
    MultitoneFrequencyOutOfRange : APError # 379
    MultitoneAveragesOutOfRange : APError # 380
    TimeValueOutOfRange : APError # 381
    CannotExportMultitone : APError # 382
    SampleRateOutOfRange : APError # 383
    MultitoneUnableToMeasureFrequencyOffset : APError # 384
    CannotPasteAppendedStepToNonAppendedMeasurement : APError # 385
    NotMultitoneDefinitionFile : APError # 386
    ExportCustomNotAvailable : APError # 387
    SignalAnalyzerFftLengthOutOfRange : APError # 388
    CannotSetLimitZeroWhenLog : APError # 389
    FFTLengthMin : APError # 390
    AcquisitionLengthMax : APError # 391
    AcquisitionLengthMinSamples : APError # 392
    AcquisitionLengthMinSeconds : APError # 393
    AcquisitionTimeMax : APError # 394
    AcquisitionTooLong : APError # 395
    GeneratorLengthMax : APError # 396
    CannotPasteSteps : APError # 397
    InvalidBluetoothAddress : APError # 398
    BluetoothPairDeviceFailed : APError # 399
    BluetoothDisabled : APError # 400
    BluetoothProfilesNotSelected : APError # 401
    BluetoothProfileNotValid : APError # 402
    InvalidBluetoothClassOfDevice : APError # 403
    BluetoothConnectFailed : APError # 404
    BluetoothDisconnectFailed : APError # 405
    BluetoothPartialConnectFailed : APError # 406
    BluetoothTimeout : APError # 407
    BluetoothSampleRateNotSupportedForA2DPSource : APError # 408
    BluetoothCommandFailed : APError # 409
    BluetoothCommandFailedDeviceNotConnected : APError # 410
    BluetoothMeasurementFailedNoConnectedDevice : APError # 411
    InvalidATCommand : APError # 412
    BluetoothProfileNotValidForGenerator : APError # 413
    BluetoothGeneratorDisabledWhenScoNotConnectedHfpHsp : APError # 414
    BluetoothGeneratorDisabledA2dpAndHfpHsp : APError # 415
    BluetoothGeneratorDisabledWhenNotStreaming : APError # 416
    SampleRateInvalidForBluetooth : APError # 417
    BluetoothDeviceNotFound : APError # 418
    BluetoothInvalidSspDeviceType : APError # 419
    BluetoothInvalidCodec : APError # 420
    BluetoothA2dpNotConnected : APError # 421
    BluetoothAvrcpNotConnected : APError # 422
    BluetoothHfpNotConnected : APError # 423
    BluetoothAvrcpAbsoluteVolumeNotSupported_Version1_0 : APError # 424
    BluetoothAvrcpAbsoluteVolumeNotSupported : APError # 425
    BluetoothAvrcpAbsoluteVolumeOnlyValidForA2dp : APError # 426
    BluetoothDeviceAlreadyConnected : APError # 427
    BluetoothScoNotConnected : APError # 428
    BluetoothA2dpStreamingStopped : APError # 429
    BluetoothCallStatusInvalid : APError # 430
    BluetoothSampleRateInvalidForCodec : APError # 431
    BluetoothVariableIsNotApplicable : APError # 432
    BluetoothFirmwareUpdateFailed : APError # 433
    BluetoothFirmwareUpdateRequired : APError # 434
    BluetoothFeatureNotApplicable : APError # 435
    BluetoothProfileDisabled : APError # 436
    BluetoothCommandFailedDueToProfileDisconnection : APError # 437
    ProductRegistrationError : APError # 438
    ImportSweepTableInvalidFile : APError # 439
    ImportSweepTableInvalidPilotToneFrequency : APError # 440
    ImportSweepTableInvalidPilotToneDuration : APError # 441
    ImportSweepTableInvalidFrequency : APError # 442
    ImportSweepTableInvalidDuration : APError # 443
    SweepFrequencyAndDurationMismatch : APError # 444
    CannotReplaceSignalDefinition : APError # 445
    InvalidPath : APError # 446
    InvalidResult : APError # 447
    ImportErrorTooManyResults : APError # 448
    CrosstalkChannelOutOfRange : APError # 449
    UnexpectedResponseFromProgramStep : APError # 450
    DataLoggingError : APError # 451
    SequenceLoggingError : APError # 452
    RunSequenceProgramError : APError # 453
    RunSequenceProgramStepTerminatedError : APError # 454
    TooManyItemsInCollection : APError # 455
    FailedToInitializeAPI : APError # 456
    CannotReplaceWithExistingItem : APError # 457
    MeasurementNotAllowedInDemoMode : APError # 458
    CannotPlayEncodedWaveform : APError # 459
    WaveFilesMustBeMono : APError # 460
    PesqLibraryInitializationFailed : APError # 461
    PesqError : APError # 462
    SampleRateError : APError # 463
    MeasurementSampleRateError : APError # 464
    WaveFileInvalidForMeasurement : APError # 465
    PesqUnsupportedMode : APError # 466
    PolqaUnsupportedMode : APError # 467
    PolqaLibraryInitializationFailed : APError # 468
    PolqaError : APError # 469
    UnsupportedSampleRateError : APError # 470
    PolqaWaveFileInvalid : APError # 471
    PolqaMismatchedSampleRate : APError # 472
    PolqaMismatchedSampleRateDetails : APError # 473
    PolqaUnsupportedSampleRateDetails : APError # 474
    DerivedResultNotAvailable : APError # 475
    PesqMeasurementTimedOut : APError # 476
    PesqPolqaAverageFileMinimumRequirement : APError # 477
    PesqWrapperFileLengthInvalid : APError # 478
    PesqWrapperUnnamedFileLengthInvalid : APError # 479
    PolqaMeasurementTimedOut : APError # 480
    PolqaWrapperFileLengthInvalid : APError # 481
    GraphImageSizeRange : APError # 482
    CryptoFailure : APError # 483
    InvalidBitstreamReferenceFile : APError # 484
    ReferenceFileCannotBeNone : APError # 485
    BitstreamComparisonError : APError # 486
    UnexpectedError : APError # 487
    IrrecoverableApplicationError : APError # 488
    OutOfMemoryError : APError # 489
    BitstreamCompareFailedToSync : APError # 490
    PassFailFileNotFound : APError # 491
    NoSignalFound : APError # 492
    AsioConnectError : APError # 493
    AsioSetSampleRate : APError # 494
    AsioNoMemory : APError # 495
    AsioNoClock : APError # 496
    AsioSPNotAdvancing : APError # 497
    AsioInvalidMode : APError # 498
    AsioInvalidParameter : APError # 499
    AsioHardwareMalfunction : APError # 500
    AsioNotPresent : APError # 501
    AsioControlPanel : APError # 502
    AsioUnknownError : APError # 503
    AsioNotConnected : APError # 504
    AsioInitFailed : APError # 505
    AsioUnknownSampleRate : APError # 506
    AsioInvalidChannels : APError # 507
    AsioNotInstalled : APError # 508
    AsioMappedChannelsRemoved : APError # 509
    AsioDeviceNotInstalled : APError # 510
    ClockSourceNotPresent : APError # 511
    ClockDividersNotFound : APError # 512
    SensitivityValueOutofRange : APError # 513
    FrequencyValueOutofRange : APError # 514
    CalibrationValueOutOfRange : APError # 515
    TrackFirstNotAllowedForLoopback : APError # 516
    InvalidReportUpdateSelection : APError # 517
    SplitNotAvailable : APError # 518
    BatteryCurrentZeroAdjustError : APError # 519
    InvalidCeCSetup : APError # 520
    CannotStartNewMeasurementWhileAnotherIsRunning : APError # 521
    InvalidSweepSource : APError # 522
    DcCouplingNotValid : APError # 523
    AcCouplingNotValid : APError # 524
    InvalidFrequencyRange : APError # 525
    InvalidFrequencyRangeForFit : APError # 526
    InvalidDcResistance : APError # 527
    NoSignalPresent : APError # 528
    NoResonanceFound : APError # 529
    CannotDetermineQ : APError # 530
    AddedMassTooLow : APError # 531
    KnownVolumeTooLarge : APError # 532
    StandardModelNotValid : APError # 533
    Lr2ModelNotValid : APError # 534
    WrightModelNotValid : APError # 535
    Need2ChannelsFor2ChannelImpedance : APError # 536
    InvalidImpedanceChannelSelection : APError # 537
    InvalidChannelsForImpedanceMeasurement : APError # 538
    CecSendMessageNotAvailable : APError # 539
    CecSendMessageOnlyAvailableForArc : APError # 540
    CecSourceMessageNotAvailable : APError # 541
    CecSinkMessageNotAvailable : APError # 542
    InvalidCecOperator : APError # 543
    InvalidCecOperandBytes : APError # 544
    CecMessageNakError : APError # 545
    SourceResultNotInCollection : APError # 546
    ResultTypeNotAllowedOnTheRightAxisForThisResult : APError # 547
    FailedToDetermineThieleSmallParams : APError # 548
    FreeAirDoesNotExist : APError # 549
    RightAxisResultNotAllowed : APError # 550
    OutputEqChannelsExceeded : APError # 551
    InputEqChannelsExceeded : APError # 552
    MaximumEqFrequency : APError # 553
    MinimumEqFrequency : APError # 554
    InvalidAmplifierCorrectionCurveFile : APError # 555
    InvalidValuesAmplifierCorrectionCurveFile : APError # 556
    FilterInvalid : APError # 557
    OperationNotAvailableWhileMeasurementIsRunning : APError # 558
    DuplicateSettlingParameterNotAllowed : APError # 559
    ExtSyncUnlocked : APError # 560
    BenchModeNotAllowed : APError # 561
    BenchModeOptionNotPresent : APError # 562
    SweepSourceInvalid : APError # 563
    AdioCommonModeNotAllowed : APError # 564
    RegulationTargetValueNotDefined : APError # 565
    RegulationMinMaxValuesNotDefined : APError # 566
    RegulationToleranceValuesNotDefined : APError # 567
    RegulationTargetInvalid : APError # 568
    RegulationSourceInvalid : APError # 569
    CannotRecordEncodedAudioWhileMakingSettledReadings : APError # 570
    InvalidLevelRatioReferenceChannel : APError # 571
    StreamChanged : APError # 572
    InvalidWavefileForThisMeasurement : APError # 573
    SampleRateUnsupported : APError # 574
    InvalidResultUnitSetting : APError # 575
    InvalidProcessingPlugin : APError # 576
    CustomComputeInitializeFailed : APError # 577
    CustomComputeInvalidAxisBinding : APError # 578
    CustomMeasurementInvalidType : APError # 579
    VariableNotDefined : APError # 580
    VariableAlreadyExists : APError # 581
    InvalidCharacterInVariableName : APError # 582
    ExportSpecificationMismatch : APError # 583
    InvalidLimitOffsetCurve : APError # 584
    InterpolationErrorWhenOffsettingLimitCurve : APError # 585
    StepResultNotSpecified : APError # 586
    CannotExportEmptyChannelSelection : APError # 587
    CustomMeasurementExpired : APError # 588
    CustomResultExpired : APError # 589
    PdmDecimationRatioError : APError # 590
    MultiChPdmDecimationRatioError : APError # 591
    VariableNameConflictsWithEnvironmentVariable : APError # 592
    StepTypeNotAllowedForMeasurement : APError # 593
    TransducerInterfaceOfflineFaultError : APError # 594
    TransducerInterfaceOfflineError : APError # 595
    TransducerInterfaceFaultError : APError # 596
    TransducerInterfaceGeneratorFaultError : APError # 597
    TransducerInterfaceTempFaultError : APError # 598
    TransducerInterfacePowerFaultError : APError # 599
    TdlFileParseError : APError # 600
    TedsExecutionError : APError # 601
    TedsDataBitValueError : APError # 602
    TedsDeviceNotSupported : APError # 603
    TedsFamilyCodeNotSupported : APError # 604
    TedsFamilyCodeNotVerified : APError # 605
    TedsCapableInputNotSelected : APError # 606
    TedsSysCheckError : APError # 607
    TedsSysCheckReferenceValuesNotSet : APError # 608
    TedsSysCheckReferenceLevelError : APError # 609
    TedsSysCheckReferenceFrequencyError : APError # 610
    TedsDataError : APError # 611
    TdlFileNotFoundError : APError # 612
    FdlFileParseError : APError # 613
    FdlFileExecutionError : APError # 614
    TransducerInterfaceCurrent1FaultError : APError # 615
    TransducerInterfaceCurrent2FaultError : APError # 616
    AcquisitionFailure : APError # 617
    MinSelectionError : APError # 618
    ExpiredOn : APError # 619
    AsioChannelAlreadyMapped : APError # 620
    ApxChannelOutOfRange : APError # 621
    AsioChannelOutOfRange : APError # 622
    AsioSampleRateMisMatch : APError # 623
    FunctionNotAllowedInDemoMode : APError # 624
    FunctionRequiresAnOption : APError # 625
    EagModuleNotPresent : APError # 626
    AdcTestOptionNotPresent : APError # 627
    NamedSettingOutOfRange : APError # 628
    ProductionTestModeRequired : APError # 629
    ErrorSavingFile : APError # 630
    MeasuredChannelPilotToneRangeFailure : APError # 631
    ValueCannotBeNegative : APError # 632
    ValueMustBeGreatorThanZero : APError # 633
    TriggerChannelIsNotPresent : APError # 634
    ReferenceChannelIsNotPresent : APError # 635
    TimeAlignmentChannelIsNotPresent : APError # 636
    ReferenceFileSelectionNotAvailable : APError # 637
    RefSampleRateMismatch : APError # 638
    LicenseFileUpdateFailed : APError # 639
    AsioNone : APError # 640
    PdmModuleNotPresent : APError # 641
    Pdm16ModuleNotPresent : APError # 642
    InternalTestConfigurationNotAvailableASIO : APError # 643
    InternalTestConfigurationNotAvailableATA : APError # 644
    External2ChTestConfigurationNotAvailableASIO : APError # 645
    External2ChTestConfigurationNotAvailable : APError # 646
    CannotConvertDocXTagsInProject : APError # 647
    AsioSelectDevice : APError # 648
    InvalidInputSelection : APError # 649
    InvalidReferenceInputSelection : APError # 650
    InvalidResultInputSelection : APError # 651
    DcxOffline : APError # 652
    MicInputBothChFault : APError # 653
    MicInputCh1Fault : APError # 654
    MicInputCh2Fault : APError # 655
    HeadphoneOvlFault : APError # 656
    HeadphoneLeftTempFault : APError # 657
    HeadphoneRightTempFault : APError # 658
    HeadphoneBothTempFault : APError # 659
    HeadphoneProtectFault : APError # 660
    PowerAmpOvlFault : APError # 661
    PowerAmpProtectFault : APError # 662
    PowerAmpTempFault : APError # 663
    InvalidMicPowerModuleVariant : APError # 664
    FunctionNotAllowedOnHardware : APError # 665
    UnsupportedForCurrentInstrument : APError # 666
    CouldNotFindModuleForChannel : APError # 667
    MinimumSweepDurationExceeded : APError # 668
    RecordDisabledForRepeat : APError # 669
    MoveToBinCenterRequiresLongerAcquisition : APError # 670
    DominantSynchronousFrequencyNotDetected : APError # 671
    InvalidSourceForMeasurand : APError # 672
    InvalidMeasurands : APError # 673
    InvalidMeasurandType : APError # 674
    InputConnectorInvalidForMeasurands : APError # 675
    DarsNotPresent : APError # 676
    AnalogOutOverloadFaultBoth : APError # 677
    AnalogOutOverloadFaultCh1 : APError # 678
    AnalogOutOverloadFaultCh2 : APError # 679
    AnalogInProtectFaultCh1 : APError # 680
    AnalogInProtectFaultCh2 : APError # 681
    FileTooLarge : APError # 682
    UnsupportedColorDepth : APError # 683
    Videre2FirmwareUpdateFailed : APError # 684
    InvalidFileSizeForEdid : APError # 685
    ExceededMaximumDrivers : APError # 686
    MinimumDriversReached : APError # 687
    DriverDoesNotExist : APError # 688
    BitClockRateOverload : APError # 689
    NoError : APError # -1


class APEvents(abc.ABC):
    @staticmethod
    def AddAppClosingHandler(eventFunction: ApplicationClosingEventHandler) -> ApplicationClosingEventHandler: ...
    @staticmethod
    def AddHandler(eventFunction: EventHandler) -> EventHandler: ...
    @staticmethod
    def AddMeterValuesHandler(eventFunction: MeterValuesChangedEventHandler) -> MeterValuesChangedEventHandler: ...
    @staticmethod
    def RemoveAppClosingHandler(eventFunction: ApplicationClosingEventHandler) -> ApplicationClosingEventHandler: ...
    @staticmethod
    def RemoveHandler(eventFunction: EventHandler) -> EventHandler: ...
    @staticmethod
    def RemoveMeterValuesHandler(eventFunction: MeterValuesChangedEventHandler) -> MeterValuesChangedEventHandler: ...


class APException(Exception):
    @typing.overload
    def __init__(self, message: str, errorCode: APError) -> None: ...
    @typing.overload
    def __init__(self, message: str, errorCode: APError, inner: Exception) -> None: ...
    @typing.overload
    def __init__(self, message: str, errorCode: APError, inner: Exception, stackFrames: int) -> None: ...
    @typing.overload
    def __init__(self, message: str, errorCode: APError, stackFrames: int) -> None: ...
    @property
    def Data(self) -> IDictionary: ...
    @property
    def ErrorCode(self) -> APError: ...
    @property
    def HelpLink(self) -> str: ...
    @HelpLink.setter
    def HelpLink(self, value: str) -> str: ...
    @property
    def HResult(self) -> int: ...
    @HResult.setter
    def HResult(self, value: int) -> int: ...
    @property
    def InnerException(self) -> Exception: ...
    @classmethod
    @property
    def LastException(cls) -> APException: ...
    @classmethod
    @LastException.setter
    def LastException(cls, value: APException) -> APException: ...
    @property
    def Message(self) -> str: ...
    @property
    def Source(self) -> str: ...
    @Source.setter
    def Source(self, value: str) -> str: ...
    @property
    def StackTrace(self) -> str: ...
    @property
    def TargetSite(self) -> MethodBase: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    def ToString(self) -> str: ...


class ApiExtensions(abc.ABC):
    # Skipped MakeException due to it being static, abstract and generic.

    MakeException : MakeException_MethodGroup
    class MakeException_MethodGroup:
        @typing.overload
        def __call__(self, errorCode: APError) -> APException:...
        @typing.overload
        def __call__(self, errorCode: APError, innerEx: Exception, formatParams: Array_1[typing.Any]) -> APException:...



class AppendedMeasurementStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def DataSetNoteCustomText(self) -> str: ...
    @DataSetNoteCustomText.setter
    def DataSetNoteCustomText(self, value: str) -> str: ...
    @property
    def DataSetNotePrompt(self) -> str: ...
    @DataSetNotePrompt.setter
    def DataSetNotePrompt(self, value: str) -> str: ...
    @property
    def DataSetNoteType(self) -> DataNoteType: ...
    @DataSetNoteType.setter
    def DataSetNoteType(self, value: DataNoteType) -> DataNoteType: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def Waveforms(self) -> Array_1[str]: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class AppendedMeasurementStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> AppendedMeasurementStep: ...
    def Add(self) -> AppendedMeasurementStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class ApplicationClosingEventArgs(EventArgs):
    def __init__(self, errorMessage: str) -> None: ...
    ErrorMessage : str


class ApplicationClosingEventHandler(MulticastDelegate):
    def __init__(self, object: typing.Any, method: int) -> None: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> typing.Any: ...
    def BeginInvoke(self, sender: typing.Any, eventArgs: ApplicationClosingEventArgs, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: typing.Any, eventArgs: ApplicationClosingEventArgs) -> None: ...


class APWarning(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    StimulusParametersChanged : APWarning # 0
    None_ : APWarning # -1


class APx1701:
    @property
    def CalibrationDate(self) -> str: ...
    @property
    def FactoryAdjust(self) -> bool: ...
    @property
    def Faults(self) -> APx1701Faults: ...
    @property
    def ID(self) -> str: ...
    @property
    def Online(self) -> bool: ...
    @property
    def SaturnAdjDate(self) -> str: ...
    @property
    def SaturnHwRevision(self) -> str: ...
    @property
    def SaturnId(self) -> str: ...
    @property
    def SaturnManufactureDate(self) -> str: ...
    @property
    def SaturnSerialNumber(self) -> str: ...
    @property
    def SaturnTechID(self) -> str: ...
    @property
    def SerialNumber(self) -> str: ...
    @property
    def Signature(self) -> str: ...
    @property
    def TitanAdjDate(self) -> str: ...
    @property
    def TitanHwRevision(self) -> str: ...
    @property
    def TitanId(self) -> str: ...
    @property
    def TitanManufactureDate(self) -> str: ...
    @property
    def TitanSerialNumber(self) -> str: ...
    @property
    def TitanTechID(self) -> str: ...


class APx1701Faults:
    @property
    def Current1(self) -> bool: ...
    @property
    def Current2(self) -> bool: ...
    @property
    def Power(self) -> bool: ...
    @property
    def Temp(self) -> bool: ...


class APx500(MarshalByRefObject, IApplication):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, cmdLine: str) -> None: ...
    @typing.overload
    def __init__(self, mode: APxOperatingMode) -> None: ...
    @typing.overload
    def __init__(self, mode: APxOperatingMode, cmdLine: str) -> None: ...
    @typing.overload
    def __init__(self, mode: APxOperatingMode, updateFirmwareIfNecessary: bool) -> None: ...
    @typing.overload
    def __init__(self, mode: APxOperatingMode, updateFirmwareIfNecessary: bool, cmdLine: str) -> None: ...
    @typing.overload
    def __init__(self, updateFirmwareIfNecessary: bool) -> None: ...
    @typing.overload
    def __init__(self, updateFirmwareIfNecessary: bool, cmdLine: str) -> None: ...
    @property
    def AcousticResponse(self) -> IAcousticResponseMeasurement: ...
    @property
    def ActiveMeasurement(self) -> IMeasurement: ...
    @property
    def ActiveMeasurementIndex(self) -> int: ...
    @property
    def ActiveMeasurementName(self) -> str: ...
    @property
    def ActiveMeasurementType(self) -> MeasurementType: ...
    @property
    def ActiveSignalPathIndex(self) -> int: ...
    @property
    def ActiveSignalPathName(self) -> str: ...
    @property
    def AnalogInputRange(self) -> Array_1[float]: ...
    @property
    def AnalogOutputMonitor(self) -> IAnalogOutputMonitor: ...
    @property
    def AnsiS322ImdFrequencySweep(self) -> IAnsiS322ImdFrequencySweepMeasurement: ...
    @property
    def APx1701(self) -> IAPx1701: ...
    @property
    def APx516Fault(self) -> IAPx516Faults: ...
    @property
    def APx517Fault(self) -> IAPx517Faults: ...
    @property
    def AttachedProjectItems(self) -> IProjectItemCollection: ...
    @property
    def AudibleSignalMonitor(self) -> IAudibleSignalMonitor: ...
    @property
    def AuthorizationMessage(self) -> str: ...
    @property
    def AuxControlMonitor(self) -> IAuxControlMonitor: ...
    @property
    def AuxControlOutputValue(self) -> int: ...
    @AuxControlOutputValue.setter
    def AuxControlOutputValue(self, value: int) -> int: ...
    @property
    def BandpassFrequencySweep(self) -> IBandpassFrequencySweepMeasurement: ...
    @property
    def BandpassLevel(self) -> IBandpassLevelMeasurement: ...
    @property
    def BandpassLevelSweep(self) -> IBandpassLevelSweepMeasurement: ...
    @property
    def BenchMode(self) -> IBenchMode: ...
    @property
    def BluetoothMonitor(self) -> IBluetoothMonitor: ...
    @property
    def BluetoothSettings(self) -> IBluetoothSettings: ...
    @property
    def Cmrr(self) -> ICmrrMeasurement: ...
    @property
    def CmrrIec(self) -> ICmrrIecMeasurement: ...
    @property
    def CompareEncodedBitstream(self) -> ICompareEncodedBitstreamMeasurement: ...
    @property
    def ContinuousSweep(self) -> IContinuousSweepMeasurement: ...
    @property
    def CrosstalkCustom(self) -> ICrosstalkCustomMeasurement: ...
    @property
    def CrosstalkFrequencySweepCustom(self) -> ICrosstalkFrequencySweepCustomMeasurement: ...
    @property
    def CrosstalkFrequencySweepOneChannelDriven(self) -> ICrosstalkFrequencySweepOneChannelDrivenMeasurement: ...
    @property
    def CrosstalkFrequencySweepOneChannelUndriven(self) -> ICrosstalkFrequencySweepOneChannelUndrivenMeasurement: ...
    @property
    def CrosstalkOneChannelDriven(self) -> ICrosstalkOneChannelDrivenMeasurement: ...
    @property
    def CrosstalkOneChannelUndriven(self) -> ICrosstalkOneChannelUndrivenMeasurement: ...
    @property
    def DCLevel(self) -> IDCLevelMeasurement: ...
    @property
    def DcLevelDcx(self) -> IDcLevelDcxMeasurement: ...
    @property
    def DcLevelSweep(self) -> IDcLevelSweepMeasurement: ...
    @property
    def DelayCalibration(self) -> IDelayCalibrationMeasurement: ...
    @property
    def DelayChirpCalibration(self) -> IDelayChirpCalibrationMeasurement: ...
    @property
    def DigitalErrorRate(self) -> IDigitalErrorRateMeasurement: ...
    @property
    def DigitalInputStreamMetadata(self) -> str: ...
    @property
    def DigitalInputStreamType(self) -> str: ...
    @property
    def DigitalSerialMonitor(self) -> IDigitalSerialMonitor: ...
    @property
    def DimImd(self) -> IDimImdMeasurement: ...
    @property
    def DimLevelSweep(self) -> IDimLevelSweepMeasurement: ...
    @property
    def DutDelay(self) -> IDutDelayMeasurement: ...
    @property
    def DynamicRange(self) -> IDynamicRangeMeasurement: ...
    @property
    def ExpirationMessages(self) -> str: ...
    @property
    def FftSpectrumSignalMonitor(self) -> IFFTSpectrumSignalMonitorWindow: ...
    @property
    def Frequency(self) -> IFrequencyMeasurement: ...
    @property
    def FrequencyResponse(self) -> IFrequencyResponseMeasurement: ...
    @property
    def HdmiAudioInfoFramesMonitor(self) -> IHdmiMonitor: ...
    @property
    def Height(self) -> int: ...
    @Height.setter
    def Height(self, value: int) -> int: ...
    @property
    def Iec60118ImdFrequencySweep(self) -> IIec60118ImdFrequencySweepMeasurement: ...
    @property
    def Imd(self) -> IImdMeasurement: ...
    @property
    def ImdFrequencySweep(self) -> IImdFrequencySweepMeasurement: ...
    @property
    def ImdLevelSweep(self) -> IImdLevelSweepMeasurement: ...
    @property
    def ImpedanceThieleSmall(self) -> IImpedanceThieleSmallMeasurement: ...
    @property
    def InputSampleRate(self) -> float: ...
    @property
    def InterchannelPhase(self) -> IInterchannelPhaseMeasurement: ...
    @property
    def IsDemoMode(self) -> bool: ...
    @property
    def IsProcessingSuspended(self) -> bool: ...
    @property
    def IsProjectLocked(self) -> bool: ...
    @property
    def IsProjectModified(self) -> bool: ...
    @property
    def JitterFrequencySweep(self) -> IJitterFrequencySweepMeasurement: ...
    @property
    def JitterLevelSweep(self) -> IJitterLevelSweepMeasurement: ...
    @property
    def LastException(self) -> APException: ...
    @property
    def Left(self) -> int: ...
    @Left.setter
    def Left(self, value: int) -> int: ...
    @property
    def LevelAndGain(self) -> ILevelAndGainMeasurement: ...
    @property
    def LevelRatio(self) -> ILevelRatioMeasurement: ...
    @property
    def LoudspeakerProductionTest(self) -> ILoudspeakerProductionTestMeasurement: ...
    @property
    def MaxOutput(self) -> IMaxOutputMeasurement: ...
    @property
    def MaxOutputBurst(self) -> IMaxOutputBurstMeasurement: ...
    @property
    def MeasurementRecorder(self) -> IMeasurementRecorderMeasurement: ...
    @property
    def MetadataRecorder(self) -> IMetadataRecorderMeasurement: ...
    @property
    def ModulatedNoise(self) -> IModulatedNoiseMeasurement: ...
    @property
    def MultitoneAnalyzer(self) -> IMultitoneAnalyzerMeasurement: ...
    @property
    def NavigatorVisible(self) -> bool: ...
    @NavigatorVisible.setter
    def NavigatorVisible(self, value: bool) -> bool: ...
    @property
    def Noise(self) -> INoiseMeasurement: ...
    @property
    def NoiseRecorder(self) -> INoiseRecorderMeasurement: ...
    @property
    def OperatingMode(self) -> APxOperatingMode: ...
    @OperatingMode.setter
    def OperatingMode(self, value: APxOperatingMode) -> APxOperatingMode: ...
    @property
    def OutputSampleRate(self) -> float: ...
    @property
    def PassFail(self) -> IPassFailMeasurement: ...
    @property
    def Pdm16Monitor(self) -> IPdm16Monitor: ...
    @property
    def PdmMonitor(self) -> IPdmMonitor: ...
    @property
    def Pesq(self) -> IPesqMeasurement: ...
    @property
    def PesqAverage(self) -> IPesqAverageMeasurement: ...
    @property
    def Polqa(self) -> IPolqaMeasurement: ...
    @property
    def PolqaAverage(self) -> IPolqaAverageMeasurement: ...
    @property
    def ProjectFileName(self) -> str: ...
    @property
    def ProjectSettings(self) -> IProjectSettings: ...
    @property
    def Psr(self) -> IPsrMeasurement: ...
    @property
    def PsrSweep(self) -> IPsrSweepMeasurement: ...
    @property
    def QpeakNoise(self) -> IQpeakNoiseMeasurement: ...
    @property
    def ReferenceLevels(self) -> IReferenceLevelsMeasurement: ...
    @property
    def RegulatedFrequencySweep(self) -> IRegulatedFrequencySweepMeasurement: ...
    @property
    def ResistanceDcx(self) -> IResistanceDcxMeasurement: ...
    @property
    def SampleRate(self) -> ISampleRateMeasurement: ...
    @property
    def ScopeSignalMonitor(self) -> IScopeSignalMonitorWindow: ...
    @property
    def Sequence(self) -> ISequence: ...
    @property
    def SignalAcquisition(self) -> ISignalAcquisitionMeasurement: ...
    @property
    def SignalAnalyzer(self) -> ISignalAnalyzerMeasurement: ...
    @property
    def SignalMeters(self) -> ISignalMetersWindow: ...
    @property
    def SignalMonitorsEnabled(self) -> bool: ...
    @SignalMonitorsEnabled.setter
    def SignalMonitorsEnabled(self, value: bool) -> bool: ...
    @property
    def SignalPathSetup(self) -> ISignalPathSetup: ...
    @property
    def SignalProcessing(self) -> ISignalProcessing: ...
    @property
    def SignalToNoiseRatio(self) -> ISignalToNoiseRatioMeasurement: ...
    @property
    def Sinad(self) -> ISinadMeasurement: ...
    @property
    def StatusBitsMonitor(self) -> IStatusBitsMonitor: ...
    @property
    def SteppedFrequencySweep(self) -> ISteppedFrequencySweepMeasurement: ...
    @property
    def SteppedLevelSweep(self) -> ISteppedLevelSweepMeasurement: ...
    @property
    def TedsData(self) -> ITedsDataMeasurement: ...
    @property
    def ThdN(self) -> IThdNMeasurement: ...
    @property
    def Top(self) -> int: ...
    @Top.setter
    def Top(self, value: int) -> int: ...
    @property
    def TransferFunction(self) -> ITransferFunctionMeasurement: ...
    @property
    def Variables(self) -> IVariables: ...
    @property
    def VddRamp(self) -> IVddRampMeasurement: ...
    @property
    def Version(self) -> IVersionInfo: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...
    @property
    def Width(self) -> int: ...
    @Width.setter
    def Width(self, value: int) -> int: ...
    def AddSignalPath(self) -> ISignalPath: ...
    def ApplyLicenseFile(self, licenseFileName: str) -> None: ...
    def CancelOperation(self) -> None: ...
    def ClearLastException(self) -> None: ...
    def CreateNewProject(self) -> None: ...
    def CreateStateChangeCollection(self) -> IStateChangeCollection: ...
    def DeleteUncheckedItems(self, deleteSignalPaths: bool, deleteMeasurements: bool, deleteResults: bool, deleteSequenceSteps: bool) -> None: ...
    def Exit(self) -> None: ...
    def GetAllMeasurementNames(self) -> Array_1[str]: ...
    def GetInputSampleRate(self, input: APxInputSelection) -> float: ...
    def InitializeLifetimeService(self) -> typing.Any: ...
    def LockProject(self, password: str, productionTest: bool = ..., showApplicationWindow: bool = ...) -> None: ...
    def Maximize(self) -> None: ...
    def Minimize(self) -> None: ...
    def OpenProject(self, fileName: str) -> None: ...
    def PasteFromClipboard(self) -> None: ...
    def Restore(self) -> None: ...
    def ResumeProcessing(self) -> None: ...
    def SaveProject(self, fileName: str) -> None: ...
    def SuspendProcessing(self) -> None: ...
    def UnlockProject(self, password: str) -> None: ...
    # Skipped AddMeasurement due to it being static, abstract and generic.

    AddMeasurement : AddMeasurement_MethodGroup
    class AddMeasurement_MethodGroup:
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementType: MeasurementType) -> IMeasurement:...
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementName: str) -> IMeasurement:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementType: MeasurementType) -> IMeasurement:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementName: str) -> IMeasurement:...
        @typing.overload
        def __call__(self, signalPathIndex: int, insertPosition: int, measurementType: MeasurementType) -> IMeasurement:...
        @typing.overload
        def __call__(self, signalPathIndex: int, insertPosition: int, measurementName: str) -> IMeasurement:...
        @typing.overload
        def __call__(self, signalPathName: str, insertPosition: int, measurementType: MeasurementType) -> IMeasurement:...
        @typing.overload
        def __call__(self, signalPathName: str, insertPosition: int, measurementName: str) -> IMeasurement:...

    # Skipped AddResult due to it being static, abstract and generic.

    AddResult : AddResult_MethodGroup
    class AddResult_MethodGroup:
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementIndex: int, resultType: MeasurementResultType) -> IGraph:...
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementName: str, resultType: MeasurementResultType) -> IGraph:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementIndex: int, resultType: MeasurementResultType) -> IGraph:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementName: str, resultType: MeasurementResultType) -> IGraph:...
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementIndex: int, resultType: MeasurementResultType, inputIndex: int) -> IGraph:...
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementName: str, resultType: MeasurementResultType, inputIndex: int) -> IGraph:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementIndex: int, resultType: MeasurementResultType, inputIndex: int) -> IGraph:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementName: str, resultType: MeasurementResultType, inputIndex: int) -> IGraph:...

    # Skipped CopyMeasurementToClipboard due to it being static, abstract and generic.

    CopyMeasurementToClipboard : CopyMeasurementToClipboard_MethodGroup
    class CopyMeasurementToClipboard_MethodGroup:
        @typing.overload
        def __call__(self, signalPath: int, measurement: int) -> None:...
        @typing.overload
        def __call__(self, signalPath: int, measurement: str) -> None:...
        @typing.overload
        def __call__(self, signalPath: str, measurement: int) -> None:...
        @typing.overload
        def __call__(self, signalPath: str, measurement: str) -> None:...

    # Skipped CopySignalPathToClipboard due to it being static, abstract and generic.

    CopySignalPathToClipboard : CopySignalPathToClipboard_MethodGroup
    class CopySignalPathToClipboard_MethodGroup:
        @typing.overload
        def __call__(self, signalPath: int) -> None:...
        @typing.overload
        def __call__(self, signalPath: str) -> None:...

    # Skipped DeleteMeasurement due to it being static, abstract and generic.

    DeleteMeasurement : DeleteMeasurement_MethodGroup
    class DeleteMeasurement_MethodGroup:
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementIndex: int) -> None:...
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementName: str) -> None:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementIndex: int) -> None:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementName: str) -> None:...

    # Skipped DeleteResult due to it being static, abstract and generic.

    DeleteResult : DeleteResult_MethodGroup
    class DeleteResult_MethodGroup:
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementIndex: int, resultIndex: int) -> None:...
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementName: str, resultIndex: int) -> None:...
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementName: str, resultName: str) -> None:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementIndex: int, resultIndex: int) -> None:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementIndex: int, resultName: str) -> None:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementName: str, resultIndex: int) -> None:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementName: str, resultName: str) -> None:...

    # Skipped DeleteSignalPath due to it being static, abstract and generic.

    DeleteSignalPath : DeleteSignalPath_MethodGroup
    class DeleteSignalPath_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...

    # Skipped ShowMeasurement due to it being static, abstract and generic.

    ShowMeasurement : ShowMeasurement_MethodGroup
    class ShowMeasurement_MethodGroup:
        @typing.overload
        def __call__(self, signalPath: int, measurement: int) -> None:...
        @typing.overload
        def __call__(self, signalPath: int, measurement: str) -> None:...
        @typing.overload
        def __call__(self, signalPath: str, measurement: int) -> None:...
        @typing.overload
        def __call__(self, signalPath: str, measurement: str) -> None:...



class APx500_Application:
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, cmdLine: str) -> None: ...
    @typing.overload
    def __init__(self, mode: APxOperatingMode) -> None: ...
    @typing.overload
    def __init__(self, mode: APxOperatingMode, cmdLine: str) -> None: ...
    @typing.overload
    def __init__(self, mode: APxOperatingMode, updateFirmwareIfNecessary: bool) -> None: ...
    @typing.overload
    def __init__(self, mode: APxOperatingMode, updateFirmwareIfNecessary: bool, cmdLine: str) -> None: ...
    @typing.overload
    def __init__(self, updateFirmwareIfNecessary: bool) -> None: ...
    @typing.overload
    def __init__(self, updateFirmwareIfNecessary: bool, cmdLine: str) -> None: ...
    @property
    def AcousticResponse(self) -> AcousticResponseMeasurement: ...
    @property
    def ActiveMeasurement(self) -> Measurement: ...
    @property
    def ActiveMeasurementIndex(self) -> int: ...
    @property
    def ActiveMeasurementName(self) -> str: ...
    @property
    def ActiveMeasurementType(self) -> MeasurementType: ...
    @property
    def ActiveSignalPathIndex(self) -> int: ...
    @property
    def ActiveSignalPathName(self) -> str: ...
    @property
    def AnalogInputRange(self) -> Array_1[float]: ...
    @property
    def AnalogOutputMonitor(self) -> AnalogOutputMonitor: ...
    @property
    def AnsiS322ImdFrequencySweep(self) -> AnsiS322ImdFrequencySweepMeasurement: ...
    @property
    def APx1701(self) -> APx1701: ...
    @property
    def APx516Fault(self) -> APx516Faults: ...
    @property
    def APx517Fault(self) -> APx517Faults: ...
    @property
    def AttachedProjectItems(self) -> ProjectItemCollection: ...
    @property
    def AudibleSignalMonitor(self) -> AudibleSignalMonitor: ...
    @property
    def AuthorizationMessage(self) -> str: ...
    @property
    def AuxControlMonitor(self) -> AuxControlMonitor: ...
    @property
    def BandpassFrequencySweep(self) -> BandpassFrequencySweepMeasurement: ...
    @property
    def BandpassLevel(self) -> BandpassLevelMeasurement: ...
    @property
    def BandpassLevelSweep(self) -> BandpassLevelSweepMeasurement: ...
    @property
    def BenchMode(self) -> BenchMode: ...
    @property
    def BluetoothMonitor(self) -> BluetoothMonitor: ...
    @property
    def BluetoothSettings(self) -> BluetoothSettings: ...
    @property
    def Cmrr(self) -> CmrrMeasurement: ...
    @property
    def CmrrIec(self) -> CmrrIecMeasurement: ...
    @property
    def CompareEncodedBitstream(self) -> CompareEncodedBitstreamMeasurement: ...
    @property
    def ContinuousSweep(self) -> ContinuousSweepMeasurement: ...
    @property
    def CrosstalkCustom(self) -> CrosstalkCustomMeasurement: ...
    @property
    def CrosstalkFrequencySweepCustom(self) -> CrosstalkFrequencySweepCustomMeasurement: ...
    @property
    def CrosstalkFrequencySweepOneChannelDriven(self) -> CrosstalkFrequencySweepOneChannelDrivenMeasurement: ...
    @property
    def CrosstalkFrequencySweepOneChannelUndriven(self) -> CrosstalkFrequencySweepOneChannelUndrivenMeasurement: ...
    @property
    def CrosstalkOneChannelDriven(self) -> CrosstalkOneChannelDrivenMeasurement: ...
    @property
    def CrosstalkOneChannelUndriven(self) -> CrosstalkOneChannelUndrivenMeasurement: ...
    @property
    def DCLevel(self) -> DCLevelMeasurement: ...
    @property
    def DcLevelDcx(self) -> DcLevelDcxMeasurement: ...
    @property
    def DcLevelSweep(self) -> DcLevelSweepMeasurement: ...
    @property
    def DelayCalibration(self) -> DelayCalibrationMeasurement: ...
    @property
    def DelayChirpCalibration(self) -> DelayChirpCalibrationMeasurement: ...
    @property
    def DigitalErrorRate(self) -> DigitalErrorRateMeasurement: ...
    @property
    def DigitalInputStreamMetadata(self) -> str: ...
    @property
    def DigitalInputStreamType(self) -> str: ...
    @property
    def DigitalSerialMonitor(self) -> DigitalSerialMonitor: ...
    @property
    def DimImd(self) -> DimImdMeasurement: ...
    @property
    def DimLevelSweep(self) -> DimLevelSweepMeasurement: ...
    @property
    def DutDelay(self) -> DutDelayMeasurement: ...
    @property
    def DynamicRange(self) -> DynamicRangeMeasurement: ...
    @property
    def ExpirationMessages(self) -> str: ...
    @property
    def FftSpectrumSignalMonitor(self) -> FFTSpectrumSignalMonitorWindow: ...
    @property
    def Frequency(self) -> FrequencyMeasurement: ...
    @property
    def FrequencyResponse(self) -> FrequencyResponseMeasurement: ...
    @property
    def HdmiAudioInfoFramesMonitor(self) -> HdmiMonitor: ...
    @property
    def Height(self) -> int: ...
    @Height.setter
    def Height(self, value: int) -> int: ...
    @property
    def Iec60118ImdFrequencySweep(self) -> Iec60118ImdFrequencySweepMeasurement: ...
    @property
    def Imd(self) -> ImdMeasurement: ...
    @property
    def ImdFrequencySweep(self) -> ImdFrequencySweepMeasurement: ...
    @property
    def ImdLevelSweep(self) -> ImdLevelSweepMeasurement: ...
    @property
    def ImpedanceThieleSmall(self) -> ImpedanceThieleSmallMeasurement: ...
    @property
    def InputSampleRate(self) -> float: ...
    @property
    def InterchannelPhase(self) -> InterchannelPhaseMeasurement: ...
    @property
    def IsDemoMode(self) -> bool: ...
    @property
    def IsProcessingSuspended(self) -> bool: ...
    @property
    def IsProjectLocked(self) -> bool: ...
    @property
    def IsProjectModified(self) -> bool: ...
    @property
    def JitterFrequencySweep(self) -> JitterFrequencySweepMeasurement: ...
    @property
    def JitterLevelSweep(self) -> JitterLevelSweepMeasurement: ...
    @property
    def LastException(self) -> APException: ...
    @property
    def Left(self) -> int: ...
    @Left.setter
    def Left(self, value: int) -> int: ...
    @property
    def LevelAndGain(self) -> LevelAndGainMeasurement: ...
    @property
    def LevelRatio(self) -> LevelRatioMeasurement: ...
    @property
    def LoudspeakerProductionTest(self) -> LoudspeakerProductionTestMeasurement: ...
    @property
    def MaxOutput(self) -> MaxOutputMeasurement: ...
    @property
    def MaxOutputBurst(self) -> MaxOutputBurstMeasurement: ...
    @property
    def MeasurementRecorder(self) -> MeasurementRecorderMeasurement: ...
    @property
    def MetadataRecorder(self) -> MetadataRecorderMeasurement: ...
    @property
    def ModulatedNoise(self) -> ModulatedNoiseMeasurement: ...
    @property
    def MultitoneAnalyzer(self) -> MultitoneAnalyzerMeasurement: ...
    @property
    def NavigatorVisible(self) -> bool: ...
    @NavigatorVisible.setter
    def NavigatorVisible(self, value: bool) -> bool: ...
    @property
    def Noise(self) -> NoiseMeasurement: ...
    @property
    def NoiseRecorder(self) -> NoiseRecorderMeasurement: ...
    @property
    def OperatingMode(self) -> APxOperatingMode: ...
    @OperatingMode.setter
    def OperatingMode(self, value: APxOperatingMode) -> APxOperatingMode: ...
    @property
    def OutputSampleRate(self) -> float: ...
    @property
    def PassFail(self) -> PassFailMeasurement: ...
    @property
    def Pdm16Monitor(self) -> Pdm16Monitor: ...
    @property
    def PdmMonitor(self) -> PdmMonitor: ...
    @property
    def Pesq(self) -> PesqMeasurement: ...
    @property
    def PesqAverage(self) -> PesqAverageMeasurement: ...
    @property
    def Polqa(self) -> PolqaMeasurement: ...
    @property
    def PolqaAverage(self) -> PolqaAverageMeasurement: ...
    @property
    def ProjectFileName(self) -> str: ...
    @property
    def ProjectSettings(self) -> ProjectSettings: ...
    @property
    def Psr(self) -> PsrMeasurement: ...
    @property
    def PsrSweep(self) -> PsrSweepMeasurement: ...
    @property
    def QpeakNoise(self) -> QpeakNoiseMeasurement: ...
    @property
    def RegulatedFrequencySweep(self) -> RegulatedFrequencySweepMeasurement: ...
    @property
    def ResistanceDcx(self) -> ResistanceDcxMeasurement: ...
    @property
    def SampleRate(self) -> SampleRateMeasurement: ...
    @property
    def ScopeSignalMonitor(self) -> ScopeSignalMonitorWindow: ...
    @property
    def Sequence(self) -> Sequence: ...
    @property
    def SignalAcquisition(self) -> SignalAcquisitionMeasurement: ...
    @property
    def SignalAnalyzer(self) -> SignalAnalyzerMeasurement: ...
    @property
    def SignalMeters(self) -> SignalMetersWindow: ...
    @property
    def SignalMonitorsEnabled(self) -> bool: ...
    @SignalMonitorsEnabled.setter
    def SignalMonitorsEnabled(self, value: bool) -> bool: ...
    @property
    def SignalPathSetup(self) -> SignalPathSetup: ...
    @property
    def SignalProcessing(self) -> SignalProcessing: ...
    @property
    def SignalToNoiseRatio(self) -> SignalToNoiseRatioMeasurement: ...
    @property
    def Sinad(self) -> SinadMeasurement: ...
    @property
    def StatusBitsMonitor(self) -> StatusBitsMonitor: ...
    @property
    def SteppedFrequencySweep(self) -> SteppedFrequencySweepMeasurement: ...
    @property
    def SteppedLevelSweep(self) -> SteppedLevelSweepMeasurement: ...
    @property
    def TedsData(self) -> TedsDataMeasurement: ...
    @property
    def ThdN(self) -> ThdNMeasurement: ...
    @property
    def Top(self) -> int: ...
    @Top.setter
    def Top(self, value: int) -> int: ...
    @property
    def TransferFunction(self) -> TransferFunctionMeasurement: ...
    @property
    def Variables(self) -> Variables: ...
    @property
    def VddRamp(self) -> VddRampMeasurement: ...
    @property
    def Version(self) -> VersionInfo: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...
    @property
    def Width(self) -> int: ...
    @Width.setter
    def Width(self, value: int) -> int: ...
    def AddSignalPath(self) -> SignalPath: ...
    def ApplyLicenseFile(self, licenseFileName: str) -> None: ...
    def CancelOperation(self) -> None: ...
    def ClearLastException(self) -> None: ...
    def CreateNewProject(self) -> None: ...
    def CreateStateChangeCollection(self) -> StateChangeCollection: ...
    def DeleteUncheckedItems(self, deleteSignalPaths: bool, deleteMeasurements: bool, deleteResults: bool, deleteSequenceSteps: bool) -> None: ...
    def Exit(self) -> None: ...
    def GetAllMeasurementNames(self) -> Array_1[str]: ...
    def GetInputSampleRate(self, input: APxInputSelection) -> float: ...
    def LockProject(self, password: str, productionTest: bool, showApplicationWindow: bool) -> None: ...
    def Maximize(self) -> None: ...
    def Minimize(self) -> None: ...
    def OpenProject(self, fileName: str) -> None: ...
    def PasteFromClipboard(self) -> None: ...
    def Restore(self) -> None: ...
    def ResumeProcessing(self) -> None: ...
    def SaveProject(self, fileName: str) -> None: ...
    def SuspendProcessing(self) -> None: ...
    def UnlockProject(self, password: str) -> None: ...
    # Skipped AddMeasurement due to it being static, abstract and generic.

    AddMeasurement : AddMeasurement_MethodGroup
    class AddMeasurement_MethodGroup:
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementType: MeasurementType) -> Measurement:...
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementName: str) -> Measurement:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementType: MeasurementType) -> Measurement:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementName: str) -> Measurement:...
        @typing.overload
        def __call__(self, signalPathIndex: int, insertPosition: int, measurementType: MeasurementType) -> Measurement:...
        @typing.overload
        def __call__(self, signalPathIndex: int, insertPosition: int, measurementName: str) -> Measurement:...
        @typing.overload
        def __call__(self, signalPathName: str, insertPosition: int, measurementType: MeasurementType) -> Measurement:...
        @typing.overload
        def __call__(self, signalPathName: str, insertPosition: int, measurementName: str) -> Measurement:...

    # Skipped AddResult due to it being static, abstract and generic.

    AddResult : AddResult_MethodGroup
    class AddResult_MethodGroup:
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementIndex: int, resultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementName: str, resultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementIndex: int, resultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementName: str, resultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementIndex: int, resultType: MeasurementResultType, inputIndex: int) -> Graph:...
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementName: str, resultType: MeasurementResultType, inputIndex: int) -> Graph:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementIndex: int, resultType: MeasurementResultType, inputIndex: int) -> Graph:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementName: str, resultType: MeasurementResultType, inputIndex: int) -> Graph:...

    # Skipped CopyMeasurementToClipboard due to it being static, abstract and generic.

    CopyMeasurementToClipboard : CopyMeasurementToClipboard_MethodGroup
    class CopyMeasurementToClipboard_MethodGroup:
        @typing.overload
        def __call__(self, signalPath: int, measurement: int) -> None:...
        @typing.overload
        def __call__(self, signalPath: int, measurement: str) -> None:...
        @typing.overload
        def __call__(self, signalPath: str, measurement: int) -> None:...
        @typing.overload
        def __call__(self, signalPath: str, measurement: str) -> None:...

    # Skipped CopySignalPathToClipboard due to it being static, abstract and generic.

    CopySignalPathToClipboard : CopySignalPathToClipboard_MethodGroup
    class CopySignalPathToClipboard_MethodGroup:
        @typing.overload
        def __call__(self, signalPath: int) -> None:...
        @typing.overload
        def __call__(self, signalPath: str) -> None:...

    # Skipped DeleteMeasurement due to it being static, abstract and generic.

    DeleteMeasurement : DeleteMeasurement_MethodGroup
    class DeleteMeasurement_MethodGroup:
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementIndex: int) -> None:...
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementName: str) -> None:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementIndex: int) -> None:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementName: str) -> None:...

    # Skipped DeleteResult due to it being static, abstract and generic.

    DeleteResult : DeleteResult_MethodGroup
    class DeleteResult_MethodGroup:
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementIndex: int, resultIndex: int) -> None:...
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementName: str, resultIndex: int) -> None:...
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementName: str, resultName: str) -> None:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementIndex: int, resultIndex: int) -> None:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementIndex: int, resultName: str) -> None:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementName: str, resultIndex: int) -> None:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementName: str, resultName: str) -> None:...

    # Skipped DeleteSignalPath due to it being static, abstract and generic.

    DeleteSignalPath : DeleteSignalPath_MethodGroup
    class DeleteSignalPath_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...

    # Skipped ShowMeasurement due to it being static, abstract and generic.

    ShowMeasurement : ShowMeasurement_MethodGroup
    class ShowMeasurement_MethodGroup:
        @typing.overload
        def __call__(self, signalPath: int, measurement: int) -> None:...
        @typing.overload
        def __call__(self, signalPath: int, measurement: str) -> None:...
        @typing.overload
        def __call__(self, signalPath: str, measurement: int) -> None:...
        @typing.overload
        def __call__(self, signalPath: str, measurement: str) -> None:...



class Apx500PortNumbers:
    def __init__(self) -> None: ...
    APx500ApiPortNumber : int
    APx500ApiPortNumberAlternate : int


class APx516Faults:
    @property
    def Ch1InputProtect(self) -> bool: ...
    @property
    def Ch1OutputOvl(self) -> bool: ...
    @property
    def Ch2InputProtect(self) -> bool: ...
    @property
    def Ch2OutputOvl(self) -> bool: ...
    @property
    def Get516FaultStatus(self) -> bool: ...


class APx517Faults:
    @property
    def HeadphoneAmplifierLeftTemperature(self) -> bool: ...
    @property
    def HeadphoneAmplifierOverload(self) -> bool: ...
    @property
    def HeadphoneAmplifierProtect(self) -> bool: ...
    @property
    def HeadphoneAmplifierRightTemperature(self) -> bool: ...
    @property
    def MicInputCh1Protect(self) -> bool: ...
    @property
    def MicInputCh2Protect(self) -> bool: ...
    @property
    def PowerAmplifierOverload(self) -> bool: ...
    @property
    def PowerAmplifierProtect(self) -> bool: ...
    @property
    def PowerAmplifierTemperature(self) -> bool: ...


class APxInputSelection(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Input1 : APxInputSelection # 0
    Input2 : APxInputSelection # 1


class APxKeyBoxInfo(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> APxKeyBoxItem: ...
    @property
    def SystemClock(self) -> DateTime: ...
    def GetEnumerator(self) -> IEnumerator: ...


class APxKeyBoxItem:
    @property
    def Description(self) -> str: ...
    @property
    def ExpirationDate(self) -> DateTime: ...
    @property
    def HasExpirationDate(self) -> bool: ...
    @property
    def Name(self) -> str: ...


class APxLoopbackAsioDevice:
    @property
    def Simulation(self) -> AsioLoopbackDeviceSimulation: ...
    @Simulation.setter
    def Simulation(self, value: AsioLoopbackDeviceSimulation) -> AsioLoopbackDeviceSimulation: ...
    @property
    def SoftClippingGain(self) -> float: ...
    @SoftClippingGain.setter
    def SoftClippingGain(self, value: float) -> float: ...


class APxOperatingMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    BenchMode : APxOperatingMode # 0
    SequenceMode : APxOperatingMode # 1


class APxOption(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    HdmiModule : APxOption # 0
    DigitalSerialIOModule : APxOption # 1
    DigitalIOModule : APxOption # 2
    DigitalBalancedIOModule : APxOption # 3
    AG52AnalogGeneratorModule : APxOption # 4
    BW52AnalogAnalyzerModule : APxOption # 5
    BluetoothModule : APxOption # 6
    PdmModule : APxOption # 7
    BluetoothWidebandSpeech : APxOption # 8
    HdmiArcModule : APxOption # 9
    HdmieARCModule : APxOption # 10
    AnalogInputModule : APxOption # 11
    AnalogOutputModule : APxOption # 12
    HdmiCecMessage : APxOption # 13
    DCX : APxOption # 14
    BenchMode : APxOption # 15
    AdvancedDigitalModule : APxOption # 16
    DigitalSerialJitterAnalysis : APxOption # 17
    JitterGenerator : APxOption # 18
    PdmJitter : APxOption # 19
    PdmLowVoltage : APxOption # 20
    PdmExtendedVdd : APxOption # 21
    APx1701 : APxOption # 22
    BluetoothDuoModule : APxOption # 23
    EAG : APxOption # 24
    DARS : APxOption # 25
    ExtSync : APxOption # 26
    ExtTrigger : APxOption # 27
    SW_AdvancedMeasurementLibrary : APxOption # 28
    SW_HighSpeedTest : APxOption # 29
    SW_AcousticPackage : APxOption # 30
    SW_PESQ : APxOption # 31
    SW_POLQA : APxOption # 32
    SW_ASIO : APxOption # 33
    SW_AML : APxOption # 34
    SW_HST : APxOption # 35
    SW_SPKRD : APxOption # 36
    SW_SPKPT : APxOption # 37
    SW_CAPI : APxOption # 38
    SW_ACR : APxOption # 39
    SW_BEN : APxOption # 40
    SW_TTH : APxOption # 41
    SW_TTS : APxOption # 42
    SW_STI : APxOption # 43
    SW_ABC : APxOption # 44
    SW_ADCTEST : APxOption # 45
    SW_101 : APxOption # 46
    SW_102 : APxOption # 47
    SW_103 : APxOption # 48
    SW_104 : APxOption # 49
    SW_105 : APxOption # 50
    SW_MEAS : APxOption # 51
    SW_EVAL : APxOption # 52
    FLX_POLAR : APxOption # 53
    FLX_CSD : APxOption # 54
    UTL_POLAR : APxOption # 55
    UTL_CSD : APxOption # 56
    Pdm16Module : APxOption # 57
    CMRR : APxOption # 58
    CMRR_IEC : APxOption # 59


class ArbitraryGenerator:
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class ArcPhysicalLayerMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    SingleMode : ArcPhysicalLayerMode # 0
    CommonMode : ArcPhysicalLayerMode # 1


class ArcTransmitterNegotiation(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Negotiated : ArcTransmitterNegotiation # 0
    ForcedOn : ArcTransmitterNegotiation # 1


class AsioDevice:
    @property
    def AnalogOutputScalingFactor(self) -> DoubleSetting: ...
    @property
    def AutoMap(self) -> bool: ...
    @AutoMap.setter
    def AutoMap(self, value: bool) -> bool: ...
    @property
    def BufferSize(self) -> int: ...
    @BufferSize.setter
    def BufferSize(self, value: int) -> int: ...
    @property
    def DeviceInfo(self) -> AsioDeviceInfo: ...
    @property
    def InputChannelCount(self) -> int: ...
    @property
    def InputLatency(self) -> int: ...
    @InputLatency.setter
    def InputLatency(self, value: int) -> int: ...
    @property
    def InputLatencyAuto(self) -> bool: ...
    @InputLatencyAuto.setter
    def InputLatencyAuto(self, value: bool) -> bool: ...
    @property
    def InputScalingMode(self) -> AsioScalingMode: ...
    @InputScalingMode.setter
    def InputScalingMode(self, value: AsioScalingMode) -> AsioScalingMode: ...
    @property
    def OutputChannelCount(self) -> int: ...
    @property
    def OutputLatency(self) -> int: ...
    @OutputLatency.setter
    def OutputLatency(self, value: int) -> int: ...
    @property
    def OutputLatencyAuto(self) -> bool: ...
    @OutputLatencyAuto.setter
    def OutputLatencyAuto(self, value: bool) -> bool: ...
    @property
    def OutputScalingMode(self) -> AsioScalingMode: ...
    @OutputScalingMode.setter
    def OutputScalingMode(self, value: AsioScalingMode) -> AsioScalingMode: ...
    @property
    def SampleRate(self) -> float: ...
    @SampleRate.setter
    def SampleRate(self, value: float) -> float: ...
    @property
    def TedsCalibration(self) -> TedsCalibration: ...
    @property
    def TedsSysCheck(self) -> TedsSysCheck: ...
    def AssignInputChannel(self, asioChannel: int, apxChannel: int) -> None: ...
    def AssignOutputChannel(self, asioChannel: int, apxChannel: int) -> None: ...
    def CanSampleRate(self, sampleRate: float) -> bool: ...
    def GetAnalogInputScalingFactorUnit(self, index: int) -> str: ...
    def GetAnalogInputScalingFactorUnits(self, index: int) -> Array_1[str]: ...
    def GetClockSource(self) -> ClockSourceInfo: ...
    def GetInputChannelAssignment(self, apxChannel: int) -> ChannelInfo: ...
    def GetOutputChannelAssignment(self, apxChannel: int) -> ChannelInfo: ...
    def RemoveInputChannel(self, asioChannel: int) -> None: ...
    def RemoveOutputChannel(self, asioChannel: int) -> None: ...
    def SetClockSource(self, name: str) -> None: ...
    # Skipped GetAnalogInputScalingFactor due to it being static, abstract and generic.

    GetAnalogInputScalingFactor : GetAnalogInputScalingFactor_MethodGroup
    class GetAnalogInputScalingFactor_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> float:...
        @typing.overload
        def __call__(self, index: int, unit: str) -> float:...

    # Skipped SetAnalogInputScalingFactor due to it being static, abstract and generic.

    SetAnalogInputScalingFactor : SetAnalogInputScalingFactor_MethodGroup
    class SetAnalogInputScalingFactor_MethodGroup:
        @typing.overload
        def __call__(self, index: int, scalingFactor: float) -> None:...
        @typing.overload
        def __call__(self, index: int, scalingFactor: float, unit: str) -> None:...



class AsioDeviceInfo:
    @property
    def ClockSources(self) -> Array_1[IClockSourceInfo]: ...
    @property
    def DriverName(self) -> str: ...
    @property
    def Granularity(self) -> int: ...
    @property
    def InputChannels(self) -> Array_1[IChannelInfo]: ...
    @property
    def InputLatency(self) -> int: ...
    @property
    def MaxBufferSize(self) -> int: ...
    @property
    def MinBufferSize(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def OutputChannels(self) -> Array_1[IChannelInfo]: ...
    @property
    def OutputLatency(self) -> int: ...
    @property
    def PreferredBufferSize(self) -> int: ...
    @property
    def Version(self) -> int: ...


class AsioLoopbackDeviceSimulation(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : AsioLoopbackDeviceSimulation # 0
    SoftClipping : AsioLoopbackDeviceSimulation # 1


class AsioSampleType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ASIOSTInt16MSB : AsioSampleType # 0
    ASIOSTInt24MSB : AsioSampleType # 1
    ASIOSTInt32MSB : AsioSampleType # 2
    ASIOSTFloat32MSB : AsioSampleType # 3
    ASIOSTFloat64MSB : AsioSampleType # 4
    ASIOSTInt32MSB16 : AsioSampleType # 8
    ASIOSTInt32MSB18 : AsioSampleType # 9
    ASIOSTInt32MSB20 : AsioSampleType # 10
    ASIOSTInt32MSB24 : AsioSampleType # 11
    ASIOSTInt16LSB : AsioSampleType # 16
    ASIOSTInt24LSB : AsioSampleType # 17
    ASIOSTInt32LSB : AsioSampleType # 18
    ASIOSTFloat32LSB : AsioSampleType # 19
    ASIOSTFloat64LSB : AsioSampleType # 20
    ASIOSTInt32LSB16 : AsioSampleType # 24
    ASIOSTInt32LSB18 : AsioSampleType # 25
    ASIOSTInt32LSB20 : AsioSampleType # 26
    ASIOSTInt32LSB24 : AsioSampleType # 27
    ASIOSTDSDInt8LSB1 : AsioSampleType # 32
    ASIOSTDSDInt8MSB1 : AsioSampleType # 33
    ASIOSTDSDInt8NER8 : AsioSampleType # 40


class AsioScalingMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Digital : AsioScalingMode # 0
    Analog : AsioScalingMode # 1


class AsioSettings:
    @property
    def Devices(self) -> Array_1[str]: ...
    @property
    def DitherOutput(self) -> bool: ...
    @DitherOutput.setter
    def DitherOutput(self, value: bool) -> bool: ...
    @property
    def IsConnected(self) -> bool: ...
    @property
    def LoopbackDeviceSettings(self) -> APxLoopbackAsioDevice: ...
    def Connect(self) -> None: ...
    def GetSelectedDevice(self) -> AsioDevice: ...
    def Reset(self) -> None: ...
    def SetSelectedDevice(self, deviceName: str) -> None: ...


class ATCommandStep:
    @property
    def ATCommand(self) -> str: ...
    @ATCommand.setter
    def ATCommand(self, value: str) -> str: ...
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Delay(self) -> float: ...
    @Delay.setter
    def Delay(self, value: float) -> float: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    @property
    def Wait(self) -> BluetoothAtCommandWait: ...
    @Wait.setter
    def Wait(self, value: BluetoothAtCommandWait) -> BluetoothAtCommandWait: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class AudibleMonitorChannelMix(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : AudibleMonitorChannelMix # 0
    Left : AudibleMonitorChannelMix # 1
    Right : AudibleMonitorChannelMix # 2
    LeftAndRight : AudibleMonitorChannelMix # 3


class AudibleMonitorGain(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Auto : AudibleMonitorGain # 0
    x1 : AudibleMonitorGain # 1
    x3 : AudibleMonitorGain # 2
    x10 : AudibleMonitorGain # 3
    x30 : AudibleMonitorGain # 4
    x100 : AudibleMonitorGain # 5
    x300 : AudibleMonitorGain # 6
    x1K : AudibleMonitorGain # 7
    x3K : AudibleMonitorGain # 8
    x10K : AudibleMonitorGain # 9
    x30K : AudibleMonitorGain # 10
    x100K : AudibleMonitorGain # 11


class AudibleMonitorSignalType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    FullInputSignal : AudibleMonitorSignalType # 0
    ThdNResidual : AudibleMonitorSignalType # 1


class AudibleSignalMonitor:
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Gain(self) -> AudibleMonitorGain: ...
    @Gain.setter
    def Gain(self, value: AudibleMonitorGain) -> AudibleMonitorGain: ...
    @property
    def InputSelection(self) -> APxInputSelection: ...
    @InputSelection.setter
    def InputSelection(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def SignalType(self) -> AudibleMonitorSignalType: ...
    @SignalType.setter
    def SignalType(self, value: AudibleMonitorSignalType) -> AudibleMonitorSignalType: ...
    # Skipped GetChannelMix due to it being static, abstract and generic.

    GetChannelMix : GetChannelMix_MethodGroup
    class GetChannelMix_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> AudibleMonitorChannelMix:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> AudibleMonitorChannelMix:...

    # Skipped SetChannelMix due to it being static, abstract and generic.

    SetChannelMix : SetChannelMix_MethodGroup
    class SetChannelMix_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, mapping: AudibleMonitorChannelMix) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, mapping: AudibleMonitorChannelMix) -> None:...



class AudioFileSettings:
    @property
    def ChannelCount(self) -> int: ...
    @ChannelCount.setter
    def ChannelCount(self, value: int) -> int: ...
    @property
    def SampleRate(self) -> DoubleSetting: ...


class AudioInfoFrameChannelCount(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ReferToHeader : AudioInfoFrameChannelCount # 0
    TwoChannel : AudioInfoFrameChannelCount # 1
    ThreeChannel : AudioInfoFrameChannelCount # 2
    FourChannel : AudioInfoFrameChannelCount # 3
    FiveChannel : AudioInfoFrameChannelCount # 4
    SixChannel : AudioInfoFrameChannelCount # 5
    SevenChannel : AudioInfoFrameChannelCount # 6
    EightChannel : AudioInfoFrameChannelCount # 7


class AudioInfoFrameCodingType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ReferToHeader : AudioInfoFrameCodingType # 0
    IEC60958 : AudioInfoFrameCodingType # 1
    AC3 : AudioInfoFrameCodingType # 2
    MPEG1 : AudioInfoFrameCodingType # 3
    MP3 : AudioInfoFrameCodingType # 4
    MPEG2 : AudioInfoFrameCodingType # 5
    AAC : AudioInfoFrameCodingType # 6
    DTS : AudioInfoFrameCodingType # 7
    ATRAC : AudioInfoFrameCodingType # 8
    OneBitAudio : AudioInfoFrameCodingType # 9
    DolbyDigital : AudioInfoFrameCodingType # 10
    DTSHD : AudioInfoFrameCodingType # 11
    MAT : AudioInfoFrameCodingType # 12
    DST : AudioInfoFrameCodingType # 13
    WMAPro : AudioInfoFrameCodingType # 14
    Reserved : AudioInfoFrameCodingType # 15


class AudioInfoFrameInhibitDownmixFlag(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Permitted : AudioInfoFrameInhibitDownmixFlag # 0
    Prohibited : AudioInfoFrameInhibitDownmixFlag # 1


class AudioInfoFrameLevelShiftValue(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Level0 : AudioInfoFrameLevelShiftValue # 0
    Level1 : AudioInfoFrameLevelShiftValue # 1
    Level2 : AudioInfoFrameLevelShiftValue # 2
    Level3 : AudioInfoFrameLevelShiftValue # 3
    Level4 : AudioInfoFrameLevelShiftValue # 4
    Level5 : AudioInfoFrameLevelShiftValue # 5
    Level6 : AudioInfoFrameLevelShiftValue # 6
    Level7 : AudioInfoFrameLevelShiftValue # 7
    Level8 : AudioInfoFrameLevelShiftValue # 8
    Level9 : AudioInfoFrameLevelShiftValue # 9
    Level10 : AudioInfoFrameLevelShiftValue # 10
    Level11 : AudioInfoFrameLevelShiftValue # 11
    Level12 : AudioInfoFrameLevelShiftValue # 12
    Level13 : AudioInfoFrameLevelShiftValue # 13
    Level14 : AudioInfoFrameLevelShiftValue # 14
    Level15 : AudioInfoFrameLevelShiftValue # 15


class AudioInfoFrameSampleSize(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ReferToHeader : AudioInfoFrameSampleSize # 0
    BitSize16 : AudioInfoFrameSampleSize # 1
    BitSize20 : AudioInfoFrameSampleSize # 2
    BitSize24 : AudioInfoFrameSampleSize # 3


class AudioInfoFrameSamplingFrequency(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ReferToHeader : AudioInfoFrameSamplingFrequency # 0
    Frequency32k : AudioInfoFrameSamplingFrequency # 1
    Frequency44k : AudioInfoFrameSamplingFrequency # 2
    Frequency48k : AudioInfoFrameSamplingFrequency # 3
    Frequency88k : AudioInfoFrameSamplingFrequency # 4
    Frequency96k : AudioInfoFrameSamplingFrequency # 5
    Frequency176k : AudioInfoFrameSamplingFrequency # 6
    Frequency192k : AudioInfoFrameSamplingFrequency # 7


class AutoGeneratorLevelMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    TargetDistortion : AutoGeneratorLevelMode # 0
    MinimumDistortion : AutoGeneratorLevelMode # 1
    MeasuredLevel : AutoGeneratorLevelMode # 2


class AutoRetryMeasurementFailureBehavior(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ContinueSequence : AutoRetryMeasurementFailureBehavior # 0
    CancelSequence : AutoRetryMeasurementFailureBehavior # 1


class AutoSaveReportFileNameType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    AutoGenerate : AutoSaveReportFileNameType # 0
    PromptUser : AutoSaveReportFileNameType # 1
    CustomPrefix : AutoSaveReportFileNameType # 2


class AuxControl:
    @property
    def ByteValue(self) -> int: ...
    @ByteValue.setter
    def ByteValue(self, value: int) -> int: ...
    def Reset(self) -> None: ...
    # Skipped GetState due to it being static, abstract and generic.

    GetState : GetState_MethodGroup
    class GetState_MethodGroup:
        @typing.overload
        def __call__(self, bit: int) -> AuxControlState:...
        @typing.overload
        def __call__(self, bit: AuxControlBit) -> AuxControlState:...

    # Skipped SetState due to it being static, abstract and generic.

    SetState : SetState_MethodGroup
    class SetState_MethodGroup:
        @typing.overload
        def __call__(self, bit: int, state: AuxControlState) -> None:...
        @typing.overload
        def __call__(self, bit: AuxControlBit, state: AuxControlState) -> None:...



class AuxControlBit(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Bit1 : AuxControlBit # 0
    Bit2 : AuxControlBit # 1
    Bit3 : AuxControlBit # 2
    Bit4 : AuxControlBit # 3
    Bit5 : AuxControlBit # 4
    Bit6 : AuxControlBit # 5
    Bit7 : AuxControlBit # 6
    Bit8 : AuxControlBit # 7


class AuxControlMonitor:
    @property
    def AuxControlInputValue(self) -> int: ...
    @property
    def AuxControlOutputValue(self) -> int: ...
    @AuxControlOutputValue.setter
    def AuxControlOutputValue(self, value: int) -> int: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def UndockedHeight(self) -> int: ...
    @UndockedHeight.setter
    def UndockedHeight(self, value: int) -> int: ...
    @property
    def UndockedLeft(self) -> int: ...
    @UndockedLeft.setter
    def UndockedLeft(self, value: int) -> int: ...
    @property
    def UndockedTop(self) -> int: ...
    @UndockedTop.setter
    def UndockedTop(self, value: int) -> int: ...
    @property
    def UndockedWidth(self) -> int: ...
    @UndockedWidth.setter
    def UndockedWidth(self, value: int) -> int: ...
    def Dock(self) -> None: ...
    def GetOutputPinState(self, pin: int) -> bool: ...
    def Maximize(self) -> None: ...
    def Minimize(self) -> None: ...
    def Restore(self) -> None: ...
    def SetOutputPinState(self, pin: int, pinState: bool) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...


class AuxControlState(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    DontCare : AuxControlState # 0
    On : AuxControlState # 1
    Off : AuxControlState # 2


class AveragingType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Power : AveragingType # 0
    Synchronous : AveragingType # 1
    MaxHold : AveragingType # 2
    MinHold : AveragingType # 3


class AvrcpSetAbsoluteVolumeStep:
    @property
    def AbsoluteVolume(self) -> int: ...
    @AbsoluteVolume.setter
    def AbsoluteVolume(self, value: int) -> int: ...
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class AvrcpSetAbsoluteVolumeStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> AvrcpSetAbsoluteVolumeStep: ...
    def Add(self) -> AvrcpSetAbsoluteVolumeStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class AxisDataType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : AxisDataType # 0
    ThdLevel : AxisDataType # 1
    ThdRatio : AxisDataType # 2
    Gain : AxisDataType # 3
    Linearity : AxisDataType # 4
    SinadRatio : AxisDataType # 5
    Level : AxisDataType # 6
    RmsLevelAcPlusDc : AxisDataType # 7
    PeakLevel : AxisDataType # 8
    CrestFactor : AxisDataType # 9
    ThdNLevel : AxisDataType # 10
    ThdNRatio : AxisDataType # 11
    Phase : AxisDataType # 12
    Crosstalk : AxisDataType # 13
    GroupDelay : AxisDataType # 14
    DistortionProductLevel : AxisDataType # 15
    DistortionProductRatio : AxisDataType # 16
    InstantaneousLevel : AxisDataType # 17
    InstantaneousOutputLevel : AxisDataType # 18
    RelativeLevel : AxisDataType # 19
    GeneratorLevel : AxisDataType # 20
    GeneratorOffset : AxisDataType # 21
    MeasuredLevel : AxisDataType # 22
    Time : AxisDataType # 23
    ScopeTime : AxisDataType # 24
    WaveformTime : AxisDataType # 25
    Frequency : AxisDataType # 26
    DistortionProductFrequency : AxisDataType # 27
    FftFrequency : AxisDataType # 28
    FftLevel : AxisDataType # 29
    SignalToNoiseRatio : AxisDataType # 30
    DcLevel : AxisDataType # 31
    AverageJitterLevel : AxisDataType # 32
    ImdRatio : AxisDataType # 33
    DfdRatio : AxisDataType # 34
    SmpteRatio : AxisDataType # 35
    ModRatio : AxisDataType # 36
    CcifRatio : AxisDataType # 37
    SmpteDinRatio : AxisDataType # 38
    SmpteModAxisFrequency1 : AxisDataType # 39
    SmpteModAxisFrequency2 : AxisDataType # 40
    CcifDfdAxisFrequency1 : AxisDataType # 41
    CcifDfdAxisFrequency2 : AxisDataType # 42
    TotalDifferenceFrequencyDistortion : AxisDataType # 43
    DifferenceFrequencyDistortion : AxisDataType # 44
    DifferenceFrequencyDistortionRatio : AxisDataType # 45
    Deviation : AxisDataType # 46
    Cmrr : AxisDataType # 47
    Bits : AxisDataType # 48
    ErrorRate : AxisDataType # 49
    Errors : AxisDataType # 50
    Metadata : AxisDataType # 51
    DynamicRange : AxisDataType # 52
    DimRatio : AxisDataType # 53
    Delay : AxisDataType # 54
    Ratio : AxisDataType # 55
    FrequencyShift : AxisDataType # 56
    HarmonicSumRatio : AxisDataType # 57
    HarmonicSumLevel : AxisDataType # 58
    Enob : AxisDataType # 59
    BandpassLevel : AxisDataType # 60
    QpeakLevel : AxisDataType # 61
    Psr : AxisDataType # 62
    PsrPlusN : AxisDataType # 63
    Psrr : AxisDataType # 64
    PsrrPlusN : AxisDataType # 65
    Pesq : AxisDataType # 66
    Polqa : AxisDataType # 67
    PolqaTable : AxisDataType # 68
    Mos : AxisDataType # 69
    MosAverage : AxisDataType # 70
    RubAndBuzzCrestFactor : AxisDataType # 71
    RubAndBuzzPeakRatio : AxisDataType # 72
    ModulatedNoiseRatio : AxisDataType # 73
    ThieleSmall : AxisDataType # 74
    DcxVolts : AxisDataType # 75
    DcxOhms : AxisDataType # 76
    DcxDcv1Level : AxisDataType # 77
    DcxDcv2Level : AxisDataType # 78
    Frames : AxisDataType # 79
    CustomX : AxisDataType # 80
    CustomY : AxisDataType # 81
    Custom : AxisDataType # 82
    Channel : AxisDataType # 83
    FileNumber : AxisDataType # 84
    Energy : AxisDataType # 85
    ImpulseResponse : AxisDataType # 86
    NoiseDensity : AxisDataType # 87
    TdPlusNLevel : AxisDataType # 88
    TdPlusNRatio : AxisDataType # 89
    AmplitudeSpectralDensity : AxisDataType # 90
    PowerSpectralDensity : AxisDataType # 91
    TransitionTime : AxisDataType # 92
    Bitstream : AxisDataType # 93
    Derived : AxisDataType # 94
    PassFail : AxisDataType # 95
    ImpedanceMagnitude : AxisDataType # 96
    ImpedancePhase : AxisDataType # 97
    ImpedanceReal : AxisDataType # 98
    ImpedanceImaginary : AxisDataType # 99
    NoiseLevel : AxisDataType # 100
    NoiseRatio : AxisDataType # 101
    DigitalInterfaceLevel : AxisDataType # 102
    JitterLevel : AxisDataType # 103
    JitterLevelUi : AxisDataType # 104
    JitterLevelSec : AxisDataType # 105
    OutputSampleRate : AxisDataType # 106
    InputSampleRate : AxisDataType # 107
    RefSyncOutputRate : AxisDataType # 108
    LevelRatio : AxisDataType # 109
    SampleRate : AxisDataType # 110
    Statistics : AxisDataType # 111
    Offset : AxisDataType # 112
    Compare : AxisDataType # 113
    DataDistribution : AxisDataType # 114
    SpecifyXYSingleDataPoint : AxisDataType # 115
    Smooth : AxisDataType # 116
    SmoothTimeDomain : AxisDataType # 117
    Normalize : AxisDataType # 118
    SpecifyXYDataPoints : AxisDataType # 119
    CustomProcessing : AxisDataType # 120
    TabularData : AxisDataType # 121
    ImpulseResponseWindow : AxisDataType # 122
    TedsTabularData : AxisDataType # 123
    CrossCorrelation : AxisDataType # 124
    VBiasLevel : AxisDataType # 125
    Eq : AxisDataType # 126
    FrfGain : AxisDataType # 127
    FrfMagnitude : AxisDataType # 128
    FrfPhase : AxisDataType # 129
    FrfReal : AxisDataType # 130
    FrfImaginary : AxisDataType # 131
    Coherence : AxisDataType # 132
    FrfImpulseResponse : AxisDataType # 133
    Sensitivity : AxisDataType # 134
    AnsiS322FitLimits : AxisDataType # 135
    HOHD : AxisDataType # 136
    Phons : AxisDataType # 137
    SoneTracRubAndBuzz : AxisDataType # 138


class AxisType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    X : AxisType # 0
    Left : AxisType # 1
    Right : AxisType # 2


class BandpassFrequencySweepMeasurement:
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def AvergeJitterLevel(self) -> XYGraph: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def Deviation(self) -> DeviationMeterGraph: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Gain(self) -> XYGraph: ...
    @property
    def Generator(self) -> SteppedFrequencySweepGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Level(self) -> XYGraph: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def PeakLevel(self) -> XYGraph: ...
    @property
    def RelativeLevel(self) -> RelativeLevelXYGraph: ...
    @property
    def Selectivity(self) -> BandpassSweepSelectivityType: ...
    @Selectivity.setter
    def Selectivity(self, value: BandpassSweepSelectivityType) -> BandpassSweepSelectivityType: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def Settling(self) -> BandpassFrequencySweepSettlingParametersCollection: ...
    @property
    def SweepSignal(self) -> str: ...
    @SweepSignal.setter
    def SweepSignal(self, value: str) -> str: ...
    @property
    def SweepSignalDefinition(self) -> SteppedFrequencySweepDefinition: ...
    @property
    def SweepSignalNames(self) -> Array_1[str]: ...
    @property
    def TrackChannel(self) -> TrackInputChannelIndex: ...
    @TrackChannel.setter
    def TrackChannel(self, value: TrackInputChannelIndex) -> TrackInputChannelIndex: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def LoadSweepSignalFile(self, fileName: str, replaceIfExists: bool) -> None: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class BandpassFrequencySweepSettlingParametersCollection:
    @property
    def Level(self) -> SettlingParameters: ...


class BandpassGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def SineDual(self) -> SineDualGenerator: ...
    @property
    def SineVarPhase(self) -> SineVarPhaseGenerator: ...
    @property
    def Type(self) -> SquarewaveGeneratorType: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class BandpassLevelMeasurement:
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def AvergeJitterLevel(self) -> MeterGraph: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def FilterTuningMode(self) -> FilterTuningType: ...
    @FilterTuningMode.setter
    def FilterTuningMode(self, value: FilterTuningType) -> FilterTuningType: ...
    @property
    def FixedTuningFrequency(self) -> DoubleSetting: ...
    @property
    def Generator(self) -> BandpassGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Level(self) -> MeterGraph: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def PeakLevel(self) -> MeterGraph: ...
    @property
    def RectangularBandMaxFrequency(self) -> DoubleSetting: ...
    @property
    def RectangularBandMinFrequency(self) -> DoubleSetting: ...
    @property
    def Selectivity(self) -> BandpassSelectivityType: ...
    @Selectivity.setter
    def Selectivity(self, value: BandpassSelectivityType) -> BandpassSelectivityType: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def Settling(self) -> BandpassSettlingParametersCollection: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class BandpassLevelSweepMeasurement:
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def AvergeJitterLevel(self) -> XYGraph: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def FilterTuningMode(self) -> FilterTuningType: ...
    @FilterTuningMode.setter
    def FilterTuningMode(self, value: FilterTuningType) -> FilterTuningType: ...
    @property
    def FixedTuningFrequency(self) -> DoubleSetting: ...
    @property
    def Gain(self) -> XYGraph: ...
    @property
    def Generator(self) -> SteppedLevelSweepGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Level(self) -> XYGraph: ...
    @property
    def Linearity(self) -> LinearityXYGraph: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def PeakLevel(self) -> XYGraph: ...
    @property
    def RectangularBandMaxFrequency(self) -> DoubleSetting: ...
    @property
    def RectangularBandMinFrequency(self) -> DoubleSetting: ...
    @property
    def Selectivity(self) -> BandpassSelectivityType: ...
    @Selectivity.setter
    def Selectivity(self, value: BandpassSelectivityType) -> BandpassSelectivityType: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def Settling(self) -> BandpassLevelSweepSettlingParametersCollection: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class BandpassLevelSweepSettlingParametersCollection:
    @property
    def Level(self) -> SettlingParameters: ...


class BandpassSelectivityType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    WindowWidth : BandpassSelectivityType # 0
    Octave24 : BandpassSelectivityType # 1
    Octave12 : BandpassSelectivityType # 2
    Octave9 : BandpassSelectivityType # 3
    Octave6 : BandpassSelectivityType # 4
    Octave3 : BandpassSelectivityType # 5
    Octave1 : BandpassSelectivityType # 6
    RectangularBand : BandpassSelectivityType # 7


class BandpassSettlingParametersCollection:
    @property
    def Level(self) -> SettlingParameters: ...


class BandpassSweepSelectivityType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    WindowWidth : BandpassSweepSelectivityType # 0
    Octave24 : BandpassSweepSelectivityType # 1
    Octave12 : BandpassSweepSelectivityType # 2
    Octave9 : BandpassSweepSelectivityType # 3
    Octave6 : BandpassSweepSelectivityType # 4
    Octave3 : BandpassSweepSelectivityType # 5
    Octave1 : BandpassSweepSelectivityType # 6


class BaseSetting:
    @property
    def Active(self) -> bool: ...
    @property
    def IsEnabled(self) -> bool: ...
    @property
    def Values(self) -> Array_1[str]: ...


class BaseXYGraph:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class BatchMeasurement:
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class BatchMeasurementWithAppend:
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class BatchSineGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class BatchSineWithArbGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def Type(self) -> GeneratorType: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class BatchSplitSineGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def SineDual(self) -> SineDualGenerator: ...
    @property
    def SineVarPhase(self) -> SineVarPhaseGenerator: ...
    @property
    def Type(self) -> SplitSineGeneratorType: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class BatchSplitSineWithArbGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def SineDual(self) -> SineDualGenerator: ...
    @property
    def SineVarPhase(self) -> SineVarPhaseGenerator: ...
    @property
    def Type(self) -> SplitSineWithFileGeneratorType: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class BatchSquareWithArbGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def SineDual(self) -> SineDualGenerator: ...
    @property
    def SineVarPhase(self) -> SineVarPhaseGenerator: ...
    @property
    def Type(self) -> SquarewaveGeneratorType: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class BatteryCurrentInputSettings:
    def ZeroAdjust(self) -> None: ...


class BenchMode:
    @property
    def ActiveMeasurement(self) -> BenchModeMeasurementType: ...
    @ActiveMeasurement.setter
    def ActiveMeasurement(self, value: BenchModeMeasurementType) -> BenchModeMeasurementType: ...
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Analyzer(self) -> BenchModeAnalyzer: ...
    @property
    def Generator(self) -> BenchModeGenerator: ...
    @property
    def GeneratorAnalyzerSettingsVisible(self) -> bool: ...
    @GeneratorAnalyzerSettingsVisible.setter
    def GeneratorAnalyzerSettingsVisible(self, value: bool) -> bool: ...
    @property
    def Measurements(self) -> BenchModeMeasurementCollection: ...
    @property
    def Meters(self) -> BenchModeMeterCollection: ...
    @property
    def Monitors(self) -> BenchModeMonitorCollection: ...
    @property
    def Setup(self) -> BenchModeSignalPathSettings: ...
    @property
    def SignalPathSettingsVisible(self) -> bool: ...
    @SignalPathSettingsVisible.setter
    def SignalPathSettingsVisible(self, value: bool) -> bool: ...
    def CreateSettlingConfiguration(self) -> MeterSettlingConfiguration: ...
    # Skipped GetSettledMeterReadings due to it being static, abstract and generic.

    GetSettledMeterReadings : GetSettledMeterReadings_MethodGroup
    class GetSettledMeterReadings_MethodGroup:
        @typing.overload
        def __call__(self, meterType: Array_1[SettlingMeterType]) -> SettledResultCollection:...
        @typing.overload
        def __call__(self, configuration: MeterSettlingConfiguration) -> SettledResultCollection:...



class BenchModeAnalyzer:
    @property
    def BandpassFilterBandwidth(self) -> NthOctave: ...
    @BandpassFilterBandwidth.setter
    def BandpassFilterBandwidth(self, value: NthOctave) -> NthOctave: ...
    @property
    def BandpassFilterTuning(self) -> FilterTuningType: ...
    @BandpassFilterTuning.setter
    def BandpassFilterTuning(self, value: FilterTuningType) -> FilterTuningType: ...
    @property
    def BandpassFixedFilterFrequency(self) -> DoubleSetting: ...
    @property
    def ImdMeterType(self) -> ImdAnalysisType: ...
    @ImdMeterType.setter
    def ImdMeterType(self, value: ImdAnalysisType) -> ImdAnalysisType: ...
    @property
    def NotchFilterFrequency(self) -> DoubleSetting: ...
    @property
    def NotchFilterTuning(self) -> FilterTuningType: ...
    @NotchFilterTuning.setter
    def NotchFilterTuning(self, value: FilterTuningType) -> FilterTuningType: ...
    @property
    def Regulation(self) -> AnalyzerRegulationSettings: ...
    @property
    def Settling(self) -> SettlingParametersExCollection: ...
    @property
    def ThdNWeighting(self) -> SignalPathWeightingFilterType: ...
    @ThdNWeighting.setter
    def ThdNWeighting(self, value: SignalPathWeightingFilterType) -> SignalPathWeightingFilterType: ...
    def GetReferenceChannelForInput(self, input: APxInputSelection) -> InputChannelIndex: ...
    def SetReferenceChannelForInput(self, input: APxInputSelection, ch: InputChannelIndex) -> None: ...
    def SettlingForInput(self, input: APxInputSelection) -> SettlingParametersExCollection: ...


class BenchModeDcxSettings:
    @property
    def Dmm(self) -> Dmm: ...
    def GetEnable(self, channel: DcxDcvChannel) -> bool: ...
    def GetLevel(self, channel: DcxDcvChannel) -> float: ...
    def SetEnable(self, channel: DcxDcvChannel, state: bool) -> None: ...
    def SetLevel(self, channel: DcxDcvChannel, level: float) -> None: ...
    # Skipped GetState due to it being static, abstract and generic.

    GetState : GetState_MethodGroup
    class GetState_MethodGroup:
        @typing.overload
        def __call__(self, port: DcxPort) -> int:...
        @typing.overload
        def __call__(self, port: DcxPort, bit: int) -> AuxControlState:...

    # Skipped SetState due to it being static, abstract and generic.

    SetState : SetState_MethodGroup
    class SetState_MethodGroup:
        @typing.overload
        def __call__(self, port: DcxPort, value: int) -> None:...
        @typing.overload
        def __call__(self, port: DcxPort, bit: int, state: AuxControlState) -> None:...



class BenchModeGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def AutoOn(self) -> bool: ...
    @AutoOn.setter
    def AutoOn(self, value: bool) -> bool: ...
    @property
    def ConstantValues(self) -> ConstantValues: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def Imd(self) -> ImdGeneratorSettings: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def LoopWaveform(self) -> bool: ...
    @LoopWaveform.setter
    def LoopWaveform(self, value: bool) -> bool: ...
    @property
    def NoiseShape(self) -> NoiseShape: ...
    @NoiseShape.setter
    def NoiseShape(self, value: NoiseShape) -> NoiseShape: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def RepeatWaveformCount(self) -> int: ...
    @RepeatWaveformCount.setter
    def RepeatWaveformCount(self, value: int) -> int: ...
    @property
    def SamplesPerStep(self) -> int: ...
    @SamplesPerStep.setter
    def SamplesPerStep(self, value: int) -> int: ...
    @property
    def SineBurst(self) -> SineBurstGeneratorSettings: ...
    @property
    def SineDual(self) -> SineDualGenerator: ...
    @property
    def SineVarPhase(self) -> SineVarPhaseGenerator: ...
    @property
    def Type(self) -> SplitSineWithFileGeneratorType: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class BenchModeMeasurement:
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def Function(self) -> BenchTestFunction: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def HasError(self) -> bool: ...
    @property
    def IsStarted(self) -> bool: ...
    @property
    def LastErrorCode(self) -> APError: ...
    @property
    def LastErrorMessage(self) -> str: ...
    @property
    def Repeat(self) -> bool: ...
    @Repeat.setter
    def Repeat(self, value: bool) -> bool: ...
    def Analyze(self) -> None: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Show(self) -> None: ...
    def Start(self) -> None: ...
    def Stop(self) -> None: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class BenchModeMeasurementCollection:
    @property
    def AcousticResponse(self) -> AcousticResponse: ...
    @property
    def ContinuousSweep(self) -> ContinuousSweep: ...
    @property
    def Fft(self) -> FftAnalyzer: ...
    @property
    def Recorder(self) -> RecorderSettings: ...
    @property
    def SteppedSweep(self) -> SteppedSweep: ...
    @property
    def TransferFunction(self) -> TransferFunction: ...


class BenchModeMeasurementType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    MonitorsAndMeters : BenchModeMeasurementType # 0
    Sweep : BenchModeMeasurementType # 1
    FFT : BenchModeMeasurementType # 2
    Recorder : BenchModeMeasurementType # 3
    ContinuousSweep : BenchModeMeasurementType # 4
    AcousticResponse : BenchModeMeasurementType # 5
    TransferFunction : BenchModeMeasurementType # 6


class BenchModeMeterCollection:
    @property
    def BitsMeterType(self) -> ActiveDataBitsType: ...
    @BitsMeterType.setter
    def BitsMeterType(self, value: ActiveDataBitsType) -> ActiveDataBitsType: ...
    @property
    def Count(self) -> int: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def MetersVisible(self) -> bool: ...
    @MetersVisible.setter
    def MetersVisible(self, value: bool) -> bool: ...
    def GetMeterType(self, monitorIndex: int) -> BenchModeMeterType: ...
    def GetReadingChannel(self, meterIndex: int, readingIndex: BenchModeMeterReadingIndex) -> int: ...
    def SaveMeterData(self, fileName: str, append: bool) -> None: ...
    def SetReadingChannel(self, meterIndex: int, readingIndex: BenchModeMeterReadingIndex, channelIndex: int) -> None: ...
    def Show(self) -> None: ...
    # Skipped Add due to it being static, abstract and generic.

    Add : Add_MethodGroup
    class Add_MethodGroup:
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType) -> None:...
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType, input: APxInputSelection) -> None:...

    # Skipped Contains due to it being static, abstract and generic.

    Contains : Contains_MethodGroup
    class Contains_MethodGroup:
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType) -> bool:...
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType, input: APxInputSelection) -> bool:...

    # Skipped GetChannelCount due to it being static, abstract and generic.

    GetChannelCount : GetChannelCount_MethodGroup
    class GetChannelCount_MethodGroup:
        @typing.overload
        def __call__(self, meterIndex: int) -> int:...
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType) -> int:...
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType, input: APxInputSelection) -> int:...

    # Skipped GetDisplaySettings due to it being static, abstract and generic.

    GetDisplaySettings : GetDisplaySettings_MethodGroup
    class GetDisplaySettings_MethodGroup:
        @typing.overload
        def __call__(self, meterIndex: int) -> GraphAxis:...
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType) -> GraphAxis:...
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType, input: APxInputSelection) -> GraphAxis:...

    # Skipped GetLimitSettings due to it being static, abstract and generic.

    GetLimitSettings : GetLimitSettings_MethodGroup
    class GetLimitSettings_MethodGroup:
        @typing.overload
        def __call__(self, meterIndex: int) -> MeterLimits:...
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType) -> MeterLimits:...
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType, input: APxInputSelection) -> MeterLimits:...

    # Skipped GetMaxValues due to it being static, abstract and generic.

    GetMaxValues : GetMaxValues_MethodGroup
    class GetMaxValues_MethodGroup:
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType, unit: str) -> Array_1[float]:...
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType, input: APxInputSelection, unit: str) -> Array_1[float]:...

    # Skipped GetMinValues due to it being static, abstract and generic.

    GetMinValues : GetMinValues_MethodGroup
    class GetMinValues_MethodGroup:
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType, unit: str) -> Array_1[float]:...
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType, input: APxInputSelection, unit: str) -> Array_1[float]:...

    # Skipped GetReadings due to it being static, abstract and generic.

    GetReadings : GetReadings_MethodGroup
    class GetReadings_MethodGroup:
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType) -> Array_1[float]:...
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType, input: APxInputSelection) -> Array_1[float]:...
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType, unit: str) -> Array_1[float]:...
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType, input: APxInputSelection, unit: str) -> Array_1[float]:...

    # Skipped GetWarnings due to it being static, abstract and generic.

    GetWarnings : GetWarnings_MethodGroup
    class GetWarnings_MethodGroup:
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType) -> Array_1[str]:...
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType, input: APxInputSelection) -> Array_1[str]:...

    # Skipped IsValid due to it being static, abstract and generic.

    IsValid : IsValid_MethodGroup
    class IsValid_MethodGroup:
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType) -> bool:...
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType, input: APxInputSelection) -> bool:...

    # Skipped Remove due to it being static, abstract and generic.

    Remove : Remove_MethodGroup
    class Remove_MethodGroup:
        @typing.overload
        def __call__(self, monitorIndex: int) -> None:...
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType) -> None:...
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType, input: APxInputSelection) -> None:...

    # Skipped ResetMinMax due to it being static, abstract and generic.

    ResetMinMax : ResetMinMax_MethodGroup
    class ResetMinMax_MethodGroup:
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType) -> None:...
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType, input: APxInputSelection) -> None:...



class BenchModeMeterReadingIndex(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    MeterCh1 : BenchModeMeterReadingIndex # 0
    MeterCh2 : BenchModeMeterReadingIndex # 1


class BenchModeMeterType(MarshalByRefObject):
    AverageJitterLevelMeter : BenchModeMeterType
    BandpassLevelMeter : BenchModeMeterType
    BitErrorMeter : BenchModeMeterType
    BitsMeter : BenchModeMeterType
    CrestFactorMeter : BenchModeMeterType
    DataAxis : AxisDataType
    DcLevelMeter : BenchModeMeterType
    DcxOhmsMeter : BenchModeMeterType
    DcxVoltsMeter : BenchModeMeterType
    DigitalInterfaceLevelMeter : BenchModeMeterType
    Elements : Array_1[BenchModeMeterType]
    FrequencyMeter : BenchModeMeterType
    GainMeter : BenchModeMeterType
    ImdRatioMeter : BenchModeMeterType
    IsSettled : bool
    LevelRatioMeter : BenchModeMeterType
    Name : str
    PeakLevelMeter : BenchModeMeterType
    PhaseMeter : BenchModeMeterType
    RmsLevelMeter : BenchModeMeterType
    SampleRateMeter : BenchModeMeterType
    SinadRatioMeter : BenchModeMeterType
    ThdNLevelMeter : BenchModeMeterType
    ThdNRatioMeter : BenchModeMeterType
    def Equals(self, obj: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, obj1: BenchModeMeterType, obj2: typing.Any) -> bool: ...
    def __ne__(self, obj1: BenchModeMeterType, obj2: typing.Any) -> bool: ...


class BenchModeMonitorCollection:
    @property
    def Fft(self) -> FFTSpectrumSignalMonitorWindow: ...
    @property
    def Scope(self) -> ScopeSignalMonitorWindow: ...
    @property
    def XyMonitorsVisible(self) -> bool: ...
    @XyMonitorsVisible.setter
    def XyMonitorsVisible(self, value: bool) -> bool: ...


class BenchModeSignalPathSettings:
    @property
    def AcousticOutput(self) -> bool: ...
    @AcousticOutput.setter
    def AcousticOutput(self, value: bool) -> bool: ...
    @property
    def AdcTest(self) -> AdcTestSettings: ...
    @property
    def AdvancedDigitalOutput(self) -> AdvancedDigitalOutputSettings: ...
    @property
    def AnalogFileInputFullScaleVoltageRatio(self) -> float: ...
    @AnalogFileInputFullScaleVoltageRatio.setter
    def AnalogFileInputFullScaleVoltageRatio(self, value: float) -> float: ...
    @property
    def AnalogInput(self) -> AnalogInputSettings: ...
    @property
    def AnalogOutput(self) -> AnalogOutputSettings: ...
    @property
    def Asio(self) -> AsioSettings: ...
    @property
    def AutoChannels(self) -> bool: ...
    @AutoChannels.setter
    def AutoChannels(self, value: bool) -> bool: ...
    @property
    def AutoGeneratorLevel(self) -> ReferenceLevelsAutoGeneratorLevelSetter: ...
    @property
    def BatteryCurrentInput(self) -> BatteryCurrentInputSettings: ...
    @property
    def BatteryPowerOn(self) -> bool: ...
    @BatteryPowerOn.setter
    def BatteryPowerOn(self, value: bool) -> bool: ...
    @property
    def BatteryVoltage(self) -> DoubleSetting: ...
    @property
    def Bluetooth(self) -> BluetoothSignalPathSettings: ...
    @property
    def Channels(self) -> SignalPathMeasurandChannelCollection: ...
    @property
    def Clocks(self) -> ClockSyncSettings: ...
    @property
    def Dcx(self) -> BenchModeDcxSettings: ...
    @property
    def DeviceDelay(self) -> DoubleSetting: ...
    @property
    def DigitalInput(self) -> DigitalInputSettings: ...
    @property
    def DigitalOutput(self) -> SpdifDigitalOutputSettings: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Hdmi2ArcInput(self) -> Hdmi2ArcInputSettings: ...
    @property
    def Hdmi2ArcOutput(self) -> Hdmi2ArcOutputSettings: ...
    @property
    def Hdmi2EArcInput(self) -> Hdmi2eArcInputSettings: ...
    @property
    def Hdmi2EArcOutput(self) -> Hdmi2EArcOutputSettings: ...
    @property
    def Hdmi2Input(self) -> Hdmi2InputSettings: ...
    @property
    def Hdmi2Output(self) -> Hdmi2OutputSettings: ...
    @property
    def HdmiArcInput(self) -> HdmiArcInputSettings: ...
    @property
    def HdmiArcOutput(self) -> HdmiArcOutputSettings: ...
    @property
    def HdmiInput(self) -> HdmiInputSettings: ...
    @property
    def HdmiOutput(self) -> HdmiOutputSettings: ...
    @property
    def HeadphoneAmplifier(self) -> HeadphoneAmplifierSettings: ...
    @property
    def HighpassFilter(self) -> HighpassFilterMode: ...
    @HighpassFilter.setter
    def HighpassFilter(self, value: HighpassFilterMode) -> HighpassFilterMode: ...
    @property
    def HighpassFilterFrequency(self) -> float: ...
    @HighpassFilterFrequency.setter
    def HighpassFilterFrequency(self, value: float) -> float: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def InputChannelCount(self) -> int: ...
    @property
    def InputConnector(self) -> InputConnector: ...
    @property
    def InputEqChannels(self) -> InputEqSettingsCollection: ...
    @property
    def InputSwitcherConfiguration(self) -> InputSwitcherConfigurationCollection: ...
    @property
    def IsAnalogLoopbackSupported(self) -> bool: ...
    @property
    def IsApplicable(self) -> bool: ...
    @property
    def Loopback(self) -> bool: ...
    @Loopback.setter
    def Loopback(self, value: bool) -> bool: ...
    @property
    def LowpassFilterAnalog(self) -> LowpassFilterModeAnalog: ...
    @LowpassFilterAnalog.setter
    def LowpassFilterAnalog(self, value: LowpassFilterModeAnalog) -> LowpassFilterModeAnalog: ...
    @property
    def LowpassFilterAnalogBandwidth(self) -> AdcBandwidth: ...
    @LowpassFilterAnalogBandwidth.setter
    def LowpassFilterAnalogBandwidth(self, value: AdcBandwidth) -> AdcBandwidth: ...
    @property
    def LowpassFilterDigital(self) -> LowpassFilterModeDigital: ...
    @LowpassFilterDigital.setter
    def LowpassFilterDigital(self, value: LowpassFilterModeDigital) -> LowpassFilterModeDigital: ...
    @property
    def LowpassFilterFrequencyAnalog(self) -> float: ...
    @LowpassFilterFrequencyAnalog.setter
    def LowpassFilterFrequencyAnalog(self, value: float) -> float: ...
    @property
    def LowpassFilterFrequencyDigital(self) -> float: ...
    @LowpassFilterFrequencyDigital.setter
    def LowpassFilterFrequencyDigital(self, value: float) -> float: ...
    @property
    def Measure(self) -> MeasurandType: ...
    @Measure.setter
    def Measure(self, value: MeasurandType) -> MeasurandType: ...
    @property
    def MicBiasVoltageOn(self) -> bool: ...
    @MicBiasVoltageOn.setter
    def MicBiasVoltageOn(self, value: bool) -> bool: ...
    @property
    def MicInput(self) -> MicInputSettings: ...
    @property
    def OutputChannelCount(self) -> int: ...
    @property
    def OutputConnector(self) -> OutputConnector: ...
    @property
    def OutputEq(self) -> EqSettings: ...
    @property
    def OutputSwitcherConfiguration(self) -> OutputSwitcherConfigurationCollection: ...
    @property
    def PDM16Input(self) -> PDM16InputSettings: ...
    @property
    def PdmInput(self) -> PdmInputSettings: ...
    @property
    def PdmOutput(self) -> PdmOutputSettings: ...
    @property
    def PowerAmplifier(self) -> PowerAmplifierSettings: ...
    @property
    def References(self) -> References: ...
    @property
    def SerialDigitalReceiver(self) -> SerialDigitalReceiverSettings: ...
    @property
    def SerialDigitalTransmitter(self) -> SerialDigitalTransmitterSettings: ...
    @property
    def TedsCalibration(self) -> TedsCalibration: ...
    @property
    def TransducerInput(self) -> TransducerInputSetting: ...
    @property
    def TransducerOutput(self) -> TransducerOutputSetting: ...
    @property
    def Triggers(self) -> ExternalTriggerSettings: ...
    @property
    def UseInputSwitcher(self) -> bool: ...
    @UseInputSwitcher.setter
    def UseInputSwitcher(self, value: bool) -> bool: ...
    @property
    def UseOutputSwitcher(self) -> bool: ...
    @UseOutputSwitcher.setter
    def UseOutputSwitcher(self, value: bool) -> bool: ...
    @property
    def WeightingFilter(self) -> SignalPathWeightingFilterType: ...
    @WeightingFilter.setter
    def WeightingFilter(self, value: SignalPathWeightingFilterType) -> SignalPathWeightingFilterType: ...
    def InputSettings(self, input: APxInputSelection) -> SignalPathInputSettings: ...
    def ScanMicrophonePowerModules(self) -> Array_1[IMicrophonePowerModuleInfo]: ...


class BenchTestFunction(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Sweep : BenchTestFunction # 0
    FFT : BenchTestFunction # 1
    Recorder : BenchTestFunction # 2
    ContinuousSweep : BenchTestFunction # 3
    AcousticResponse : BenchTestFunction # 4
    TransferFunction : BenchTestFunction # 5


class BitClockAndFrameDir(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    In : BitClockAndFrameDir # 0
    Out : BitClockAndFrameDir # 1


class BitClockEdgeSync(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Rising : BitClockEdgeSync # 0
    Falling : BitClockEdgeSync # 1


class BitErrorAnalysisType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Instantaneous : BitErrorAnalysisType # 0
    Totalized : BitErrorAnalysisType # 1


class BitsGraph:
    @property
    def BitsAnalysis(self) -> ActiveDataBitsType: ...
    @BitsAnalysis.setter
    def BitsAnalysis(self, value: ActiveDataBitsType) -> ActiveDataBitsType: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    def CopyToClipboard(self) -> None: ...
    def Dock(self) -> None: ...
    def ExportData(self, fileName: str, append: bool) -> None: ...
    def GetValues(self) -> Array_1[int]: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...



class BleDeviceProfile(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NONE : BleDeviceProfile # 0
    A2DP : BleDeviceProfile # 1
    HFP : BleDeviceProfile # 2
    AVRCP : BleDeviceProfile # 4
    BLE : BleDeviceProfile # 8


class BleDeviceType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Earbud : BleDeviceType # 69
    Handset : BleDeviceType # 72
    Sink : BleDeviceType # 83
    Unknown : BleDeviceType # 85


class BleProfile(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : BleProfile # 0
    A2DP : BleProfile # 1
    AVRCP : BleProfile # 2
    AGHFP : BleProfile # 3
    HFP : BleProfile # 4
    BLE : BleProfile # 5
    SPP : BleProfile # 6
    URXM : BleProfile # 7
    URXV : BleProfile # 8
    UTXM : BleProfile # 9
    UTXV : BleProfile # 10
    BRX1 : BleProfile # 11
    BRX2 : BleProfile # 12


class BluetoothA2dpCodec(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    SBC : BluetoothA2dpCodec # 0
    APTx : BluetoothA2dpCodec # 1
    AptxLowLatency : BluetoothA2dpCodec # 2
    AptxHd : BluetoothA2dpCodec # 3
    AAC : BluetoothA2dpCodec # 4


class BluetoothA2dpSampleRate(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    SampleRate_16k : BluetoothA2dpSampleRate # 0
    SampleRate_32k : BluetoothA2dpSampleRate # 1
    SampleRate_44k : BluetoothA2dpSampleRate # 2
    SampleRate_48k : BluetoothA2dpSampleRate # 3


class BluetoothA2dpSinkSettings:
    @property
    def AvSyncDelay(self) -> float: ...
    @AvSyncDelay.setter
    def AvSyncDelay(self, value: float) -> float: ...
    @property
    def AvSyncReporting(self) -> BluetoothAvSyncReporting: ...
    @AvSyncReporting.setter
    def AvSyncReporting(self, value: BluetoothAvSyncReporting) -> BluetoothAvSyncReporting: ...


class BluetoothA2dpSourceSettings:
    @property
    def UseAvSyncDelayForSignalPathDelay(self) -> bool: ...
    @UseAvSyncDelayForSignalPathDelay.setter
    def UseAvSyncDelayForSignalPathDelay(self, value: bool) -> bool: ...


class BluetoothA2dpStreamStatus(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Started : BluetoothA2dpStreamStatus # 0
    Stopped : BluetoothA2dpStreamStatus # 1


class BluetoothAacCodecSettings:
    @property
    def CodecType(self) -> BluetoothA2dpCodec: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Priority(self) -> int: ...
    @Priority.setter
    def Priority(self, value: int) -> int: ...
    @property
    def VariableBitRate(self) -> bool: ...
    @VariableBitRate.setter
    def VariableBitRate(self, value: bool) -> bool: ...
    def EnableMpegVersion(self, mpeg: BluetoothAacMpegVersion, enabled: bool) -> None: ...
    def IsMpegVersionEnabled(self, mpeg: BluetoothAacMpegVersion) -> bool: ...
    def MoveDown(self) -> None: ...
    def MoveUp(self) -> None: ...


class BluetoothAacMpegVersion(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Mpeg2 : BluetoothAacMpegVersion # 0
    Mpeg4 : BluetoothAacMpegVersion # 1


class BluetoothAptxCodecSettings:
    @property
    def CodecType(self) -> BluetoothA2dpCodec: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Priority(self) -> int: ...
    @Priority.setter
    def Priority(self, value: int) -> int: ...
    def EnableSampleRate(self, rate: BluetoothAptxSampleRate, enabled: bool) -> None: ...
    def IsSampleRateEnabled(self, rate: BluetoothAptxSampleRate) -> bool: ...
    def MoveDown(self) -> None: ...
    def MoveUp(self) -> None: ...


class BluetoothAptxHdCodecSettings:
    @property
    def CodecType(self) -> BluetoothA2dpCodec: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Priority(self) -> int: ...
    @Priority.setter
    def Priority(self, value: int) -> int: ...
    def EnableSampleRate(self, rate: BluetoothAptxHdSampleRate, enabled: bool) -> None: ...
    def IsSampleRateEnabled(self, rate: BluetoothAptxHdSampleRate) -> bool: ...
    def MoveDown(self) -> None: ...
    def MoveUp(self) -> None: ...


class BluetoothAptxHdSampleRate(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    SampleRate_44k : BluetoothAptxHdSampleRate # 0
    SampleRate_48k : BluetoothAptxHdSampleRate # 1


class BluetoothAptxLowLatencyCodecSettings:
    @property
    def CodecType(self) -> BluetoothA2dpCodec: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Priority(self) -> int: ...
    @Priority.setter
    def Priority(self, value: int) -> int: ...
    def EnableSampleRate(self, rate: BluetoothAptxLowLatencySampleRate, enabled: bool) -> None: ...
    def IsSampleRateEnabled(self, rate: BluetoothAptxLowLatencySampleRate) -> bool: ...
    def MoveDown(self) -> None: ...
    def MoveUp(self) -> None: ...


class BluetoothAptxLowLatencySampleRate(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    SampleRate_44k : BluetoothAptxLowLatencySampleRate # 0
    SampleRate_48k : BluetoothAptxLowLatencySampleRate # 1


class BluetoothAptxSampleRate(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    SampleRate_16k : BluetoothAptxSampleRate # 0
    SampleRate_32k : BluetoothAptxSampleRate # 1
    SampleRate_44k : BluetoothAptxSampleRate # 2
    SampleRate_48k : BluetoothAptxSampleRate # 3


class BluetoothAtCommandInfo:
    @property
    def Command(self) -> str: ...
    @property
    def CommandType(self) -> BluetoothAtCommandInfoType: ...
    @property
    def Timestamp(self) -> DateTime: ...


class BluetoothAtCommandInfoLog(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> BluetoothAtCommandInfo: ...
    def Clear(self) -> None: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Save(self, fileName: str, appendIfExists: bool) -> None: ...


class BluetoothAtCommandInfoType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Sent : BluetoothAtCommandInfoType # 0
    Received : BluetoothAtCommandInfoType # 1


class BluetoothAtCommandWait(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Auto : BluetoothAtCommandWait # 0
    WaitForResponse : BluetoothAtCommandWait # 1
    DoNotWait : BluetoothAtCommandWait # 2


class BluetoothAudioProfile(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : BluetoothAudioProfile # 0
    A2DP : BluetoothAudioProfile # 1
    HFP : BluetoothAudioProfile # 2
    HSP : BluetoothAudioProfile # 3


class BluetoothAudioRouting(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : BluetoothAudioRouting # 0
    A2dp : BluetoothAudioRouting # 1
    Sco : BluetoothAudioRouting # 2


class BluetoothAvrcpCommand(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    VolumeUp : BluetoothAvrcpCommand # 0
    VolumeDown : BluetoothAvrcpCommand # 1
    Mute : BluetoothAvrcpCommand # 2
    Stop : BluetoothAvrcpCommand # 3
    Play : BluetoothAvrcpCommand # 4
    Pause : BluetoothAvrcpCommand # 5
    Rewind : BluetoothAvrcpCommand # 6
    FastForward : BluetoothAvrcpCommand # 7
    NextTrack : BluetoothAvrcpCommand # 8
    PreviousTrack : BluetoothAvrcpCommand # 9


class BluetoothAvrcpCommandInfo:
    @property
    def Command(self) -> str: ...
    @property
    def DisplayType(self) -> BluetoothAvrcpCommandInfoDisplayType: ...
    @property
    def IsReceived(self) -> bool: ...
    @property
    def Modifier(self) -> str: ...
    @property
    def Timestamp(self) -> DateTime: ...


class BluetoothAvrcpCommandInfoDisplayType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Command : BluetoothAvrcpCommandInfoDisplayType # 0
    EventStatus : BluetoothAvrcpCommandInfoDisplayType # 1


class BluetoothAvrcpCommandInfoFilter(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    All : BluetoothAvrcpCommandInfoFilter # 0
    Commands : BluetoothAvrcpCommandInfoFilter # 1
    EventsAndStatus : BluetoothAvrcpCommandInfoFilter # 2


class BluetoothAvrcpCommandInfoLog(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Filter(self) -> BluetoothAvrcpCommandInfoFilter: ...
    @Filter.setter
    def Filter(self, value: BluetoothAvrcpCommandInfoFilter) -> BluetoothAvrcpCommandInfoFilter: ...
    @property
    def Item(self) -> BluetoothAvrcpCommandInfo: ...
    def Clear(self) -> None: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Save(self, fileName: str, appendIfExists: bool) -> None: ...


class BluetoothAvrcpControllerSettings:
    @property
    def AbsoluteVolume(self) -> int: ...
    @AbsoluteVolume.setter
    def AbsoluteVolume(self, value: int) -> int: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def IsFastForwardPressed(self) -> bool: ...
    @property
    def IsRewindPressed(self) -> bool: ...
    @property
    def PlaybackPosition(self) -> int: ...
    @property
    def PlaybackStatus(self) -> BluetoothAvrcpPlaybackStatus: ...
    @property
    def Version(self) -> BluetoothAvrcpVersion: ...
    @Version.setter
    def Version(self, value: BluetoothAvrcpVersion) -> BluetoothAvrcpVersion: ...
    def SendCommand(self, command: BluetoothAvrcpCommand) -> None: ...


class BluetoothAvrcpEvent(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    AvrcpEventPlaybackStatusChanged : BluetoothAvrcpEvent # 1
    AvrcpEventTrackChanged : BluetoothAvrcpEvent # 2
    AvrcpEventTrackReachedEnd : BluetoothAvrcpEvent # 3
    AvrcpEventTrackReachedStart : BluetoothAvrcpEvent # 4
    AvrcpEventPlaybackPosChanged : BluetoothAvrcpEvent # 5
    AvrcpEventBattStatusChanged : BluetoothAvrcpEvent # 6
    AvrcpEventSystemStatusChanged : BluetoothAvrcpEvent # 7
    AvrcpEventPlayerAppSettingChanged : BluetoothAvrcpEvent # 8
    AvrcpEventNowPlayingContentChanged : BluetoothAvrcpEvent # 9
    AvrcpEventAvailablePlayersChanged : BluetoothAvrcpEvent # 10
    AvrcpEventAddressedPlayerChanged : BluetoothAvrcpEvent # 11
    AvrcpEventUidsChanged : BluetoothAvrcpEvent # 12
    AvrcpEventVolumeChanged : BluetoothAvrcpEvent # 13


class BluetoothAvrcpPlaybackStatus(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    AvrcpPlayStatusAuto : BluetoothAvrcpPlaybackStatus # 0
    AvrcpPlayStatusStopped : BluetoothAvrcpPlaybackStatus # 1
    AvrcpPlayStatusPlaying : BluetoothAvrcpPlaybackStatus # 2
    AvrcpPlayStatusPaused : BluetoothAvrcpPlaybackStatus # 3
    AvrcpPlayStatusFwdSeek : BluetoothAvrcpPlaybackStatus # 4
    AvrcpPlayStatusRevSeek : BluetoothAvrcpPlaybackStatus # 5
    AvrcpPlayStatusError : BluetoothAvrcpPlaybackStatus # 6


class BluetoothAvrcpSettingsBase:
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Version(self) -> BluetoothAvrcpVersion: ...
    @Version.setter
    def Version(self, value: BluetoothAvrcpVersion) -> BluetoothAvrcpVersion: ...


class BluetoothAvrcpTargetSettings:
    @property
    def AbsoluteVolume(self) -> int: ...
    @AbsoluteVolume.setter
    def AbsoluteVolume(self, value: int) -> int: ...
    @property
    def ApplyGeneratorSettings(self) -> bool: ...
    @ApplyGeneratorSettings.setter
    def ApplyGeneratorSettings(self, value: bool) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def PlaybackStatus(self) -> BluetoothAvrcpPlaybackStatus: ...
    @PlaybackStatus.setter
    def PlaybackStatus(self, value: BluetoothAvrcpPlaybackStatus) -> BluetoothAvrcpPlaybackStatus: ...
    @property
    def Version(self) -> BluetoothAvrcpVersion: ...
    @Version.setter
    def Version(self, value: BluetoothAvrcpVersion) -> BluetoothAvrcpVersion: ...


class BluetoothAvrcpVersion(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Version1_0 : BluetoothAvrcpVersion # 0
    Version1_4 : BluetoothAvrcpVersion # 1


class BluetoothAvSyncReporting(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Auto : BluetoothAvSyncReporting # 0
    Custom : BluetoothAvSyncReporting # 1


class BluetoothClockRecovery(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Auto : BluetoothClockRecovery # 0
    Fixed : BluetoothClockRecovery # 1


class BluetoothCodecSettings:
    @property
    def Aac(self) -> BluetoothAacCodecSettings: ...
    @property
    def Aptx(self) -> BluetoothAptxCodecSettings: ...
    @property
    def AptxHd(self) -> BluetoothAptxHdCodecSettings: ...
    @property
    def AptxLowLatency(self) -> BluetoothAptxLowLatencyCodecSettings: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> BluetoothCodecSettingsBase: ...
    @property
    def Sbc(self) -> BluetoothSbcCodecSettings: ...


class BluetoothCodecSettingsBase:
    @property
    def CodecType(self) -> BluetoothA2dpCodec: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Priority(self) -> int: ...
    @Priority.setter
    def Priority(self, value: int) -> int: ...
    def MoveDown(self) -> None: ...
    def MoveUp(self) -> None: ...


class BluetoothConnectProfile(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    All : BluetoothConnectProfile # 0
    A2DP : BluetoothConnectProfile # 1
    AVRCP : BluetoothConnectProfile # 2
    HFP : BluetoothConnectProfile # 3
    HSP : BluetoothConnectProfile # 4


class BluetoothDevice:
    @property
    def Address(self) -> str: ...
    @property
    def DeviceClass(self) -> str: ...
    @property
    def FriendlyName(self) -> str: ...
    @property
    def IsConnected(self) -> bool: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def IsPaired(self) -> bool: ...
    @property
    def LinkKey(self) -> str: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def Status(self) -> BluetoothDeviceStatus: ...
    def IsAvrcpEventSupported(self, eventType: BluetoothAvrcpEvent) -> bool: ...
    def QueryFriendlyName(self) -> str: ...


class BluetoothDeviceAutoConnectType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    FromScan : BluetoothDeviceAutoConnectType # 0
    FromPrompt : BluetoothDeviceAutoConnectType # 1
    FromDeviceAddress : BluetoothDeviceAutoConnectType # 2
    FromLastConnectedDeviceAddress : BluetoothDeviceAutoConnectType # 3
    FromVariable : BluetoothDeviceAutoConnectType # 4


class BluetoothDeviceCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> BluetoothDevice: ...
    def GetEnumerator(self) -> IEnumerator: ...


class BluetoothDeviceInfo:
    @property
    def Address(self) -> str: ...
    @property
    def DeviceClass(self) -> str: ...
    @property
    def FriendlyName(self) -> str: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...


class BluetoothDeviceInfoCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> BluetoothDeviceInfo: ...
    def Clear(self) -> None: ...
    def GetEnumerator(self) -> IEnumerator: ...
    # Skipped Remove due to it being static, abstract and generic.

    Remove : Remove_MethodGroup
    class Remove_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, address: str) -> None:...



class BluetoothDeviceListType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    All : BluetoothDeviceListType # 0
    PairedDevices : BluetoothDeviceListType # 1
    UnpairedDevices : BluetoothDeviceListType # 2


class BluetoothDeviceStatus(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Unknown : BluetoothDeviceStatus # 0
    Found : BluetoothDeviceStatus # 1
    Connected : BluetoothDeviceStatus # 2


class BluetoothDiscoverAndConnectMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Auto : BluetoothDiscoverAndConnectMode # 0
    NotDiscoverableNoConnect : BluetoothDiscoverAndConnectMode # 1


class BluetoothHfpAgCommand(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Dial : BluetoothHfpAgCommand # 0
    Ring : BluetoothHfpAgCommand # 1
    OpenSco : BluetoothHfpAgCommand # 2
    Hangup : BluetoothHfpAgCommand # 3
    CloseSco : BluetoothHfpAgCommand # 4


class BluetoothHfpHfCommand(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Answer : BluetoothHfpHfCommand # 0
    Hangup : BluetoothHfpHfCommand # 1
    Reject : BluetoothHfpHfCommand # 2
    OpenSco : BluetoothHfpHfCommand # 3
    CloseSco : BluetoothHfpHfCommand # 4


class BluetoothHfpHspCallStatus(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    CallInProgress : BluetoothHfpHspCallStatus # 0
    Ringing : BluetoothHfpHspCallStatus # 1
    NoCall : BluetoothHfpHspCallStatus # 2
    Dialing : BluetoothHfpHspCallStatus # 3
    CallHeld : BluetoothHfpHspCallStatus # 4
    CallHeldAndActiveCall : BluetoothHfpHspCallStatus # 5
    CallHeldAndRinging : BluetoothHfpHspCallStatus # 6


class BluetoothHfpHspScoStatus(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Open : BluetoothHfpHspScoStatus # 0
    Closed : BluetoothHfpHspScoStatus # 1


class BluetoothHspAgCommand(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    OpenSco : BluetoothHspAgCommand # 0
    CloseSco : BluetoothHspAgCommand # 1
    Ring : BluetoothHspAgCommand # 2


class BluetoothHspHsCommand(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Button : BluetoothHspHsCommand # 0
    OpenSco : BluetoothHspHsCommand # 1
    CloseSco : BluetoothHspHsCommand # 2


class BluetoothModuleVersion(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : BluetoothModuleVersion # 0
    BluetoothModuleFirstGeneration : BluetoothModuleVersion # 1
    BluetoothModuleFirstGenerationWithWidebandSpeech : BluetoothModuleVersion # 2
    BluetoothModuleSecondGeneration : BluetoothModuleVersion # 3


class BluetoothMonitor:
    @property
    def FieldCount(self) -> int: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def UndockedHeight(self) -> int: ...
    @UndockedHeight.setter
    def UndockedHeight(self, value: int) -> int: ...
    @property
    def UndockedLeft(self) -> int: ...
    @UndockedLeft.setter
    def UndockedLeft(self, value: int) -> int: ...
    @property
    def UndockedTop(self) -> int: ...
    @UndockedTop.setter
    def UndockedTop(self, value: int) -> int: ...
    @property
    def UndockedWidth(self) -> int: ...
    @UndockedWidth.setter
    def UndockedWidth(self, value: int) -> int: ...
    def Dock(self) -> None: ...
    def GetFieldName(self, fieldIndex: int) -> str: ...
    def GetFieldValue(self, fieldIndex: int) -> str: ...
    def Maximize(self) -> None: ...
    def Minimize(self) -> None: ...
    def Restore(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...


class BluetoothPacketSettings:
    @property
    def Latency(self) -> int: ...
    @Latency.setter
    def Latency(self, value: int) -> int: ...
    @property
    def Retransmission(self) -> BluetoothRetransmissionEffort: ...
    @Retransmission.setter
    def Retransmission(self, value: BluetoothRetransmissionEffort) -> BluetoothRetransmissionEffort: ...
    def GetPacketTypeEnabled(self, packetType: BluetoothPacketType) -> bool: ...
    def SetPacketTypeEnabled(self, packetType: BluetoothPacketType, enabled: bool) -> None: ...


class BluetoothPacketType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    HV1 : BluetoothPacketType # 0
    HV2 : BluetoothPacketType # 1
    HV3 : BluetoothPacketType # 2
    EV1 : BluetoothPacketType # 3
    EV2 : BluetoothPacketType # 4
    EV3 : BluetoothPacketType # 5
    EV3_2 : BluetoothPacketType # 6
    EV3_3 : BluetoothPacketType # 7
    EV5_2 : BluetoothPacketType # 8
    EV5_3 : BluetoothPacketType # 9


class BluetoothProfile(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    A2DPSource : BluetoothProfile # 0
    A2DPSink : BluetoothProfile # 1
    HFPAudioGateway : BluetoothProfile # 2
    HFPHandsFree : BluetoothProfile # 3
    HSPAudioGateway : BluetoothProfile # 4
    HSPHeadset : BluetoothProfile # 5
    AvrcpController : BluetoothProfile # 6
    AvrcpTarget : BluetoothProfile # 7
    None_ : BluetoothProfile # -1


class BluetoothProfileSet(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : BluetoothProfileSet # 0
    A2dpSourceHfpGatewayAvrcp : BluetoothProfileSet # 1
    A2dpSourceHspGatewayAvrcp : BluetoothProfileSet # 2
    A2dpSinkHfpHandsFreeAvrcp : BluetoothProfileSet # 3
    A2dpSinkHspHeadsetAvrcp : BluetoothProfileSet # 4


class BluetoothRetransmissionEffort(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NoRetransmission : BluetoothRetransmissionEffort # 0
    PowerSavingOptimized : BluetoothRetransmissionEffort # 1
    LinkQualityOptimized : BluetoothRetransmissionEffort # 2
    NoPreference : BluetoothRetransmissionEffort # 3


class BluetoothSbcChannelMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    JointStereo : BluetoothSbcChannelMode # 0
    Stereo : BluetoothSbcChannelMode # 1
    DualChannel : BluetoothSbcChannelMode # 2
    Mono : BluetoothSbcChannelMode # 3


class BluetoothSbcCodecSettings:
    @property
    def CodecType(self) -> BluetoothA2dpCodec: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def PreferredChannnelMode(self) -> BluetoothSbcChannelMode: ...
    @PreferredChannnelMode.setter
    def PreferredChannnelMode(self, value: BluetoothSbcChannelMode) -> BluetoothSbcChannelMode: ...
    @property
    def PreferredSampleRate(self) -> BluetoothSbcSampleRate: ...
    @PreferredSampleRate.setter
    def PreferredSampleRate(self, value: BluetoothSbcSampleRate) -> BluetoothSbcSampleRate: ...
    @property
    def Priority(self) -> int: ...
    @Priority.setter
    def Priority(self, value: int) -> int: ...
    def EnableChannelMode(self, channelMode: BluetoothSbcChannelMode, enabled: bool) -> None: ...
    def EnableSampleRate(self, rate: BluetoothSbcSampleRate, enabled: bool) -> None: ...
    def IsChannelModeEnabled(self, channelMode: BluetoothSbcChannelMode) -> bool: ...
    def IsSampleRateEnabled(self, rate: BluetoothSbcSampleRate) -> bool: ...
    def MoveDown(self) -> None: ...
    def MoveUp(self) -> None: ...


class BluetoothSbcSampleRate(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    SampleRate_16k : BluetoothSbcSampleRate # 0
    SampleRate_32k : BluetoothSbcSampleRate # 1
    SampleRate_44k : BluetoothSbcSampleRate # 2
    SampleRate_48k : BluetoothSbcSampleRate # 3


class BluetoothSettings:
    @property
    def A2dpSink(self) -> BluetoothA2dpSinkSettings: ...
    @property
    def A2dpSource(self) -> BluetoothA2dpSourceSettings: ...
    @property
    def AcceptA2dpConnections(self) -> bool: ...
    @AcceptA2dpConnections.setter
    def AcceptA2dpConnections(self, value: bool) -> bool: ...
    @property
    def AcceptHfpHspConnections(self) -> bool: ...
    @AcceptHfpHspConnections.setter
    def AcceptHfpHspConnections(self, value: bool) -> bool: ...
    @property
    def AtCommandsLog(self) -> BluetoothAtCommandInfoLog: ...
    @property
    def AutoAnswerHfpHspCalls(self) -> bool: ...
    @AutoAnswerHfpHspCalls.setter
    def AutoAnswerHfpHspCalls(self, value: bool) -> bool: ...
    @property
    def AutoClassOfDevice(self) -> bool: ...
    @AutoClassOfDevice.setter
    def AutoClassOfDevice(self, value: bool) -> bool: ...
    @property
    def AvrcpCommandsLog(self) -> BluetoothAvrcpCommandInfoLog: ...
    @property
    def AvrcpController(self) -> BluetoothAvrcpControllerSettings: ...
    @property
    def AvrcpTarget(self) -> BluetoothAvrcpTargetSettings: ...
    @property
    def ClockRecovery(self) -> BluetoothClockRecovery: ...
    @ClockRecovery.setter
    def ClockRecovery(self, value: BluetoothClockRecovery) -> BluetoothClockRecovery: ...
    @property
    def CodecSettings(self) -> BluetoothCodecSettings: ...
    @property
    def ConnectedDevice(self) -> BluetoothDevice: ...
    @property
    def CustomClassOfDevice(self) -> str: ...
    @CustomClassOfDevice.setter
    def CustomClassOfDevice(self, value: str) -> str: ...
    @property
    def DeviceAddress(self) -> str: ...
    @property
    def DeviceList(self) -> BluetoothDeviceCollection: ...
    @property
    def DiscoverAndConnectMode(self) -> BluetoothDiscoverAndConnectMode: ...
    @DiscoverAndConnectMode.setter
    def DiscoverAndConnectMode(self, value: BluetoothDiscoverAndConnectMode) -> BluetoothDiscoverAndConnectMode: ...
    @property
    def eScoSettings(self) -> BluetoothPacketSettings: ...
    @property
    def FindAllDevicesInInquiry(self) -> bool: ...
    @FindAllDevicesInInquiry.setter
    def FindAllDevicesInInquiry(self, value: bool) -> bool: ...
    @property
    def FriendlyName(self) -> str: ...
    @FriendlyName.setter
    def FriendlyName(self, value: str) -> str: ...
    @property
    def GetFriendlyNamesDuringInquiry(self) -> bool: ...
    @GetFriendlyNamesDuringInquiry.setter
    def GetFriendlyNamesDuringInquiry(self, value: bool) -> bool: ...
    @property
    def InquiryDeviceClass(self) -> str: ...
    @InquiryDeviceClass.setter
    def InquiryDeviceClass(self, value: str) -> str: ...
    @property
    def InquiryTimeout(self) -> int: ...
    @InquiryTimeout.setter
    def InquiryTimeout(self, value: int) -> int: ...
    @property
    def IsA2dpStreamingStarted(self) -> bool: ...
    @property
    def IsConnected(self) -> bool: ...
    @property
    def IsFirmwareUpdateRequired(self) -> bool: ...
    @property
    def KnownDevices(self) -> BluetoothDeviceInfoCollection: ...
    @property
    def MaintainConnection(self) -> bool: ...
    @MaintainConnection.setter
    def MaintainConnection(self, value: bool) -> bool: ...
    @property
    def MaxDevicesInInquiry(self) -> int: ...
    @MaxDevicesInInquiry.setter
    def MaxDevicesInInquiry(self, value: int) -> int: ...
    @property
    def ModuleVersion(self) -> BluetoothModuleVersion: ...
    @property
    def mSbcSettings(self) -> BluetoothPacketSettings: ...
    @property
    def ProfileSet(self) -> BluetoothProfileSet: ...
    @ProfileSet.setter
    def ProfileSet(self, value: BluetoothProfileSet) -> BluetoothProfileSet: ...
    @property
    def SinkDeviceAddress(self) -> str: ...
    @property
    def SourceDeviceAddress(self) -> str: ...
    @property
    def SspMode(self) -> BluetoothSspPairingMode: ...
    @SspMode.setter
    def SspMode(self, value: BluetoothSspPairingMode) -> BluetoothSspPairingMode: ...
    @property
    def SupportsWidebandSpeech(self) -> bool: ...
    @property
    def TransmitPower(self) -> BluetoothTransmitPower: ...
    @TransmitPower.setter
    def TransmitPower(self, value: BluetoothTransmitPower) -> BluetoothTransmitPower: ...
    @property
    def WidebandSpeechEnabled(self) -> bool: ...
    @WidebandSpeechEnabled.setter
    def WidebandSpeechEnabled(self, value: bool) -> bool: ...
    def ConnectAll(self, addr: str) -> None: ...
    def ConnectAvrcp(self, addr: str) -> None: ...
    def ConnectHfp(self, addr: str) -> None: ...
    def ConnectHsp(self, addr: str) -> None: ...
    def Disconnect(self) -> None: ...
    def HfpAudioGatewayCommand(self, command: BluetoothHfpAgCommand) -> None: ...
    def HfpHfpCommand(self, command: BluetoothHfpHfCommand) -> None: ...
    def HspAudioGatewayCommand(self, command: BluetoothHspAgCommand) -> None: ...
    def HspHsCommand(self, command: BluetoothHspHsCommand) -> None: ...
    def IsProfileConnected(self, profile: BluetoothProfile) -> bool: ...
    def QueryFriendlyName(self, address: str) -> str: ...
    def ScanForDevices(self, durationInSeconds: int) -> BluetoothDeviceCollection: ...
    def SendAvrcpCommand(self, command: BluetoothAvrcpCommand) -> None: ...
    def StartA2dpStreaming(self) -> None: ...
    def StopA2dpStreaming(self) -> None: ...
    def UnpairDevice(self, addr: str) -> None: ...
    # Skipped ClearDeviceList due to it being static, abstract and generic.

    ClearDeviceList : ClearDeviceList_MethodGroup
    class ClearDeviceList_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, listType: BluetoothDeviceListType) -> None:...

    # Skipped ConnectA2dp due to it being static, abstract and generic.

    ConnectA2dp : ConnectA2dp_MethodGroup
    class ConnectA2dp_MethodGroup:
        @typing.overload
        def __call__(self, addr: str) -> None:...
        @typing.overload
        def __call__(self, addr: str, codec: BluetoothA2dpCodec, sampleRate: BluetoothA2dpSampleRate, channelMode: BluetoothSbcChannelMode) -> None:...

    # Skipped PairWithDevice due to it being static, abstract and generic.

    PairWithDevice : PairWithDevice_MethodGroup
    class PairWithDevice_MethodGroup:
        @typing.overload
        def __call__(self, addr: str) -> bool:...
        @typing.overload
        def __call__(self, addr: str, pin: str) -> bool:...

    # Skipped SendATCommand due to it being static, abstract and generic.

    SendATCommand : SendATCommand_MethodGroup
    class SendATCommand_MethodGroup:
        @typing.overload
        def __call__(self, command: str) -> None:...
        @typing.overload
        def __call__(self, command: str, waitForResponse: BluetoothAtCommandWait) -> None:...



class BluetoothSignalPathSettings:
    @property
    def AudioProfile(self) -> BluetoothAudioProfile: ...
    @property
    def AutoConnectDeviceSettings(self) -> ConnectBluetoothDeviceSettings: ...
    @property
    def IsInputProfileValid(self) -> bool: ...
    @property
    def IsOutputProfileValid(self) -> bool: ...
    @property
    def SelectDeviceInSequence(self) -> SelectBluetoothDeviceType: ...
    @SelectDeviceInSequence.setter
    def SelectDeviceInSequence(self, value: SelectBluetoothDeviceType) -> SelectBluetoothDeviceType: ...


class BluetoothSspPairingMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    JustWorks : BluetoothSspPairingMode # 0
    NumericComparisonDisplayOnly : BluetoothSspPairingMode # 1
    NumericComparisonDisplayWithButtons : BluetoothSspPairingMode # 2
    NumericComparisonKeyboard : BluetoothSspPairingMode # 3


class BluetoothTransmitPower(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Minus20 : BluetoothTransmitPower # 0
    Minus16 : BluetoothTransmitPower # 1
    Minus12 : BluetoothTransmitPower # 2
    Minus8 : BluetoothTransmitPower # 3
    Minus4 : BluetoothTransmitPower # 4
    Zero : BluetoothTransmitPower # 5
    Plus4 : BluetoothTransmitPower # 6
    Plus8 : BluetoothTransmitPower # 7


class BroadcastSourceType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    AnalogOrI2s : BroadcastSourceType # 1
    A2DP : BroadcastSourceType # 2
    Auracast : BroadcastSourceType # 3


class BurstGenerator:
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def SignalType(self) -> BurstSignalType: ...
    @SignalType.setter
    def SignalType(self, value: BurstSignalType) -> BurstSignalType: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class BurstSignalType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Burst1kHz_20dB : BurstSignalType # 0
    Burst50Hz_20dB : BurstSignalType # 1


class CalibrateFromTedsAcousticStep:
    @property
    def ApplyTo(self) -> InputChannelIndex: ...
    @ApplyTo.setter
    def ApplyTo(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    @property
    def TedsInterface(self) -> TedsInterfaceType: ...
    @TedsInterface.setter
    def TedsInterface(self, value: TedsInterfaceType) -> TedsInterfaceType: ...
    @property
    def TedsMicrophoneId(self) -> int: ...
    @TedsMicrophoneId.setter
    def TedsMicrophoneId(self, value: int) -> int: ...
    @property
    def TedsSource(self) -> TransducerTedsChannel: ...
    @TedsSource.setter
    def TedsSource(self, value: TransducerTedsChannel) -> TransducerTedsChannel: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class CalibrateFromTedsAcousticStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> CalibrateFromTedsAcousticStep: ...
    def Add(self) -> CalibrateFromTedsAcousticStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class CalibrateFromTedsStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def SetdBSpl1(self) -> bool: ...
    @SetdBSpl1.setter
    def SetdBSpl1(self, value: bool) -> bool: ...
    @property
    def SetdBSpl2(self) -> bool: ...
    @SetdBSpl2.setter
    def SetdBSpl2(self, value: bool) -> bool: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    @property
    def TedsInterface(self) -> TedsInterfaceType: ...
    @TedsInterface.setter
    def TedsInterface(self, value: TedsInterfaceType) -> TedsInterfaceType: ...
    @property
    def TedsMicrophoneId(self) -> int: ...
    @TedsMicrophoneId.setter
    def TedsMicrophoneId(self, value: int) -> int: ...
    @property
    def TedsSource(self) -> TransducerTedsChannel: ...
    @TedsSource.setter
    def TedsSource(self, value: TransducerTedsChannel) -> TransducerTedsChannel: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class CalibrateFromTedsStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> CalibrateFromTedsStep: ...
    def Add(self) -> CalibrateFromTedsStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class CecCommandTypeEnum(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    InitiateARC_0xC0 : CecCommandTypeEnum # 0
    ReportARCInitiated_0xC1 : CecCommandTypeEnum # 1
    ReportARCTerminated_0xC2 : CecCommandTypeEnum # 2
    RequestARCInitiation_0xC3 : CecCommandTypeEnum # 3
    RequestARCTermination_0xC4 : CecCommandTypeEnum # 4
    TerminateARC_0xC5 : CecCommandTypeEnum # 5
    Ping : CecCommandTypeEnum # 6


class CecDeviceType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    DeviceTypeTv : CecDeviceType # 0
    DeviceTypeRec1 : CecDeviceType # 1
    DeviceTypeRec2 : CecDeviceType # 2
    DeviceTypeTune1 : CecDeviceType # 3
    DeviceTypePlay1 : CecDeviceType # 4
    DeviceTypeAudio : CecDeviceType # 5
    DeviceTypeTune2 : CecDeviceType # 6
    DeviceTypeTune3 : CecDeviceType # 7
    DeviceTypePlay2 : CecDeviceType # 8
    DeviceTypeRec3 : CecDeviceType # 9
    DeviceTypeTune4 : CecDeviceType # 10
    DeviceTypePlay3 : CecDeviceType # 11
    DeviceTypeRsvd1 : CecDeviceType # 12
    DeviceTypeRsvd2 : CecDeviceType # 13
    DeviceTypeSpec : CecDeviceType # 14
    DeviceTypeBroadcast : CecDeviceType # 15


class CecMessageSendFrom(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Source : CecMessageSendFrom # 0
    ArcTx : CecMessageSendFrom # 1
    Sink : CecMessageSendFrom # 2
    ArcRx : CecMessageSendFrom # 3


class CecMessageSendType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Ping : CecMessageSendType # 0
    Custom : CecMessageSendType # 1


class CecSendResult(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Ack : CecSendResult # 0
    CecOff : CecSendResult # 1
    BadReq : CecSendResult # 2
    NoLineAccess : CecSendResult # 3
    ArbitrationError : CecSendResult # 4
    TimingBitError : CecSendResult # 5
    Nak : CecSendResult # 6
    DataByteNak : CecSendResult # 7
    SendError : CecSendResult # 8
    Timeout : CecSendResult # 9
    Unknown : CecSendResult # 10


class ChannelInfo:
    @property
    def Channel(self) -> int: ...
    @property
    def Group(self) -> int: ...
    @property
    def IsInput(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def SampleType(self) -> AsioSampleType: ...


class ChannelStatusValidity(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Valid : ChannelStatusValidity # 0
    Invalid : ChannelStatusValidity # 1


class ChirpCrosstalkType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : ChirpCrosstalkType # 0
    HighSpeed : ChirpCrosstalkType # 1
    HighAccuracyOneChannelDriven : ChirpCrosstalkType # 2
    HighAccuracyOneChannelUndriven : ChirpCrosstalkType # 3


class ClearBluetoothDeviceListStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def DeviceListType(self) -> BluetoothDeviceListType: ...
    @DeviceListType.setter
    def DeviceListType(self, value: BluetoothDeviceListType) -> BluetoothDeviceListType: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class ClearBluetoothDeviceListStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ClearBluetoothDeviceListStep: ...
    def Add(self) -> ClearBluetoothDeviceListStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class ClearVariableValueStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    @property
    def VariableName(self) -> str: ...
    @VariableName.setter
    def VariableName(self, value: str) -> str: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class ClearVariableValueStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ClearVariableValueStep: ...
    def Add(self) -> ClearVariableValueStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class ClockDirection(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    In : ClockDirection # 0
    Out : ClockDirection # 1


class ClockSourceInfo:
    @property
    def AssociatedChannel(self) -> int: ...
    @property
    def AssociatedGroup(self) -> int: ...
    @property
    def Index(self) -> int: ...
    @property
    def Name(self) -> str: ...


class ClockSyncSettings:
    @property
    def CustomOutputRate(self) -> float: ...
    @CustomOutputRate.setter
    def CustomOutputRate(self, value: float) -> float: ...
    @property
    def DarsTermination(self) -> DarsInputTermination: ...
    @DarsTermination.setter
    def DarsTermination(self, value: DarsInputTermination) -> DarsInputTermination: ...
    @property
    def ExternalReferenceRate(self) -> DoubleSetting: ...
    @property
    def JitterGenerator(self) -> JitterGeneratorSettings: ...
    @property
    def OutputRateType(self) -> RefSyncOutputRate: ...
    @OutputRateType.setter
    def OutputRateType(self, value: RefSyncOutputRate) -> RefSyncOutputRate: ...
    @property
    def SyncOutLevel(self) -> DoubleSetting: ...
    @property
    def SyncOutPolarity(self) -> SyncOutPolarityMode: ...
    @SyncOutPolarity.setter
    def SyncOutPolarity(self, value: SyncOutPolarityMode) -> SyncOutPolarityMode: ...
    @property
    def TimebaseReference(self) -> TimebaseReferenceType: ...
    @TimebaseReference.setter
    def TimebaseReference(self, value: TimebaseReferenceType) -> TimebaseReferenceType: ...


class CmrrGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def SineDual(self) -> SineDualGenerator: ...
    @property
    def SineVarPhase(self) -> SineVarPhaseGenerator: ...
    @property
    def Type(self) -> SplitSineGeneratorType: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class CmrrIecGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def SineDual(self) -> SineDualGenerator: ...
    @property
    def SineVarPhase(self) -> SineVarPhaseGenerator: ...
    @property
    def Type(self) -> SplitSineGeneratorType: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class CmrrIecMeasurement:
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Cmrr(self) -> MeterGraph: ...
    @property
    def CmrrPin2(self) -> MeterGraph: ...
    @property
    def CmrrPin3(self) -> MeterGraph: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> CmrrIecGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def Settling(self) -> CmrrSettlingParametersCollection: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class CmrrMeasurement:
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Cmrr(self) -> MeterGraph: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> CmrrGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def Settling(self) -> CmrrSettlingParametersCollection: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class CmrrSettlingParametersCollection:
    @property
    def CommonMode(self) -> SettlingParameters: ...
    @property
    def Signal(self) -> SettlingParameters: ...


class CommonDigitalInputSettings:
    @property
    def FixedInputSampleRate(self) -> float: ...
    @FixedInputSampleRate.setter
    def FixedInputSampleRate(self, value: float) -> float: ...
    @property
    def ScaleFreqBy(self) -> InputFrequencyScalingType: ...
    @ScaleFreqBy.setter
    def ScaleFreqBy(self, value: InputFrequencyScalingType) -> InputFrequencyScalingType: ...


class CompareEncodeBitstreamPromptSettings:
    @property
    def ImageName(self) -> str: ...
    @ImageName.setter
    def ImageName(self, value: str) -> str: ...
    @property
    def ImageNames(self) -> Array_1[str]: ...
    @property
    def PlayAlertSound(self) -> bool: ...
    @PlayAlertSound.setter
    def PlayAlertSound(self, value: bool) -> bool: ...
    @property
    def RTF(self) -> str: ...
    @RTF.setter
    def RTF(self, value: str) -> str: ...
    @property
    def ShowCancel(self) -> bool: ...
    @ShowCancel.setter
    def ShowCancel(self, value: bool) -> bool: ...
    @property
    def Text(self) -> str: ...
    @Text.setter
    def Text(self, value: str) -> str: ...
    @property
    def TimeoutEnabled(self) -> bool: ...
    @TimeoutEnabled.setter
    def TimeoutEnabled(self, value: bool) -> bool: ...
    @property
    def TimeoutInSeconds(self) -> float: ...
    @TimeoutInSeconds.setter
    def TimeoutInSeconds(self, value: float) -> float: ...
    def ClearImage(self) -> None: ...
    def LoadImage(self, fileName: str, replaceIfExists: bool) -> None: ...


class CompareEncodedBitstreamError:
    @property
    def ErrorData(self) -> Array_1[int]: ...
    @property
    def ErrorFrame(self) -> int: ...
    @property
    def ErrorFrameWordOffset(self) -> int: ...
    @property
    def ErrorMessage(self) -> str: ...
    @property
    def ReferenceData(self) -> Array_1[int]: ...


class CompareEncodedBitstreamErrorCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> CompareEncodedBitstreamError: ...
    def GetEnumerator(self) -> IEnumerator: ...


class CompareEncodedBitstreamGenerator:
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def TotalFrameCount(self) -> int: ...
    @property
    def UsableFrameCount(self) -> int: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class CompareEncodedBitstreamMeasurement:
    @property
    def CompareBitstream(self) -> CompareEncodedBitstreamResult: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> CompareEncodedBitstreamGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def InitialSyncFrameLimit(self) -> int: ...
    @InitialSyncFrameLimit.setter
    def InitialSyncFrameLimit(self, value: int) -> int: ...
    @property
    def InitialSyncLimitInSeconds(self) -> float: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def LossOfSyncFrameLimit(self) -> int: ...
    @LossOfSyncFrameLimit.setter
    def LossOfSyncFrameLimit(self, value: int) -> int: ...
    @property
    def LossOfSyncLimitInSeconds(self) -> float: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def PromptSettings(self) -> CompareEncodeBitstreamPromptSettings: ...
    @property
    def ReferenceFile(self) -> str: ...
    @ReferenceFile.setter
    def ReferenceFile(self, value: str) -> str: ...
    @property
    def ReferenceFileNames(self) -> Array_1[str]: ...
    @property
    def ReferenceFrameCount(self) -> int: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def ShowPrompt(self) -> bool: ...
    @ShowPrompt.setter
    def ShowPrompt(self, value: bool) -> bool: ...
    @property
    def TimeoutSeconds(self) -> int: ...
    @TimeoutSeconds.setter
    def TimeoutSeconds(self, value: int) -> int: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def LoadReferenceFile(self, fileName: str, replaceIfExists: bool) -> None: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class CompareEncodedBitstreamResult:
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def Error(self) -> CompareEncodedBitstreamError: ...
    @property
    def FirstSyncFrame(self) -> int: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def InvalidFrames(self) -> CompareEncodedBitstreamErrorCollection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LastSyncFrame(self) -> int: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Passed(self) -> bool: ...
    @property
    def ReceivedFrameCount(self) -> int: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def SkippedFrames(self) -> CompareEncodedBitstreamErrorCollection: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    def CopyToClipboard(self) -> None: ...
    def Dock(self) -> None: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...



class CompareLevelAndDistortionDataElement:
    @property
    def Channel(self) -> InputChannelIndex: ...
    @Channel.setter
    def Channel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def DataSetType(self) -> MeterDataSetType: ...
    @DataSetType.setter
    def DataSetType(self, value: MeterDataSetType) -> MeterDataSetType: ...
    @property
    def HarmonicIndex(self) -> DistortionHarmonicIndex: ...
    @HarmonicIndex.setter
    def HarmonicIndex(self, value: DistortionHarmonicIndex) -> DistortionHarmonicIndex: ...
    @property
    def SourceDataSet(self) -> int: ...
    @SourceDataSet.setter
    def SourceDataSet(self, value: int) -> int: ...
    @property
    def SourceDataSetType(self) -> SourceDataType: ...
    @SourceDataSetType.setter
    def SourceDataSetType(self, value: SourceDataType) -> SourceDataType: ...


class CompareLevelAndDistortionDataTrace:
    @property
    def CompareTo(self) -> CompareLevelAndDistortionDataElement: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Reference(self) -> CompareLevelAndDistortionDataElement: ...
    def Delete(self) -> None: ...


class CompareLevelAndDistortionDataTraceCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> CompareLevelAndDistortionDataTrace: ...
    def Add(self) -> CompareLevelAndDistortionDataTrace: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Remove(self, index: int) -> None: ...


class CompareLevelAndDistortionResult:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def Source(self) -> Graph: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def Traces(self) -> CompareLevelAndDistortionDataTraceCollection: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class CompareMeterReference(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Constant : CompareMeterReference # 0
    Ch1 : CompareMeterReference # 1
    Ch2 : CompareMeterReference # 2
    Ch3 : CompareMeterReference # 3
    Ch4 : CompareMeterReference # 4
    Ch5 : CompareMeterReference # 5
    Ch6 : CompareMeterReference # 6
    Ch7 : CompareMeterReference # 7
    Ch8 : CompareMeterReference # 8
    Ch9 : CompareMeterReference # 9
    Ch10 : CompareMeterReference # 10
    Ch11 : CompareMeterReference # 11
    Ch12 : CompareMeterReference # 12
    Ch13 : CompareMeterReference # 13
    Ch14 : CompareMeterReference # 14
    Ch15 : CompareMeterReference # 15
    Ch16 : CompareMeterReference # 16


class CompareMeterResult:
    @property
    def Axis(self) -> GraphAxis: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def ComparisonValue(self) -> DoubleSetting: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Limits(self) -> MeterLimits: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def ReferenceType(self) -> CompareMeterReference: ...
    @ReferenceType.setter
    def ReferenceType(self, value: CompareMeterReference) -> CompareMeterReference: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def Source(self) -> Graph: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    def CopyToClipboard(self) -> None: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetTraceColor(self, traceIndex: int) -> Color: ...
    def GetTraceName(self, traceIndex: int) -> str: ...
    def ResetTraceStyle(self, traceIndex: int) -> None: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetTraceColor(self, traceIndex: int, color: Color) -> None: ...
    def SetTraceName(self, traceIndex: int, name: str) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, unit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool]) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool], append: bool) -> None:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[str]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[str]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[float]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[float]:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...



class CompareXYDataElement:
    @property
    def Channel(self) -> InputChannelIndex: ...
    @Channel.setter
    def Channel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def DataSetType(self) -> MeterDataSetType: ...
    @DataSetType.setter
    def DataSetType(self, value: MeterDataSetType) -> MeterDataSetType: ...
    @property
    def SourceDataSet(self) -> int: ...
    @SourceDataSet.setter
    def SourceDataSet(self, value: int) -> int: ...
    @property
    def SourceDataSetType(self) -> SourceDataType: ...
    @SourceDataSetType.setter
    def SourceDataSetType(self, value: SourceDataType) -> SourceDataType: ...


class CompareXYDataTrace:
    @property
    def CompareTo(self) -> CompareXYDataElement: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Reference(self) -> CompareXYDataElement: ...
    def Delete(self) -> None: ...


class CompareXYDataTraceCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> CompareXYDataTrace: ...
    def Add(self) -> CompareXYDataTrace: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Remove(self, index: int) -> None: ...


class CompareXYResult:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def Source(self) -> Graph: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def Traces(self) -> CompareXYDataTraceCollection: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class ConnectBluetoothDeviceSettings:
    @property
    def CodecSettings(self) -> BluetoothCodecSettings: ...
    @property
    def ConnectType(self) -> BluetoothDeviceAutoConnectType: ...
    @ConnectType.setter
    def ConnectType(self, value: BluetoothDeviceAutoConnectType) -> BluetoothDeviceAutoConnectType: ...
    @property
    def DeviceAddressVariable(self) -> str: ...
    @DeviceAddressVariable.setter
    def DeviceAddressVariable(self, value: str) -> str: ...
    @property
    def FindAllDevicesInInquiry(self) -> bool: ...
    @FindAllDevicesInInquiry.setter
    def FindAllDevicesInInquiry(self, value: bool) -> bool: ...
    @property
    def ForcePairing(self) -> bool: ...
    @ForcePairing.setter
    def ForcePairing(self, value: bool) -> bool: ...
    @property
    def InquiryDeviceClass(self) -> str: ...
    @InquiryDeviceClass.setter
    def InquiryDeviceClass(self, value: str) -> str: ...
    @property
    def MaxDevicesInInquiry(self) -> int: ...
    @MaxDevicesInInquiry.setter
    def MaxDevicesInInquiry(self, value: int) -> int: ...
    @property
    def PartialAddress(self) -> str: ...
    @PartialAddress.setter
    def PartialAddress(self, value: str) -> str: ...
    @property
    def Pin(self) -> str: ...
    @Pin.setter
    def Pin(self, value: str) -> str: ...
    @property
    def PinRequired(self) -> bool: ...
    @PinRequired.setter
    def PinRequired(self, value: bool) -> bool: ...
    @property
    def Profile(self) -> BluetoothConnectProfile: ...
    @Profile.setter
    def Profile(self, value: BluetoothConnectProfile) -> BluetoothConnectProfile: ...
    @property
    def ScanDuration(self) -> int: ...
    @ScanDuration.setter
    def ScanDuration(self, value: int) -> int: ...
    @property
    def SelectFirstDevice(self) -> bool: ...
    @SelectFirstDevice.setter
    def SelectFirstDevice(self, value: bool) -> bool: ...
    @property
    def SpecificAddress(self) -> str: ...
    @SpecificAddress.setter
    def SpecificAddress(self, value: str) -> str: ...


class ConnectBluetoothDeviceStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def CodecSettings(self) -> BluetoothCodecSettings: ...
    @property
    def ConnectType(self) -> BluetoothDeviceAutoConnectType: ...
    @ConnectType.setter
    def ConnectType(self, value: BluetoothDeviceAutoConnectType) -> BluetoothDeviceAutoConnectType: ...
    @property
    def DeviceAddressVariable(self) -> str: ...
    @DeviceAddressVariable.setter
    def DeviceAddressVariable(self, value: str) -> str: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def FindAllDevicesInInquiry(self) -> bool: ...
    @FindAllDevicesInInquiry.setter
    def FindAllDevicesInInquiry(self, value: bool) -> bool: ...
    @property
    def ForcePairing(self) -> bool: ...
    @ForcePairing.setter
    def ForcePairing(self, value: bool) -> bool: ...
    @property
    def InquiryDeviceClass(self) -> str: ...
    @InquiryDeviceClass.setter
    def InquiryDeviceClass(self, value: str) -> str: ...
    @property
    def MaxDevicesInInquiry(self) -> int: ...
    @MaxDevicesInInquiry.setter
    def MaxDevicesInInquiry(self, value: int) -> int: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PartialAddress(self) -> str: ...
    @PartialAddress.setter
    def PartialAddress(self, value: str) -> str: ...
    @property
    def Pin(self) -> str: ...
    @Pin.setter
    def Pin(self, value: str) -> str: ...
    @property
    def PinRequired(self) -> bool: ...
    @PinRequired.setter
    def PinRequired(self, value: bool) -> bool: ...
    @property
    def Profile(self) -> BluetoothConnectProfile: ...
    @Profile.setter
    def Profile(self, value: BluetoothConnectProfile) -> BluetoothConnectProfile: ...
    @property
    def ScanDuration(self) -> int: ...
    @ScanDuration.setter
    def ScanDuration(self, value: int) -> int: ...
    @property
    def SelectFirstDevice(self) -> bool: ...
    @SelectFirstDevice.setter
    def SelectFirstDevice(self, value: bool) -> bool: ...
    @property
    def SpecificAddress(self) -> str: ...
    @SpecificAddress.setter
    def SpecificAddress(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class ConnectBluetoothDeviceStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ConnectBluetoothDeviceStep: ...
    def Add(self) -> ConnectBluetoothDeviceStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class Constants(abc.ABC):
    MaxLineWidth : int
    MinLineWidth : int
    TraceStyleCycleLength : int


class ConstantValues:
    @property
    def Count(self) -> int: ...
    @property
    def TrackFirstChannel(self) -> bool: ...
    @TrackFirstChannel.setter
    def TrackFirstChannel(self, value: bool) -> bool: ...
    def GetValue(self, ch: OutputChannelIndex) -> int: ...
    def SetValue(self, ch: OutputChannelIndex, constantValue: int) -> None: ...


class ConsumerStatusBitsSettings:
    @property
    def AudioMode(self) -> StatusBitsAudioMode: ...
    @AudioMode.setter
    def AudioMode(self, value: StatusBitsAudioMode) -> StatusBitsAudioMode: ...
    @property
    def CategoryCode(self) -> StatusBitsCategoryCode: ...
    @CategoryCode.setter
    def CategoryCode(self, value: StatusBitsCategoryCode) -> StatusBitsCategoryCode: ...
    @property
    def CgmsA(self) -> StatusBitsCgmsA: ...
    @CgmsA.setter
    def CgmsA(self, value: StatusBitsCgmsA) -> StatusBitsCgmsA: ...
    @property
    def ChannelNumber(self) -> StatusBitsChannelNumber: ...
    @ChannelNumber.setter
    def ChannelNumber(self, value: StatusBitsChannelNumber) -> StatusBitsChannelNumber: ...
    @property
    def ChannelStatusMode(self) -> StatusBitsChannelStatusMode: ...
    @ChannelStatusMode.setter
    def ChannelStatusMode(self, value: StatusBitsChannelStatusMode) -> StatusBitsChannelStatusMode: ...
    @property
    def ClockAccuracy(self) -> StatusBitsClockAccuracy: ...
    @ClockAccuracy.setter
    def ClockAccuracy(self, value: StatusBitsClockAccuracy) -> StatusBitsClockAccuracy: ...
    @property
    def Copyright(self) -> StatusBitsCopyright: ...
    @Copyright.setter
    def Copyright(self, value: StatusBitsCopyright) -> StatusBitsCopyright: ...
    @property
    def Emphasis(self) -> StatusBitsEmphasisConsumerAudio: ...
    @Emphasis.setter
    def Emphasis(self, value: StatusBitsEmphasisConsumerAudio) -> StatusBitsEmphasisConsumerAudio: ...
    @property
    def EmphasisNonAudio(self) -> StatusBitsEmphasisConsumerNonAudio: ...
    @EmphasisNonAudio.setter
    def EmphasisNonAudio(self, value: StatusBitsEmphasisConsumerNonAudio) -> StatusBitsEmphasisConsumerNonAudio: ...
    @property
    def OriginalSamplingFrequency(self) -> StatusBitsOriginalSamplingFrequency: ...
    @OriginalSamplingFrequency.setter
    def OriginalSamplingFrequency(self, value: StatusBitsOriginalSamplingFrequency) -> StatusBitsOriginalSamplingFrequency: ...
    @property
    def SampleWordLength20Bits(self) -> StatusBitsWordLength20Bits: ...
    @SampleWordLength20Bits.setter
    def SampleWordLength20Bits(self, value: StatusBitsWordLength20Bits) -> StatusBitsWordLength20Bits: ...
    @property
    def SampleWordLength24Bits(self) -> StatusBitsWordLength24Bits: ...
    @SampleWordLength24Bits.setter
    def SampleWordLength24Bits(self, value: StatusBitsWordLength24Bits) -> StatusBitsWordLength24Bits: ...
    @property
    def SamplingFrequency(self) -> StatusBitsSamplingFrequencyConsumer: ...
    @SamplingFrequency.setter
    def SamplingFrequency(self, value: StatusBitsSamplingFrequencyConsumer) -> StatusBitsSamplingFrequencyConsumer: ...
    @property
    def SourceNumber(self) -> StatusBitsSourceNumber: ...
    @SourceNumber.setter
    def SourceNumber(self, value: StatusBitsSourceNumber) -> StatusBitsSourceNumber: ...
    @property
    def WordLength(self) -> StatusBitsWordLength: ...
    @WordLength.setter
    def WordLength(self, value: StatusBitsWordLength) -> StatusBitsWordLength: ...


class ConsumerStatusBitsValues:
    @property
    def AudioMode(self) -> StatusBitsAudioMode: ...
    @property
    def CategoryCode(self) -> StatusBitsCategoryCode: ...
    @property
    def CgmsA(self) -> StatusBitsCgmsA: ...
    @property
    def ChannelNumber(self) -> StatusBitsChannelNumber: ...
    @property
    def ChannelStatusMode(self) -> StatusBitsChannelStatusMode: ...
    @property
    def ClockAccuracy(self) -> StatusBitsClockAccuracy: ...
    @property
    def Copyright(self) -> StatusBitsCopyright: ...
    @property
    def Emphasis(self) -> StatusBitsEmphasisConsumerAudio: ...
    @property
    def EmphasisNonAudio(self) -> StatusBitsEmphasisConsumerNonAudio: ...
    @property
    def OriginalSamplingFrequency(self) -> StatusBitsOriginalSamplingFrequency: ...
    @property
    def SampleWordLength20Bits(self) -> StatusBitsWordLength20Bits: ...
    @property
    def SampleWordLength24Bits(self) -> StatusBitsWordLength24Bits: ...
    @property
    def SamplingFrequency(self) -> StatusBitsSamplingFrequencyConsumer: ...
    @property
    def SourceNumber(self) -> StatusBitsSourceNumber: ...
    @property
    def WordLength(self) -> StatusBitsWordLength: ...


class ContinuousSweep:
    @property
    def AcquiredCrosstalkWaveformOneChannelDriven(self) -> TimeDomainWithSourceChannel: ...
    @property
    def AcquiredCrosstalkWaveformOneChannelUndriven(self) -> TimeDomainXYGraph: ...
    @property
    def AcquiredWaveform(self) -> AcquiredWaveformGraph: ...
    @property
    def AdditionalAcquisitionTime(self) -> DoubleSetting: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def AutoDelayCompensation(self) -> bool: ...
    @AutoDelayCompensation.setter
    def AutoDelayCompensation(self, value: bool) -> bool: ...
    @property
    def ChannelDelay(self) -> DoubleSetting: ...
    @property
    def CrossCorrelation(self) -> XYGraph: ...
    @property
    def CrosstalkOneChannelDriven(self) -> XYGraph: ...
    @property
    def CrosstalkOneChannelUndriven(self) -> XYGraph: ...
    @property
    def CrosstalkType(self) -> ChirpCrosstalkType: ...
    @CrosstalkType.setter
    def CrosstalkType(self, value: ChirpCrosstalkType) -> ChirpCrosstalkType: ...
    @property
    def Deviation(self) -> DeviationMeterGraph: ...
    @property
    def DiscardDistribution(self) -> TimingDistribution: ...
    @property
    def DistortionProductLevel(self) -> HarmonicXYGraph: ...
    @property
    def DistortionProductRatio(self) -> NormalizedHarmonicRatioXYGraph: ...
    @property
    def Duration(self) -> DoubleSetting: ...
    @property
    def EQSettings(self) -> GenEqSettings: ...
    @property
    def FastSweepAutoDuration(self) -> bool: ...
    @FastSweepAutoDuration.setter
    def FastSweepAutoDuration(self, value: bool) -> bool: ...
    @property
    def FastSweepGeneratorSettings(self) -> FrequencySweepParameters: ...
    @property
    def FrequencyCorrectionEnabled(self) -> bool: ...
    @FrequencyCorrectionEnabled.setter
    def FrequencyCorrectionEnabled(self, value: bool) -> bool: ...
    @property
    def FrequencyShift(self) -> MeterGraph: ...
    @property
    def Function(self) -> BenchTestFunction: ...
    @property
    def Gain(self) -> XYGraph: ...
    @property
    def Generator(self) -> ContinuousSweepGenerator: ...
    @property
    def GeneratorWithPilot(self) -> ContinuousSweepPilotGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def GroupDelay(self) -> XYGraph: ...
    @property
    def HasError(self) -> bool: ...
    @property
    def HasWarnings(self) -> bool: ...
    @property
    def ImpulseResponse(self) -> ImpulseResponseGraph: ...
    @property
    def IsStarted(self) -> bool: ...
    @property
    def LastErrorCode(self) -> APError: ...
    @property
    def LastErrorMessage(self) -> str: ...
    @property
    def Level(self) -> XYGraph: ...
    @property
    def MeasureDistribution(self) -> TimingDistribution: ...
    @property
    def MeasureThdN(self) -> bool: ...
    @MeasureThdN.setter
    def MeasureThdN(self, value: bool) -> bool: ...
    @property
    def NestedSweep(self) -> NestedSweepSettings: ...
    @property
    def OpenLoop(self) -> bool: ...
    @OpenLoop.setter
    def OpenLoop(self, value: bool) -> bool: ...
    @property
    def Phase(self) -> PhaseXYGraph: ...
    @property
    def PreMeasurementDelay(self) -> DoubleSetting: ...
    @property
    def ReferenceWaveform(self) -> XYGraph: ...
    @property
    def RelativeLevel(self) -> RelativeLevelXYGraph: ...
    @property
    def Repeat(self) -> bool: ...
    @Repeat.setter
    def Repeat(self, value: bool) -> bool: ...
    @property
    def StartFrequency(self) -> DoubleSetting: ...
    @property
    def StopFrequency(self) -> DoubleSetting: ...
    @property
    def SweepType(self) -> FastFrequencyResponseSweepType: ...
    @SweepType.setter
    def SweepType(self, value: FastFrequencyResponseSweepType) -> FastFrequencyResponseSweepType: ...
    @property
    def ThdLevel(self) -> XYGraph: ...
    @property
    def ThdNLevel(self) -> XYGraph: ...
    @property
    def ThdNRatio(self) -> ThdNRatioXyGraph: ...
    @property
    def ThdRatio(self) -> NormalizedDistortionRatioXYGraph: ...
    @property
    def TransitionDistribution(self) -> TimingDistribution: ...
    @property
    def TriggerSettings(self) -> TriggerSettings: ...
    @property
    def Warnings(self) -> str: ...
    def Analyze(self) -> None: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def Generate(self) -> None: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Show(self) -> None: ...
    def Start(self) -> None: ...
    def Stop(self) -> None: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class ContinuousSweepGenerator:
    @property
    def Duration(self) -> DoubleSetting: ...
    @property
    def EQSettings(self) -> GenEqSettings: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def PreMeasurementDelay(self) -> DoubleSetting: ...
    @property
    def StartFrequency(self) -> DoubleSetting: ...
    @property
    def StopFrequency(self) -> DoubleSetting: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class ContinuousSweepMeasurement:
    @property
    def AcquiredCrosstalkWaveformOneChannelDriven(self) -> TimeDomainWithSourceChannel: ...
    @property
    def AcquiredCrosstalkWaveformOneChannelUndriven(self) -> TimeDomainXYGraph: ...
    @property
    def AcquiredWaveform(self) -> AcquiredWaveformGraph: ...
    @property
    def AdditionalAcquisitionTime(self) -> DoubleSetting: ...
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def AutoDelayCompensation(self) -> bool: ...
    @AutoDelayCompensation.setter
    def AutoDelayCompensation(self, value: bool) -> bool: ...
    @property
    def ChannelDelay(self) -> DoubleSetting: ...
    @property
    def CrossCorrelation(self) -> XYGraph: ...
    @property
    def CrosstalkOneChannelDriven(self) -> XYGraph: ...
    @property
    def CrosstalkOneChannelUndriven(self) -> XYGraph: ...
    @property
    def CrosstalkType(self) -> ChirpCrosstalkType: ...
    @CrosstalkType.setter
    def CrosstalkType(self, value: ChirpCrosstalkType) -> ChirpCrosstalkType: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def Deviation(self) -> DeviationMeterGraph: ...
    @property
    def DiscardDistribution(self) -> TimingDistribution: ...
    @property
    def DistortionProductLevel(self) -> HarmonicXYGraph: ...
    @property
    def DistortionProductRatio(self) -> NormalizedHarmonicRatioXYGraph: ...
    @property
    def FastSweepAutoDuration(self) -> bool: ...
    @FastSweepAutoDuration.setter
    def FastSweepAutoDuration(self, value: bool) -> bool: ...
    @property
    def FastSweepGeneratorSettings(self) -> FrequencySweepParameters: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def FrequencyCorrectionEnabled(self) -> bool: ...
    @FrequencyCorrectionEnabled.setter
    def FrequencyCorrectionEnabled(self, value: bool) -> bool: ...
    @property
    def FrequencyShift(self) -> MeterGraph: ...
    @property
    def Gain(self) -> XYGraph: ...
    @property
    def Generator(self) -> ContinuousSweepGenerator: ...
    @property
    def GeneratorWithPilot(self) -> ContinuousSweepPilotGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def GroupDelay(self) -> XYGraph: ...
    @property
    def HasWarnings(self) -> bool: ...
    @property
    def HighpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def HighpassFilterType(self) -> MeasurementHighpassFilterType: ...
    @HighpassFilterType.setter
    def HighpassFilterType(self, value: MeasurementHighpassFilterType) -> MeasurementHighpassFilterType: ...
    @property
    def ImpulseResponse(self) -> ImpulseResponseGraph: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Level(self) -> XYGraph: ...
    @property
    def LowpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def LowpassFilterType(self) -> MeasurementLowpassFilterType: ...
    @LowpassFilterType.setter
    def LowpassFilterType(self, value: MeasurementLowpassFilterType) -> MeasurementLowpassFilterType: ...
    @property
    def MeasureDistribution(self) -> TimingDistribution: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def MeasureThdN(self) -> bool: ...
    @MeasureThdN.setter
    def MeasureThdN(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NestedSweep(self) -> NestedSweepSettings: ...
    @property
    def NoiseWeighting(self) -> WeightingFilterType: ...
    @NoiseWeighting.setter
    def NoiseWeighting(self, value: WeightingFilterType) -> WeightingFilterType: ...
    @property
    def OpenLoop(self) -> bool: ...
    @OpenLoop.setter
    def OpenLoop(self, value: bool) -> bool: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def Phase(self) -> PhaseXYGraph: ...
    @property
    def ReferenceWaveform(self) -> XYGraph: ...
    @property
    def RelativeLevel(self) -> RelativeLevelXYGraph: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def SweepType(self) -> FastFrequencyResponseSweepType: ...
    @SweepType.setter
    def SweepType(self, value: FastFrequencyResponseSweepType) -> FastFrequencyResponseSweepType: ...
    @property
    def ThdLevel(self) -> XYGraph: ...
    @property
    def ThdNLevel(self) -> XYGraph: ...
    @property
    def ThdNRatio(self) -> ThdNRatioXyGraph: ...
    @property
    def ThdRatio(self) -> NormalizedDistortionRatioXYGraph: ...
    @property
    def TransitionDistribution(self) -> TimingDistribution: ...
    @property
    def TriggerSettings(self) -> TriggerSettings: ...
    @property
    def Warnings(self) -> str: ...
    def Analyze(self) -> None: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def Generate(self) -> None: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class ContinuousSweepMeasurementBase:
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> ContinuousSweepGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class ContinuousSweepMeasurementSettings:
    @property
    def Duration(self) -> DoubleSetting: ...
    @property
    def PreMeasurementDelay(self) -> DoubleSetting: ...
    @property
    def StartFrequency(self) -> DoubleSetting: ...
    @property
    def StopFrequency(self) -> DoubleSetting: ...


class ContinuousSweepMeasurementWithAdditionalAcqTimeBase:
    @property
    def AdditionalAcquisitionTime(self) -> DoubleSetting: ...
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> ContinuousSweepGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class ContinuousSweepPilotGenerator:
    @property
    def AudioFileSettings(self) -> AudioFileSettings: ...
    @property
    def Durations(self) -> Durations: ...
    @property
    def EQSettings(self) -> GenEqSettings: ...
    @property
    def Frequencies(self) -> Frequencies: ...
    @property
    def Iterations(self) -> int: ...
    @Iterations.setter
    def Iterations(self, value: int) -> int: ...
    @property
    def Levels(self) -> Levels: ...
    @property
    def SaveWaveformFileSettings(self) -> SaveGeneratorFileSettings: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped SaveWaveform due to it being static, abstract and generic.

    SaveWaveform : SaveWaveform_MethodGroup
    class SaveWaveform_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, folder: str, filename: str, audioType: FileAudioType, bitdepth: WavExportBitDepth, replaceexisting: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class ContinuousSweepResults:
    @property
    def AcquiredCrosstalkWaveformOneChannelDriven(self) -> TimeDomainWithSourceChannel: ...
    @property
    def AcquiredCrosstalkWaveformOneChannelUndriven(self) -> TimeDomainXYGraph: ...
    @property
    def AcquiredWaveform(self) -> AcquiredWaveformGraph: ...
    @property
    def CrossCorrelation(self) -> XYGraph: ...
    @property
    def CrosstalkOneChannelDriven(self) -> XYGraph: ...
    @property
    def CrosstalkOneChannelUndriven(self) -> XYGraph: ...
    @property
    def Deviation(self) -> DeviationMeterGraph: ...
    @property
    def DistortionProductLevel(self) -> HarmonicXYGraph: ...
    @property
    def DistortionProductRatio(self) -> NormalizedHarmonicRatioXYGraph: ...
    @property
    def FrequencyShift(self) -> MeterGraph: ...
    @property
    def Gain(self) -> XYGraph: ...
    @property
    def GroupDelay(self) -> XYGraph: ...
    @property
    def ImpulseResponse(self) -> ImpulseResponseGraph: ...
    @property
    def Level(self) -> XYGraph: ...
    @property
    def Phase(self) -> PhaseXYGraph: ...
    @property
    def ReferenceWaveform(self) -> XYGraph: ...
    @property
    def RelativeLevel(self) -> RelativeLevelXYGraph: ...
    @property
    def ThdLevel(self) -> XYGraph: ...
    @property
    def ThdNLevel(self) -> XYGraph: ...
    @property
    def ThdNRatio(self) -> ThdNRatioXyGraph: ...
    @property
    def ThdRatio(self) -> NormalizedDistortionRatioXYGraph: ...


class ContinuousSweepSettingsWithAdditionalAcqTimeBase:
    @property
    def AdditionalAcquisitionTime(self) -> DoubleSetting: ...
    @property
    def FrequencyCorrectionEnabled(self) -> bool: ...
    @FrequencyCorrectionEnabled.setter
    def FrequencyCorrectionEnabled(self, value: bool) -> bool: ...
    @property
    def Generator(self) -> ContinuousSweepGenerator: ...
    @property
    def HasWarnings(self) -> bool: ...
    @property
    def OpenLoop(self) -> bool: ...
    @OpenLoop.setter
    def OpenLoop(self, value: bool) -> bool: ...
    @property
    def TriggerSettings(self) -> TriggerSettings: ...
    @property
    def Warnings(self) -> str: ...


class ContinuousSweepSettingsWithCrosstalk:
    @property
    def AdditionalAcquisitionTime(self) -> DoubleSetting: ...
    @property
    def AutoDelayCompensation(self) -> bool: ...
    @AutoDelayCompensation.setter
    def AutoDelayCompensation(self, value: bool) -> bool: ...
    @property
    def ChannelDelay(self) -> DoubleSetting: ...
    @property
    def CrosstalkType(self) -> ChirpCrosstalkType: ...
    @CrosstalkType.setter
    def CrosstalkType(self, value: ChirpCrosstalkType) -> ChirpCrosstalkType: ...
    @property
    def DiscardDistribution(self) -> TimingDistribution: ...
    @property
    def FastSweepAutoDuration(self) -> bool: ...
    @FastSweepAutoDuration.setter
    def FastSweepAutoDuration(self, value: bool) -> bool: ...
    @property
    def FastSweepGeneratorSettings(self) -> FrequencySweepParameters: ...
    @property
    def FrequencyCorrectionEnabled(self) -> bool: ...
    @FrequencyCorrectionEnabled.setter
    def FrequencyCorrectionEnabled(self, value: bool) -> bool: ...
    @property
    def Generator(self) -> ContinuousSweepGenerator: ...
    @property
    def HasWarnings(self) -> bool: ...
    @property
    def MeasureDistribution(self) -> TimingDistribution: ...
    @property
    def MeasureThdN(self) -> bool: ...
    @MeasureThdN.setter
    def MeasureThdN(self, value: bool) -> bool: ...
    @property
    def OpenLoop(self) -> bool: ...
    @OpenLoop.setter
    def OpenLoop(self, value: bool) -> bool: ...
    @property
    def SweepType(self) -> FastFrequencyResponseSweepType: ...
    @SweepType.setter
    def SweepType(self, value: FastFrequencyResponseSweepType) -> FastFrequencyResponseSweepType: ...
    @property
    def TransitionDistribution(self) -> TimingDistribution: ...
    @property
    def TriggerSettings(self) -> TriggerSettings: ...
    @property
    def Warnings(self) -> str: ...


class CrosstalkCustomGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def Type(self) -> GeneratorType: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class CrosstalkCustomMeasurement:
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Crosstalk(self) -> MeterGraph: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> CrosstalkCustomGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def Settling(self) -> CrosstalkCustomSettlingParametersCollection: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class CrosstalkCustomSettlingParametersCollection:
    @property
    def Crosstalk(self) -> SettlingParameters: ...


class CrosstalkFrequencySweepCustomMeasurement:
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def Crosstalk(self) -> XYGraph: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> CrosstalkFrequencySweepGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def Settling(self) -> CrosstalkFrequencySweepSettlingParametersCollection: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class CrosstalkFrequencySweepGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def StartFrequency(self) -> DoubleSetting: ...
    @property
    def StopFrequency(self) -> DoubleSetting: ...
    @property
    def SweepParameters(self) -> FrequencySweepParameters: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class CrosstalkFrequencySweepOneChannelDrivenMeasurement:
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def Crosstalk(self) -> CrosstalkXYGraph: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> CrosstalkFrequencySweepGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def Settling(self) -> CrosstalkFrequencySweepSettlingParametersCollection: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class CrosstalkFrequencySweepOneChannelUndrivenMeasurement:
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def Crosstalk(self) -> XYGraph: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> CrosstalkFrequencySweepGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def Settling(self) -> CrosstalkFrequencySweepSettlingParametersCollection: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class CrosstalkFrequencySweepSettlingParametersCollection:
    @property
    def CrosstalkSettlingParams(self) -> SettlingParameters: ...


class CrosstalkOneChannelDrivenGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def Type(self) -> GeneratorType: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class CrosstalkOneChannelDrivenMeasurement:
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Crosstalk(self) -> MeterGraph: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> CrosstalkOneChannelDrivenGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OneToOneSourceChannel(self) -> OutputChannelIndex: ...
    @OneToOneSourceChannel.setter
    def OneToOneSourceChannel(self, value: OutputChannelIndex) -> OutputChannelIndex: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def Settling(self) -> CrosstalkOneChannelDrivenSettlingParametersCollection: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class CrosstalkOneChannelDrivenSettlingParametersCollection:
    @property
    def Crosstalk(self) -> SettlingParameters: ...


class CrosstalkOneChannelUndrivenGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class CrosstalkOneChannelUndrivenMeasurement:
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Crosstalk(self) -> MeterGraph: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> CrosstalkOneChannelUndrivenGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def Settling(self) -> CrosstalkOneChannelUndrivenSettlingParametersCollection: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class CrosstalkOneChannelUndrivenSettlingParametersCollection:
    @property
    def Crosstalk(self) -> SettlingParameters: ...


class CrosstalkXYGraph:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def SourceChannel(self) -> OutputChannelIndex: ...
    @SourceChannel.setter
    def SourceChannel(self, value: OutputChannelIndex) -> OutputChannelIndex: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def HasDataOnAxis(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> bool: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetData due to it being static, abstract and generic.

    GetData : GetData_MethodGroup
    class GetData_MethodGroup:
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> XYValues:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int) -> XYValues:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class CurrentOutputReferences:
    @property
    def dBrG(self) -> DoubleSetting: ...


class CurrentSense(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    AmplifierOutput1 : CurrentSense # 0
    AmplifierOutput2 : CurrentSense # 1


class Cursor:
    @property
    def Color(self) -> Color: ...
    @Color.setter
    def Color(self, value: Color) -> Color: ...
    @property
    def HorizontalGraticule(self) -> Graticule: ...
    @HorizontalGraticule.setter
    def HorizontalGraticule(self, value: Graticule) -> Graticule: ...
    @property
    def Label(self) -> str: ...
    @Label.setter
    def Label(self, value: str) -> str: ...
    @property
    def LineStyle(self) -> DashStyle: ...
    @LineStyle.setter
    def LineStyle(self, value: DashStyle) -> DashStyle: ...
    @property
    def LineWidth(self) -> int: ...
    @LineWidth.setter
    def LineWidth(self, value: int) -> int: ...
    @property
    def Selected(self) -> bool: ...
    @Selected.setter
    def Selected(self, value: bool) -> bool: ...
    @property
    def Shape(self) -> CursorShape: ...
    @Shape.setter
    def Shape(self, value: CursorShape) -> CursorShape: ...
    @property
    def ShowLabel(self) -> bool: ...
    @ShowLabel.setter
    def ShowLabel(self, value: bool) -> bool: ...
    @property
    def VerticalGraticule(self) -> Graticule: ...
    @VerticalGraticule.setter
    def VerticalGraticule(self, value: Graticule) -> Graticule: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...
    @property
    def XValue(self) -> float: ...
    @XValue.setter
    def XValue(self, value: float) -> float: ...
    @property
    def YValue(self) -> float: ...
    @YValue.setter
    def YValue(self, value: float) -> float: ...
    def Center(self) -> None: ...
    def Detach(self) -> None: ...
    # Skipped Attach due to it being static, abstract and generic.

    Attach : Attach_MethodGroup
    class Attach_MethodGroup:
        @typing.overload
        def __call__(self, channel: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, channel: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, channel: InputChannelIndex, axis: VerticalAxis) -> None:...



class CursorChannelIndex(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Ch1 : CursorChannelIndex # 0
    Ch2 : CursorChannelIndex # 1
    Ch3 : CursorChannelIndex # 2
    Ch4 : CursorChannelIndex # 3
    Ch5 : CursorChannelIndex # 4
    Ch6 : CursorChannelIndex # 5
    Ch7 : CursorChannelIndex # 6
    Ch8 : CursorChannelIndex # 7
    Ch9 : CursorChannelIndex # 8
    Ch10 : CursorChannelIndex # 9
    Ch11 : CursorChannelIndex # 10
    Ch12 : CursorChannelIndex # 11
    Ch13 : CursorChannelIndex # 12
    Ch14 : CursorChannelIndex # 13
    Ch15 : CursorChannelIndex # 14
    Ch16 : CursorChannelIndex # 15
    None_ : CursorChannelIndex # -1


class CursorHarmonic:
    @property
    def AttachedTrace(self) -> HarmonicTraceInfo: ...
    @property
    def Color(self) -> Color: ...
    @Color.setter
    def Color(self, value: Color) -> Color: ...
    @property
    def HorizontalGraticule(self) -> Graticule: ...
    @HorizontalGraticule.setter
    def HorizontalGraticule(self, value: Graticule) -> Graticule: ...
    @property
    def Label(self) -> str: ...
    @Label.setter
    def Label(self, value: str) -> str: ...
    @property
    def LineStyle(self) -> DashStyle: ...
    @LineStyle.setter
    def LineStyle(self, value: DashStyle) -> DashStyle: ...
    @property
    def LineWidth(self) -> int: ...
    @LineWidth.setter
    def LineWidth(self, value: int) -> int: ...
    @property
    def Selected(self) -> bool: ...
    @Selected.setter
    def Selected(self, value: bool) -> bool: ...
    @property
    def Shape(self) -> CursorShape: ...
    @Shape.setter
    def Shape(self, value: CursorShape) -> CursorShape: ...
    @property
    def ShowLabel(self) -> bool: ...
    @ShowLabel.setter
    def ShowLabel(self, value: bool) -> bool: ...
    @property
    def VerticalGraticule(self) -> Graticule: ...
    @VerticalGraticule.setter
    def VerticalGraticule(self, value: Graticule) -> Graticule: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...
    @property
    def XValue(self) -> float: ...
    @XValue.setter
    def XValue(self, value: float) -> float: ...
    @property
    def YValue(self) -> float: ...
    @YValue.setter
    def YValue(self, value: float) -> float: ...
    def Center(self) -> None: ...
    def Detach(self) -> None: ...
    # Skipped Attach due to it being static, abstract and generic.

    Attach : Attach_MethodGroup
    class Attach_MethodGroup:
        @typing.overload
        def __call__(self, channel: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, channel: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, channel: InputChannelIndex, axis: VerticalAxis) -> None:...

    # Skipped AttachHarmonic due to it being static, abstract and generic.

    AttachHarmonic : AttachHarmonic_MethodGroup
    class AttachHarmonic_MethodGroup:
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int) -> None:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, channel: int, harmonicIndex: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex) -> None:...



class CursorShape(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Circle : CursorShape # 0
    Square : CursorShape # 1
    Diamond : CursorShape # 2
    X : CursorShape # 3
    Plus : CursorShape # 4
    Asterisk : CursorShape # 5


class CurveFitRangeType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Auto : CurveFitRangeType # 0
    Custom : CurveFitRangeType # 1


class CustomMeterGraph:
    @property
    def Axis(self) -> GraphAxis: ...
    @property
    def CenterXAxisAtOrigin(self) -> bool: ...
    @CenterXAxisAtOrigin.setter
    def CenterXAxisAtOrigin(self, value: bool) -> bool: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def CustomDataFile(self) -> str: ...
    @CustomDataFile.setter
    def CustomDataFile(self, value: str) -> str: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Limits(self) -> MeterLimits: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    def CopyToClipboard(self) -> None: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetTraceColor(self, traceIndex: int) -> Color: ...
    def GetTraceName(self, traceIndex: int) -> str: ...
    def Refresh(self) -> None: ...
    def ResetTraceStyle(self, traceIndex: int) -> None: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetTraceColor(self, traceIndex: int, color: Color) -> None: ...
    def SetTraceName(self, traceIndex: int, name: str) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, unit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool]) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool], append: bool) -> None:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[str]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[str]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[float]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[float]:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...



class CustomProcessingDerivedMeterResult:
    @property
    def Axis(self) -> GraphAxis: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DataSetType(self) -> MeterDataSetType: ...
    @DataSetType.setter
    def DataSetType(self, value: MeterDataSetType) -> MeterDataSetType: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Limits(self) -> MeterLimits: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Properties(self) -> CustomProcessingProperties: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def Source(self) -> Graph: ...
    @property
    def SourceDataSet(self) -> int: ...
    @SourceDataSet.setter
    def SourceDataSet(self, value: int) -> int: ...
    @property
    def SourceDataSetType(self) -> SourceDataType: ...
    @SourceDataSetType.setter
    def SourceDataSetType(self, value: SourceDataType) -> SourceDataType: ...
    @property
    def SourceDataType(self) -> CustomProcessingSourceDataType: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    def CopyToClipboard(self) -> None: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetTraceColor(self, traceIndex: int) -> Color: ...
    def GetTraceName(self, traceIndex: int) -> str: ...
    def ResetTraceStyle(self, traceIndex: int) -> None: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetTraceColor(self, traceIndex: int, color: Color) -> None: ...
    def SetTraceName(self, traceIndex: int, name: str) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, unit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool]) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool], append: bool) -> None:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[str]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[str]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[float]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[float]:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...



class CustomProcessingMeterResult:
    @property
    def Axis(self) -> GraphAxis: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Limits(self) -> MeterLimits: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Properties(self) -> CustomProcessingProperties: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    def CopyToClipboard(self) -> None: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetTraceColor(self, traceIndex: int) -> Color: ...
    def GetTraceName(self, traceIndex: int) -> str: ...
    def ResetTraceStyle(self, traceIndex: int) -> None: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetTraceColor(self, traceIndex: int, color: Color) -> None: ...
    def SetTraceName(self, traceIndex: int, name: str) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, unit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool]) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool], append: bool) -> None:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[str]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[str]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[float]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[float]:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...



class CustomProcessingProperties:
    @property
    def PropertyNames(self) -> Array_1[str]: ...
    def GetBool(self, name: str) -> bool: ...
    def GetBoolArrayValue(self, name: str, index: int) -> bool: ...
    def GetDouble(self, name: str) -> float: ...
    def GetInt(self, name: str) -> int: ...
    def GetPropertyType(self, name: str) -> str: ...
    def GetString(self, name: str) -> str: ...
    def GetStringValues(self, name: str) -> Array_1[str]: ...
    def SetBool(self, name: str, val: bool) -> None: ...
    def SetBoolArrayValue(self, name: str, index: int, val: bool) -> None: ...
    def SetDouble(self, name: str, val: float) -> None: ...
    def SetInt(self, name: str, val: int) -> None: ...
    def SetString(self, name: str, val: str) -> None: ...


class CustomProcessingPropertyType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    String : CustomProcessingPropertyType # 0
    Int : CustomProcessingPropertyType # 1
    Double : CustomProcessingPropertyType # 2
    Bool : CustomProcessingPropertyType # 3
    Enum : CustomProcessingPropertyType # 4


class CustomProcessingSourceDataType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Meter : CustomProcessingSourceDataType # 0
    Xy : CustomProcessingSourceDataType # 1


class CustomProcessingTabularResult:
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def ColumnCount(self) -> int: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Properties(self) -> CustomProcessingProperties: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RowCount(self) -> int: ...
    @property
    def Source(self) -> Graph: ...
    @property
    def SourceDataType(self) -> CustomProcessingSourceDataType: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    def CopyToClipboard(self) -> None: ...
    def Dock(self) -> None: ...
    def ExportData(self, fileName: str) -> None: ...
    def GetValue(self, row: int, col: int) -> str: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...



class CustomProcessingXyResult:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Properties(self) -> CustomProcessingProperties: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def Source(self) -> Graph: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class CustomXYGraph:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def CustomDataFile(self) -> str: ...
    @CustomDataFile.setter
    def CustomDataFile(self, value: str) -> str: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def Refresh(self) -> None: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class DarsInputTermination(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    TermHigh : DarsInputTermination # 0
    Term110 : DarsInputTermination # 1


class DataDistributionResult:
    @property
    def Axis(self) -> GraphAxis: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DataSetType(self) -> MeterDataSetType: ...
    @DataSetType.setter
    def DataSetType(self, value: MeterDataSetType) -> MeterDataSetType: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def DistributionType(self) -> DataDistributionType: ...
    @DistributionType.setter
    def DistributionType(self, value: DataDistributionType) -> DataDistributionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Limits(self) -> MeterLimits: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def Source(self) -> Graph: ...
    @property
    def SourceDataSet(self) -> int: ...
    @SourceDataSet.setter
    def SourceDataSet(self, value: int) -> int: ...
    @property
    def SourceDataSetType(self) -> SourceDataType: ...
    @SourceDataSetType.setter
    def SourceDataSetType(self, value: SourceDataType) -> SourceDataType: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    def CopyToClipboard(self) -> None: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetTraceColor(self, traceIndex: int) -> Color: ...
    def GetTraceName(self, traceIndex: int) -> str: ...
    def ResetTraceStyle(self, traceIndex: int) -> None: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetTraceColor(self, traceIndex: int, color: Color) -> None: ...
    def SetTraceName(self, traceIndex: int, name: str) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, unit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool]) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool], append: bool) -> None:...

    # Skipped GetDeviation due to it being static, abstract and generic.

    GetDeviation : GetDeviation_MethodGroup
    class GetDeviation_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[float]:...
        @typing.overload
        def __call__(self, unit: str) -> Array_1[float]:...

    # Skipped GetDeviationText due to it being static, abstract and generic.

    GetDeviationText : GetDeviationText_MethodGroup
    class GetDeviationText_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[str]:...
        @typing.overload
        def __call__(self, unit: str) -> Array_1[str]:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[str]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[str]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[float]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[float]:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...



class DataDistributionType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    StdDev : DataDistributionType # 0
    NinetyFivePercentConfidenceInterval : DataDistributionType # 1


class DataNoteType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : DataNoteType # 0
    Prompt : DataNoteType # 1
    Custom : DataNoteType # 2


class DbReferenceType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    dBrA : DbReferenceType # 0
    dBrB : DbReferenceType # 1
    dBSpl1 : DbReferenceType # 2
    dBSpl2 : DbReferenceType # 3


class DcLevelDcxMeasurement:
    @property
    def AveragingTime(self) -> DoubleSetting: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def DelayTime(self) -> DoubleSetting: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> DcxGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def Range(self) -> DcxVoltRange: ...
    @Range.setter
    def Range(self, value: DcxVoltRange) -> DcxVoltRange: ...
    @property
    def Rate(self) -> DcxDmmRate: ...
    @Rate.setter
    def Rate(self, value: DcxDmmRate) -> DcxDmmRate: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def Volts(self) -> MeterGraph: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class DCLevelGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def Type(self) -> GeneratorType: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class DCLevelMeasurement:
    @property
    def AcquisitionTime(self) -> DoubleSetting: ...
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def DCLevel(self) -> MeterGraph: ...
    @property
    def DelayTime(self) -> DoubleSetting: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> DCLevelGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class DCLevelSettlingParametersCollection:
    @property
    def DCLevel(self) -> SettlingParameters: ...


class DcLevelSweepGenerator:
    @property
    def AmplitudeStart(self) -> DoubleSetting: ...
    @property
    def AmplitudeStop(self) -> DoubleSetting: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def SweepParameters(self) -> SweepParameters: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class DcLevelSweepMeasurement:
    @property
    def AcquisitionTime(self) -> DoubleSetting: ...
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def DcLevel(self) -> XYGraph: ...
    @property
    def DelayTime(self) -> DoubleSetting: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> DcLevelSweepGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def HighpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def HighpassFilterType(self) -> MeasurementHighpassFilterType: ...
    @HighpassFilterType.setter
    def HighpassFilterType(self, value: MeasurementHighpassFilterType) -> MeasurementHighpassFilterType: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def LowpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def LowpassFilterType(self) -> MeasurementLowpassFilterType: ...
    @LowpassFilterType.setter
    def LowpassFilterType(self, value: MeasurementLowpassFilterType) -> MeasurementLowpassFilterType: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Noise(self) -> XYGraph: ...
    @property
    def NoiseWeighting(self) -> WeightingFilterType: ...
    @NoiseWeighting.setter
    def NoiseWeighting(self, value: WeightingFilterType) -> WeightingFilterType: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class DcxDcvChannel(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Dcv1 : DcxDcvChannel # 0
    Dcv2 : DcxDcvChannel # 1


class DcxDmmMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : DcxDmmMode # 0
    Ohms : DcxDmmMode # 1
    Volts : DcxDmmMode # 2


class DcxDmmRate(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Slow : DcxDmmRate # 0
    Fast : DcxDmmRate # 1


class DcxGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def Type(self) -> GeneratorType: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class DcxOhmRange(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Auto : DcxOhmRange # 0
    Ohm2M : DcxOhmRange # 1
    Ohm200K : DcxOhmRange # 2
    Ohm20K : DcxOhmRange # 3
    Ohm2K : DcxOhmRange # 4
    Ohm200 : DcxOhmRange # 5


class DcxPort(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    PortA : DcxPort # 0
    PortB : DcxPort # 1
    PortC : DcxPort # 2
    PortD : DcxPort # 3


class DcxSettings:
    def GetEnable(self, channel: DcxDcvChannel) -> bool: ...
    def GetLevel(self, channel: DcxDcvChannel) -> float: ...
    def SetEnable(self, channel: DcxDcvChannel, state: bool) -> None: ...
    def SetLevel(self, channel: DcxDcvChannel, level: float) -> None: ...
    # Skipped GetState due to it being static, abstract and generic.

    GetState : GetState_MethodGroup
    class GetState_MethodGroup:
        @typing.overload
        def __call__(self, port: DcxPort) -> int:...
        @typing.overload
        def __call__(self, port: DcxPort, bit: int) -> AuxControlState:...

    # Skipped SetState due to it being static, abstract and generic.

    SetState : SetState_MethodGroup
    class SetState_MethodGroup:
        @typing.overload
        def __call__(self, port: DcxPort, value: int) -> None:...
        @typing.overload
        def __call__(self, port: DcxPort, bit: int, state: AuxControlState) -> None:...



class DcxSweepParameter(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Dcv1 : DcxSweepParameter # 0
    Dcv2 : DcxSweepParameter # 1
    AllPorts : DcxSweepParameter # 2


class DcxSweepSettings:
    @property
    def PortTable(self) -> Array_1[int]: ...
    @PortTable.setter
    def PortTable(self, value: Array_1[int]) -> Array_1[int]: ...
    def GetPortEnable(self, port: DcxPort) -> bool: ...
    def GetPortEntry(self, port: DcxPort, index: int) -> int: ...
    def SetPortEnable(self, port: DcxPort, state: bool) -> None: ...
    def SetPortEntry(self, port: DcxPort, index: int, value: int) -> None: ...


class DcxVoltRange(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Auto : DcxVoltRange # 0
    Volt500 : DcxVoltRange # 1
    Volt200 : DcxVoltRange # 2
    Volt20 : DcxVoltRange # 3
    Volt2 : DcxVoltRange # 4
    Volt200m : DcxVoltRange # 5


class DelayCalibrationMeasurement:
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class DelayChirpCalibrationMeasurement:
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class DelayGenerator:
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def NoiseShape(self) -> NoiseShape: ...
    @NoiseShape.setter
    def NoiseShape(self, value: NoiseShape) -> NoiseShape: ...
    @property
    def SequenceLength(self) -> DelayStimulusSequenceLength: ...
    @SequenceLength.setter
    def SequenceLength(self, value: DelayStimulusSequenceLength) -> DelayStimulusSequenceLength: ...
    @property
    def SequenceType(self) -> DelayStimulusType: ...
    @SequenceType.setter
    def SequenceType(self, value: DelayStimulusType) -> DelayStimulusType: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class DelayStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Delay(self) -> float: ...
    @Delay.setter
    def Delay(self, value: float) -> float: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class DelayStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> DelayStep: ...
    def Add(self) -> DelayStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class DelayStimulusSequenceLength(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    L16 : DelayStimulusSequenceLength # 0
    L32 : DelayStimulusSequenceLength # 1
    L64 : DelayStimulusSequenceLength # 2
    L128 : DelayStimulusSequenceLength # 3


class DelayStimulusType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    PRS : DelayStimulusType # 0
    MLS : DelayStimulusType # 1


class DeltaCursor:
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...
    @property
    def XText(self) -> str: ...
    @property
    def XValue(self) -> float: ...
    @property
    def YText(self) -> str: ...
    @property
    def YValue(self) -> float: ...


class DerivedDataTrace:
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    def Delete(self) -> None: ...


class DerivedDataTraceCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Remove(self, index: int) -> None: ...


class DerivedMeterFromLevelAndDistortionSettings:
    @property
    def Channel(self) -> SignalPathSetupOutputChannelIndex: ...
    @property
    def DataSelection(self) -> LevelAndDistortionDataSelection: ...
    @property
    def HarmonicIndex(self) -> DistortionHarmonicIndex: ...
    def SelectAllChannelsOneTrace(self, harmonicIndex: DistortionHarmonicIndex) -> None: ...
    def SelectAllTracesOneChannel(self, channelIndex: InputChannelIndex) -> None: ...


class DerivedResult:
    @property
    def Source(self) -> Graph: ...


class DetectorType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Rms : DetectorType # 0
    Peak : DetectorType # 1


class DeviationMeterGraph:
    @property
    def Axis(self) -> GraphAxis: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Limits(self) -> MeterLimits: ...
    @property
    def MaxFrequency(self) -> DoubleSetting: ...
    @property
    def Message(self) -> str: ...
    @property
    def MinFrequency(self) -> DoubleSetting: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    def CopyToClipboard(self) -> None: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetTraceColor(self, traceIndex: int) -> Color: ...
    def GetTraceName(self, traceIndex: int) -> str: ...
    def ResetTraceStyle(self, traceIndex: int) -> None: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetTraceColor(self, traceIndex: int, color: Color) -> None: ...
    def SetTraceName(self, traceIndex: int, name: str) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, unit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool]) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool], append: bool) -> None:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[str]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[str]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[float]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[float]:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...



class DeviationMeterWithSmoothingGraph:
    @property
    def Axis(self) -> GraphAxis: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Limits(self) -> MeterLimits: ...
    @property
    def MaxFrequency(self) -> DoubleSetting: ...
    @property
    def Message(self) -> str: ...
    @property
    def MinFrequency(self) -> DoubleSetting: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OctaveSmoothing(self) -> OctaveSmoothingType: ...
    @OctaveSmoothing.setter
    def OctaveSmoothing(self, value: OctaveSmoothingType) -> OctaveSmoothingType: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    def CopyToClipboard(self) -> None: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetTraceColor(self, traceIndex: int) -> Color: ...
    def GetTraceName(self, traceIndex: int) -> str: ...
    def ResetTraceStyle(self, traceIndex: int) -> None: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetTraceColor(self, traceIndex: int, color: Color) -> None: ...
    def SetTraceName(self, traceIndex: int, name: str) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, unit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool]) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool], append: bool) -> None:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[str]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[str]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[float]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[float]:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...



class DiagnosticsGeneratorType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Sine : DiagnosticsGeneratorType # 0
    SineDual : DiagnosticsGeneratorType # 1
    SineVarPhase : DiagnosticsGeneratorType # 2
    Noise : DiagnosticsGeneratorType # 3
    WalkingZeros : DiagnosticsGeneratorType # 4
    WalkingOnes : DiagnosticsGeneratorType # 5
    ConstantValue : DiagnosticsGeneratorType # 6
    BittestRandom : DiagnosticsGeneratorType # 7
    Square : DiagnosticsGeneratorType # 8
    File : DiagnosticsGeneratorType # 9


class DifferenceFrequencyDistortionXyGraph:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def DisplayChannel(self) -> InputChannelIndex: ...
    @DisplayChannel.setter
    def DisplayChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, traceIndex: int, dataType: SourceDataType, dataIndex: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, traceName: str, dataType: SourceDataType, dataIndex: int) -> Array_1[float]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, traceIndex: int, dataType: SourceDataType, dataIndex: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, traceName: str, dataType: SourceDataType, dataIndex: int) -> Array_1[float]:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...



class DigitalErrorGeneratorType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    BittestRandom : DigitalErrorGeneratorType # 0
    File : DigitalErrorGeneratorType # 1


class DigitalErrorRateGenerator:
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def Type(self) -> DigitalErrorGeneratorType: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class DigitalErrorRateMeasurement:
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def AverageErrorRate(self) -> MeterGraph: ...
    @property
    def CumulativeErrors(self) -> XYGraph: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def Duration(self) -> DoubleSetting: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> DigitalErrorRateGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def InstantaneousErrorRate(self) -> XYGraph: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def TotalErrors(self) -> MeterGraph: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class DigitalInputReferences:
    @property
    def dBrA(self) -> DoubleSetting: ...
    @property
    def dBrAOffset(self) -> DoubleSetting: ...
    @property
    def dBrB(self) -> DoubleSetting: ...
    @property
    def dBrBOffset(self) -> DoubleSetting: ...
    @property
    def dBSpl1(self) -> DoubleSetting: ...
    @property
    def dBSpl1CalibratorLevel(self) -> DoubleSetting: ...
    @property
    def dBSpl2(self) -> DoubleSetting: ...
    @property
    def dBSpl2CalibratorLevel(self) -> DoubleSetting: ...
    def SetReferenceFromInput(self, dbReference: DbReferenceType, channel: int) -> None: ...


class DigitalInputSettings:
    @property
    def BalancedInputTermination(self) -> bool: ...
    @BalancedInputTermination.setter
    def BalancedInputTermination(self, value: bool) -> bool: ...
    @property
    def BitDepth(self) -> int: ...
    @BitDepth.setter
    def BitDepth(self, value: int) -> int: ...
    @property
    def FixedInputSampleRate(self) -> float: ...
    @FixedInputSampleRate.setter
    def FixedInputSampleRate(self, value: float) -> float: ...
    @property
    def MeasureInputSignalType(self) -> MeasureJitterInputSignal: ...
    @MeasureInputSignalType.setter
    def MeasureInputSignalType(self, value: MeasureJitterInputSignal) -> MeasureJitterInputSignal: ...
    @property
    def ScaleFreqBy(self) -> InputFrequencyScalingType: ...
    @ScaleFreqBy.setter
    def ScaleFreqBy(self, value: InputFrequencyScalingType) -> InputFrequencyScalingType: ...
    @property
    def UnbalancedInputTermination(self) -> bool: ...
    @UnbalancedInputTermination.setter
    def UnbalancedInputTermination(self, value: bool) -> bool: ...


class DigitalOutputReferences:
    @property
    def dBrG(self) -> DoubleSetting: ...


class DigitalOutputSettings:
    @property
    def BitDepth(self) -> int: ...
    @BitDepth.setter
    def BitDepth(self, value: int) -> int: ...
    @property
    def Dither(self) -> bool: ...
    @Dither.setter
    def Dither(self, value: bool) -> bool: ...
    @property
    def SampleRate(self) -> DoubleSetting: ...
    def GetValidityBit(self, side: ValidityBitSide) -> ValidityBitType: ...
    def SetValidityBit(self, side: ValidityBitSide, txValid: ValidityBitType) -> None: ...


class DigitalOutputStatusBitsSettings:
    @property
    def Application(self) -> StatusBitsApplication: ...
    @Application.setter
    def Application(self, value: StatusBitsApplication) -> StatusBitsApplication: ...
    @property
    def ConsumerSettings(self) -> ConsumerStatusBitsSettings: ...
    @property
    def ProfessionalSettings(self) -> ProfessionalStatusBitsSettings: ...
    @property
    def StatusBytes(self) -> Array_1[int]: ...
    @StatusBytes.setter
    def StatusBytes(self, value: Array_1[int]) -> Array_1[int]: ...


class DigitalSerialMonitor:
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def RefClockOutputEnabled(self) -> bool: ...
    @RefClockOutputEnabled.setter
    def RefClockOutputEnabled(self, value: bool) -> bool: ...
    @property
    def RefClockRate(self) -> float: ...
    @RefClockRate.setter
    def RefClockRate(self, value: float) -> float: ...
    @property
    def UndockedHeight(self) -> int: ...
    @UndockedHeight.setter
    def UndockedHeight(self, value: int) -> int: ...
    @property
    def UndockedLeft(self) -> int: ...
    @UndockedLeft.setter
    def UndockedLeft(self, value: int) -> int: ...
    @property
    def UndockedTop(self) -> int: ...
    @UndockedTop.setter
    def UndockedTop(self, value: int) -> int: ...
    @property
    def UndockedWidth(self) -> int: ...
    @UndockedWidth.setter
    def UndockedWidth(self, value: int) -> int: ...
    def Dock(self) -> None: ...
    def Maximize(self) -> None: ...
    def Minimize(self) -> None: ...
    def Restore(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...


class DigitalSyncDelayStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Delay(self) -> float: ...
    @Delay.setter
    def Delay(self, value: float) -> float: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class DigitalSyncDelayStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> DigitalSyncDelayStep: ...
    def Add(self) -> DigitalSyncDelayStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class DimImdGenerator:
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def SineFrequency(self) -> float: ...
    @property
    def SquareFrequency(self) -> float: ...
    @property
    def Waveform(self) -> DimWaveform: ...
    @Waveform.setter
    def Waveform(self, value: DimWaveform) -> DimWaveform: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class DimImdMeasurement:
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def DimRatio(self) -> MeterGraph: ...
    @property
    def DistortionProductRatio(self) -> VerticalBarGraph: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> DimImdGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementMode(self) -> DimMode: ...
    @MeasurementMode.setter
    def MeasurementMode(self, value: DimMode) -> DimMode: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def Settling(self) -> DimSettlingParametersCollection: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class DimLevelSweepMeasurement:
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def DimRatioVsLevel(self) -> XYGraph: ...
    @property
    def DimRatioVsMeasuredLevel(self) -> XYGraph: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> SteppedDimSweepGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementMode(self) -> DimMode: ...
    @MeasurementMode.setter
    def MeasurementMode(self, value: DimMode) -> DimMode: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def Settling(self) -> DimSettlingParametersCollection: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class DimMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    U1U9 : DimMode # 0
    U4U5 : DimMode # 1
    Emulation : DimMode # 2


class DimSettlingParametersCollection:
    @property
    def DimSettlingParameters(self) -> SettlingParameters: ...


class DimWaveform(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    DIM_30 : DimWaveform # 0
    DIM_100 : DimWaveform # 1
    DIM_B : DimWaveform # 2
    DIM_B8 : DimWaveform # 3


class DisconnectBluetoothDeviceStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class DisconnectBluetoothDeviceStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> DisconnectBluetoothDeviceStep: ...
    def Add(self) -> DisconnectBluetoothDeviceStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class DiscontinuedSoftwareEnum(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class DiscreteHarmonicIndex(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : DiscreteHarmonicIndex # 0
    H2 : DiscreteHarmonicIndex # 1
    H3 : DiscreteHarmonicIndex # 2
    H4 : DiscreteHarmonicIndex # 4
    H5 : DiscreteHarmonicIndex # 8
    H6 : DiscreteHarmonicIndex # 16
    H7 : DiscreteHarmonicIndex # 32
    H8 : DiscreteHarmonicIndex # 64
    H9 : DiscreteHarmonicIndex # 128
    H10 : DiscreteHarmonicIndex # 256


class DistortionHarmonicIndex(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Fundamental : DistortionHarmonicIndex # 0
    H2 : DistortionHarmonicIndex # 1
    H3 : DistortionHarmonicIndex # 2
    Total : DistortionHarmonicIndex # 3


class DistortionProductSelection(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    SingleHarmonic : DistortionProductSelection # 0
    SumOfHarmonics : DistortionProductSelection # 1


class DistortionRatioCalculation(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    IEC : DistortionRatioCalculation # 0
    IEEE : DistortionRatioCalculation # 1


class Dmm:
    @property
    def Mode(self) -> DcxDmmMode: ...
    @Mode.setter
    def Mode(self, value: DcxDmmMode) -> DcxDmmMode: ...
    @property
    def OhmsRange(self) -> DcxOhmRange: ...
    @OhmsRange.setter
    def OhmsRange(self, value: DcxOhmRange) -> DcxOhmRange: ...
    @property
    def Rate(self) -> DcxDmmRate: ...
    @Rate.setter
    def Rate(self, value: DcxDmmRate) -> DcxDmmRate: ...
    @property
    def Reading(self) -> float: ...
    @property
    def VoltsRange(self) -> DcxVoltRange: ...
    @VoltsRange.setter
    def VoltsRange(self, value: DcxVoltRange) -> DcxVoltRange: ...


class DockableWindow:
    @property
    def IsDocked(self) -> bool: ...
    @property
    def UndockedHeight(self) -> int: ...
    @UndockedHeight.setter
    def UndockedHeight(self, value: int) -> int: ...
    @property
    def UndockedLeft(self) -> int: ...
    @UndockedLeft.setter
    def UndockedLeft(self, value: int) -> int: ...
    @property
    def UndockedTop(self) -> int: ...
    @UndockedTop.setter
    def UndockedTop(self, value: int) -> int: ...
    @property
    def UndockedWidth(self) -> int: ...
    @UndockedWidth.setter
    def UndockedWidth(self, value: int) -> int: ...
    def Dock(self) -> None: ...
    def Maximize(self) -> None: ...
    def Minimize(self) -> None: ...
    def Restore(self) -> None: ...
    def Undock(self) -> None: ...


class DockableWindowBase:
    @property
    def IsDocked(self) -> bool: ...
    def Dock(self) -> None: ...
    def Undock(self) -> None: ...


class DoubleReadOnlySetting:
    @property
    def Active(self) -> bool: ...
    @property
    def IsEnabled(self) -> bool: ...
    @property
    def IsLogUnit(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextWithoutUnit(self) -> str: ...
    @property
    def TextWithReferenceValue(self) -> str: ...
    @property
    def Unit(self) -> str: ...
    @Unit.setter
    def Unit(self, value: str) -> str: ...
    @property
    def UnitList(self) -> Array_1[str]: ...
    @property
    def Value(self) -> float: ...
    @property
    def Values(self) -> Array_1[str]: ...
    @property
    def ValuesWithReferenceValue(self) -> Array_1[str]: ...
    def GetText(self, Unit: str) -> str: ...
    def GetValue(self, Unit: str) -> float: ...


class DoubleSetting:
    @property
    def Active(self) -> bool: ...
    @property
    def IsEnabled(self) -> bool: ...
    @property
    def IsLogUnit(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @Text.setter
    def Text(self, value: str) -> str: ...
    @property
    def TextWithoutUnit(self) -> str: ...
    @property
    def TextWithReferenceValue(self) -> str: ...
    @property
    def Unit(self) -> str: ...
    @Unit.setter
    def Unit(self, value: str) -> str: ...
    @property
    def UnitList(self) -> Array_1[str]: ...
    @property
    def Value(self) -> float: ...
    @Value.setter
    def Value(self, value: float) -> float: ...
    @property
    def Values(self) -> Array_1[str]: ...
    @property
    def ValuesWithReferenceValue(self) -> Array_1[str]: ...
    def GetText(self, Unit: str) -> str: ...
    def GetValue(self, Unit: str) -> float: ...


class DriverCollection:
    @property
    def Count(self) -> int: ...
    @Count.setter
    def Count(self, value: int) -> int: ...
    @property
    def Item(self) -> DriverSettings: ...
    @property
    def Item(self) -> DriverSettings: ...
    def Add(self, name: str) -> DriverSettings: ...
    # Skipped Remove due to it being static, abstract and generic.

    Remove : Remove_MethodGroup
    class Remove_MethodGroup:
        @typing.overload
        def __call__(self, driverIndex: int) -> None:...
        @typing.overload
        def __call__(self, driverName: str) -> None:...



class DriverSettings:
    @property
    def AmplifierGain(self) -> DoubleSetting: ...
    @property
    def ExternalResistance(self) -> float: ...
    @ExternalResistance.setter
    def ExternalResistance(self, value: float) -> float: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def VdrvrChannel(self) -> InputChannelIndex: ...
    @VdrvrChannel.setter
    def VdrvrChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def VsenseChannel(self) -> InputChannelIndex: ...
    @VsenseChannel.setter
    def VsenseChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...


class DtsTransmitRate(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Auto : DtsTransmitRate # 0
    FourX : DtsTransmitRate # 1


class DtsXPackMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    FourX_24Mbps : DtsXPackMode # 0
    OneX_6Mbps : DtsXPackMode # 1
    OneX_1Mbps : DtsXPackMode # 2


class Durations:
    @property
    def AdditionalPostSweepSilence(self) -> DoubleSetting: ...
    @property
    def DurationWarning(self) -> str: ...
    @property
    def Pilot(self) -> DoubleSetting: ...
    @property
    def PostPilotSilence(self) -> DoubleSetting: ...
    @property
    def PreSweep(self) -> DoubleSetting: ...
    @property
    def Sweep(self) -> DoubleSetting: ...


class DutDelayMeasurement:
    @property
    def AcquiredWaveform(self) -> AcquiredWaveformGraph: ...
    @property
    def AcquisitionSeconds(self) -> float: ...
    @AcquisitionSeconds.setter
    def AcquisitionSeconds(self, value: float) -> float: ...
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def Correlation(self) -> XYGraph: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def Delay(self) -> MeterGraph: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> DelayGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def ReplaceSavedFile(self) -> bool: ...
    @ReplaceSavedFile.setter
    def ReplaceSavedFile(self, value: bool) -> bool: ...
    @property
    def SaveAcquisitionToFile(self) -> bool: ...
    @SaveAcquisitionToFile.setter
    def SaveAcquisitionToFile(self, value: bool) -> bool: ...
    @property
    def SavedAcquisitionAudioType(self) -> RecordedAudioType: ...
    @SavedAcquisitionAudioType.setter
    def SavedAcquisitionAudioType(self, value: RecordedAudioType) -> RecordedAudioType: ...
    @property
    def SavedAcquisitionBitDepth(self) -> SavedAcquisitionBitDepthType: ...
    @SavedAcquisitionBitDepth.setter
    def SavedAcquisitionBitDepth(self, value: SavedAcquisitionBitDepthType) -> SavedAcquisitionBitDepthType: ...
    @property
    def SavedAcquisitionFileName(self) -> str: ...
    @SavedAcquisitionFileName.setter
    def SavedAcquisitionFileName(self, value: str) -> str: ...
    @property
    def SavedAcquisitionFolderName(self) -> str: ...
    @SavedAcquisitionFolderName.setter
    def SavedAcquisitionFolderName(self, value: str) -> str: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class DutDelaySettings:
    @property
    def AcquisitionSeconds(self) -> float: ...
    @AcquisitionSeconds.setter
    def AcquisitionSeconds(self, value: float) -> float: ...


class DynamicRangeGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def LevelRatio(self) -> DoubleSetting: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def SineDual(self) -> SineDualGenerator: ...
    @property
    def SineVarPhase(self) -> SineVarPhaseGenerator: ...
    @property
    def Type(self) -> SplitSineWithFileGeneratorType: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class DynamicRangeMeasurement:
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def DynamicRange(self) -> MeterGraph: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> DynamicRangeGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def HighpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def HighpassFilterType(self) -> MeasurementHighpassFilterType: ...
    @HighpassFilterType.setter
    def HighpassFilterType(self, value: MeasurementHighpassFilterType) -> MeasurementHighpassFilterType: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def LowpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def LowpassFilterType(self) -> MeasurementLowpassFilterType: ...
    @LowpassFilterType.setter
    def LowpassFilterType(self, value: MeasurementLowpassFilterType) -> MeasurementLowpassFilterType: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NoiseWeighting(self) -> WeightingFilterType: ...
    @NoiseWeighting.setter
    def NoiseWeighting(self, value: WeightingFilterType) -> WeightingFilterType: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def Settling(self) -> DynamicRangeSettlingParametersCollection: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class DynamicRangeSettlingParametersCollection:
    @property
    def Noise(self) -> SettlingParameters: ...
    @property
    def Signal(self) -> SettlingParameters: ...


class DynamicResultGraph:
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsAnsiS322FitLimitsToDataXyResult(self) -> bool: ...
    @property
    def IsBitsGraph(self) -> bool: ...
    @property
    def IsCompareEncodedBitstreamResult(self) -> bool: ...
    @property
    def IsCompareLevelAndDistortionResult(self) -> bool: ...
    @property
    def IsCompareMeterResult(self) -> bool: ...
    @property
    def IsCompareXYResult(self) -> bool: ...
    @property
    def IsCustomMeterGraph(self) -> bool: ...
    @property
    def IsCustomProcessingMeterResult(self) -> bool: ...
    @property
    def IsCustomProcessingTabularResult(self) -> bool: ...
    @property
    def IsCustomProcessingXyResult(self) -> bool: ...
    @property
    def IsCustomXYGraph(self) -> bool: ...
    @property
    def IsDataDistributionResult(self) -> bool: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDifferenceFrequencyDistortionXyGraph(self) -> bool: ...
    @property
    def IsEqXyResult(self) -> bool: ...
    @property
    def IsHarmonicSumMeter(self) -> bool: ...
    @property
    def IsHarmonicXYGraph(self) -> bool: ...
    @property
    def IsLinearityXyGraph(self) -> bool: ...
    @property
    def IsMetadataGraph(self) -> bool: ...
    @property
    def IsMeterGraph(self) -> bool: ...
    @property
    def IsNormalizedDistortionRatioXYGraph(self) -> bool: ...
    @property
    def IsNormalizeInvertResult(self) -> bool: ...
    @property
    def IsOffsetMeterResult(self) -> bool: ...
    @property
    def IsOffsetXYResult(self) -> bool: ...
    @property
    def IsRatioToneMeterGraph(self) -> bool: ...
    @property
    def IsSensitivityMeterResult(self) -> bool: ...
    @property
    def IsSensitivityXYResult(self) -> bool: ...
    @property
    def IsSmoothResult(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsSpecifyDataPointsResult(self) -> bool: ...
    @property
    def IsSpecifySingleDataPointFromLevelAndDistortionResult(self) -> bool: ...
    @property
    def IsSpecifySingleDataPointResult(self) -> bool: ...
    @property
    def IsStatisticsMeterFromLevelAndDistortionResult(self) -> bool: ...
    @property
    def IsStatisticsMeterFromMeterResult(self) -> bool: ...
    @property
    def IsStatisticsMeterFromXYResult(self) -> bool: ...
    @property
    def IsStatisticsXYLevelAndDistortionResult(self) -> bool: ...
    @property
    def IsStatisticsXYResult(self) -> bool: ...
    @property
    def IsTabularResult(self) -> bool: ...
    @property
    def IsTedsTabularResult(self) -> bool: ...
    @property
    def IsTimeDomainSmoothResult(self) -> bool: ...
    @property
    def IsToneCrosstalkMeterGraph(self) -> bool: ...
    @property
    def IsToneMeterGraph(self) -> bool: ...
    @property
    def IsVerticalBarGraph(self) -> bool: ...
    @property
    def IsWaveformDataGraph(self) -> bool: ...
    @property
    def IsXYDistortionGraph(self) -> bool: ...
    @property
    def IsXYGraph(self) -> bool: ...
    @property
    def ResultType(self) -> MeasurementResultType: ...
    def AsAnsiS322FitLimitsToDataXyResult(self) -> AnsiS322FitLimitsToDataXyResult: ...
    def AsBitsGraph(self) -> BitsGraph: ...
    def AsCompareEncodedBitstreamResult(self) -> CompareEncodedBitstreamResult: ...
    def AsCompareLevelAndDistortionResult(self) -> CompareLevelAndDistortionResult: ...
    def AsCompareMeterResult(self) -> CompareMeterResult: ...
    def AsCompareXYResult(self) -> CompareXYResult: ...
    def AsCustomMeterGraph(self) -> CustomMeterGraph: ...
    def AsCustomProcessingMeterResult(self) -> CustomProcessingMeterResult: ...
    def AsCustomProcessingTabularResult(self) -> CustomProcessingTabularResult: ...
    def AsCustomProcessingXyResult(self) -> CustomProcessingXyResult: ...
    def AsCustomXYGraph(self) -> CustomXYGraph: ...
    def AsDataDistributionResult(self) -> DataDistributionResult: ...
    def AsDifferenceFrequencyDistortionXyGraph(self) -> DifferenceFrequencyDistortionXyGraph: ...
    def AsEqXyResult(self) -> EqXyResult: ...
    def AsHarmonicSumMeter(self) -> HarmonicSumMeter: ...
    def AsHarmonicXYGraph(self) -> HarmonicXYGraph: ...
    def AsLinearityXyGraph(self) -> LinearityXYGraph: ...
    def AsMetadataGraph(self) -> MetadataGraph: ...
    def AsMeterGraph(self) -> MeterGraph: ...
    def AsNormalizedDistortionRatioXYGraph(self) -> NormalizedDistortionRatioXYGraph: ...
    def AsNormalizeInvertResult(self) -> NormalizeInvertResult: ...
    def AsOffsetMeterResult(self) -> OffsetMeterResult: ...
    def AsOffsetXYResult(self) -> OffsetXYResult: ...
    def AsRatioToneMeterGraph(self) -> RatioToneMeterGraph: ...
    def AsSensitivityMeterResult(self) -> SensitivityMeterResult: ...
    def AsSensitivityXYResult(self) -> SensitivityXYResult: ...
    def AsSmoothResult(self) -> SmoothResult: ...
    def AsSpecifyDataPointsResult(self) -> SpecifyDataPointsResult: ...
    def AsSpecifySingleDataPointFromLevelAndDistortionResult(self) -> SpecifySingleDataPointFromLevelAndDistortionResult: ...
    def AsSpecifySingleDataPointResult(self) -> SpecifySingleDataPointResult: ...
    def AsStatisticsMeterFromLevelAndDistortionResult(self) -> StatisticsMeterFromLevelAndDistortionResult: ...
    def AsStatisticsMeterFromMeterResult(self) -> StatisticsMeterFromMeterResult: ...
    def AsStatisticsMeterFromXYResult(self) -> StatisticsMeterFromXYResult: ...
    def AsStatisticsXYLevelAndDistortionResult(self) -> StatisticsXYLevelAndDistortionResult: ...
    def AsStatisticsXYResult(self) -> StatisticsXYResult: ...
    def AsTabularResult(self) -> TabularResult: ...
    def AsTedsTabularResult(self) -> TedsTabularResult: ...
    def AsTimeDomainSmoothResult(self) -> TimeDomainSmoothResult: ...
    def AsToneCrosstalkMeterGraph(self) -> ToneCrosstalkMeterGraph: ...
    def AsToneMeterGraph(self) -> ToneMeterGraph: ...
    def AsVerticalBarGraph(self) -> VerticalBarGraph: ...
    def AsWaveformDataGraph(self) -> WaveformDataGraph: ...
    def AsXYDistortionGraph(self) -> XYDistortionGraph: ...
    def AsXYGraph(self) -> XYGraph: ...


class EArcAudioFormat(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    LPCM2 : EArcAudioFormat # 0
    LPCM8 : EArcAudioFormat # 1


class EdgeSync(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    RisingEdge : EdgeSync # 0
    FallingEdge : EdgeSync # 1


class EdidStatus(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Unknown : EdidStatus # 0
    Read : EdidStatus # 1
    ReceiverNotConnected : EdidStatus # 2
    DdcError : EdidStatus # 3


class EnableGeneratorStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class EnableGeneratorStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> EnableGeneratorStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class EnableVBiasStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class EnableVBiasStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> EnableVBiasStep: ...
    def Add(self) -> EnableVBiasStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class EnableWidebandSpeechStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    @property
    def WidebandSpeechEnabled(self) -> bool: ...
    @WidebandSpeechEnabled.setter
    def WidebandSpeechEnabled(self, value: bool) -> bool: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class EnableWidebandSpeechStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> EnableWidebandSpeechStep: ...
    def Add(self) -> EnableWidebandSpeechStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class EqSettings:
    @property
    def Eq(self) -> str: ...
    @Eq.setter
    def Eq(self, value: str) -> str: ...
    @property
    def EqNames(self) -> Array_1[str]: ...
    @property
    def FrequencyValues(self) -> Array_1[float]: ...
    @property
    def LevelValues(self) -> Array_1[float]: ...
    # Skipped LoadEqFromFile due to it being static, abstract and generic.

    LoadEqFromFile : LoadEqFromFile_MethodGroup
    class LoadEqFromFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, invertData: bool, replaceIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, invertData: bool, renameIfInverted: bool, replaceIfExists: bool) -> None:...



class EqStepSelection(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    FromProject : EqStepSelection # 0
    FromFile : EqStepSelection # 1


class EQType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : EQType # 0
    Relative : EQType # 1
    Absolute : EQType # 2


class EqXyDataTrace:
    @property
    def Channel(self) -> InputChannelIndex: ...
    @Channel.setter
    def Channel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def DataSetType(self) -> MeterDataSetType: ...
    @DataSetType.setter
    def DataSetType(self, value: MeterDataSetType) -> MeterDataSetType: ...
    @property
    def Eq(self) -> str: ...
    @Eq.setter
    def Eq(self, value: str) -> str: ...
    @property
    def EqNames(self) -> Array_1[str]: ...
    @property
    def FrequencyValues(self) -> Array_1[float]: ...
    @property
    def LevelValues(self) -> Array_1[float]: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def SourceDataSet(self) -> int: ...
    @SourceDataSet.setter
    def SourceDataSet(self, value: int) -> int: ...
    @property
    def SourceDataSetType(self) -> SourceDataType: ...
    @SourceDataSetType.setter
    def SourceDataSetType(self, value: SourceDataType) -> SourceDataType: ...
    def Delete(self) -> None: ...
    # Skipped LoadEqFromFile due to it being static, abstract and generic.

    LoadEqFromFile : LoadEqFromFile_MethodGroup
    class LoadEqFromFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, invertData: bool, replaceIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, invertData: bool, renameIfInverted: bool, replaceIfExists: bool) -> None:...



class EqXyResult:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def Source(self) -> Graph: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def Traces(self) -> EqXyResultDataTraceCollection: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class EqXyResultDataTraceCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> EqXyDataTrace: ...
    def Add(self) -> EqXyDataTrace: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Remove(self, index: int) -> None: ...


class ExportResultDataStep:
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def AppendYDataOnly(self) -> bool: ...
    @AppendYDataOnly.setter
    def AppendYDataOnly(self, value: bool) -> bool: ...
    @property
    def CanDelete(self) -> bool: ...
    @property
    def DataIndex(self) -> int: ...
    @DataIndex.setter
    def DataIndex(self, value: int) -> int: ...
    @property
    def DataType(self) -> SourceDataType: ...
    @DataType.setter
    def DataType(self, value: SourceDataType) -> SourceDataType: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FileName(self) -> str: ...
    @FileName.setter
    def FileName(self, value: str) -> str: ...
    @property
    def IncludeSummarySheet(self) -> bool: ...
    @IncludeSummarySheet.setter
    def IncludeSummarySheet(self, value: bool) -> bool: ...
    @property
    def InsertVariableInHeader(self) -> bool: ...
    @InsertVariableInHeader.setter
    def InsertVariableInHeader(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def ResultName(self) -> str: ...
    @ResultName.setter
    def ResultName(self, value: str) -> str: ...
    @property
    def ResultNames(self) -> Array_1[str]: ...
    @property
    def SheetPerChannel(self) -> bool: ...
    @SheetPerChannel.setter
    def SheetPerChannel(self, value: bool) -> bool: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    @property
    def VariableInHeader(self) -> str: ...
    @VariableInHeader.setter
    def VariableInHeader(self, value: str) -> str: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def GetChannelEnabled(self, ch: int) -> bool: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def MoveTo(self, index: int) -> None: ...
    def SetChannelEnabled(self, ch: int, enabled: bool) -> None: ...


class ExportResultDataStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ExportResultDataStep: ...
    def Add(self) -> ExportResultDataStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class ExportWavFileStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def DataIndex(self) -> int: ...
    @DataIndex.setter
    def DataIndex(self, value: int) -> int: ...
    @property
    def DataType(self) -> SourceDataType: ...
    @DataType.setter
    def DataType(self, value: SourceDataType) -> SourceDataType: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def ReplaceSavedFile(self) -> bool: ...
    @ReplaceSavedFile.setter
    def ReplaceSavedFile(self, value: bool) -> bool: ...
    @property
    def ResultName(self) -> str: ...
    @ResultName.setter
    def ResultName(self, value: str) -> str: ...
    @property
    def ResultNames(self) -> Array_1[str]: ...
    @property
    def SavedAcquisitionAudioType(self) -> FileAudioType: ...
    @SavedAcquisitionAudioType.setter
    def SavedAcquisitionAudioType(self, value: FileAudioType) -> FileAudioType: ...
    @property
    def SavedAcquisitionBitDepth(self) -> SavedAcquisitionBitDepthType: ...
    @SavedAcquisitionBitDepth.setter
    def SavedAcquisitionBitDepth(self, value: SavedAcquisitionBitDepthType) -> SavedAcquisitionBitDepthType: ...
    @property
    def SavedAcquisitionFileName(self) -> str: ...
    @SavedAcquisitionFileName.setter
    def SavedAcquisitionFileName(self, value: str) -> str: ...
    @property
    def SavedAcquisitionFolderName(self) -> str: ...
    @SavedAcquisitionFolderName.setter
    def SavedAcquisitionFolderName(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class ExportWavFileStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ExportWavFileStep: ...
    def Add(self) -> ExportWavFileStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class ExternalTriggerSettings:
    @property
    def InputTriggerEdge(self) -> TriggerEdge: ...
    @InputTriggerEdge.setter
    def InputTriggerEdge(self, value: TriggerEdge) -> TriggerEdge: ...
    @property
    def InputTriggerThreshold(self) -> DoubleSetting: ...
    @property
    def OutputTriggerLogicLevel(self) -> DoubleSetting: ...
    @property
    def OutputTriggerSource(self) -> TriggerSource: ...
    @OutputTriggerSource.setter
    def OutputTriggerSource(self, value: TriggerSource) -> TriggerSource: ...


class FailedSequenceResult:
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def ErrorMessage(self) -> str: ...
    @property
    def HasErrorMessage(self) -> bool: ...
    @property
    def HasMeterValues(self) -> bool: ...
    @property
    def HasRawTextResults(self) -> bool: ...
    @property
    def HasThieleSmallValues(self) -> bool: ...
    @property
    def HasXYValues(self) -> bool: ...
    @property
    def HasXYYValues(self) -> bool: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def LeftUnit(self) -> str: ...
    @property
    def LowerLimitCheckEnabled(self) -> bool: ...
    @property
    def MeasurementName(self) -> str: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def MeterUnit(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def PassedLowerLimitCheck(self) -> bool: ...
    @property
    def PassedResult(self) -> bool: ...
    @property
    def PassedUpperLimitCheck(self) -> bool: ...
    @property
    def ResultType(self) -> MeasurementResultType: ...
    @property
    def RightUnit(self) -> str: ...
    @property
    def SignalPathName(self) -> str: ...
    @property
    def UpperLimitCheckEnabled(self) -> bool: ...
    @property
    def UserActive(self) -> bool: ...
    @property
    def UserPassed(self) -> bool: ...
    @property
    def XUnit(self) -> str: ...
    @property
    def YUnit(self) -> str: ...
    def ExportData(self, fileName: str) -> None: ...
    def GetMeterLowerLimitText(self) -> Array_1[str]: ...
    def GetMeterLowerLimitValues(self) -> Array_1[float]: ...
    def GetMeterReadingNames(self) -> Array_1[str]: ...
    def GetMeterText(self) -> Array_1[str]: ...
    def GetMeterUpperLimitText(self) -> Array_1[str]: ...
    def GetMeterUpperLimitValues(self) -> Array_1[float]: ...
    def GetRawTextResults(self) -> Array_1[str]: ...
    def GetThieleSmallLowerLimitValue(self, parameter: ThieleSmallParameter) -> float: ...
    def GetThieleSmallUpperLimitValue(self, parameter: ThieleSmallParameter) -> float: ...
    def GetThieleSmallValues(self, parameter: ThieleSmallParameter) -> Array_1[float]: ...
    def GetThieleSmallValuesText(self, parameter: ThieleSmallParameter) -> Array_1[str]: ...
    def GetXYChannelCount(self, axis: VerticalAxis) -> int: ...
    def GetXYChannelNames(self, axis: VerticalAxis) -> Array_1[str]: ...
    def GetXYLowerLimit(self, axis: VerticalAxis) -> SequenceResultXyGraphLimit: ...
    def GetXYUpperLimit(self, axis: VerticalAxis) -> SequenceResultXyGraphLimit: ...
    def HasData(self, dataType: SourceDataType, index: int) -> bool: ...
    def LimitCheckEnabled(self, limit: LimitType, axis: VerticalAxis) -> bool: ...
    def PassedLimitCheck(self, limit: LimitType, axis: VerticalAxis) -> bool: ...
    # Skipped GetMeterValues due to it being static, abstract and generic.

    GetMeterValues : GetMeterValues_MethodGroup
    class GetMeterValues_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[float]:...
        @typing.overload
        def __call__(self, readingName: str) -> Array_1[float]:...

    # Skipped GetThieleSmallValue due to it being static, abstract and generic.

    GetThieleSmallValue : GetThieleSmallValue_MethodGroup
    class GetThieleSmallValue_MethodGroup:
        @typing.overload
        def __call__(self, parameter: ThieleSmallParameter) -> float:...
        @typing.overload
        def __call__(self, driverIndex: int, parameter: ThieleSmallParameter) -> float:...

    # Skipped GetThieleSmallValueText due to it being static, abstract and generic.

    GetThieleSmallValueText : GetThieleSmallValueText_MethodGroup
    class GetThieleSmallValueText_MethodGroup:
        @typing.overload
        def __call__(self, parameter: ThieleSmallParameter) -> str:...
        @typing.overload
        def __call__(self, driverIndex: int, parameter: ThieleSmallParameter) -> str:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis, dataType: SourceDataType, dataIndex: int) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis, dataType: SourceDataType, dataIndex: int) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis, dataType: SourceDataType, dataIndex: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis, dataType: SourceDataType, dataIndex: int) -> Array_1[float]:...

    # Skipped GetXYText due to it being static, abstract and generic.

    GetXYText : GetXYText_MethodGroup
    class GetXYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis, dataType: SourceDataType, dataIndex: int) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis, dataType: SourceDataType, dataIndex: int) -> Array_1[GraphStringPoint]:...

    # Skipped GetXYValues due to it being static, abstract and generic.

    GetXYValues : GetXYValues_MethodGroup
    class GetXYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis, dataType: SourceDataType, dataIndex: int) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis, dataType: SourceDataType, dataIndex: int) -> Array_1[GraphPoint]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis, dataType: SourceDataType, dataIndex: int) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis, dataType: SourceDataType, dataIndex: int) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis, dataType: SourceDataType, dataIndex: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis, dataType: SourceDataType, dataIndex: int) -> Array_1[float]:...

    # Skipped PassedLimitCheckOnChannel due to it being static, abstract and generic.

    PassedLimitCheckOnChannel : PassedLimitCheckOnChannel_MethodGroup
    class PassedLimitCheckOnChannel_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, limit: LimitType, axis: VerticalAxis) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, limit: LimitType, axis: VerticalAxis) -> bool:...

    # Skipped PassedLowerLimitCheckOnChannel due to it being static, abstract and generic.

    PassedLowerLimitCheckOnChannel : PassedLowerLimitCheckOnChannel_MethodGroup
    class PassedLowerLimitCheckOnChannel_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped PassedThieleSmallLowerLimit due to it being static, abstract and generic.

    PassedThieleSmallLowerLimit : PassedThieleSmallLowerLimit_MethodGroup
    class PassedThieleSmallLowerLimit_MethodGroup:
        @typing.overload
        def __call__(self, parameter: ThieleSmallParameter) -> bool:...
        @typing.overload
        def __call__(self, driverIndex: int, parameter: ThieleSmallParameter) -> bool:...

    # Skipped PassedThieleSmallUpperLimit due to it being static, abstract and generic.

    PassedThieleSmallUpperLimit : PassedThieleSmallUpperLimit_MethodGroup
    class PassedThieleSmallUpperLimit_MethodGroup:
        @typing.overload
        def __call__(self, parameter: ThieleSmallParameter) -> bool:...
        @typing.overload
        def __call__(self, driverIndex: int, parameter: ThieleSmallParameter) -> bool:...

    # Skipped PassedUpperLimitCheckOnChannel due to it being static, abstract and generic.

    PassedUpperLimitCheckOnChannel : PassedUpperLimitCheckOnChannel_MethodGroup
    class PassedUpperLimitCheckOnChannel_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...



class FailedSequenceResultCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> SequenceResult: ...
    def GetEnumerator(self) -> IEnumerator: ...
    # Skipped GetResults due to it being static, abstract and generic.

    GetResults : GetResults_MethodGroup
    class GetResults_MethodGroup:
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementIndex: int) -> SequenceResultCollection:...
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementName: str) -> SequenceResultCollection:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementIndex: int) -> SequenceResultCollection:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementName: str) -> SequenceResultCollection:...



class FailureConditionType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    LeftOrRight : FailureConditionType # 0
    LeftAndRight : FailureConditionType # 1


class FastFrequencyResponseSettings:
    @property
    def AutoDelayCompensation(self) -> bool: ...
    @AutoDelayCompensation.setter
    def AutoDelayCompensation(self, value: bool) -> bool: ...
    @property
    def DiscardDistribution(self) -> TimingDistribution: ...
    @property
    def FastSweepAutoDuration(self) -> bool: ...
    @FastSweepAutoDuration.setter
    def FastSweepAutoDuration(self, value: bool) -> bool: ...
    @property
    def FastSweepGeneratorSettings(self) -> FrequencySweepParameters: ...
    @property
    def MeasureDistribution(self) -> TimingDistribution: ...
    @property
    def SweepType(self) -> FastFrequencyResponseSweepType: ...
    @SweepType.setter
    def SweepType(self, value: FastFrequencyResponseSweepType) -> FastFrequencyResponseSweepType: ...
    @property
    def TransitionDistribution(self) -> TimingDistribution: ...


class FastFrequencyResponseSweepType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    LogChirp : FastFrequencyResponseSweepType # 0
    FastSweep : FastFrequencyResponseSweepType # 1


class FastFrequencyThdNSettings:
    @property
    def AutoDelayCompensation(self) -> bool: ...
    @AutoDelayCompensation.setter
    def AutoDelayCompensation(self, value: bool) -> bool: ...
    @property
    def DiscardDistribution(self) -> TimingDistribution: ...
    @property
    def FastSweepAutoDuration(self) -> bool: ...
    @FastSweepAutoDuration.setter
    def FastSweepAutoDuration(self, value: bool) -> bool: ...
    @property
    def FastSweepGeneratorSettings(self) -> FrequencySweepParameters: ...
    @property
    def MeasureDistribution(self) -> TimingDistribution: ...
    @property
    def MeasureThdN(self) -> bool: ...
    @MeasureThdN.setter
    def MeasureThdN(self, value: bool) -> bool: ...
    @property
    def SweepType(self) -> FastFrequencyResponseSweepType: ...
    @SweepType.setter
    def SweepType(self, value: FastFrequencyResponseSweepType) -> FastFrequencyResponseSweepType: ...
    @property
    def TransitionDistribution(self) -> TimingDistribution: ...


class FatalAPException(APException):
    @typing.overload
    def __init__(self, info: SerializationInfo, context: StreamingContext) -> None: ...
    @typing.overload
    def __init__(self, message: str, errorCode: APError) -> None: ...
    @typing.overload
    def __init__(self, message: str, errorCode: APError, inner: Exception) -> None: ...
    @property
    def Data(self) -> IDictionary: ...
    @property
    def ErrorCode(self) -> APError: ...
    @property
    def HelpLink(self) -> str: ...
    @HelpLink.setter
    def HelpLink(self, value: str) -> str: ...
    @property
    def HResult(self) -> int: ...
    @HResult.setter
    def HResult(self, value: int) -> int: ...
    @property
    def InnerException(self) -> Exception: ...
    @property
    def Message(self) -> str: ...
    @property
    def Source(self) -> str: ...
    @Source.setter
    def Source(self, value: str) -> str: ...
    @property
    def StackTrace(self) -> str: ...
    @property
    def TargetSite(self) -> MethodBase: ...


class FftAnalyzer:
    @property
    def AcquisitionSamples(self) -> int: ...
    @AcquisitionSamples.setter
    def AcquisitionSamples(self, value: int) -> int: ...
    @property
    def AcquisitionSeconds(self) -> float: ...
    @AcquisitionSeconds.setter
    def AcquisitionSeconds(self, value: float) -> float: ...
    @property
    def AcquisitionType(self) -> AcqLengthType: ...
    @AcquisitionType.setter
    def AcquisitionType(self, value: AcqLengthType) -> AcqLengthType: ...
    @property
    def AmplitudeSpectralDensity(self) -> XYGraph: ...
    @property
    def AnalogInputBandwidth(self) -> SignalAnalyzerBandwidthType: ...
    @AnalogInputBandwidth.setter
    def AnalogInputBandwidth(self, value: SignalAnalyzerBandwidthType) -> SignalAnalyzerBandwidthType: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def Averages(self) -> int: ...
    @Averages.setter
    def Averages(self, value: int) -> int: ...
    @property
    def AveragingType(self) -> AveragingType: ...
    @AveragingType.setter
    def AveragingType(self, value: AveragingType) -> AveragingType: ...
    @property
    def DelayTimeInSamples(self) -> float: ...
    @DelayTimeInSamples.setter
    def DelayTimeInSamples(self, value: float) -> float: ...
    @property
    def DelayTimeInSeconds(self) -> float: ...
    @DelayTimeInSeconds.setter
    def DelayTimeInSeconds(self, value: float) -> float: ...
    @property
    def FFTLength(self) -> FFTLength: ...
    @FFTLength.setter
    def FFTLength(self, value: FFTLength) -> FFTLength: ...
    @property
    def FFTLengthSamples(self) -> int: ...
    @FFTLengthSamples.setter
    def FFTLengthSamples(self, value: int) -> int: ...
    @property
    def FFTSpectrum(self) -> XYGraph: ...
    @property
    def Function(self) -> BenchTestFunction: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def HasError(self) -> bool: ...
    @property
    def IsStarted(self) -> bool: ...
    @property
    def LastErrorCode(self) -> APError: ...
    @property
    def LastErrorMessage(self) -> str: ...
    @property
    def LevelTriggerSlope(self) -> LevelSlopeType: ...
    @LevelTriggerSlope.setter
    def LevelTriggerSlope(self, value: LevelSlopeType) -> LevelSlopeType: ...
    @property
    def NestedSweep(self) -> NestedSweepSettings: ...
    @property
    def PdmSignalSource(self) -> PdmSignalSource: ...
    @PdmSignalSource.setter
    def PdmSignalSource(self, value: PdmSignalSource) -> PdmSignalSource: ...
    @property
    def PowerSpectralDensity(self) -> XYGraph: ...
    @property
    def Repeat(self) -> bool: ...
    @Repeat.setter
    def Repeat(self, value: bool) -> bool: ...
    @property
    def SaveToFileSettings(self) -> SaveAcquisitionToFileSettings: ...
    @property
    def Scope(self) -> TimeDomainXYGraph: ...
    @property
    def TriggerChannel(self) -> InputChannelIndex: ...
    @TriggerChannel.setter
    def TriggerChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def TriggerInput(self) -> APxInputSelection: ...
    @TriggerInput.setter
    def TriggerInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def TriggerLevel(self) -> DoubleSetting: ...
    @property
    def TriggerTimeout(self) -> float: ...
    @TriggerTimeout.setter
    def TriggerTimeout(self, value: float) -> float: ...
    @property
    def TriggerType(self) -> TriggerType: ...
    @TriggerType.setter
    def TriggerType(self, value: TriggerType) -> TriggerType: ...
    @property
    def UseDelayTimeInSeconds(self) -> bool: ...
    @UseDelayTimeInSeconds.setter
    def UseDelayTimeInSeconds(self, value: bool) -> bool: ...
    @property
    def WindowType(self) -> WindowType: ...
    @WindowType.setter
    def WindowType(self, value: WindowType) -> WindowType: ...
    def Analyze(self) -> None: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Show(self) -> None: ...
    def Start(self) -> None: ...
    def Stop(self) -> None: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class FFTLength(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    FFT_256 : FFTLength # 0
    FFT_512 : FFTLength # 1
    FFT_1024 : FFTLength # 2
    FFT_2048 : FFTLength # 3
    FFT_4096 : FFTLength # 4
    FFT_8192 : FFTLength # 5
    FFT_12000 : FFTLength # 6
    FFT_16384 : FFTLength # 7
    FFT_24000 : FFTLength # 8
    FFT_32768 : FFTLength # 9
    FFT_48000 : FFTLength # 10
    FFT_65536 : FFTLength # 11
    FFT_96000 : FFTLength # 12
    FFT_131072 : FFTLength # 13
    FFT_192000 : FFTLength # 14
    FFT_262144 : FFTLength # 15
    FFT_312000 : FFTLength # 16
    FFT_524288 : FFTLength # 17
    FFT_624000 : FFTLength # 18
    FFT_1048576 : FFTLength # 19
    FFT_1248000 : FFTLength # 20
    Custom : FFTLength # 21


class FftResults:
    @property
    def AmplitudeSpectralDensity(self) -> XYGraph: ...
    @property
    def FFTSpectrum(self) -> XYGraph: ...
    @property
    def PowerSpectralDensity(self) -> XYGraph: ...
    @property
    def Scope(self) -> TimeDomainXYGraph: ...


class FftSettings:
    @property
    def AcquisitionSamples(self) -> int: ...
    @AcquisitionSamples.setter
    def AcquisitionSamples(self, value: int) -> int: ...
    @property
    def AcquisitionSeconds(self) -> float: ...
    @AcquisitionSeconds.setter
    def AcquisitionSeconds(self, value: float) -> float: ...
    @property
    def AcquisitionType(self) -> AcqLengthType: ...
    @AcquisitionType.setter
    def AcquisitionType(self, value: AcqLengthType) -> AcqLengthType: ...
    @property
    def AnalogInputBandwidth(self) -> SignalAnalyzerBandwidthType: ...
    @AnalogInputBandwidth.setter
    def AnalogInputBandwidth(self, value: SignalAnalyzerBandwidthType) -> SignalAnalyzerBandwidthType: ...
    @property
    def Averages(self) -> int: ...
    @Averages.setter
    def Averages(self, value: int) -> int: ...
    @property
    def AveragingType(self) -> AveragingType: ...
    @AveragingType.setter
    def AveragingType(self, value: AveragingType) -> AveragingType: ...
    @property
    def DelayTimeInSamples(self) -> float: ...
    @DelayTimeInSamples.setter
    def DelayTimeInSamples(self, value: float) -> float: ...
    @property
    def DelayTimeInSeconds(self) -> float: ...
    @DelayTimeInSeconds.setter
    def DelayTimeInSeconds(self, value: float) -> float: ...
    @property
    def FFTLength(self) -> FFTLength: ...
    @FFTLength.setter
    def FFTLength(self, value: FFTLength) -> FFTLength: ...
    @property
    def FFTLengthSamples(self) -> int: ...
    @FFTLengthSamples.setter
    def FFTLengthSamples(self, value: int) -> int: ...
    @property
    def LevelTriggerSlope(self) -> LevelSlopeType: ...
    @LevelTriggerSlope.setter
    def LevelTriggerSlope(self, value: LevelSlopeType) -> LevelSlopeType: ...
    @property
    def NestedSweep(self) -> NestedSweepSettings: ...
    @property
    def PdmSignalSource(self) -> PdmSignalSource: ...
    @PdmSignalSource.setter
    def PdmSignalSource(self, value: PdmSignalSource) -> PdmSignalSource: ...
    @property
    def SaveToFileSettings(self) -> SaveAcquisitionToFileSettings: ...
    @property
    def TriggerChannel(self) -> InputChannelIndex: ...
    @TriggerChannel.setter
    def TriggerChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def TriggerInput(self) -> APxInputSelection: ...
    @TriggerInput.setter
    def TriggerInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def TriggerLevel(self) -> DoubleSetting: ...
    @property
    def TriggerTimeout(self) -> float: ...
    @TriggerTimeout.setter
    def TriggerTimeout(self, value: float) -> float: ...
    @property
    def TriggerType(self) -> TriggerType: ...
    @TriggerType.setter
    def TriggerType(self, value: TriggerType) -> TriggerType: ...
    @property
    def UseDelayTimeInSeconds(self) -> bool: ...
    @UseDelayTimeInSeconds.setter
    def UseDelayTimeInSeconds(self, value: bool) -> bool: ...
    @property
    def WindowType(self) -> WindowType: ...
    @WindowType.setter
    def WindowType(self, value: WindowType) -> WindowType: ...


class FFTSpectrumMonitorSettings:
    @property
    def Averages(self) -> int: ...
    @Averages.setter
    def Averages(self, value: int) -> int: ...
    @property
    def FFTLength(self) -> FFTLength: ...
    @FFTLength.setter
    def FFTLength(self, value: FFTLength) -> FFTLength: ...
    @property
    def FFTSpectrum(self) -> BaseXYGraph: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def ShowResidual(self) -> bool: ...
    @ShowResidual.setter
    def ShowResidual(self, value: bool) -> bool: ...
    @property
    def WindowType(self) -> WindowType: ...
    @WindowType.setter
    def WindowType(self, value: WindowType) -> WindowType: ...
    def ResetAverages(self) -> None: ...


class FFTSpectrumSignalMonitorWindow:
    @property
    def Averages(self) -> int: ...
    @Averages.setter
    def Averages(self, value: int) -> int: ...
    @property
    def FFTLength(self) -> FFTLength: ...
    @FFTLength.setter
    def FFTLength(self, value: FFTLength) -> FFTLength: ...
    @property
    def FFTSpectrum(self) -> BaseXYGraph: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def ShowResidual(self) -> bool: ...
    @ShowResidual.setter
    def ShowResidual(self, value: bool) -> bool: ...
    @property
    def UndockedHeight(self) -> int: ...
    @UndockedHeight.setter
    def UndockedHeight(self, value: int) -> int: ...
    @property
    def UndockedLeft(self) -> int: ...
    @UndockedLeft.setter
    def UndockedLeft(self, value: int) -> int: ...
    @property
    def UndockedTop(self) -> int: ...
    @UndockedTop.setter
    def UndockedTop(self, value: int) -> int: ...
    @property
    def UndockedWidth(self) -> int: ...
    @UndockedWidth.setter
    def UndockedWidth(self, value: int) -> int: ...
    @property
    def WindowType(self) -> WindowType: ...
    @WindowType.setter
    def WindowType(self, value: WindowType) -> WindowType: ...
    def Dock(self) -> None: ...
    def Maximize(self) -> None: ...
    def Minimize(self) -> None: ...
    def ResetAverages(self) -> None: ...
    def Restore(self) -> None: ...
    def Settings(self, input: APxInputSelection) -> FFTSpectrumMonitorSettings: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...


class FileAnalysisSampleRateMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    UseRatesFromFiles : FileAnalysisSampleRateMode # 0
    UseRateFromFirstFile : FileAnalysisSampleRateMode # 1
    UseFixedRate : FileAnalysisSampleRateMode # 2


class FileAnalysisSettings:
    @property
    def FixedSampleRate(self) -> float: ...
    @FixedSampleRate.setter
    def FixedSampleRate(self, value: float) -> float: ...
    @property
    def SampleRateMode(self) -> FileAnalysisSampleRateMode: ...
    @SampleRateMode.setter
    def SampleRateMode(self, value: FileAnalysisSampleRateMode) -> FileAnalysisSampleRateMode: ...
    @property
    def WavFiles(self) -> Array_1[str]: ...
    @WavFiles.setter
    def WavFiles(self, value: Array_1[str]) -> Array_1[str]: ...


class FileAudioType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    LinearPcmMono : FileAudioType # 0
    LinearPcm : FileAudioType # 1
    LinearPcmMulti : FileAudioType # 2


class FilterTuningType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    GeneratorFrequency : FilterTuningType # 0
    JitterGeneratorFrequency : FilterTuningType # 1
    MeasuredFrequency : FilterTuningType # 2
    FixedFrequency : FilterTuningType # 3


class FirstSoftwareEnum(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class FitLimitToDataXyDataTrace:
    @property
    def Channel(self) -> InputChannelIndex: ...
    @Channel.setter
    def Channel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def DataSetType(self) -> MeterDataSetType: ...
    @DataSetType.setter
    def DataSetType(self, value: MeterDataSetType) -> MeterDataSetType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def SourceDataSet(self) -> int: ...
    @SourceDataSet.setter
    def SourceDataSet(self, value: int) -> int: ...
    @property
    def SourceDataSetType(self) -> SourceDataType: ...
    @SourceDataSetType.setter
    def SourceDataSetType(self, value: SourceDataType) -> SourceDataType: ...
    def Delete(self) -> None: ...


class FrameClockPulseWidth(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    OneBitClock : FrameClockPulseWidth # 0
    OneSubframe : FrameClockPulseWidth # 1
    FiftyPercentDutyCycle : FrameClockPulseWidth # 2


class FrameDutyCycle(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    FiftyPercentFrameDutyCycle : FrameDutyCycle # 0
    OneBitFrameDutyCycle : FrameDutyCycle # 1
    CustomFrameDutyCycle : FrameDutyCycle # 2


class FrameShift(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NoShift : FrameShift # 0
    OneBitShift : FrameShift # 1
    ShiftCustom : FrameShift # 2


class Frequencies:
    @property
    def Pilot(self) -> DoubleSetting: ...
    @property
    def Start(self) -> DoubleSetting: ...
    @property
    def Stop(self) -> DoubleSetting: ...


class FrequencyGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def SineDual(self) -> SineDualGenerator: ...
    @property
    def SineVarPhase(self) -> SineVarPhaseGenerator: ...
    @property
    def Type(self) -> SquarewaveGeneratorType: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class FrequencyMeasurement:
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Frequency(self) -> MeterGraph: ...
    @property
    def Generator(self) -> FrequencyGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def Settling(self) -> FrequencySettlingParametersCollection: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class FrequencyResponseMeasurement:
    @property
    def AdditionalAcquisitionTime(self) -> DoubleSetting: ...
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def Deviation(self) -> DeviationMeterGraph: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Gain(self) -> XYGraph: ...
    @property
    def Generator(self) -> ContinuousSweepGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Level(self) -> XYGraph: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NestedSweep(self) -> NestedSweepSettings: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def RelativeLevel(self) -> RelativeLevelXYGraph: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class FrequencySettlingParametersCollection:
    @property
    def Frequency(self) -> SettlingParameters: ...


class FrequencySweepParameters:
    @property
    def IsoSpacing(self) -> IsoRSpacingType: ...
    @IsoSpacing.setter
    def IsoSpacing(self, value: IsoRSpacingType) -> IsoRSpacingType: ...
    @property
    def NumberOfPoints(self) -> int: ...
    @NumberOfPoints.setter
    def NumberOfPoints(self, value: int) -> int: ...
    @property
    def StepSize(self) -> DoubleSetting: ...
    @property
    def StepType(self) -> SweepStepType: ...
    @StepType.setter
    def StepType(self, value: SweepStepType) -> SweepStepType: ...
    @property
    def SweepPoints(self) -> Array_1[float]: ...
    @SweepPoints.setter
    def SweepPoints(self, value: Array_1[float]) -> Array_1[float]: ...
    def ExportSweepPoints(self, fileName: str) -> None: ...
    def ImportSweepPoints(self, fileName: str) -> None: ...


class FrequencySweepSignalType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Freq_sweep_11 : FrequencySweepSignalType # 0
    Freq_sweep_11_3sec : FrequencySweepSignalType # 1
    Freq_sweep_31 : FrequencySweepSignalType # 2
    Freq_sweep_31_3sec : FrequencySweepSignalType # 3
    Freq_sweep_61 : FrequencySweepSignalType # 4
    Freq_sweep_61_3sec : FrequencySweepSignalType # 5
    Freq_sweep_62 : FrequencySweepSignalType # 6
    Freq_sweep_12 : FrequencySweepSignalType # 7
    Freq_sweep_34 : FrequencySweepSignalType # 8
    Freq_sweep_68 : FrequencySweepSignalType # 9
    Freq_sweep_13 : FrequencySweepSignalType # 10
    Freq_sweep_37 : FrequencySweepSignalType # 11
    Freq_sweep_74 : FrequencySweepSignalType # 12
    DolbyDigital_ThdnVsFrequencySweep : FrequencySweepSignalType # 13
    DolbyDigital_ThdnVsFrequencySweep_HighToLow : FrequencySweepSignalType # 14
    DolbyTrueHD_BD_FREQRES_48K_Freqs : FrequencySweepSignalType # 15
    DolbyTrueHD_BD_FREQRES_48K_Freqs_HighToLow : FrequencySweepSignalType # 16
    DolbyTrueHD_BD_FREQRES_96K_Freqs : FrequencySweepSignalType # 17
    DolbyTrueHD_BD_FREQRES_96K_Freqs_HighToLow : FrequencySweepSignalType # 18
    DolbyTrueHD_BD_FREQRES_192K_Freqs : FrequencySweepSignalType # 19
    DolbyTrueHD_BD_FREQRES_192K_Freqs_HighToLow : FrequencySweepSignalType # 20
    DolbyDigital_ThdnVsFrequencySweep_DVD_1_5 : FrequencySweepSignalType # 21
    DolbyDigital_LFE_DVD_1_5 : FrequencySweepSignalType # 22
    DtsFreqResponseMain : FrequencySweepSignalType # 23
    DtsFreqResponseCLFE : FrequencySweepSignalType # 24
    Dts_20_40kHz_freq_sweep : FrequencySweepSignalType # 25
    Unknown : FrequencySweepSignalType # 26
    UserDefined : FrequencySweepSignalType # 27


class FrfPhaseMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    RelativeToReference : FrfPhaseMode # 0
    RelativeToReferenceWrapped : FrfPhaseMode # 1


class FrfPhaseSpectrum:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def Message(self) -> str: ...
    @property
    def Mode(self) -> FrfPhaseMode: ...
    @Mode.setter
    def Mode(self, value: FrfPhaseMode) -> FrfPhaseMode: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def HasDataOnAxis(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> bool: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetData due to it being static, abstract and generic.

    GetData : GetData_MethodGroup
    class GetData_MethodGroup:
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> XYValues:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int) -> XYValues:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class GenEqSettings:
    @property
    def EQTableType(self) -> EQType: ...
    @EQTableType.setter
    def EQTableType(self, value: EQType) -> EQType: ...
    @property
    def FrequencyUnit(self) -> str: ...
    @FrequencyUnit.setter
    def FrequencyUnit(self, value: str) -> str: ...
    @property
    def FrequencyUnitList(self) -> Array_1[str]: ...
    @property
    def FrequencyValues(self) -> Array_1[float]: ...
    @property
    def LevelUnit(self) -> str: ...
    @LevelUnit.setter
    def LevelUnit(self, value: str) -> str: ...
    @property
    def LevelUnitList(self) -> Array_1[str]: ...
    @property
    def LevelValues(self) -> Array_1[float]: ...
    def ExportData(self, fileName: str) -> None: ...
    def ImportData(self, fileName: str, resultName: str, ch: InputChannelIndex) -> None: ...
    def ImportRelativeEqData(self, fileName: str, invertData: bool) -> None: ...
    def ResetTable(self) -> None: ...
    def SetEQTable(self, frequency: Array_1[float], level: Array_1[float]) -> None: ...


class GenerateBitDepthType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    BitDepth8 : GenerateBitDepthType # 0
    BitDepth16 : GenerateBitDepthType # 1
    BitDepth24 : GenerateBitDepthType # 2
    BitDepth32 : GenerateBitDepthType # 3


class Generator:
    @property
    def Levels(self) -> GeneratorLevels: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class GeneratorChannelAssignments:
    def GetOutputChannelAssignment(self, ch: OutputChannelIndex) -> OutputChannelAssignment: ...
    def ResetChannelAssignments(self, setting: OutputChannelAssignments) -> None: ...
    def SetOutputChannelAssignment(self, ch: OutputChannelIndex, assignment: OutputChannelAssignment) -> None: ...


class GeneratorChannelLevels:
    @property
    def Count(self) -> int: ...
    @property
    def Unit(self) -> str: ...
    @Unit.setter
    def Unit(self, value: str) -> str: ...
    @property
    def UnitList(self) -> Array_1[str]: ...
    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> str:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, unit: str) -> str:...

    # Skipped GetValue due to it being static, abstract and generic.

    GetValue : GetValue_MethodGroup
    class GetValue_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> float:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, unit: str) -> float:...

    # Skipped SetValue due to it being static, abstract and generic.

    SetValue : SetValue_MethodGroup
    class SetValue_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, level: float) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, level: str) -> None:...



class GeneratorLevels:
    @property
    def Count(self) -> int: ...
    @property
    def OffsetUnit(self) -> str: ...
    @OffsetUnit.setter
    def OffsetUnit(self, value: str) -> str: ...
    @property
    def OffsetUnitList(self) -> Array_1[str]: ...
    @property
    def TrackFirstChannel(self) -> bool: ...
    @TrackFirstChannel.setter
    def TrackFirstChannel(self, value: bool) -> bool: ...
    @property
    def Unit(self) -> str: ...
    @Unit.setter
    def Unit(self, value: str) -> str: ...
    @property
    def UnitList(self) -> Array_1[str]: ...
    # Skipped GetOffsetText due to it being static, abstract and generic.

    GetOffsetText : GetOffsetText_MethodGroup
    class GetOffsetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> str:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, unit: str) -> str:...

    # Skipped GetOffsetValue due to it being static, abstract and generic.

    GetOffsetValue : GetOffsetValue_MethodGroup
    class GetOffsetValue_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> float:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, unit: str) -> float:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> str:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, unit: str) -> str:...

    # Skipped GetValue due to it being static, abstract and generic.

    GetValue : GetValue_MethodGroup
    class GetValue_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> float:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, unit: str) -> float:...

    # Skipped SetOffsetValue due to it being static, abstract and generic.

    SetOffsetValue : SetOffsetValue_MethodGroup
    class SetOffsetValue_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, offset: float) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, offset: str) -> None:...

    # Skipped SetValue due to it being static, abstract and generic.

    SetValue : SetValue_MethodGroup
    class SetValue_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, level: float) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, level: str) -> None:...



class GeneratorType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Sine : GeneratorType # 0
    File : GeneratorType # 1


class GlobalVMaxSettings:
    def EnableVmax(self, connectorType: VmaxConnectorType, enabled: bool, clipValues: bool) -> None: ...
    def GetVmax(self, connectorType: VmaxConnectorType, unit: str) -> float: ...
    def IsVmaxEnabled(self, connectorType: VmaxConnectorType) -> bool: ...
    def SetVmax(self, connectorType: VmaxConnectorType, level: float, unit: str, clipValues: bool) -> None: ...


class Graph:
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    def CopyToClipboard(self) -> None: ...
    def Dock(self) -> None: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...



class GraphAxis:
    @property
    def AutoTitle(self) -> bool: ...
    @AutoTitle.setter
    def AutoTitle(self, value: bool) -> bool: ...
    @property
    def IsLog(self) -> bool: ...
    @IsLog.setter
    def IsLog(self, value: bool) -> bool: ...
    @property
    def Maximum(self) -> float: ...
    @Maximum.setter
    def Maximum(self, value: float) -> float: ...
    @property
    def Minimum(self) -> float: ...
    @Minimum.setter
    def Minimum(self, value: float) -> float: ...
    @property
    def RangeType(self) -> GraphRangeType: ...
    @RangeType.setter
    def RangeType(self, value: GraphRangeType) -> GraphRangeType: ...
    @property
    def ScrollingRange(self) -> float: ...
    @ScrollingRange.setter
    def ScrollingRange(self, value: float) -> float: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def TitleVisible(self) -> bool: ...
    @TitleVisible.setter
    def TitleVisible(self, value: bool) -> bool: ...
    @property
    def Unit(self) -> str: ...
    @Unit.setter
    def Unit(self, value: str) -> str: ...
    @property
    def UnitList(self) -> Array_1[str]: ...


class GraphCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> Graph: ...
    @property
    def Item(self) -> Graph: ...
    @property
    def ResultTypeNames(self) -> Array_1[str]: ...
    @property
    def ResultTypes(self) -> Array_1[MeasurementResultType]: ...
    def Contains(self, resultName: str) -> bool: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Sort(self, sortType: ResultSortType) -> None: ...
    # Skipped Add due to it being static, abstract and generic.

    Add : Add_MethodGroup
    class Add_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, resultTypeName: str) -> Graph:...
        @typing.overload
        def __call__(self, input: APxInputSelection, resultType: MeasurementResultType) -> Graph:...

    # Skipped Delete due to it being static, abstract and generic.

    Delete : Delete_MethodGroup
    class Delete_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, resultNames: Array_1[str]) -> None:...
        @typing.overload
        def __call__(self, resultName: str) -> None:...



class GraphFont:
    @property
    def Bold(self) -> bool: ...
    @Bold.setter
    def Bold(self, value: bool) -> bool: ...
    @property
    def Color(self) -> Color: ...
    @Color.setter
    def Color(self, value: Color) -> Color: ...
    @property
    def FontName(self) -> str: ...
    @FontName.setter
    def FontName(self, value: str) -> str: ...
    @property
    def Italic(self) -> bool: ...
    @Italic.setter
    def Italic(self, value: bool) -> bool: ...
    @property
    def Size(self) -> int: ...
    @Size.setter
    def Size(self, value: int) -> int: ...
    @property
    def Strikeout(self) -> bool: ...
    @Strikeout.setter
    def Strikeout(self, value: bool) -> bool: ...
    @property
    def Style(self) -> FontStyle: ...
    @property
    def Underline(self) -> bool: ...
    @Underline.setter
    def Underline(self, value: bool) -> bool: ...


class GraphImageType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    BMP : GraphImageType # 1
    JPG : GraphImageType # 2
    EMF : GraphImageType # 3
    PNG : GraphImageType # 4
    PDF : GraphImageType # 5


class GraphLimit:
    @property
    def ChannelCount(self) -> int: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def LimitOffsetCurves(self) -> Array_1[str]: ...
    @property
    def PassedLimitCheck(self) -> bool: ...
    def Clear(self) -> None: ...
    def CreateLimitOffsetCurve(self, curveName: str, xUnit: str, xValues: Array_1[float], yUnit: str, yValues: Array_1[float], replaceIfExists: bool) -> str: ...
    def ExportData(self, fileName: str) -> None: ...
    def LoadLimitOffsetCurve(self, fileName: str, replaceIfExists: bool) -> None: ...
    # Skipped CopyFromGraphData due to it being static, abstract and generic.

    CopyFromGraphData : CopyFromGraphData_MethodGroup
    class CopyFromGraphData_MethodGroup:
        @typing.overload
        def __call__(self, dataPoints: NumberOfGraphPoints, pointcount: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, dataPoints: NumberOfGraphPoints, pointcount: int) -> None:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str) -> Array_1[GraphPoint]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> Array_1[float]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> Array_1[float]:...

    # Skipped HasLimitOnChannel due to it being static, abstract and generic.

    HasLimitOnChannel : HasLimitOnChannel_MethodGroup
    class HasLimitOnChannel_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, limitCurveName: str, invertLimitCurve: bool, invertLimitData: bool) -> None:...

    # Skipped OffsetValues due to it being static, abstract and generic.

    OffsetValues : OffsetValues_MethodGroup
    class OffsetValues_MethodGroup:
        @typing.overload
        def __call__(self, adjustment: float) -> None:...
        @typing.overload
        def __call__(self, adjustment: Array_1[float]) -> None:...
        @typing.overload
        def __call__(self, limitCurveName: str, invertData: bool) -> None:...
        @typing.overload
        def __call__(self, limitCurveName: str, invertData: bool, selectedChannels: Array_1[bool]) -> None:...

    # Skipped PassedLimitCheckOnChannel due to it being static, abstract and generic.

    PassedLimitCheckOnChannel : PassedLimitCheckOnChannel_MethodGroup
    class PassedLimitCheckOnChannel_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...
        @typing.overload
        def __call__(self, ch: int, dataType: SourceDataType, dataIndex: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, dataType: SourceDataType, dataIndex: int) -> bool:...

    # Skipped RemoveChannel due to it being static, abstract and generic.

    RemoveChannel : RemoveChannel_MethodGroup
    class RemoveChannel_MethodGroup:
        @typing.overload
        def __call__(self, channel: int) -> None:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex) -> None:...

    # Skipped SetValues due to it being static, abstract and generic.

    SetValues : SetValues_MethodGroup
    class SetValues_MethodGroup:
        @typing.overload
        def __call__(self, xValues: Array_1[float], yValues: Array_1[float]) -> None:...
        @typing.overload
        def __call__(self, ch: int, xValues: Array_1[float], yValues: Array_1[float]) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xValues: Array_1[float], yValues: Array_1[float]) -> None:...

    # Skipped SetX due to it being static, abstract and generic.

    SetX : SetX_MethodGroup
    class SetX_MethodGroup:
        @typing.overload
        def __call__(self, channel: int, index: int, x: float) -> None:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, index: int, x: float) -> None:...

    # Skipped SetY due to it being static, abstract and generic.

    SetY : SetY_MethodGroup
    class SetY_MethodGroup:
        @typing.overload
        def __call__(self, channel: int, index: int, y: float) -> None:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, index: int, y: float) -> None:...



class GraphLimitData:
    @property
    def ChannelCount(self) -> int: ...
    @property
    def PassedLimitCheck(self) -> bool: ...
    def ExportData(self, fileName: str) -> None: ...
    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str) -> Array_1[GraphPoint]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> Array_1[float]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> Array_1[float]:...

    # Skipped HasLimitOnChannel due to it being static, abstract and generic.

    HasLimitOnChannel : HasLimitOnChannel_MethodGroup
    class HasLimitOnChannel_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped PassedLimitCheckOnChannel due to it being static, abstract and generic.

    PassedLimitCheckOnChannel : PassedLimitCheckOnChannel_MethodGroup
    class PassedLimitCheckOnChannel_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...
        @typing.overload
        def __call__(self, ch: int, dataType: SourceDataType, dataIndex: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, dataType: SourceDataType, dataIndex: int) -> bool:...



class GraphPoint:
    def __init__(self, x: float, y: float) -> None: ...
    X : float
    Y : float
    def Equals(self, obj: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...
    def ToString(self) -> str: ...


class GraphRangeType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Autoscale : GraphRangeType # 0
    Fixed : GraphRangeType # 1
    Scrolling : GraphRangeType # 2


class GraphStringPoint:
    def __init__(self, x: str, y: str) -> None: ...
    X : str
    Y : str
    def Equals(self, obj: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...


class GraphTitle:
    @property
    def Alignment(self) -> TitleAlignment: ...
    @Alignment.setter
    def Alignment(self, value: TitleAlignment) -> TitleAlignment: ...
    @property
    def Auto(self) -> bool: ...
    @Auto.setter
    def Auto(self, value: bool) -> bool: ...
    @property
    def Font(self) -> GraphFont: ...
    @property
    def Text(self) -> str: ...
    @Text.setter
    def Text(self, value: str) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...


class Graticule(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : Graticule # 0
    Normal : Graticule # 1
    Full : Graticule # 2


class HarmonicSumMeter:
    @property
    def AllHarmonics(self) -> bool: ...
    @AllHarmonics.setter
    def AllHarmonics(self, value: bool) -> bool: ...
    @property
    def Axis(self) -> GraphAxis: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Limits(self) -> MeterLimits: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    def CopyToClipboard(self) -> None: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetHarmonicSelected(self, harmonicIndex: DiscreteHarmonicIndex) -> bool: ...
    def GetTraceColor(self, traceIndex: int) -> Color: ...
    def GetTraceName(self, traceIndex: int) -> str: ...
    def ResetTraceStyle(self, traceIndex: int) -> None: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetHarmonicSelected(self, harmonicIndex: DiscreteHarmonicIndex, selected: bool) -> None: ...
    def SetTraceColor(self, traceIndex: int, color: Color) -> None: ...
    def SetTraceName(self, traceIndex: int, name: str) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, unit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool]) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool], append: bool) -> None:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[str]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[str]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[float]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[float]:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...



class HarmonicTraceInfo:
    @property
    def Channel(self) -> CursorChannelIndex: ...
    @property
    def DataIndex(self) -> int: ...
    @property
    def DataType(self) -> SourceDataType: ...
    @property
    def Harmonic(self) -> DistortionHarmonicIndex: ...


class HarmonicXYGraph:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def AllHarmonics(self) -> bool: ...
    @AllHarmonics.setter
    def AllHarmonics(self, value: bool) -> bool: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def HarmonicNumber(self) -> int: ...
    @HarmonicNumber.setter
    def HarmonicNumber(self, value: int) -> int: ...
    @property
    def HarmonicSelectionType(self) -> DistortionProductSelection: ...
    @HarmonicSelectionType.setter
    def HarmonicSelectionType(self, value: DistortionProductSelection) -> DistortionProductSelection: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def MaxHarmonicNumber(self) -> int: ...
    @property
    def Message(self) -> str: ...
    @property
    def MinHarmonicNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetHarmonicSelected(self, harmonicIndex: int) -> bool: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def HasDataOnAxis(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> bool: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetHarmonicSelected(self, harmonicIndex: int, selected: bool) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetData due to it being static, abstract and generic.

    GetData : GetData_MethodGroup
    class GetData_MethodGroup:
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> XYValues:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int) -> XYValues:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class HdcpState(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Ready : HdcpState # 0
    Authenticating : HdcpState # 1


class Hdmi2ArcInputSettings:
    @property
    def BitDepth(self) -> int: ...
    @BitDepth.setter
    def BitDepth(self, value: int) -> int: ...
    @property
    def FixedInputSampleRate(self) -> float: ...
    @FixedInputSampleRate.setter
    def FixedInputSampleRate(self, value: float) -> float: ...
    @property
    def ScaleFreqBy(self) -> InputFrequencyScalingType: ...
    @ScaleFreqBy.setter
    def ScaleFreqBy(self, value: InputFrequencyScalingType) -> InputFrequencyScalingType: ...
    def SendCec(self, command: CecCommandTypeEnum) -> None: ...


class Hdmi2ArcOutputSettings:
    @property
    def BitDepth(self) -> int: ...
    @BitDepth.setter
    def BitDepth(self, value: int) -> int: ...
    @property
    def Dither(self) -> bool: ...
    @Dither.setter
    def Dither(self, value: bool) -> bool: ...
    @property
    def SampleRate(self) -> DoubleSetting: ...
    @property
    def TransmitterNegotiation(self) -> ArcTransmitterNegotiation: ...
    @TransmitterNegotiation.setter
    def TransmitterNegotiation(self, value: ArcTransmitterNegotiation) -> ArcTransmitterNegotiation: ...
    def GetValidityBit(self, side: ValidityBitSide) -> ValidityBitType: ...
    def SendCec(self, command: CecCommandTypeEnum) -> None: ...
    def SetValidityBit(self, side: ValidityBitSide, txValid: ValidityBitType) -> None: ...


class Hdmi2eArcInputSettings:
    @property
    def AvailableCapabilityDataStructures(self) -> Array_1[str]: ...
    @property
    def BitDepth(self) -> int: ...
    @BitDepth.setter
    def BitDepth(self, value: int) -> int: ...
    @property
    def FixedInputSampleRate(self) -> float: ...
    @FixedInputSampleRate.setter
    def FixedInputSampleRate(self, value: float) -> float: ...
    @property
    def ScaleFreqBy(self) -> InputFrequencyScalingType: ...
    @ScaleFreqBy.setter
    def ScaleFreqBy(self, value: InputFrequencyScalingType) -> InputFrequencyScalingType: ...
    @property
    def SelectedCapabilityDataStructure(self) -> str: ...
    @SelectedCapabilityDataStructure.setter
    def SelectedCapabilityDataStructure(self, value: str) -> str: ...
    def LoadCapabilityDataStructure(self, filename: str, replaceIfExists: bool) -> None: ...


class Hdmi2EArcOutputSettings:
    @property
    def AudioFormat(self) -> EArcAudioFormat: ...
    @AudioFormat.setter
    def AudioFormat(self, value: EArcAudioFormat) -> EArcAudioFormat: ...
    @property
    def BitDepth(self) -> int: ...
    @BitDepth.setter
    def BitDepth(self, value: int) -> int: ...
    @property
    def Dither(self) -> bool: ...
    @Dither.setter
    def Dither(self, value: bool) -> bool: ...
    @property
    def SampleRate(self) -> DoubleSetting: ...
    def GetValidityBit(self, side: ValidityBitSide) -> ValidityBitType: ...
    def SaveCds(self, fileName: str) -> bool: ...
    def SetValidityBit(self, side: ValidityBitSide, txValid: ValidityBitType) -> None: ...


class Hdmi2InputSettings:
    @property
    def AvailableEdids(self) -> Array_1[str]: ...
    @property
    def BitDepth(self) -> int: ...
    @BitDepth.setter
    def BitDepth(self, value: int) -> int: ...
    @property
    def CecLogicalAddress(self) -> CecDeviceType: ...
    @CecLogicalAddress.setter
    def CecLogicalAddress(self, value: CecDeviceType) -> CecDeviceType: ...
    @property
    def DisableCECForwarding(self) -> bool: ...
    @DisableCECForwarding.setter
    def DisableCECForwarding(self, value: bool) -> bool: ...
    @property
    def SelectedEdid(self) -> str: ...
    @SelectedEdid.setter
    def SelectedEdid(self, value: str) -> str: ...
    @property
    def UseAuxOutEdid(self) -> bool: ...
    @UseAuxOutEdid.setter
    def UseAuxOutEdid(self, value: bool) -> bool: ...
    def LoadEdid(self, filename: str, replaceIfExists: bool) -> None: ...


class Hdmi2OutputSettings:
    @property
    def AudioFormat(self) -> HdmiAudioFormat: ...
    @AudioFormat.setter
    def AudioFormat(self, value: HdmiAudioFormat) -> HdmiAudioFormat: ...
    @property
    def AutoStatusBits(self) -> bool: ...
    @AutoStatusBits.setter
    def AutoStatusBits(self, value: bool) -> bool: ...
    @property
    def BitDepth(self) -> int: ...
    @BitDepth.setter
    def BitDepth(self, value: int) -> int: ...
    @property
    def CecLogicalAddress(self) -> CecDeviceType: ...
    @CecLogicalAddress.setter
    def CecLogicalAddress(self, value: CecDeviceType) -> CecDeviceType: ...
    @property
    def ColorDepth(self) -> HdmiColorDepth: ...
    @ColorDepth.setter
    def ColorDepth(self, value: HdmiColorDepth) -> HdmiColorDepth: ...
    @property
    def Dither(self) -> bool: ...
    @Dither.setter
    def Dither(self, value: bool) -> bool: ...
    @property
    def EnableHdcpEncryption(self) -> bool: ...
    @EnableHdcpEncryption.setter
    def EnableHdcpEncryption(self, value: bool) -> bool: ...
    @property
    def FrameRate(self) -> HdmiFrameRate: ...
    @FrameRate.setter
    def FrameRate(self, value: HdmiFrameRate) -> HdmiFrameRate: ...
    @property
    def PassThrough(self) -> bool: ...
    @PassThrough.setter
    def PassThrough(self, value: bool) -> bool: ...
    @property
    def SampleRate(self) -> DoubleSetting: ...
    @property
    def StatusBits(self) -> DigitalOutputStatusBitsSettings: ...
    @property
    def VideoResolution(self) -> HdmiVideoResolution: ...
    @VideoResolution.setter
    def VideoResolution(self, value: HdmiVideoResolution) -> HdmiVideoResolution: ...
    def GetValidityBit(self, side: ValidityBitSide) -> ValidityBitType: ...
    def SaveEdid(self, fileName: str) -> None: ...
    def SetValidityBit(self, side: ValidityBitSide, txValid: ValidityBitType) -> None: ...


class HdmiArcInputSettings:
    @property
    def BitDepth(self) -> int: ...
    @BitDepth.setter
    def BitDepth(self, value: int) -> int: ...
    @property
    def FixedInputSampleRate(self) -> float: ...
    @FixedInputSampleRate.setter
    def FixedInputSampleRate(self, value: float) -> float: ...
    @property
    def PhysicalLayer(self) -> ArcPhysicalLayerMode: ...
    @PhysicalLayer.setter
    def PhysicalLayer(self, value: ArcPhysicalLayerMode) -> ArcPhysicalLayerMode: ...
    @property
    def ScaleFreqBy(self) -> InputFrequencyScalingType: ...
    @ScaleFreqBy.setter
    def ScaleFreqBy(self, value: InputFrequencyScalingType) -> InputFrequencyScalingType: ...
    def SendCec(self, command: CecCommandTypeEnum) -> None: ...


class HdmiArcOutputSettings:
    @property
    def BitDepth(self) -> int: ...
    @BitDepth.setter
    def BitDepth(self, value: int) -> int: ...
    @property
    def CustomEdid(self) -> Array_1[int]: ...
    @CustomEdid.setter
    def CustomEdid(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def Dither(self) -> bool: ...
    @Dither.setter
    def Dither(self, value: bool) -> bool: ...
    @property
    def PhysicalLayer(self) -> ArcPhysicalLayerMode: ...
    @PhysicalLayer.setter
    def PhysicalLayer(self, value: ArcPhysicalLayerMode) -> ArcPhysicalLayerMode: ...
    @property
    def SampleRate(self) -> DoubleSetting: ...
    @property
    def TransmitterNegotiation(self) -> ArcTransmitterNegotiation: ...
    @TransmitterNegotiation.setter
    def TransmitterNegotiation(self, value: ArcTransmitterNegotiation) -> ArcTransmitterNegotiation: ...
    def GetValidityBit(self, side: ValidityBitSide) -> ValidityBitType: ...
    def SendCec(self, command: CecCommandTypeEnum) -> None: ...
    def SetValidityBit(self, side: ValidityBitSide, txValid: ValidityBitType) -> None: ...


class HdmiAudioFormat(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Linear2Channel : HdmiAudioFormat # 0
    Linear8Channel : HdmiAudioFormat # 1


class HdmiAudioInfoFrameSettings:
    @property
    def Auto(self) -> bool: ...
    @Auto.setter
    def Auto(self, value: bool) -> bool: ...
    @property
    def ChannelCount(self) -> AudioInfoFrameChannelCount: ...
    @ChannelCount.setter
    def ChannelCount(self, value: AudioInfoFrameChannelCount) -> AudioInfoFrameChannelCount: ...
    @property
    def CodingType(self) -> AudioInfoFrameCodingType: ...
    @CodingType.setter
    def CodingType(self, value: AudioInfoFrameCodingType) -> AudioInfoFrameCodingType: ...
    @property
    def Downmix(self) -> AudioInfoFrameInhibitDownmixFlag: ...
    @Downmix.setter
    def Downmix(self, value: AudioInfoFrameInhibitDownmixFlag) -> AudioInfoFrameInhibitDownmixFlag: ...
    @property
    def InfoFrameBytes(self) -> Array_1[int]: ...
    @InfoFrameBytes.setter
    def InfoFrameBytes(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def LevelShift(self) -> AudioInfoFrameLevelShiftValue: ...
    @LevelShift.setter
    def LevelShift(self, value: AudioInfoFrameLevelShiftValue) -> AudioInfoFrameLevelShiftValue: ...
    @property
    def SampleSize(self) -> AudioInfoFrameSampleSize: ...
    @SampleSize.setter
    def SampleSize(self, value: AudioInfoFrameSampleSize) -> AudioInfoFrameSampleSize: ...
    @property
    def SamplingFrequency(self) -> AudioInfoFrameSamplingFrequency: ...
    @SamplingFrequency.setter
    def SamplingFrequency(self, value: AudioInfoFrameSamplingFrequency) -> AudioInfoFrameSamplingFrequency: ...
    @property
    def SpeakerAllocation(self) -> HdmiSpeakerAllocation: ...
    @SpeakerAllocation.setter
    def SpeakerAllocation(self, value: HdmiSpeakerAllocation) -> HdmiSpeakerAllocation: ...


class HdmiAudioInfoFrameValues:
    @property
    def AudioLayout(self) -> str: ...
    @property
    def AvMute(self) -> bool: ...
    @property
    def ChannelCount(self) -> AudioInfoFrameChannelCount: ...
    @property
    def CodingType(self) -> AudioInfoFrameCodingType: ...
    @property
    def CTS(self) -> int: ...
    @property
    def Downmix(self) -> AudioInfoFrameInhibitDownmixFlag: ...
    @property
    def Hbr(self) -> bool: ...
    @property
    def HdcpDecrypting(self) -> bool: ...
    @property
    def InfoFrameBytes(self) -> Array_1[int]: ...
    @property
    def LevelShift(self) -> AudioInfoFrameLevelShiftValue: ...
    @property
    def N(self) -> int: ...
    @property
    def SampleSize(self) -> AudioInfoFrameSampleSize: ...
    @property
    def SamplingFrequency(self) -> AudioInfoFrameSamplingFrequency: ...
    @property
    def SpeakerAllocation(self) -> HdmiSpeakerAllocation: ...


class HdmiColorDepth(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ColorDepth_8Bit : HdmiColorDepth # 0
    ColorDepth_10Bit : HdmiColorDepth # 1
    ColorDepth_12Bit : HdmiColorDepth # 2


class HdmiFrameRate(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Rate_24 : HdmiFrameRate # 0
    Rate_25 : HdmiFrameRate # 1
    Rate_30 : HdmiFrameRate # 2
    Rate_50 : HdmiFrameRate # 3
    Rate_60 : HdmiFrameRate # 4
    Rate_100 : HdmiFrameRate # 5
    Rate_120 : HdmiFrameRate # 6


class HdmiInputFrameRate(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : HdmiInputFrameRate # 0
    Rate_24 : HdmiInputFrameRate # 1
    Rate_25 : HdmiInputFrameRate # 2
    Rate_30 : HdmiInputFrameRate # 3
    Rate_50 : HdmiInputFrameRate # 4
    Rate_60 : HdmiInputFrameRate # 5
    Rate_100 : HdmiInputFrameRate # 6
    Rate_120 : HdmiInputFrameRate # 7


class HdmiInputLayout(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Layout0 : HdmiInputLayout # 0
    Layout1 : HdmiInputLayout # 1


class HdmiInputSettings:
    @property
    def BitDepth(self) -> int: ...
    @BitDepth.setter
    def BitDepth(self, value: int) -> int: ...
    @property
    def CecLogicalAddress(self) -> CecDeviceType: ...
    @CecLogicalAddress.setter
    def CecLogicalAddress(self, value: CecDeviceType) -> CecDeviceType: ...
    @property
    def DisableCECForwarding(self) -> bool: ...
    @DisableCECForwarding.setter
    def DisableCECForwarding(self, value: bool) -> bool: ...
    @property
    def SinkCustomEdid(self) -> Array_1[int]: ...
    @SinkCustomEdid.setter
    def SinkCustomEdid(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def SinkEdidType(self) -> HdmiSinkEdidType: ...
    @SinkEdidType.setter
    def SinkEdidType(self, value: HdmiSinkEdidType) -> HdmiSinkEdidType: ...
    def ReadEdidFromAuxOut(self) -> Array_1[int]: ...
    def ReadEdidFromFile(self, fileName: str) -> Array_1[int]: ...


class HdmiInputVideoResolution(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : HdmiInputVideoResolution # 0
    Resolution_640x480 : HdmiInputVideoResolution # 1
    Resolution_720x480 : HdmiInputVideoResolution # 2
    Resolution_1280x720 : HdmiInputVideoResolution # 3
    Resolution_1920x1080 : HdmiInputVideoResolution # 4
    Resolution_3840x2160 : HdmiInputVideoResolution # 5
    Resolution_4096x2160 : HdmiInputVideoResolution # 6
    Resolution_7680x4320 : HdmiInputVideoResolution # 7


class HdmiMonitor:
    @property
    def AudioInfoFrameValues(self) -> HdmiAudioInfoFrameValues: ...
    @property
    def CecMessageFollower(self) -> CecDeviceType: ...
    @CecMessageFollower.setter
    def CecMessageFollower(self, value: CecDeviceType) -> CecDeviceType: ...
    @property
    def CecMessageOpcode(self) -> int: ...
    @CecMessageOpcode.setter
    def CecMessageOpcode(self, value: int) -> int: ...
    @property
    def CecMessageOperands(self) -> Array_1[int]: ...
    @CecMessageOperands.setter
    def CecMessageOperands(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def CecMessageType(self) -> CecMessageSendType: ...
    @CecMessageType.setter
    def CecMessageType(self, value: CecMessageSendType) -> CecMessageSendType: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def SendCecMessageFrom(self) -> CecMessageSendFrom: ...
    @SendCecMessageFrom.setter
    def SendCecMessageFrom(self, value: CecMessageSendFrom) -> CecMessageSendFrom: ...
    @property
    def UndockedHeight(self) -> int: ...
    @UndockedHeight.setter
    def UndockedHeight(self, value: int) -> int: ...
    @property
    def UndockedLeft(self) -> int: ...
    @UndockedLeft.setter
    def UndockedLeft(self, value: int) -> int: ...
    @property
    def UndockedTop(self) -> int: ...
    @UndockedTop.setter
    def UndockedTop(self, value: int) -> int: ...
    @property
    def UndockedWidth(self) -> int: ...
    @UndockedWidth.setter
    def UndockedWidth(self, value: int) -> int: ...
    @property
    def VideoRefreshRate(self) -> HdmiInputFrameRate: ...
    @property
    def VideoResolution(self) -> HdmiInputVideoResolution: ...
    def Dock(self) -> None: ...
    def Maximize(self) -> None: ...
    def Minimize(self) -> None: ...
    def Restore(self) -> None: ...
    def SendCecMessage(self) -> CecSendResult: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...


class HdmiOutputMetadata:
    @property
    def AudioInfoFrames(self) -> HdmiAudioInfoFrameSettings: ...
    @property
    def AutoStatusBits(self) -> bool: ...
    @AutoStatusBits.setter
    def AutoStatusBits(self, value: bool) -> bool: ...
    @property
    def StatusBits(self) -> DigitalOutputStatusBitsSettings: ...


class HdmiOutputSettings:
    @property
    def AudioFormat(self) -> HdmiAudioFormat: ...
    @AudioFormat.setter
    def AudioFormat(self, value: HdmiAudioFormat) -> HdmiAudioFormat: ...
    @property
    def BitDepth(self) -> int: ...
    @BitDepth.setter
    def BitDepth(self, value: int) -> int: ...
    @property
    def CecLogicalAddress(self) -> CecDeviceType: ...
    @CecLogicalAddress.setter
    def CecLogicalAddress(self, value: CecDeviceType) -> CecDeviceType: ...
    @property
    def ColorDepth(self) -> HdmiColorDepth: ...
    @ColorDepth.setter
    def ColorDepth(self, value: HdmiColorDepth) -> HdmiColorDepth: ...
    @property
    def Dither(self) -> bool: ...
    @Dither.setter
    def Dither(self, value: bool) -> bool: ...
    @property
    def EnableHdcpEncryption(self) -> bool: ...
    @EnableHdcpEncryption.setter
    def EnableHdcpEncryption(self, value: bool) -> bool: ...
    @property
    def IsSinkEdidValid(self) -> bool: ...
    @property
    def Metadata(self) -> HdmiOutputMetadata: ...
    @property
    def OverrideCtsValue(self) -> int: ...
    @OverrideCtsValue.setter
    def OverrideCtsValue(self, value: int) -> int: ...
    @property
    def OverrideNCts(self) -> bool: ...
    @OverrideNCts.setter
    def OverrideNCts(self, value: bool) -> bool: ...
    @property
    def OverrideNValue(self) -> int: ...
    @OverrideNValue.setter
    def OverrideNValue(self, value: int) -> int: ...
    @property
    def PassThrough(self) -> bool: ...
    @PassThrough.setter
    def PassThrough(self, value: bool) -> bool: ...
    @property
    def SampleRate(self) -> DoubleSetting: ...
    @property
    def SinkEdid(self) -> Array_1[int]: ...
    @property
    def VerifyDdcInSequence(self) -> bool: ...
    @VerifyDdcInSequence.setter
    def VerifyDdcInSequence(self, value: bool) -> bool: ...
    @property
    def VideoColor(self) -> Color: ...
    @VideoColor.setter
    def VideoColor(self, value: Color) -> Color: ...
    @property
    def VideoFormat(self) -> HdmiVideoFormat: ...
    @VideoFormat.setter
    def VideoFormat(self, value: HdmiVideoFormat) -> HdmiVideoFormat: ...
    def GetValidityBit(self, side: ValidityBitSide) -> ValidityBitType: ...
    def SetValidityBit(self, side: ValidityBitSide, txValid: ValidityBitType) -> None: ...


class HdmiSinkEdidType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Default : HdmiSinkEdidType # 0
    AuxOutMonitor : HdmiSinkEdidType # 1
    Custom : HdmiSinkEdidType # 2


class HdmiSpeakerAllocation(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Speaker00 : HdmiSpeakerAllocation # 0
    Speaker01 : HdmiSpeakerAllocation # 1
    Speaker02 : HdmiSpeakerAllocation # 2
    Speaker03 : HdmiSpeakerAllocation # 3
    Speaker04 : HdmiSpeakerAllocation # 4
    Speaker05 : HdmiSpeakerAllocation # 5
    Speaker06 : HdmiSpeakerAllocation # 6
    Speaker07 : HdmiSpeakerAllocation # 7
    Speaker08 : HdmiSpeakerAllocation # 8
    Speaker09 : HdmiSpeakerAllocation # 9
    Speaker0A : HdmiSpeakerAllocation # 10
    Speaker0B : HdmiSpeakerAllocation # 11
    Speaker0C : HdmiSpeakerAllocation # 12
    Speaker0D : HdmiSpeakerAllocation # 13
    Speaker0E : HdmiSpeakerAllocation # 14
    Speaker0F : HdmiSpeakerAllocation # 15
    Speaker10 : HdmiSpeakerAllocation # 16
    Speaker11 : HdmiSpeakerAllocation # 17
    Speaker12 : HdmiSpeakerAllocation # 18
    Speaker13 : HdmiSpeakerAllocation # 19
    Speaker14 : HdmiSpeakerAllocation # 20
    Speaker15 : HdmiSpeakerAllocation # 21
    Speaker16 : HdmiSpeakerAllocation # 22
    Speaker17 : HdmiSpeakerAllocation # 23
    Speaker18 : HdmiSpeakerAllocation # 24
    Speaker19 : HdmiSpeakerAllocation # 25
    Speaker1A : HdmiSpeakerAllocation # 26
    Speaker1B : HdmiSpeakerAllocation # 27
    Speaker1C : HdmiSpeakerAllocation # 28
    Speaker1D : HdmiSpeakerAllocation # 29
    Speaker1E : HdmiSpeakerAllocation # 30
    Speaker1F : HdmiSpeakerAllocation # 31
    Speaker20 : HdmiSpeakerAllocation # 32
    Speaker21 : HdmiSpeakerAllocation # 33
    Speaker22 : HdmiSpeakerAllocation # 34
    Speaker23 : HdmiSpeakerAllocation # 35
    Speaker24 : HdmiSpeakerAllocation # 36
    Speaker25 : HdmiSpeakerAllocation # 37
    Speaker26 : HdmiSpeakerAllocation # 38
    Speaker27 : HdmiSpeakerAllocation # 39
    Speaker28 : HdmiSpeakerAllocation # 40
    Speaker29 : HdmiSpeakerAllocation # 41
    Speaker2A : HdmiSpeakerAllocation # 42
    Speaker2B : HdmiSpeakerAllocation # 43
    Speaker2C : HdmiSpeakerAllocation # 44
    Speaker2D : HdmiSpeakerAllocation # 45
    Speaker2E : HdmiSpeakerAllocation # 46
    Speaker2F : HdmiSpeakerAllocation # 47
    Speaker30 : HdmiSpeakerAllocation # 48
    Speaker31 : HdmiSpeakerAllocation # 49
    Speaker32 : HdmiSpeakerAllocation # 50
    Speaker33 : HdmiSpeakerAllocation # 51
    Speaker34 : HdmiSpeakerAllocation # 52
    Speaker35 : HdmiSpeakerAllocation # 53
    Speaker36 : HdmiSpeakerAllocation # 54
    Speaker37 : HdmiSpeakerAllocation # 55
    Speaker38 : HdmiSpeakerAllocation # 56
    Speaker39 : HdmiSpeakerAllocation # 57
    Speaker3A : HdmiSpeakerAllocation # 58
    Speaker3B : HdmiSpeakerAllocation # 59
    Speaker3C : HdmiSpeakerAllocation # 60
    Speaker3D : HdmiSpeakerAllocation # 61
    Speaker3E : HdmiSpeakerAllocation # 62
    Speaker3F : HdmiSpeakerAllocation # 63
    Speaker40 : HdmiSpeakerAllocation # 64
    Speaker41 : HdmiSpeakerAllocation # 65
    Speaker42 : HdmiSpeakerAllocation # 66
    Speaker43 : HdmiSpeakerAllocation # 67
    Speaker44 : HdmiSpeakerAllocation # 68
    Speaker45 : HdmiSpeakerAllocation # 69
    Speaker46 : HdmiSpeakerAllocation # 70
    Speaker47 : HdmiSpeakerAllocation # 71
    Speaker48 : HdmiSpeakerAllocation # 72
    Speaker49 : HdmiSpeakerAllocation # 73
    Speaker4A : HdmiSpeakerAllocation # 74
    Speaker4B : HdmiSpeakerAllocation # 75
    Speaker4C : HdmiSpeakerAllocation # 76
    Speaker4D : HdmiSpeakerAllocation # 77
    Speaker4E : HdmiSpeakerAllocation # 78
    Speaker4F : HdmiSpeakerAllocation # 79
    Speaker50 : HdmiSpeakerAllocation # 80
    Speaker51 : HdmiSpeakerAllocation # 81
    Speaker52 : HdmiSpeakerAllocation # 82
    Speaker53 : HdmiSpeakerAllocation # 83
    Speaker54 : HdmiSpeakerAllocation # 84
    Speaker55 : HdmiSpeakerAllocation # 85
    Speaker56 : HdmiSpeakerAllocation # 86
    Speaker57 : HdmiSpeakerAllocation # 87
    Speaker58 : HdmiSpeakerAllocation # 88
    Speaker59 : HdmiSpeakerAllocation # 89
    Speaker5A : HdmiSpeakerAllocation # 90
    Speaker5B : HdmiSpeakerAllocation # 91
    Speaker5C : HdmiSpeakerAllocation # 92
    Speaker5D : HdmiSpeakerAllocation # 93
    Speaker5E : HdmiSpeakerAllocation # 94
    Speaker5F : HdmiSpeakerAllocation # 95
    Speaker60 : HdmiSpeakerAllocation # 96
    Speaker61 : HdmiSpeakerAllocation # 97
    Speaker62 : HdmiSpeakerAllocation # 98
    Speaker63 : HdmiSpeakerAllocation # 99
    Speaker64 : HdmiSpeakerAllocation # 100
    Speaker65 : HdmiSpeakerAllocation # 101
    Speaker66 : HdmiSpeakerAllocation # 102
    Speaker67 : HdmiSpeakerAllocation # 103
    Speaker68 : HdmiSpeakerAllocation # 104
    Speaker69 : HdmiSpeakerAllocation # 105
    Speaker6A : HdmiSpeakerAllocation # 106
    Speaker6B : HdmiSpeakerAllocation # 107
    Speaker6C : HdmiSpeakerAllocation # 108
    Speaker6D : HdmiSpeakerAllocation # 109
    Speaker6E : HdmiSpeakerAllocation # 110
    Speaker6F : HdmiSpeakerAllocation # 111
    Speaker70 : HdmiSpeakerAllocation # 112
    Speaker71 : HdmiSpeakerAllocation # 113
    Speaker72 : HdmiSpeakerAllocation # 114
    Speaker73 : HdmiSpeakerAllocation # 115
    Speaker74 : HdmiSpeakerAllocation # 116
    Speaker75 : HdmiSpeakerAllocation # 117
    Speaker76 : HdmiSpeakerAllocation # 118
    Speaker77 : HdmiSpeakerAllocation # 119
    Speaker78 : HdmiSpeakerAllocation # 120
    Speaker79 : HdmiSpeakerAllocation # 121
    Speaker7A : HdmiSpeakerAllocation # 122
    Speaker7B : HdmiSpeakerAllocation # 123
    Speaker7C : HdmiSpeakerAllocation # 124
    Speaker7D : HdmiSpeakerAllocation # 125
    Speaker7E : HdmiSpeakerAllocation # 126
    Speaker7F : HdmiSpeakerAllocation # 127
    Speaker80 : HdmiSpeakerAllocation # 128
    Speaker81 : HdmiSpeakerAllocation # 129
    Speaker82 : HdmiSpeakerAllocation # 130
    Speaker83 : HdmiSpeakerAllocation # 131
    Speaker84 : HdmiSpeakerAllocation # 132
    Speaker85 : HdmiSpeakerAllocation # 133
    Speaker86 : HdmiSpeakerAllocation # 134
    Speaker87 : HdmiSpeakerAllocation # 135
    Speaker88 : HdmiSpeakerAllocation # 136
    Speaker89 : HdmiSpeakerAllocation # 137
    Speaker8A : HdmiSpeakerAllocation # 138
    Speaker8B : HdmiSpeakerAllocation # 139
    Speaker8C : HdmiSpeakerAllocation # 140
    Speaker8D : HdmiSpeakerAllocation # 141
    Speaker8E : HdmiSpeakerAllocation # 142
    Speaker8F : HdmiSpeakerAllocation # 143
    Speaker90 : HdmiSpeakerAllocation # 144
    Speaker91 : HdmiSpeakerAllocation # 145
    Speaker92 : HdmiSpeakerAllocation # 146
    Speaker93 : HdmiSpeakerAllocation # 147
    Speaker94 : HdmiSpeakerAllocation # 148
    Speaker95 : HdmiSpeakerAllocation # 149
    Speaker96 : HdmiSpeakerAllocation # 150
    Speaker97 : HdmiSpeakerAllocation # 151
    Speaker98 : HdmiSpeakerAllocation # 152
    Speaker99 : HdmiSpeakerAllocation # 153
    Speaker9A : HdmiSpeakerAllocation # 154
    Speaker9B : HdmiSpeakerAllocation # 155
    Speaker9C : HdmiSpeakerAllocation # 156
    Speaker9D : HdmiSpeakerAllocation # 157
    Speaker9E : HdmiSpeakerAllocation # 158
    Speaker9F : HdmiSpeakerAllocation # 159
    SpeakerA0 : HdmiSpeakerAllocation # 160
    SpeakerA1 : HdmiSpeakerAllocation # 161
    SpeakerA2 : HdmiSpeakerAllocation # 162
    SpeakerA3 : HdmiSpeakerAllocation # 163
    SpeakerA4 : HdmiSpeakerAllocation # 164
    SpeakerA5 : HdmiSpeakerAllocation # 165
    SpeakerA6 : HdmiSpeakerAllocation # 166
    SpeakerA7 : HdmiSpeakerAllocation # 167
    SpeakerA8 : HdmiSpeakerAllocation # 168
    SpeakerA9 : HdmiSpeakerAllocation # 169
    SpeakerAA : HdmiSpeakerAllocation # 170
    SpeakerAB : HdmiSpeakerAllocation # 171
    SpeakerAC : HdmiSpeakerAllocation # 172
    SpeakerAD : HdmiSpeakerAllocation # 173
    SpeakerAE : HdmiSpeakerAllocation # 174
    SpeakerAF : HdmiSpeakerAllocation # 175
    SpeakerB0 : HdmiSpeakerAllocation # 176
    SpeakerB1 : HdmiSpeakerAllocation # 177
    SpeakerB2 : HdmiSpeakerAllocation # 178
    SpeakerB3 : HdmiSpeakerAllocation # 179
    SpeakerB4 : HdmiSpeakerAllocation # 180
    SpeakerB5 : HdmiSpeakerAllocation # 181
    SpeakerB6 : HdmiSpeakerAllocation # 182
    SpeakerB7 : HdmiSpeakerAllocation # 183
    SpeakerB8 : HdmiSpeakerAllocation # 184
    SpeakerB9 : HdmiSpeakerAllocation # 185
    SpeakerBA : HdmiSpeakerAllocation # 186
    SpeakerBB : HdmiSpeakerAllocation # 187
    SpeakerBC : HdmiSpeakerAllocation # 188
    SpeakerBD : HdmiSpeakerAllocation # 189
    SpeakerBE : HdmiSpeakerAllocation # 190
    SpeakerBF : HdmiSpeakerAllocation # 191
    SpeakerC0 : HdmiSpeakerAllocation # 192
    SpeakerC1 : HdmiSpeakerAllocation # 193
    SpeakerC2 : HdmiSpeakerAllocation # 194
    SpeakerC3 : HdmiSpeakerAllocation # 195
    SpeakerC4 : HdmiSpeakerAllocation # 196
    SpeakerC5 : HdmiSpeakerAllocation # 197
    SpeakerC6 : HdmiSpeakerAllocation # 198
    SpeakerC7 : HdmiSpeakerAllocation # 199
    SpeakerC8 : HdmiSpeakerAllocation # 200
    SpeakerC9 : HdmiSpeakerAllocation # 201
    SpeakerCA : HdmiSpeakerAllocation # 202
    SpeakerCB : HdmiSpeakerAllocation # 203
    SpeakerCC : HdmiSpeakerAllocation # 204
    SpeakerCD : HdmiSpeakerAllocation # 205
    SpeakerCE : HdmiSpeakerAllocation # 206
    SpeakerCF : HdmiSpeakerAllocation # 207
    SpeakerD0 : HdmiSpeakerAllocation # 208
    SpeakerD1 : HdmiSpeakerAllocation # 209
    SpeakerD2 : HdmiSpeakerAllocation # 210
    SpeakerD3 : HdmiSpeakerAllocation # 211
    SpeakerD4 : HdmiSpeakerAllocation # 212
    SpeakerD5 : HdmiSpeakerAllocation # 213
    SpeakerD6 : HdmiSpeakerAllocation # 214
    SpeakerD7 : HdmiSpeakerAllocation # 215
    SpeakerD8 : HdmiSpeakerAllocation # 216
    SpeakerD9 : HdmiSpeakerAllocation # 217
    SpeakerDA : HdmiSpeakerAllocation # 218
    SpeakerDB : HdmiSpeakerAllocation # 219
    SpeakerDC : HdmiSpeakerAllocation # 220
    SpeakerDD : HdmiSpeakerAllocation # 221
    SpeakerDE : HdmiSpeakerAllocation # 222
    SpeakerDF : HdmiSpeakerAllocation # 223
    SpeakerE0 : HdmiSpeakerAllocation # 224
    SpeakerE1 : HdmiSpeakerAllocation # 225
    SpeakerE2 : HdmiSpeakerAllocation # 226
    SpeakerE3 : HdmiSpeakerAllocation # 227
    SpeakerE4 : HdmiSpeakerAllocation # 228
    SpeakerE5 : HdmiSpeakerAllocation # 229
    SpeakerE6 : HdmiSpeakerAllocation # 230
    SpeakerE7 : HdmiSpeakerAllocation # 231
    SpeakerE8 : HdmiSpeakerAllocation # 232
    SpeakerE9 : HdmiSpeakerAllocation # 233
    SpeakerEA : HdmiSpeakerAllocation # 234
    SpeakerEB : HdmiSpeakerAllocation # 235
    SpeakerEC : HdmiSpeakerAllocation # 236
    SpeakerED : HdmiSpeakerAllocation # 237
    SpeakerEE : HdmiSpeakerAllocation # 238
    SpeakerEF : HdmiSpeakerAllocation # 239
    SpeakerF0 : HdmiSpeakerAllocation # 240
    SpeakerF1 : HdmiSpeakerAllocation # 241
    SpeakerF2 : HdmiSpeakerAllocation # 242
    SpeakerF3 : HdmiSpeakerAllocation # 243
    SpeakerF4 : HdmiSpeakerAllocation # 244
    SpeakerF5 : HdmiSpeakerAllocation # 245
    SpeakerF6 : HdmiSpeakerAllocation # 246
    SpeakerF7 : HdmiSpeakerAllocation # 247
    SpeakerF8 : HdmiSpeakerAllocation # 248
    SpeakerF9 : HdmiSpeakerAllocation # 249
    SpeakerFA : HdmiSpeakerAllocation # 250
    SpeakerFB : HdmiSpeakerAllocation # 251
    SpeakerFC : HdmiSpeakerAllocation # 252
    SpeakerFD : HdmiSpeakerAllocation # 253
    SpeakerFE : HdmiSpeakerAllocation # 254
    SpeakerFF : HdmiSpeakerAllocation # 255


class HdmiVideoFormat(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Mode640x480p_60Hz : HdmiVideoFormat # 0
    Mode720x240p_60Hz : HdmiVideoFormat # 1
    Mode720x288p_50Hz : HdmiVideoFormat # 2
    Mode720x480i_60Hz : HdmiVideoFormat # 3
    Mode720x480p_60Hz : HdmiVideoFormat # 4
    Mode720x576i_50Hz : HdmiVideoFormat # 5
    Mode720x576p_50Hz : HdmiVideoFormat # 6
    Mode1280x720p_60Hz : HdmiVideoFormat # 7
    Mode1280x720p_50Hz : HdmiVideoFormat # 8
    Mode1920x1080i_60Hz : HdmiVideoFormat # 9
    Mode1920x1080i_50Hz : HdmiVideoFormat # 10
    Mode1920x1080p_60Hz : HdmiVideoFormat # 11
    Mode1920x1080p_50Hz : HdmiVideoFormat # 12
    Mode1920x1080p_24Hz : HdmiVideoFormat # 13


class HdmiVideoResolution(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Resolution_640x480 : HdmiVideoResolution # 0
    Resolution_720x480 : HdmiVideoResolution # 1
    Resolution_1280x720 : HdmiVideoResolution # 2
    Resolution_1920x1080 : HdmiVideoResolution # 3
    Resolution_3840x2160 : HdmiVideoResolution # 4
    Resolution_4096x2160 : HdmiVideoResolution # 5
    Resolution_7680x4320 : HdmiVideoResolution # 6


class HeadphoneAmplifierOutput(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Left : HeadphoneAmplifierOutput # 0
    Right : HeadphoneAmplifierOutput # 1
    Both : HeadphoneAmplifierOutput # 2


class HeadphoneAmplifierSettings:
    @property
    def GetHpFaultStatus(self) -> HeadphoneFaultStatus: ...
    @property
    def Output(self) -> HeadphoneAmplifierOutput: ...
    @Output.setter
    def Output(self, value: HeadphoneAmplifierOutput) -> HeadphoneAmplifierOutput: ...
    @property
    def SenseChannel(self) -> AmplifierSenseChannel: ...
    @SenseChannel.setter
    def SenseChannel(self, value: AmplifierSenseChannel) -> AmplifierSenseChannel: ...


class HeadphoneFaultStatus(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Okay : HeadphoneFaultStatus # 0
    HeadPhoneProtect : HeadphoneFaultStatus # 1
    HeadphoneOvl : HeadphoneFaultStatus # 2
    HeadphoneRightTemp : HeadphoneFaultStatus # 3
    HeadphoneLeftTemp : HeadphoneFaultStatus # 4
    HeadphoneBothTemp : HeadphoneFaultStatus # 5


class HfpAudioGatewayATCommandStep:
    @property
    def ATCommand(self) -> str: ...
    @ATCommand.setter
    def ATCommand(self, value: str) -> str: ...
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Delay(self) -> float: ...
    @Delay.setter
    def Delay(self, value: float) -> float: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    @property
    def Wait(self) -> BluetoothAtCommandWait: ...
    @Wait.setter
    def Wait(self, value: BluetoothAtCommandWait) -> BluetoothAtCommandWait: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class HfpAudioGatewayATCommandStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> HfpAudioGatewayATCommandStep: ...
    def Add(self) -> HfpAudioGatewayATCommandStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class HfpAudioGatewayStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Command(self) -> BluetoothHfpAgCommand: ...
    @Command.setter
    def Command(self, value: BluetoothHfpAgCommand) -> BluetoothHfpAgCommand: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class HfpAudioGatewayStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> HfpAudioGatewayStep: ...
    def Add(self) -> HfpAudioGatewayStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class HfpHandsFreeCommandStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Command(self) -> BluetoothHfpHfCommand: ...
    @Command.setter
    def Command(self, value: BluetoothHfpHfCommand) -> BluetoothHfpHfCommand: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class HfpHandsFreeCommandStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> HfpHandsFreeCommandStep: ...
    def Add(self) -> HfpHandsFreeCommandStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class HfpHandsFreeStep:
    @property
    def ATCommand(self) -> str: ...
    @ATCommand.setter
    def ATCommand(self, value: str) -> str: ...
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Delay(self) -> float: ...
    @Delay.setter
    def Delay(self, value: float) -> float: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    @property
    def Wait(self) -> BluetoothAtCommandWait: ...
    @Wait.setter
    def Wait(self, value: BluetoothAtCommandWait) -> BluetoothAtCommandWait: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class HfpHandsFreeStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> HfpHandsFreeStep: ...
    def Add(self) -> HfpHandsFreeStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class HighOrderHarmonicDistortionXyGraph:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def Calculation(self) -> DistortionRatioCalculation: ...
    @Calculation.setter
    def Calculation(self, value: DistortionRatioCalculation) -> DistortionRatioCalculation: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def MaxHarmonicNumber(self) -> int: ...
    @MaxHarmonicNumber.setter
    def MaxHarmonicNumber(self, value: int) -> int: ...
    @property
    def Message(self) -> str: ...
    @property
    def MinHarmonicNumber(self) -> int: ...
    @MinHarmonicNumber.setter
    def MinHarmonicNumber(self, value: int) -> int: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Normalized(self) -> bool: ...
    @Normalized.setter
    def Normalized(self, value: bool) -> bool: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def HasDataOnAxis(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> bool: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetData due to it being static, abstract and generic.

    GetData : GetData_MethodGroup
    class GetData_MethodGroup:
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> XYValues:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int) -> XYValues:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class HighpassFilterMeasurement:
    @property
    def HighpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def HighpassFilterType(self) -> MeasurementHighpassFilterType: ...
    @HighpassFilterType.setter
    def HighpassFilterType(self, value: MeasurementHighpassFilterType) -> MeasurementHighpassFilterType: ...


class HighpassFilterMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    DC : HighpassFilterMode # 0
    AC : HighpassFilterMode # 1
    Butterworth : HighpassFilterMode # 2
    Elliptic : HighpassFilterMode # 3
    JitterAes3 : HighpassFilterMode # 4


class HspAudioGatewayATCommandStep:
    @property
    def ATCommand(self) -> str: ...
    @ATCommand.setter
    def ATCommand(self, value: str) -> str: ...
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Delay(self) -> float: ...
    @Delay.setter
    def Delay(self, value: float) -> float: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    @property
    def Wait(self) -> BluetoothAtCommandWait: ...
    @Wait.setter
    def Wait(self, value: BluetoothAtCommandWait) -> BluetoothAtCommandWait: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class HspAudioGatewayATCommandStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> HspAudioGatewayATCommandStep: ...
    def Add(self) -> HspAudioGatewayATCommandStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class HspAudioGatewayStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Command(self) -> BluetoothHspAgCommand: ...
    @Command.setter
    def Command(self, value: BluetoothHspAgCommand) -> BluetoothHspAgCommand: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class HspAudioGatewayStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> HspAudioGatewayStep: ...
    def Add(self) -> HspAudioGatewayStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class HspHeadsetATCommandStep:
    @property
    def ATCommand(self) -> str: ...
    @ATCommand.setter
    def ATCommand(self, value: str) -> str: ...
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Delay(self) -> float: ...
    @Delay.setter
    def Delay(self, value: float) -> float: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    @property
    def Wait(self) -> BluetoothAtCommandWait: ...
    @Wait.setter
    def Wait(self, value: BluetoothAtCommandWait) -> BluetoothAtCommandWait: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class HspHeadsetATCommandStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> HspHeadsetATCommandStep: ...
    def Add(self) -> HspHeadsetATCommandStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class HspHeadsetStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Command(self) -> BluetoothHspHsCommand: ...
    @Command.setter
    def Command(self, value: BluetoothHspHsCommand) -> BluetoothHspHsCommand: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class HspHeadsetStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> HspHeadsetStep: ...
    def Add(self) -> HspHeadsetStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class HwModel(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    APx585 : HwModel # 0
    APx586 : HwModel # 1
    APx525 : HwModel # 2
    APx526 : HwModel # 3
    APx515 : HwModel # 4
    APx582 : HwModel # 5
    APx511 : HwModel # 6
    APx555 : HwModel # 7
    APx500Flex : HwModel # 8
    APx517 : HwModel # 9
    APx516 : HwModel # 10
    Unrecognized : HwModel # 255


class IA2dpSinkStep(ISequenceStep, typing.Protocol):
    @property
    def Command(self) -> BluetoothAvrcpCommand: ...
    @Command.setter
    def Command(self, value: BluetoothAvrcpCommand) -> BluetoothAvrcpCommand: ...
    @property
    def Delay(self) -> float: ...
    @Delay.setter
    def Delay(self, value: float) -> float: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...


class IA2dpSinkStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IA2dpSinkStep: ...
    @abc.abstractmethod
    def Add(self) -> IA2dpSinkStep: ...


class IA2dpSourceStep(ISequenceStep, typing.Protocol):
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def StreamingStarted(self) -> bool: ...
    @StreamingStarted.setter
    def StreamingStarted(self, value: bool) -> bool: ...


class IA2dpSourceStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IA2dpSourceStep: ...
    @abc.abstractmethod
    def Add(self) -> IA2dpSourceStep: ...


class IAcousticInputReferences(typing.Protocol):
    @property
    def CalibratorFrequency(self) -> float: ...
    @CalibratorFrequency.setter
    def CalibratorFrequency(self, value: float) -> float: ...
    @property
    def CalibratorFrequencyTolerance(self) -> float: ...
    @CalibratorFrequencyTolerance.setter
    def CalibratorFrequencyTolerance(self, value: float) -> float: ...
    @property
    def CalibratorLevel(self) -> IDoubleSetting: ...
    @property
    def Count(self) -> int: ...
    @abc.abstractmethod
    def Calibrate(self, channel: int) -> None: ...
    @abc.abstractmethod
    def GetExpectedSensitivity(self, channel: int) -> float: ...
    @abc.abstractmethod
    def GetSensitivity(self, channel: int) -> float: ...
    @abc.abstractmethod
    def GetSensitivityTolerance(self, channel: int) -> float: ...
    @abc.abstractmethod
    def GetSerialNum(self, channel: int) -> str: ...
    @abc.abstractmethod
    def ResetToDefault(self) -> None: ...
    @abc.abstractmethod
    def SetSensitivityTolerance(self, channel: int, dB: float) -> None: ...
    @abc.abstractmethod
    def SetSerialNum(self, channel: int, serialNum: str) -> None: ...
    # Skipped SetExpectedSensitivity due to it being static, abstract and generic.

    SetExpectedSensitivity : SetExpectedSensitivity_MethodGroup
    class SetExpectedSensitivity_MethodGroup:
        @typing.overload
        def __call__(self, channel: int, voltsPerPascal: float) -> None:...
        @typing.overload
        def __call__(self, channel: int, tedsChannel: TransducerTedsChannel) -> None:...

    # Skipped SetSensitivity due to it being static, abstract and generic.

    SetSensitivity : SetSensitivity_MethodGroup
    class SetSensitivity_MethodGroup:
        @typing.overload
        def __call__(self, channel: int, voltsPerPascal: float) -> None:...
        @typing.overload
        def __call__(self, channel: int, tedsChannel: TransducerTedsChannel) -> None:...



class IAcousticOutputReferences(typing.Protocol):
    @property
    def OutputLevelRegulation(self) -> IAcousticRegulationSettings: ...
    @property
    def ReferenceFrequency(self) -> float: ...
    @ReferenceFrequency.setter
    def ReferenceFrequency(self, value: float) -> float: ...
    @property
    def VoltageRatio(self) -> float: ...
    @VoltageRatio.setter
    def VoltageRatio(self, value: float) -> float: ...


class IAcousticRegulationSettings(IRegulationSettings, typing.Protocol):
    @property
    def MaxOutputLevel(self) -> IDoubleSetting: ...
    @property
    def MeasuredChannel(self) -> InputChannelIndex: ...
    @MeasuredChannel.setter
    def MeasuredChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def TargetLevel(self) -> IDoubleSetting: ...
    @abc.abstractmethod
    def RegulateAndSetOutputLevel(self) -> None: ...


class IAcousticResponse(IAcousticResponseSettings, IBenchModeMeasurement, IAcousticResponseResults, IContinuousSweepMeasurementSettings, typing.Protocol):
    @property
    def EQSettings(self) -> IGenEqSettings: ...
    @property
    def Generator(self) -> IContinuousSweepGenerator: ...
    @property
    def GeneratorWithPilot(self) -> IContinuousSweepPilotGenerator: ...
    @property
    def NestedSweep(self) -> INestedSweepSettings: ...
    @abc.abstractmethod
    def Generate(self) -> None: ...


class IAcousticResponseMeasurement(IBatchMeasurementWithAppend, IAcousticResponseSettings, IHighpassFilterMeasurement, ILowpassFilterMeasurement, INoiseWeightingMeasurement, IAcousticResponseResults, typing.Protocol):
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def Generator(self) -> IContinuousSweepGenerator: ...
    @property
    def GeneratorWithPilot(self) -> IContinuousSweepPilotGenerator: ...
    @property
    def NestedSweep(self) -> INestedSweepSettings: ...
    @abc.abstractmethod
    def Analyze(self) -> None: ...
    @abc.abstractmethod
    def Generate(self) -> None: ...


class IAcousticResponseResults(typing.Protocol):
    @property
    def AcquiredWaveform(self) -> IAcquiredWaveformGraph: ...
    @property
    def CrossCorrelation(self) -> IXYGraph: ...
    @property
    def Delay(self) -> IMeterGraph: ...
    @property
    def Deviation(self) -> IDeviationMeterWithSmoothingGraph: ...
    @property
    def DistortionProductLevel(self) -> IHarmonicXYGraph: ...
    @property
    def DistortionProductRatio(self) -> INormalizedHarmonicRatioXYGraph: ...
    @property
    def EnergyTimeCurve(self) -> ITimeDomainWithWindowXYGraph: ...
    @property
    def FrequencyShift(self) -> IMeterGraph: ...
    @property
    def GroupDelay(self) -> IXYGraph: ...
    @property
    def ImpulseResponse(self) -> IImpulseResponseWithWindowGraph: ...
    @property
    def Level(self) -> IXYGraph: ...
    @property
    def LevelAndDistortion(self) -> IXYDistortionGraph: ...
    @property
    def Phase(self) -> IPhaseXYGraph: ...
    @property
    def ReferenceWaveform(self) -> IXYGraph: ...
    @property
    def RelativeLevel(self) -> IRelativeLevelXYGraph: ...
    @property
    def RubAndBuzz(self) -> IRubAndBuzzGraph: ...
    @property
    def RubAndBuzzCrestFactor(self) -> IRubAndBuzzGraph: ...
    @property
    def RubAndBuzzLoudness(self) -> IXYGraph: ...
    @property
    def RubAndBuzzPeakRatio(self) -> IRubAndBuzzGraph: ...
    @property
    def SoneTracResidualWaveform(self) -> ISoneTracResidualGraph: ...
    @property
    def SoneTracRubAndBuzz(self) -> ISoneTracRubAndBuzzGraph: ...
    @property
    def ThdLevel(self) -> IXYGraph: ...
    @property
    def ThdNLevel(self) -> IXYGraph: ...
    @property
    def ThdNRatio(self) -> IThdNRatioXyGraph: ...
    @property
    def ThdRatio(self) -> INormalizedDistortionRatioXYGraph: ...


class IAcousticResponseSettings(IFastFrequencyThdNSettings, IContinuousSweepSettingsWithAdditionalAcqTimeBase, typing.Protocol):
    @property
    def Averages(self) -> int: ...
    @Averages.setter
    def Averages(self, value: int) -> int: ...
    @property
    def TimeWindowAutoStart(self) -> bool: ...
    @TimeWindowAutoStart.setter
    def TimeWindowAutoStart(self, value: bool) -> bool: ...


class IAcquiredWaveformGraph(IWaveformDataGraph, ITimeDomainXYGraph, typing.Protocol):
    pass


class IAcquisitionSettings(ITriggeredAcquisitionSettings, typing.Protocol):
    @property
    def Averages(self) -> int: ...
    @Averages.setter
    def Averages(self, value: int) -> int: ...


class IAdcTestSettings(typing.Protocol):
    @property
    def PinVoltageMaximum(self) -> float: ...
    @PinVoltageMaximum.setter
    def PinVoltageMaximum(self, value: float) -> float: ...
    @property
    def PinVoltageMinimum(self) -> float: ...
    @PinVoltageMinimum.setter
    def PinVoltageMinimum(self, value: float) -> float: ...
    @property
    def PinVoltageProtection(self) -> bool: ...
    @PinVoltageProtection.setter
    def PinVoltageProtection(self, value: bool) -> bool: ...
    @property
    def Unit(self) -> str: ...
    @property
    def VBias(self) -> float: ...
    @VBias.setter
    def VBias(self, value: float) -> float: ...
    @property
    def VBiasAutoOn(self) -> bool: ...
    @VBiasAutoOn.setter
    def VBiasAutoOn(self, value: bool) -> bool: ...
    @property
    def VBiasEnabled(self) -> bool: ...
    @VBiasEnabled.setter
    def VBiasEnabled(self, value: bool) -> bool: ...


class IAdvancedAnalogOutputSettings(typing.Protocol):
    @property
    def ConfigTrackCh1(self) -> bool: ...
    @ConfigTrackCh1.setter
    def ConfigTrackCh1(self, value: bool) -> bool: ...
    @abc.abstractmethod
    def GetChannelInvert(self, ch: OutputChannelIndex) -> bool: ...
    @abc.abstractmethod
    def GetConfiguration(self, ch: OutputChannelIndex) -> AnalogBalancedOutputConfigurationType: ...
    @abc.abstractmethod
    def SetChannelInvert(self, ch: OutputChannelIndex, invert: bool) -> None: ...
    @abc.abstractmethod
    def SetConfiguration(self, ch: OutputChannelIndex, config: AnalogBalancedOutputConfigurationType) -> None: ...


class IAdvancedDigitalOutputSettings(typing.Protocol):
    @property
    def AutoIncLa(self) -> bool: ...
    @AutoIncLa.setter
    def AutoIncLa(self, value: bool) -> bool: ...
    @property
    def AutoIncTod(self) -> bool: ...
    @AutoIncTod.setter
    def AutoIncTod(self, value: bool) -> bool: ...
    @property
    def CommonModeFreq(self) -> IDoubleSetting: ...
    @property
    def CommonModeLevel(self) -> IDoubleSetting: ...
    @property
    def CommonModeOn(self) -> bool: ...
    @CommonModeOn.setter
    def CommonModeOn(self, value: bool) -> bool: ...
    @property
    def CrcChA(self) -> int: ...
    @CrcChA.setter
    def CrcChA(self, value: int) -> int: ...
    @property
    def CrcChB(self) -> int: ...
    @CrcChB.setter
    def CrcChB(self, value: int) -> int: ...
    @property
    def Invert(self) -> bool: ...
    @Invert.setter
    def Invert(self, value: bool) -> bool: ...
    @property
    def NoiseLevel(self) -> IDoubleSetting: ...
    @property
    def NoiseOn(self) -> bool: ...
    @NoiseOn.setter
    def NoiseOn(self, value: bool) -> bool: ...
    @property
    def OutputLevelMode(self) -> OutputLevelType: ...
    @OutputLevelMode.setter
    def OutputLevelMode(self, value: OutputLevelType) -> OutputLevelType: ...
    @property
    def ParityError(self) -> bool: ...
    @ParityError.setter
    def ParityError(self, value: bool) -> bool: ...
    @property
    def RiseTime(self) -> IDoubleSetting: ...
    @property
    def RiseTimeMode(self) -> RiseTimeType: ...
    @RiseTimeMode.setter
    def RiseTimeMode(self, value: RiseTimeType) -> RiseTimeType: ...
    @property
    def UserDefinedCrcChA(self) -> bool: ...
    @UserDefinedCrcChA.setter
    def UserDefinedCrcChA(self, value: bool) -> bool: ...
    @property
    def UserDefinedCrcChB(self) -> bool: ...
    @UserDefinedCrcChB.setter
    def UserDefinedCrcChB(self, value: bool) -> bool: ...
    @property
    def WaveformLevel(self) -> IDoubleSetting: ...


class IAnalogInputChannelSettings(typing.Protocol):
    @property
    def ChannelCount(self) -> int: ...
    @ChannelCount.setter
    def ChannelCount(self, value: int) -> int: ...
    @property
    def SingleInputChannel(self) -> SingleInputChannelIndex: ...
    @SingleInputChannel.setter
    def SingleInputChannel(self, value: SingleInputChannelIndex) -> SingleInputChannelIndex: ...
    # Skipped GetDcCoupled due to it being static, abstract and generic.

    GetDcCoupled : GetDcCoupled_MethodGroup
    class GetDcCoupled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped SetDcCoupled due to it being static, abstract and generic.

    SetDcCoupled : SetDcCoupled_MethodGroup
    class SetDcCoupled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, dcCoupled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, dcCoupled: bool) -> None:...



class IAnalogInputRanges(IAnalogRanges, typing.Protocol):
    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> str:...
        @typing.overload
        def __call__(self, ch: str) -> str:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str) -> str:...
        @typing.overload
        def __call__(self, ch: str, unit: str) -> str:...

    # Skipped GetValue due to it being static, abstract and generic.

    GetValue : GetValue_MethodGroup
    class GetValue_MethodGroup:
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> float:...
        @typing.overload
        def __call__(self, ch: str) -> float:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str) -> float:...
        @typing.overload
        def __call__(self, ch: str, unit: str) -> float:...

    # Skipped SetValue due to it being static, abstract and generic.

    SetValue : SetValue_MethodGroup
    class SetValue_MethodGroup:
        @typing.overload
        def __call__(self, ch: InputChannelIndex, level: float) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, level: str) -> None:...
        @typing.overload
        def __call__(self, ch: str, level: float) -> None:...
        @typing.overload
        def __call__(self, ch: str, level: str) -> None:...



class IAnalogInputReferences(typing.Protocol):
    @property
    def dBm(self) -> IDoubleSetting: ...
    @property
    def dBrA(self) -> IDoubleSetting: ...
    @property
    def dBrAOffset(self) -> IDoubleSetting: ...
    @property
    def dBrB(self) -> IDoubleSetting: ...
    @property
    def dBrBOffset(self) -> IDoubleSetting: ...
    @property
    def dBSpl1(self) -> IDoubleSetting: ...
    @property
    def dBSpl1CalibratorLevel(self) -> IDoubleSetting: ...
    @property
    def dBSpl2(self) -> IDoubleSetting: ...
    @property
    def dBSpl2CalibratorLevel(self) -> IDoubleSetting: ...
    @property
    def Watts(self) -> IDoubleSetting: ...
    @abc.abstractmethod
    def SetReferenceFromInput(self, dbReference: DbReferenceType, channel: int) -> None: ...


class IAnalogInputSettings(IAnalogInputChannelSettings, typing.Protocol):
    @property
    def ResidualOnly(self) -> bool: ...
    @ResidualOnly.setter
    def ResidualOnly(self, value: bool) -> bool: ...
    @property
    def TedsCalibration(self) -> ITedsCalibration: ...
    @property
    def TedsSysCheck(self) -> ITedsSysCheck: ...
    @property
    def UseHighPerformanceSineAnalyzer(self) -> bool: ...
    @UseHighPerformanceSineAnalyzer.setter
    def UseHighPerformanceSineAnalyzer(self, value: bool) -> bool: ...
    # Skipped GetConnectorType due to it being static, abstract and generic.

    GetConnectorType : GetConnectorType_MethodGroup
    class GetConnectorType_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> AnalogConnectorType:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> AnalogConnectorType:...

    # Skipped GetTermination due to it being static, abstract and generic.

    GetTermination : GetTermination_MethodGroup
    class GetTermination_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> AnalogInputTermination:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> AnalogInputTermination:...

    # Skipped IsLoopbackValid due to it being static, abstract and generic.

    IsLoopbackValid : IsLoopbackValid_MethodGroup
    class IsLoopbackValid_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped SetConnectorType due to it being static, abstract and generic.

    SetConnectorType : SetConnectorType_MethodGroup
    class SetConnectorType_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, connectorType: AnalogConnectorType) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, connectorType: AnalogConnectorType) -> None:...

    # Skipped SetTermination due to it being static, abstract and generic.

    SetTermination : SetTermination_MethodGroup
    class SetTermination_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, termination: AnalogInputTermination) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, termination: AnalogInputTermination) -> None:...



class IAnalogOutputMonitor(ISignalMonitorWindow, IAnalogOutputMonitorSettings, typing.Protocol):
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...


class IAnalogOutputMonitorSettings(typing.Protocol):
    @property
    def AdcTest(self) -> IAdcTestSettings: ...
    @property
    def AdvancedAnalogOutput(self) -> IAdvancedAnalogOutputSettings: ...
    @property
    def BalancedSourceImpedance(self) -> AnalogBalancedSourceImpedance: ...
    @BalancedSourceImpedance.setter
    def BalancedSourceImpedance(self, value: AnalogBalancedSourceImpedance) -> AnalogBalancedSourceImpedance: ...
    @property
    def Ch1Enabled(self) -> bool: ...
    @Ch1Enabled.setter
    def Ch1Enabled(self, value: bool) -> bool: ...
    @property
    def Ch2Enabled(self) -> bool: ...
    @Ch2Enabled.setter
    def Ch2Enabled(self, value: bool) -> bool: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def Connector(self) -> OutputConnectorType: ...
    @Connector.setter
    def Connector(self, value: OutputConnectorType) -> OutputConnectorType: ...
    @property
    def Frequency(self) -> IDoubleSetting: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def TrackFirstChannel(self) -> bool: ...
    @TrackFirstChannel.setter
    def TrackFirstChannel(self, value: bool) -> bool: ...
    @property
    def UnbalancedSourceImpedance(self) -> AnalogUnbalancedSourceImpedance: ...
    @UnbalancedSourceImpedance.setter
    def UnbalancedSourceImpedance(self, value: AnalogUnbalancedSourceImpedance) -> AnalogUnbalancedSourceImpedance: ...
    @property
    def Unit(self) -> str: ...
    @Unit.setter
    def Unit(self, value: str) -> str: ...
    @property
    def UnitList(self) -> Array_1[str]: ...
    # Skipped GetLevel due to it being static, abstract and generic.

    GetLevel : GetLevel_MethodGroup
    class GetLevel_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> float:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, unit: str) -> float:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> str:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, unit: str) -> str:...

    # Skipped SetLevel due to it being static, abstract and generic.

    SetLevel : SetLevel_MethodGroup
    class SetLevel_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, level: float) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, level: str) -> None:...



class IAnalogOutputRanges(IAnalogRanges, typing.Protocol):
    @abc.abstractmethod
    def GetMaxValue(self, ch: OutputChannelIndex) -> float: ...
    # Skipped GetMaxText due to it being static, abstract and generic.

    GetMaxText : GetMaxText_MethodGroup
    class GetMaxText_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> str:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, unit: str) -> str:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> str:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, unit: str) -> str:...

    # Skipped GetValue due to it being static, abstract and generic.

    GetValue : GetValue_MethodGroup
    class GetValue_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> float:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, unit: str) -> float:...

    # Skipped SetValue due to it being static, abstract and generic.

    SetValue : SetValue_MethodGroup
    class SetValue_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, level: float) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, level: str) -> None:...



class IAnalogOutputReferences(typing.Protocol):
    @property
    def AcousticReferenceFrequency(self) -> float: ...
    @AcousticReferenceFrequency.setter
    def AcousticReferenceFrequency(self, value: float) -> float: ...
    @property
    def AcousticRegulationSettings(self) -> IAcousticRegulationSettings: ...
    @property
    def dBm(self) -> IDoubleSetting: ...
    @property
    def dBrG(self) -> IDoubleSetting: ...
    @property
    def VoltageRatio(self) -> float: ...
    @VoltageRatio.setter
    def VoltageRatio(self, value: float) -> float: ...
    @property
    def Watts(self) -> IDoubleSetting: ...


class IAnalogOutputSettings(typing.Protocol):
    @property
    def AdvancedAnalogOutput(self) -> IAdvancedAnalogOutputSettings: ...
    @property
    def AnalogOutputRanges(self) -> Array_1[float]: ...
    @property
    def BalancedSourceImpedance(self) -> AnalogBalancedSourceImpedance: ...
    @BalancedSourceImpedance.setter
    def BalancedSourceImpedance(self, value: AnalogBalancedSourceImpedance) -> AnalogBalancedSourceImpedance: ...
    @property
    def ChannelCount(self) -> int: ...
    @ChannelCount.setter
    def ChannelCount(self, value: int) -> int: ...
    @property
    def CommonModeConfiguration(self) -> AnalogBalancedOutputConfigurationType: ...
    @CommonModeConfiguration.setter
    def CommonModeConfiguration(self, value: AnalogBalancedOutputConfigurationType) -> AnalogBalancedOutputConfigurationType: ...
    @property
    def OutputRanges(self) -> IAnalogOutputRanges: ...
    @property
    def UnbalancedSourceImpedance(self) -> AnalogUnbalancedSourceImpedance: ...
    @UnbalancedSourceImpedance.setter
    def UnbalancedSourceImpedance(self, value: AnalogUnbalancedSourceImpedance) -> AnalogUnbalancedSourceImpedance: ...


class IAnalogRanges(typing.Protocol):
    @property
    def AutoRange(self) -> bool: ...
    @AutoRange.setter
    def AutoRange(self, value: bool) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def TrackFirstChannel(self) -> bool: ...
    @TrackFirstChannel.setter
    def TrackFirstChannel(self, value: bool) -> bool: ...
    @property
    def Unit(self) -> str: ...
    @Unit.setter
    def Unit(self, value: str) -> str: ...
    @property
    def UnitList(self) -> Array_1[str]: ...


class IAnalyzerRegulationSettings(IRegulationSettings, typing.Protocol):
    @abc.abstractmethod
    def Start(self) -> float: ...


class IAnsiS322FitLimitsToDataXyResult(IBaseXYGraph, IDerivedResult, typing.Protocol):
    @property
    def IsReferenceFileValid(self) -> bool: ...
    @property
    def LowerLimit(self) -> IGraphLimitData: ...
    @property
    def ReferenceFilePath(self) -> str: ...
    @ReferenceFilePath.setter
    def ReferenceFilePath(self, value: str) -> str: ...
    @property
    def Trace(self) -> IFitLimitToDataXyDataTrace: ...
    @property
    def UpperLimit(self) -> IGraphLimitData: ...
    @abc.abstractmethod
    def RefreshReferenceFileData(self) -> None: ...


class IAnsiS322ImdFrequencySweepGenerator(IGenerator, typing.Protocol):
    @property
    def Split(self) -> bool: ...
    @Split.setter
    def Split(self, value: bool) -> bool: ...
    @property
    def StartFrequency1(self) -> IDoubleSetting: ...
    @property
    def StartFrequency2(self) -> IDoubleReadOnlySetting: ...
    @property
    def StopFrequency1(self) -> IDoubleSetting: ...
    @property
    def StopFrequency2(self) -> IDoubleReadOnlySetting: ...
    @property
    def SweepParameters(self) -> IFrequencySweepParameters: ...


class IAnsiS322ImdFrequencySweepMeasurement(IBatchMeasurementWithAppend, typing.Protocol):
    @property
    def DifferenceFrequencyDistortion(self) -> IDifferenceFrequencyDistortionXyGraph: ...
    @property
    def Generator(self) -> IAnsiS322ImdFrequencySweepGenerator: ...
    @property
    def Settling(self) -> IAnsiS322ImdFrequencySweepSettlingParametersCollection: ...
    @property
    def TotalDifferenceFrequencyDistortion(self) -> IXYGraph: ...


class IAnsiS322ImdFrequencySweepSettlingParametersCollection(typing.Protocol):
    @property
    def TotalFrequencyDistortionSettlingParams(self) -> ISettlingParameters: ...


class IAppendedMeasurementStep(ISequenceStep, typing.Protocol):
    @property
    def DataSetNoteCustomText(self) -> str: ...
    @DataSetNoteCustomText.setter
    def DataSetNoteCustomText(self, value: str) -> str: ...
    @property
    def DataSetNotePrompt(self) -> str: ...
    @DataSetNotePrompt.setter
    def DataSetNotePrompt(self, value: str) -> str: ...
    @property
    def DataSetNoteType(self) -> DataNoteType: ...
    @DataSetNoteType.setter
    def DataSetNoteType(self, value: DataNoteType) -> DataNoteType: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def Waveforms(self) -> Array_1[str]: ...


class IAppendedMeasurementStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IAppendedMeasurementStep: ...
    @abc.abstractmethod
    def Add(self) -> IAppendedMeasurementStep: ...


class IApplication(typing.Protocol):
    @property
    def AcousticResponse(self) -> IAcousticResponseMeasurement: ...
    @property
    def ActiveMeasurement(self) -> IMeasurement: ...
    @property
    def ActiveMeasurementIndex(self) -> int: ...
    @property
    def ActiveMeasurementName(self) -> str: ...
    @property
    def ActiveMeasurementType(self) -> MeasurementType: ...
    @property
    def ActiveSignalPathIndex(self) -> int: ...
    @property
    def ActiveSignalPathName(self) -> str: ...
    @property
    def AnalogInputRange(self) -> Array_1[float]: ...
    @property
    def AnalogOutputMonitor(self) -> IAnalogOutputMonitor: ...
    @property
    def AnsiS322ImdFrequencySweep(self) -> IAnsiS322ImdFrequencySweepMeasurement: ...
    @property
    def APx1701(self) -> IAPx1701: ...
    @property
    def APx516Fault(self) -> IAPx516Faults: ...
    @property
    def APx517Fault(self) -> IAPx517Faults: ...
    @property
    def AttachedProjectItems(self) -> IProjectItemCollection: ...
    @property
    def AudibleSignalMonitor(self) -> IAudibleSignalMonitor: ...
    @property
    def AuthorizationMessage(self) -> str: ...
    @property
    def AuxControlMonitor(self) -> IAuxControlMonitor: ...
    @property
    def AuxControlOutputValue(self) -> int: ...
    @AuxControlOutputValue.setter
    def AuxControlOutputValue(self, value: int) -> int: ...
    @property
    def BandpassFrequencySweep(self) -> IBandpassFrequencySweepMeasurement: ...
    @property
    def BandpassLevel(self) -> IBandpassLevelMeasurement: ...
    @property
    def BandpassLevelSweep(self) -> IBandpassLevelSweepMeasurement: ...
    @property
    def BenchMode(self) -> IBenchMode: ...
    @property
    def BluetoothMonitor(self) -> IBluetoothMonitor: ...
    @property
    def BluetoothSettings(self) -> IBluetoothSettings: ...
    @property
    def Cmrr(self) -> ICmrrMeasurement: ...
    @property
    def CmrrIec(self) -> ICmrrIecMeasurement: ...
    @property
    def CompareEncodedBitstream(self) -> ICompareEncodedBitstreamMeasurement: ...
    @property
    def ContinuousSweep(self) -> IContinuousSweepMeasurement: ...
    @property
    def CrosstalkCustom(self) -> ICrosstalkCustomMeasurement: ...
    @property
    def CrosstalkFrequencySweepCustom(self) -> ICrosstalkFrequencySweepCustomMeasurement: ...
    @property
    def CrosstalkFrequencySweepOneChannelDriven(self) -> ICrosstalkFrequencySweepOneChannelDrivenMeasurement: ...
    @property
    def CrosstalkFrequencySweepOneChannelUndriven(self) -> ICrosstalkFrequencySweepOneChannelUndrivenMeasurement: ...
    @property
    def CrosstalkOneChannelDriven(self) -> ICrosstalkOneChannelDrivenMeasurement: ...
    @property
    def CrosstalkOneChannelUndriven(self) -> ICrosstalkOneChannelUndrivenMeasurement: ...
    @property
    def DCLevel(self) -> IDCLevelMeasurement: ...
    @property
    def DcLevelDcx(self) -> IDcLevelDcxMeasurement: ...
    @property
    def DcLevelSweep(self) -> IDcLevelSweepMeasurement: ...
    @property
    def DelayCalibration(self) -> IDelayCalibrationMeasurement: ...
    @property
    def DelayChirpCalibration(self) -> IDelayChirpCalibrationMeasurement: ...
    @property
    def DigitalErrorRate(self) -> IDigitalErrorRateMeasurement: ...
    @property
    def DigitalInputStreamMetadata(self) -> str: ...
    @property
    def DigitalInputStreamType(self) -> str: ...
    @property
    def DigitalSerialMonitor(self) -> IDigitalSerialMonitor: ...
    @property
    def DimImd(self) -> IDimImdMeasurement: ...
    @property
    def DimLevelSweep(self) -> IDimLevelSweepMeasurement: ...
    @property
    def DutDelay(self) -> IDutDelayMeasurement: ...
    @property
    def DynamicRange(self) -> IDynamicRangeMeasurement: ...
    @property
    def ExpirationMessages(self) -> str: ...
    @property
    def FftSpectrumSignalMonitor(self) -> IFFTSpectrumSignalMonitorWindow: ...
    @property
    def Frequency(self) -> IFrequencyMeasurement: ...
    @property
    def FrequencyResponse(self) -> IFrequencyResponseMeasurement: ...
    @property
    def HdmiAudioInfoFramesMonitor(self) -> IHdmiMonitor: ...
    @property
    def Height(self) -> int: ...
    @Height.setter
    def Height(self, value: int) -> int: ...
    @property
    def Iec60118ImdFrequencySweep(self) -> IIec60118ImdFrequencySweepMeasurement: ...
    @property
    def Imd(self) -> IImdMeasurement: ...
    @property
    def ImdFrequencySweep(self) -> IImdFrequencySweepMeasurement: ...
    @property
    def ImdLevelSweep(self) -> IImdLevelSweepMeasurement: ...
    @property
    def ImpedanceThieleSmall(self) -> IImpedanceThieleSmallMeasurement: ...
    @property
    def InputSampleRate(self) -> float: ...
    @property
    def InterchannelPhase(self) -> IInterchannelPhaseMeasurement: ...
    @property
    def IsDemoMode(self) -> bool: ...
    @property
    def IsProcessingSuspended(self) -> bool: ...
    @property
    def IsProjectLocked(self) -> bool: ...
    @property
    def IsProjectModified(self) -> bool: ...
    @property
    def JitterFrequencySweep(self) -> IJitterFrequencySweepMeasurement: ...
    @property
    def JitterLevelSweep(self) -> IJitterLevelSweepMeasurement: ...
    @property
    def LastException(self) -> APException: ...
    @property
    def Left(self) -> int: ...
    @Left.setter
    def Left(self, value: int) -> int: ...
    @property
    def LevelAndGain(self) -> ILevelAndGainMeasurement: ...
    @property
    def LevelRatio(self) -> ILevelRatioMeasurement: ...
    @property
    def LoudspeakerProductionTest(self) -> ILoudspeakerProductionTestMeasurement: ...
    @property
    def MaxOutput(self) -> IMaxOutputMeasurement: ...
    @property
    def MaxOutputBurst(self) -> IMaxOutputBurstMeasurement: ...
    @property
    def MeasurementRecorder(self) -> IMeasurementRecorderMeasurement: ...
    @property
    def MetadataRecorder(self) -> IMetadataRecorderMeasurement: ...
    @property
    def ModulatedNoise(self) -> IModulatedNoiseMeasurement: ...
    @property
    def MultitoneAnalyzer(self) -> IMultitoneAnalyzerMeasurement: ...
    @property
    def NavigatorVisible(self) -> bool: ...
    @NavigatorVisible.setter
    def NavigatorVisible(self, value: bool) -> bool: ...
    @property
    def Noise(self) -> INoiseMeasurement: ...
    @property
    def NoiseRecorder(self) -> INoiseRecorderMeasurement: ...
    @property
    def OperatingMode(self) -> APxOperatingMode: ...
    @OperatingMode.setter
    def OperatingMode(self, value: APxOperatingMode) -> APxOperatingMode: ...
    @property
    def OutputSampleRate(self) -> float: ...
    @property
    def PassFail(self) -> IPassFailMeasurement: ...
    @property
    def Pdm16Monitor(self) -> IPdm16Monitor: ...
    @property
    def PdmMonitor(self) -> IPdmMonitor: ...
    @property
    def Pesq(self) -> IPesqMeasurement: ...
    @property
    def PesqAverage(self) -> IPesqAverageMeasurement: ...
    @property
    def Polqa(self) -> IPolqaMeasurement: ...
    @property
    def PolqaAverage(self) -> IPolqaAverageMeasurement: ...
    @property
    def ProjectFileName(self) -> str: ...
    @property
    def ProjectSettings(self) -> IProjectSettings: ...
    @property
    def Psr(self) -> IPsrMeasurement: ...
    @property
    def PsrSweep(self) -> IPsrSweepMeasurement: ...
    @property
    def QpeakNoise(self) -> IQpeakNoiseMeasurement: ...
    @property
    def ReferenceLevels(self) -> IReferenceLevelsMeasurement: ...
    @property
    def RegulatedFrequencySweep(self) -> IRegulatedFrequencySweepMeasurement: ...
    @property
    def ResistanceDcx(self) -> IResistanceDcxMeasurement: ...
    @property
    def SampleRate(self) -> ISampleRateMeasurement: ...
    @property
    def ScopeSignalMonitor(self) -> IScopeSignalMonitorWindow: ...
    @property
    def Sequence(self) -> ISequence: ...
    @property
    def SignalAcquisition(self) -> ISignalAcquisitionMeasurement: ...
    @property
    def SignalAnalyzer(self) -> ISignalAnalyzerMeasurement: ...
    @property
    def SignalMeters(self) -> ISignalMetersWindow: ...
    @property
    def SignalMonitorsEnabled(self) -> bool: ...
    @SignalMonitorsEnabled.setter
    def SignalMonitorsEnabled(self, value: bool) -> bool: ...
    @property
    def SignalPathSetup(self) -> ISignalPathSetup: ...
    @property
    def SignalProcessing(self) -> ISignalProcessing: ...
    @property
    def SignalToNoiseRatio(self) -> ISignalToNoiseRatioMeasurement: ...
    @property
    def Sinad(self) -> ISinadMeasurement: ...
    @property
    def StatusBitsMonitor(self) -> IStatusBitsMonitor: ...
    @property
    def SteppedFrequencySweep(self) -> ISteppedFrequencySweepMeasurement: ...
    @property
    def SteppedLevelSweep(self) -> ISteppedLevelSweepMeasurement: ...
    @property
    def TedsData(self) -> ITedsDataMeasurement: ...
    @property
    def ThdN(self) -> IThdNMeasurement: ...
    @property
    def Top(self) -> int: ...
    @Top.setter
    def Top(self, value: int) -> int: ...
    @property
    def TransferFunction(self) -> ITransferFunctionMeasurement: ...
    @property
    def Variables(self) -> IVariables: ...
    @property
    def VddRamp(self) -> IVddRampMeasurement: ...
    @property
    def Version(self) -> IVersionInfo: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...
    @property
    def Width(self) -> int: ...
    @Width.setter
    def Width(self, value: int) -> int: ...
    @abc.abstractmethod
    def AddSignalPath(self) -> ISignalPath: ...
    @abc.abstractmethod
    def ApplyLicenseFile(self, licenseFileName: str) -> None: ...
    @abc.abstractmethod
    def CancelOperation(self) -> None: ...
    @abc.abstractmethod
    def ClearLastException(self) -> None: ...
    @abc.abstractmethod
    def CreateNewProject(self) -> None: ...
    @abc.abstractmethod
    def CreateStateChangeCollection(self) -> IStateChangeCollection: ...
    @abc.abstractmethod
    def DeleteUncheckedItems(self, deleteSignalPaths: bool, deleteMeasurements: bool, deleteResults: bool, deleteSequenceSteps: bool) -> None: ...
    @abc.abstractmethod
    def Exit(self) -> None: ...
    @abc.abstractmethod
    def GetAllMeasurementNames(self) -> Array_1[str]: ...
    @abc.abstractmethod
    def GetInputSampleRate(self, input: APxInputSelection) -> float: ...
    @abc.abstractmethod
    def LockProject(self, password: str, productionTest: bool = ..., showApplicationWindow: bool = ...) -> None: ...
    @abc.abstractmethod
    def Maximize(self) -> None: ...
    @abc.abstractmethod
    def Minimize(self) -> None: ...
    @abc.abstractmethod
    def OpenProject(self, fileName: str) -> None: ...
    @abc.abstractmethod
    def PasteFromClipboard(self) -> None: ...
    @abc.abstractmethod
    def Restore(self) -> None: ...
    @abc.abstractmethod
    def ResumeProcessing(self) -> None: ...
    @abc.abstractmethod
    def SaveProject(self, fileName: str) -> None: ...
    @abc.abstractmethod
    def SuspendProcessing(self) -> None: ...
    @abc.abstractmethod
    def UnlockProject(self, password: str) -> None: ...
    # Skipped AddMeasurement due to it being static, abstract and generic.

    AddMeasurement : AddMeasurement_MethodGroup
    class AddMeasurement_MethodGroup:
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementType: MeasurementType) -> IMeasurement:...
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementName: str) -> IMeasurement:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementType: MeasurementType) -> IMeasurement:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementName: str) -> IMeasurement:...
        @typing.overload
        def __call__(self, signalPathIndex: int, insertPosition: int, measurementType: MeasurementType) -> IMeasurement:...
        @typing.overload
        def __call__(self, signalPathIndex: int, insertPosition: int, measurementName: str) -> IMeasurement:...
        @typing.overload
        def __call__(self, signalPathName: str, insertPosition: int, measurementType: MeasurementType) -> IMeasurement:...
        @typing.overload
        def __call__(self, signalPathName: str, insertPosition: int, measurementName: str) -> IMeasurement:...

    # Skipped AddResult due to it being static, abstract and generic.

    AddResult : AddResult_MethodGroup
    class AddResult_MethodGroup:
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementIndex: int, resultType: MeasurementResultType) -> IGraph:...
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementName: str, resultType: MeasurementResultType) -> IGraph:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementIndex: int, resultType: MeasurementResultType) -> IGraph:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementName: str, resultType: MeasurementResultType) -> IGraph:...
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementIndex: int, resultType: MeasurementResultType, inputIndex: int) -> IGraph:...
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementName: str, resultType: MeasurementResultType, inputIndex: int) -> IGraph:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementIndex: int, resultType: MeasurementResultType, inputIndex: int) -> IGraph:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementName: str, resultType: MeasurementResultType, inputIndex: int) -> IGraph:...

    # Skipped CopyMeasurementToClipboard due to it being static, abstract and generic.

    CopyMeasurementToClipboard : CopyMeasurementToClipboard_MethodGroup
    class CopyMeasurementToClipboard_MethodGroup:
        @typing.overload
        def __call__(self, signalPath: int, measurement: int) -> None:...
        @typing.overload
        def __call__(self, signalPath: int, measurement: str) -> None:...
        @typing.overload
        def __call__(self, signalPath: str, measurement: int) -> None:...
        @typing.overload
        def __call__(self, signalPath: str, measurement: str) -> None:...

    # Skipped CopySignalPathToClipboard due to it being static, abstract and generic.

    CopySignalPathToClipboard : CopySignalPathToClipboard_MethodGroup
    class CopySignalPathToClipboard_MethodGroup:
        @typing.overload
        def __call__(self, signalPath: int) -> None:...
        @typing.overload
        def __call__(self, signalPath: str) -> None:...

    # Skipped DeleteMeasurement due to it being static, abstract and generic.

    DeleteMeasurement : DeleteMeasurement_MethodGroup
    class DeleteMeasurement_MethodGroup:
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementIndex: int) -> None:...
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementName: str) -> None:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementIndex: int) -> None:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementName: str) -> None:...

    # Skipped DeleteResult due to it being static, abstract and generic.

    DeleteResult : DeleteResult_MethodGroup
    class DeleteResult_MethodGroup:
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementIndex: int, resultIndex: int) -> None:...
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementName: str, resultIndex: int) -> None:...
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementName: str, resultName: str) -> None:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementIndex: int, resultIndex: int) -> None:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementIndex: int, resultName: str) -> None:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementName: str, resultIndex: int) -> None:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementName: str, resultName: str) -> None:...

    # Skipped DeleteSignalPath due to it being static, abstract and generic.

    DeleteSignalPath : DeleteSignalPath_MethodGroup
    class DeleteSignalPath_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...

    # Skipped ShowMeasurement due to it being static, abstract and generic.

    ShowMeasurement : ShowMeasurement_MethodGroup
    class ShowMeasurement_MethodGroup:
        @typing.overload
        def __call__(self, signalPath: int, measurement: int) -> None:...
        @typing.overload
        def __call__(self, signalPath: int, measurement: str) -> None:...
        @typing.overload
        def __call__(self, signalPath: str, measurement: int) -> None:...
        @typing.overload
        def __call__(self, signalPath: str, measurement: str) -> None:...



class IAPx1701(typing.Protocol):
    @property
    def CalibrationDate(self) -> str: ...
    @property
    def FactoryAdjust(self) -> bool: ...
    @property
    def Faults(self) -> IAPx1701Faults: ...
    @property
    def ID(self) -> str: ...
    @property
    def Online(self) -> bool: ...
    @property
    def SaturnAdjDate(self) -> str: ...
    @property
    def SaturnHwRevision(self) -> str: ...
    @property
    def SaturnId(self) -> str: ...
    @property
    def SaturnManufactureDate(self) -> str: ...
    @property
    def SaturnSerialNumber(self) -> str: ...
    @property
    def SaturnTechID(self) -> str: ...
    @property
    def SerialNumber(self) -> str: ...
    @property
    def Signature(self) -> str: ...
    @property
    def TitanAdjDate(self) -> str: ...
    @property
    def TitanHwRevision(self) -> str: ...
    @property
    def TitanId(self) -> str: ...
    @property
    def TitanManufactureDate(self) -> str: ...
    @property
    def TitanSerialNumber(self) -> str: ...
    @property
    def TitanTechID(self) -> str: ...


class IAPx1701Faults(typing.Protocol):
    @property
    def Current1(self) -> bool: ...
    @property
    def Current2(self) -> bool: ...
    @property
    def Power(self) -> bool: ...
    @property
    def Temp(self) -> bool: ...


class IAPx516Faults(typing.Protocol):
    @property
    def Ch1InputProtect(self) -> bool: ...
    @property
    def Ch1OutputOvl(self) -> bool: ...
    @property
    def Ch2InputProtect(self) -> bool: ...
    @property
    def Ch2OutputOvl(self) -> bool: ...
    @property
    def Get516FaultStatus(self) -> bool: ...


class IAPx517Faults(typing.Protocol):
    @property
    def HeadphoneAmplifierLeftTemperature(self) -> bool: ...
    @property
    def HeadphoneAmplifierOverload(self) -> bool: ...
    @property
    def HeadphoneAmplifierProtect(self) -> bool: ...
    @property
    def HeadphoneAmplifierRightTemperature(self) -> bool: ...
    @property
    def MicInputCh1Protect(self) -> bool: ...
    @property
    def MicInputCh2Protect(self) -> bool: ...
    @property
    def PowerAmplifierOverload(self) -> bool: ...
    @property
    def PowerAmplifierProtect(self) -> bool: ...
    @property
    def PowerAmplifierTemperature(self) -> bool: ...


class IAPxKeyBoxInfo(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IAPxKeyBoxItem: ...
    @property
    def SystemClock(self) -> DateTime: ...


class IAPxKeyBoxItem(typing.Protocol):
    @property
    def Description(self) -> str: ...
    @property
    def ExpirationDate(self) -> DateTime: ...
    @property
    def HasExpirationDate(self) -> bool: ...
    @property
    def Name(self) -> str: ...


class IAPxLoopbackAsioDevice(typing.Protocol):
    @property
    def Simulation(self) -> AsioLoopbackDeviceSimulation: ...
    @Simulation.setter
    def Simulation(self, value: AsioLoopbackDeviceSimulation) -> AsioLoopbackDeviceSimulation: ...
    @property
    def SoftClippingGain(self) -> float: ...
    @SoftClippingGain.setter
    def SoftClippingGain(self, value: float) -> float: ...


class IArbitraryGenerator(IWaveformGenerator, IGenerator, typing.Protocol):
    @property
    def WaveformFileSettings(self) -> IWaveformFileSettings: ...
    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...



class IAsioDevice(typing.Protocol):
    @property
    def AnalogOutputScalingFactor(self) -> IDoubleSetting: ...
    @property
    def AutoMap(self) -> bool: ...
    @AutoMap.setter
    def AutoMap(self, value: bool) -> bool: ...
    @property
    def BufferSize(self) -> int: ...
    @BufferSize.setter
    def BufferSize(self, value: int) -> int: ...
    @property
    def DeviceInfo(self) -> IAsioDeviceInfo: ...
    @property
    def InputChannelCount(self) -> int: ...
    @property
    def InputLatency(self) -> int: ...
    @InputLatency.setter
    def InputLatency(self, value: int) -> int: ...
    @property
    def InputLatencyAuto(self) -> bool: ...
    @InputLatencyAuto.setter
    def InputLatencyAuto(self, value: bool) -> bool: ...
    @property
    def InputScalingMode(self) -> AsioScalingMode: ...
    @InputScalingMode.setter
    def InputScalingMode(self, value: AsioScalingMode) -> AsioScalingMode: ...
    @property
    def OutputChannelCount(self) -> int: ...
    @property
    def OutputLatency(self) -> int: ...
    @OutputLatency.setter
    def OutputLatency(self, value: int) -> int: ...
    @property
    def OutputLatencyAuto(self) -> bool: ...
    @OutputLatencyAuto.setter
    def OutputLatencyAuto(self, value: bool) -> bool: ...
    @property
    def OutputScalingMode(self) -> AsioScalingMode: ...
    @OutputScalingMode.setter
    def OutputScalingMode(self, value: AsioScalingMode) -> AsioScalingMode: ...
    @property
    def SampleRate(self) -> float: ...
    @SampleRate.setter
    def SampleRate(self, value: float) -> float: ...
    @property
    def TedsCalibration(self) -> ITedsCalibration: ...
    @property
    def TedsSysCheck(self) -> ITedsSysCheck: ...
    @abc.abstractmethod
    def AssignInputChannel(self, asioChannel: int, apxChannel: int) -> None: ...
    @abc.abstractmethod
    def AssignOutputChannel(self, asioChannel: int, apxChannel: int) -> None: ...
    @abc.abstractmethod
    def CanSampleRate(self, sampleRate: float) -> bool: ...
    @abc.abstractmethod
    def GetAnalogInputScalingFactorUnit(self, index: int) -> str: ...
    @abc.abstractmethod
    def GetAnalogInputScalingFactorUnits(self, index: int) -> Array_1[str]: ...
    @abc.abstractmethod
    def GetClockSource(self) -> IClockSourceInfo: ...
    @abc.abstractmethod
    def GetInputChannelAssignment(self, apxChannel: int) -> IChannelInfo: ...
    @abc.abstractmethod
    def GetOutputChannelAssignment(self, apxChannel: int) -> IChannelInfo: ...
    @abc.abstractmethod
    def RemoveInputChannel(self, asioChannel: int) -> None: ...
    @abc.abstractmethod
    def RemoveOutputChannel(self, asioChannel: int) -> None: ...
    @abc.abstractmethod
    def SetClockSource(self, name: str) -> None: ...
    # Skipped GetAnalogInputScalingFactor due to it being static, abstract and generic.

    GetAnalogInputScalingFactor : GetAnalogInputScalingFactor_MethodGroup
    class GetAnalogInputScalingFactor_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> float:...
        @typing.overload
        def __call__(self, index: int, unit: str) -> float:...

    # Skipped SetAnalogInputScalingFactor due to it being static, abstract and generic.

    SetAnalogInputScalingFactor : SetAnalogInputScalingFactor_MethodGroup
    class SetAnalogInputScalingFactor_MethodGroup:
        @typing.overload
        def __call__(self, index: int, scalingFactor: float) -> None:...
        @typing.overload
        def __call__(self, index: int, scalingFactor: float, unit: str) -> None:...



class IAsioDeviceInfo(typing.Protocol):
    @property
    def ClockSources(self) -> Array_1[IClockSourceInfo]: ...
    @property
    def DriverName(self) -> str: ...
    @property
    def Granularity(self) -> int: ...
    @property
    def InputChannels(self) -> Array_1[IChannelInfo]: ...
    @property
    def InputLatency(self) -> int: ...
    @property
    def MaxBufferSize(self) -> int: ...
    @property
    def MinBufferSize(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @property
    def OutputChannels(self) -> Array_1[IChannelInfo]: ...
    @property
    def OutputLatency(self) -> int: ...
    @property
    def PreferredBufferSize(self) -> int: ...
    @property
    def Version(self) -> int: ...


class IAsioSettings(typing.Protocol):
    @property
    def Devices(self) -> Array_1[str]: ...
    @property
    def DitherOutput(self) -> bool: ...
    @DitherOutput.setter
    def DitherOutput(self, value: bool) -> bool: ...
    @property
    def IsConnected(self) -> bool: ...
    @property
    def LoopbackDeviceSettings(self) -> IAPxLoopbackAsioDevice: ...
    @abc.abstractmethod
    def Connect(self) -> None: ...
    @abc.abstractmethod
    def GetSelectedDevice(self) -> IAsioDevice: ...
    @abc.abstractmethod
    def Reset(self) -> None: ...
    @abc.abstractmethod
    def SetSelectedDevice(self, deviceName: str) -> None: ...


class IATCommandStep(ISequenceStep, typing.Protocol):
    @property
    def ATCommand(self) -> str: ...
    @ATCommand.setter
    def ATCommand(self, value: str) -> str: ...
    @property
    def Delay(self) -> float: ...
    @Delay.setter
    def Delay(self, value: float) -> float: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Wait(self) -> BluetoothAtCommandWait: ...
    @Wait.setter
    def Wait(self, value: BluetoothAtCommandWait) -> BluetoothAtCommandWait: ...


class IAudibleSignalMonitor(typing.Protocol):
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Gain(self) -> AudibleMonitorGain: ...
    @Gain.setter
    def Gain(self, value: AudibleMonitorGain) -> AudibleMonitorGain: ...
    @property
    def InputSelection(self) -> APxInputSelection: ...
    @InputSelection.setter
    def InputSelection(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def SignalType(self) -> AudibleMonitorSignalType: ...
    @SignalType.setter
    def SignalType(self, value: AudibleMonitorSignalType) -> AudibleMonitorSignalType: ...
    @property
    def ThdNResidualChannel(self) -> InputChannelIndex: ...
    @ThdNResidualChannel.setter
    def ThdNResidualChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    # Skipped GetChannelMix due to it being static, abstract and generic.

    GetChannelMix : GetChannelMix_MethodGroup
    class GetChannelMix_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> AudibleMonitorChannelMix:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> AudibleMonitorChannelMix:...

    # Skipped SetChannelMix due to it being static, abstract and generic.

    SetChannelMix : SetChannelMix_MethodGroup
    class SetChannelMix_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, mapping: AudibleMonitorChannelMix) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, mapping: AudibleMonitorChannelMix) -> None:...



class IAudioFileSettings(typing.Protocol):
    @property
    def ChannelCount(self) -> int: ...
    @ChannelCount.setter
    def ChannelCount(self, value: int) -> int: ...
    @property
    def SampleRate(self) -> IDoubleSetting: ...


class IAuxControl(typing.Protocol):
    @property
    def ByteValue(self) -> int: ...
    @ByteValue.setter
    def ByteValue(self, value: int) -> int: ...
    @abc.abstractmethod
    def Reset(self) -> None: ...
    # Skipped GetState due to it being static, abstract and generic.

    GetState : GetState_MethodGroup
    class GetState_MethodGroup:
        @typing.overload
        def __call__(self, bit: int) -> AuxControlState:...
        @typing.overload
        def __call__(self, bit: AuxControlBit) -> AuxControlState:...

    # Skipped SetState due to it being static, abstract and generic.

    SetState : SetState_MethodGroup
    class SetState_MethodGroup:
        @typing.overload
        def __call__(self, bit: int, state: AuxControlState) -> None:...
        @typing.overload
        def __call__(self, bit: AuxControlBit, state: AuxControlState) -> None:...



class IAuxControlMonitor(ISignalMonitorWindow, typing.Protocol):
    @property
    def AuxControlInputValue(self) -> int: ...
    @property
    def AuxControlOutputValue(self) -> int: ...
    @AuxControlOutputValue.setter
    def AuxControlOutputValue(self, value: int) -> int: ...
    @abc.abstractmethod
    def GetOutputPinState(self, pin: int) -> bool: ...
    @abc.abstractmethod
    def SetOutputPinState(self, pin: int, pinState: bool) -> None: ...


class IAvrcpSetAbsoluteVolumeStep(ISequenceStep, typing.Protocol):
    @property
    def AbsoluteVolume(self) -> int: ...
    @AbsoluteVolume.setter
    def AbsoluteVolume(self, value: int) -> int: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...


class IAvrcpSetAbsoluteVolumeStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IAvrcpSetAbsoluteVolumeStep: ...
    @abc.abstractmethod
    def Add(self) -> IAvrcpSetAbsoluteVolumeStep: ...


class IBandpassFrequencySweepMeasurement(ISteppedFrequencySweepMeasurementBase, typing.Protocol):
    @property
    def AvergeJitterLevel(self) -> IXYGraph: ...
    @property
    def Deviation(self) -> IDeviationMeterGraph: ...
    @property
    def Gain(self) -> IXYGraph: ...
    @property
    def Level(self) -> IXYGraph: ...
    @property
    def PeakLevel(self) -> IXYGraph: ...
    @property
    def RelativeLevel(self) -> IRelativeLevelXYGraph: ...
    @property
    def Selectivity(self) -> BandpassSweepSelectivityType: ...
    @Selectivity.setter
    def Selectivity(self, value: BandpassSweepSelectivityType) -> BandpassSweepSelectivityType: ...
    @property
    def Settling(self) -> IBandpassFrequencySweepSettlingParametersCollection: ...


class IBandpassFrequencySweepSettlingParametersCollection(typing.Protocol):
    @property
    def Level(self) -> ISettlingParameters: ...


class IBandpassGenerator(ISquareWithArbGenerator, typing.Protocol):
    pass


class IBandpassLevelMeasurement(IMeasurement, typing.Protocol):
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def AvergeJitterLevel(self) -> IMeterGraph: ...
    @property
    def FilterTuningMode(self) -> FilterTuningType: ...
    @FilterTuningMode.setter
    def FilterTuningMode(self, value: FilterTuningType) -> FilterTuningType: ...
    @property
    def FixedTuningFrequency(self) -> IDoubleSetting: ...
    @property
    def Generator(self) -> IBandpassGenerator: ...
    @property
    def Level(self) -> IMeterGraph: ...
    @property
    def PeakLevel(self) -> IMeterGraph: ...
    @property
    def RectangularBandMaxFrequency(self) -> IDoubleSetting: ...
    @property
    def RectangularBandMinFrequency(self) -> IDoubleSetting: ...
    @property
    def Selectivity(self) -> BandpassSelectivityType: ...
    @Selectivity.setter
    def Selectivity(self, value: BandpassSelectivityType) -> BandpassSelectivityType: ...
    @property
    def Settling(self) -> IBandpassSettlingParametersCollection: ...


class IBandpassLevelSweepMeasurement(ISteppedSweepMeasurement, typing.Protocol):
    @property
    def AvergeJitterLevel(self) -> IXYGraph: ...
    @property
    def FilterTuningMode(self) -> FilterTuningType: ...
    @FilterTuningMode.setter
    def FilterTuningMode(self, value: FilterTuningType) -> FilterTuningType: ...
    @property
    def FixedTuningFrequency(self) -> IDoubleSetting: ...
    @property
    def Gain(self) -> IXYGraph: ...
    @property
    def Generator(self) -> ISteppedLevelSweepGenerator: ...
    @property
    def Level(self) -> IXYGraph: ...
    @property
    def Linearity(self) -> ILinearityXYGraph: ...
    @property
    def PeakLevel(self) -> IXYGraph: ...
    @property
    def RectangularBandMaxFrequency(self) -> IDoubleSetting: ...
    @property
    def RectangularBandMinFrequency(self) -> IDoubleSetting: ...
    @property
    def Selectivity(self) -> BandpassSelectivityType: ...
    @Selectivity.setter
    def Selectivity(self, value: BandpassSelectivityType) -> BandpassSelectivityType: ...
    @property
    def Settling(self) -> IBandpassLevelSweepSettlingParametersCollection: ...


class IBandpassLevelSweepSettlingParametersCollection(typing.Protocol):
    @property
    def Level(self) -> ISettlingParameters: ...


class IBandpassSettlingParametersCollection(typing.Protocol):
    @property
    def Level(self) -> ISettlingParameters: ...


class IBaseSetting(typing.Protocol):
    @property
    def Active(self) -> bool: ...
    @property
    def IsEnabled(self) -> bool: ...
    @property
    def Values(self) -> Array_1[str]: ...


class IBaseXYGraph(IXYGraphSettings, IXYGraphDataImport, IXYGraphExport, typing.Protocol):
    @property
    def DeltaCursor(self) -> IDeltaCursor: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def LeftAxis(self) -> IGraphAxis: ...
    @property
    def PrimaryCursor(self) -> IXYCursor: ...
    @property
    def RightAxis(self) -> IGraphAxis: ...
    @property
    def RightAxisResult(self) -> IDynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> IXYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @abc.abstractmethod
    def ClearRightAxisResult(self) -> None: ...
    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis = ...) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis = ...) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis = ...) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis = ...) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis = ...) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis = ...) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis = ...) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis = ...) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis = ...) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis = ...) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis = ...) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis = ...) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis = ...) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis = ...) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis = ...) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis = ...) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis = ...) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis = ...) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis = ...) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis = ...) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis = ...) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis = ...) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis = ...) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis = ...) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis = ...) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis = ...) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis = ...) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis = ...) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis = ...) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis = ...) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis = ...) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis = ...) -> Array_1[float]:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class IBatchMeasurement(IMeasurement, typing.Protocol):
    @abc.abstractmethod
    def Start(self) -> bool: ...


class IBatchMeasurementWithAppend(IBatchMeasurement, typing.Protocol):
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...


class IBatchSineGenerator(IGenerator, typing.Protocol):
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Frequency(self) -> IDoubleSetting: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...


class IBatchSineWithArbGenerator(IArbitraryGenerator, IBatchSineGenerator, typing.Protocol):
    @property
    def Type(self) -> GeneratorType: ...


class IBatchSplitSineGenerator(ISplitSineGenerator, IBatchSineGenerator, typing.Protocol):
    @property
    def Type(self) -> SplitSineGeneratorType: ...


class IBatchSplitSineWithArbGenerator(ISplitSineGenerator, IArbitraryGenerator, IBatchSineGenerator, typing.Protocol):
    @property
    def Type(self) -> SplitSineWithFileGeneratorType: ...


class IBatchSquareWithArbGenerator(ISplitSineGenerator, IArbitraryGenerator, IBatchSineGenerator, typing.Protocol):
    @property
    def Type(self) -> SquarewaveGeneratorType: ...


class IBatteryCurrentInputSettings(typing.Protocol):
    @abc.abstractmethod
    def ZeroAdjust(self) -> None: ...


class IBenchMode(typing.Protocol):
    @property
    def ActiveMeasurement(self) -> BenchModeMeasurementType: ...
    @ActiveMeasurement.setter
    def ActiveMeasurement(self, value: BenchModeMeasurementType) -> BenchModeMeasurementType: ...
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def Analyzer(self) -> IBenchModeAnalyzer: ...
    @property
    def Generator(self) -> IBenchModeGenerator: ...
    @property
    def GeneratorAnalyzerSettingsVisible(self) -> bool: ...
    @GeneratorAnalyzerSettingsVisible.setter
    def GeneratorAnalyzerSettingsVisible(self, value: bool) -> bool: ...
    @property
    def Measurements(self) -> IBenchModeMeasurementCollection: ...
    @property
    def Meters(self) -> IBenchModeMeterCollection: ...
    @property
    def Monitors(self) -> IBenchModeMonitorCollection: ...
    @property
    def Setup(self) -> IBenchModeSignalPathSettings: ...
    @property
    def SignalPathSettingsVisible(self) -> bool: ...
    @SignalPathSettingsVisible.setter
    def SignalPathSettingsVisible(self, value: bool) -> bool: ...
    @abc.abstractmethod
    def CreateSettlingConfiguration(self) -> IMeterSettlingConfiguration: ...
    # Skipped GetSettledMeterReadings due to it being static, abstract and generic.

    GetSettledMeterReadings : GetSettledMeterReadings_MethodGroup
    class GetSettledMeterReadings_MethodGroup:
        @typing.overload
        def __call__(self, meterType: Array_1[SettlingMeterType]) -> ISettledResultCollection:...
        @typing.overload
        def __call__(self, configuration: IMeterSettlingConfiguration) -> ISettledResultCollection:...



class IBenchModeAnalyzer(typing.Protocol):
    @property
    def BandpassFilterBandwidth(self) -> NthOctave: ...
    @BandpassFilterBandwidth.setter
    def BandpassFilterBandwidth(self, value: NthOctave) -> NthOctave: ...
    @property
    def BandpassFilterTuning(self) -> FilterTuningType: ...
    @BandpassFilterTuning.setter
    def BandpassFilterTuning(self, value: FilterTuningType) -> FilterTuningType: ...
    @property
    def BandpassFixedFilterFrequency(self) -> IDoubleSetting: ...
    @property
    def ImdMeterType(self) -> ImdAnalysisType: ...
    @ImdMeterType.setter
    def ImdMeterType(self, value: ImdAnalysisType) -> ImdAnalysisType: ...
    @property
    def NotchFilterFrequency(self) -> IDoubleSetting: ...
    @property
    def NotchFilterTuning(self) -> FilterTuningType: ...
    @NotchFilterTuning.setter
    def NotchFilterTuning(self, value: FilterTuningType) -> FilterTuningType: ...
    @property
    def ReferenceChannel(self) -> InputChannelIndex: ...
    @ReferenceChannel.setter
    def ReferenceChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def Regulation(self) -> IAnalyzerRegulationSettings: ...
    @property
    def Settling(self) -> ISettlingParametersExCollection: ...
    @property
    def ThdNWeighting(self) -> SignalPathWeightingFilterType: ...
    @ThdNWeighting.setter
    def ThdNWeighting(self, value: SignalPathWeightingFilterType) -> SignalPathWeightingFilterType: ...
    @abc.abstractmethod
    def GetReferenceChannelForInput(self, input: APxInputSelection) -> InputChannelIndex: ...
    @abc.abstractmethod
    def SetReferenceChannelForInput(self, input: APxInputSelection, ch: InputChannelIndex) -> None: ...
    @abc.abstractmethod
    def SettlingForInput(self, input: APxInputSelection) -> ISettlingParametersExCollection: ...


class IBenchModeDcxSettings(IDcxSettings, typing.Protocol):
    @property
    def Dmm(self) -> IDmm: ...


class IBenchModeGenerator(ISplitSineWithArbGenerator, ISineBurstGenerator, typing.Protocol):
    @property
    def AutoOn(self) -> bool: ...
    @AutoOn.setter
    def AutoOn(self, value: bool) -> bool: ...
    @property
    def ConstantValues(self) -> IConstantValues: ...
    @property
    def Imd(self) -> IImdGeneratorSettings: ...
    @property
    def LoopWaveform(self) -> bool: ...
    @LoopWaveform.setter
    def LoopWaveform(self, value: bool) -> bool: ...
    @property
    def NoiseShape(self) -> NoiseShape: ...
    @NoiseShape.setter
    def NoiseShape(self, value: NoiseShape) -> NoiseShape: ...
    @property
    def RepeatWaveformCount(self) -> int: ...
    @RepeatWaveformCount.setter
    def RepeatWaveformCount(self, value: int) -> int: ...
    @property
    def SamplesPerStep(self) -> int: ...
    @SamplesPerStep.setter
    def SamplesPerStep(self, value: int) -> int: ...


class IBenchModeMeasurement(IMeasurementBase, typing.Protocol):
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def Function(self) -> BenchTestFunction: ...
    @property
    def HasError(self) -> bool: ...
    @property
    def IsStarted(self) -> bool: ...
    @property
    def LastErrorCode(self) -> APError: ...
    @property
    def LastErrorMessage(self) -> str: ...
    @property
    def Repeat(self) -> bool: ...
    @Repeat.setter
    def Repeat(self, value: bool) -> bool: ...
    @abc.abstractmethod
    def Analyze(self) -> None: ...
    @abc.abstractmethod
    def Show(self) -> None: ...
    @abc.abstractmethod
    def Start(self) -> None: ...
    @abc.abstractmethod
    def Stop(self) -> None: ...


class IBenchModeMeasurementCollection(typing.Protocol):
    @property
    def AcousticResponse(self) -> IAcousticResponse: ...
    @property
    def ContinuousSweep(self) -> IContinuousSweep: ...
    @property
    def Fft(self) -> IFftAnalyzer: ...
    @property
    def Recorder(self) -> IRecorderSettings: ...
    @property
    def SteppedSweep(self) -> ISteppedSweep: ...
    @property
    def TransferFunction(self) -> ITransferFunction: ...


class IBenchModeMeterCollection(typing.Protocol):
    @property
    def BitsMeterType(self) -> ActiveDataBitsType: ...
    @BitsMeterType.setter
    def BitsMeterType(self, value: ActiveDataBitsType) -> ActiveDataBitsType: ...
    @property
    def Count(self) -> int: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def MetersVisible(self) -> bool: ...
    @MetersVisible.setter
    def MetersVisible(self, value: bool) -> bool: ...
    @abc.abstractmethod
    def GetMeterType(self, monitorIndex: int) -> BenchModeMeterType: ...
    @abc.abstractmethod
    def GetReadingChannel(self, meterIndex: int, readingIndex: BenchModeMeterReadingIndex) -> int: ...
    @abc.abstractmethod
    def SaveMeterData(self, fileName: str, append: bool) -> None: ...
    @abc.abstractmethod
    def SetReadingChannel(self, meterIndex: int, readingIndex: BenchModeMeterReadingIndex, channelIndex: int) -> None: ...
    @abc.abstractmethod
    def Show(self) -> None: ...
    # Skipped Add due to it being static, abstract and generic.

    Add : Add_MethodGroup
    class Add_MethodGroup:
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType) -> None:...
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType, input: APxInputSelection) -> None:...

    # Skipped Contains due to it being static, abstract and generic.

    Contains : Contains_MethodGroup
    class Contains_MethodGroup:
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType) -> bool:...
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType, input: APxInputSelection) -> bool:...

    # Skipped GetChannelCount due to it being static, abstract and generic.

    GetChannelCount : GetChannelCount_MethodGroup
    class GetChannelCount_MethodGroup:
        @typing.overload
        def __call__(self, meterIndex: int) -> int:...
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType) -> int:...
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType, input: APxInputSelection) -> int:...

    # Skipped GetDisplaySettings due to it being static, abstract and generic.

    GetDisplaySettings : GetDisplaySettings_MethodGroup
    class GetDisplaySettings_MethodGroup:
        @typing.overload
        def __call__(self, meterIndex: int) -> IGraphAxis:...
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType) -> IGraphAxis:...
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType, input: APxInputSelection) -> IGraphAxis:...

    # Skipped GetLimitSettings due to it being static, abstract and generic.

    GetLimitSettings : GetLimitSettings_MethodGroup
    class GetLimitSettings_MethodGroup:
        @typing.overload
        def __call__(self, meterIndex: int) -> IMeterLimits:...
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType) -> IMeterLimits:...
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType, input: APxInputSelection) -> IMeterLimits:...

    # Skipped GetMaxValues due to it being static, abstract and generic.

    GetMaxValues : GetMaxValues_MethodGroup
    class GetMaxValues_MethodGroup:
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType, unit: str = ...) -> Array_1[float]:...
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType, input: APxInputSelection, unit: str = ...) -> Array_1[float]:...

    # Skipped GetMinValues due to it being static, abstract and generic.

    GetMinValues : GetMinValues_MethodGroup
    class GetMinValues_MethodGroup:
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType, unit: str = ...) -> Array_1[float]:...
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType, input: APxInputSelection, unit: str = ...) -> Array_1[float]:...

    # Skipped GetReadings due to it being static, abstract and generic.

    GetReadings : GetReadings_MethodGroup
    class GetReadings_MethodGroup:
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType) -> Array_1[float]:...
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType, input: APxInputSelection) -> Array_1[float]:...
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType, unit: str) -> Array_1[float]:...
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType, input: APxInputSelection, unit: str) -> Array_1[float]:...

    # Skipped GetWarnings due to it being static, abstract and generic.

    GetWarnings : GetWarnings_MethodGroup
    class GetWarnings_MethodGroup:
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType) -> Array_1[str]:...
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType, input: APxInputSelection) -> Array_1[str]:...

    # Skipped IsValid due to it being static, abstract and generic.

    IsValid : IsValid_MethodGroup
    class IsValid_MethodGroup:
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType) -> bool:...
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType, input: APxInputSelection) -> bool:...

    # Skipped Remove due to it being static, abstract and generic.

    Remove : Remove_MethodGroup
    class Remove_MethodGroup:
        @typing.overload
        def __call__(self, monitorIndex: int) -> None:...
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType) -> None:...
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType, input: APxInputSelection) -> None:...

    # Skipped ResetMinMax due to it being static, abstract and generic.

    ResetMinMax : ResetMinMax_MethodGroup
    class ResetMinMax_MethodGroup:
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType) -> None:...
        @typing.overload
        def __call__(self, meterType: BenchModeMeterType, input: APxInputSelection) -> None:...



class IBenchModeMonitorCollection(typing.Protocol):
    @property
    def Fft(self) -> IFFTSpectrumSignalMonitorWindow: ...
    @property
    def Scope(self) -> IScopeSignalMonitorWindow: ...
    @property
    def XyMonitorsVisible(self) -> bool: ...
    @XyMonitorsVisible.setter
    def XyMonitorsVisible(self, value: bool) -> bool: ...


class IBenchModeSignalPathSettings(ISignalPathSettings, typing.Protocol):
    @property
    def Dcx(self) -> IBenchModeDcxSettings: ...
    @property
    def FileAnalysisSettings(self) -> IFileAnalysisSettings: ...


class IBitsGraph(IGraph, typing.Protocol):
    @property
    def BitsAnalysis(self) -> ActiveDataBitsType: ...
    @BitsAnalysis.setter
    def BitsAnalysis(self, value: ActiveDataBitsType) -> ActiveDataBitsType: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @abc.abstractmethod
    def ExportData(self, fileName: str, append: bool = ...) -> None: ...
    @abc.abstractmethod
    def GetValues(self) -> Array_1[int]: ...


class IBluetoothA2dpSinkSettings(typing.Protocol):
    @property
    def AvSyncDelay(self) -> float: ...
    @AvSyncDelay.setter
    def AvSyncDelay(self, value: float) -> float: ...
    @property
    def AvSyncReporting(self) -> BluetoothAvSyncReporting: ...
    @AvSyncReporting.setter
    def AvSyncReporting(self, value: BluetoothAvSyncReporting) -> BluetoothAvSyncReporting: ...


class IBluetoothA2dpSourceSettings(typing.Protocol):
    @property
    def UseAvSyncDelayForSignalPathDelay(self) -> bool: ...
    @UseAvSyncDelayForSignalPathDelay.setter
    def UseAvSyncDelayForSignalPathDelay(self, value: bool) -> bool: ...


class IBluetoothAacCodecSettings(IBluetoothCodecSettingsBase, typing.Protocol):
    @property
    def VariableBitRate(self) -> bool: ...
    @VariableBitRate.setter
    def VariableBitRate(self, value: bool) -> bool: ...
    @abc.abstractmethod
    def EnableMpegVersion(self, mpeg: BluetoothAacMpegVersion, enabled: bool) -> None: ...
    @abc.abstractmethod
    def IsMpegVersionEnabled(self, mpeg: BluetoothAacMpegVersion) -> bool: ...


class IBluetoothAptxCodecSettings(IBluetoothCodecSettingsBase, typing.Protocol):
    @abc.abstractmethod
    def EnableSampleRate(self, rate: BluetoothAptxSampleRate, enabled: bool) -> None: ...
    @abc.abstractmethod
    def IsSampleRateEnabled(self, rate: BluetoothAptxSampleRate) -> bool: ...


class IBluetoothAptxHdCodecSettings(IBluetoothCodecSettingsBase, typing.Protocol):
    @abc.abstractmethod
    def EnableSampleRate(self, rate: BluetoothAptxHdSampleRate, enabled: bool) -> None: ...
    @abc.abstractmethod
    def IsSampleRateEnabled(self, rate: BluetoothAptxHdSampleRate) -> bool: ...


class IBluetoothAptxLowLatencyCodecSettings(IBluetoothCodecSettingsBase, typing.Protocol):
    @abc.abstractmethod
    def EnableSampleRate(self, rate: BluetoothAptxLowLatencySampleRate, enabled: bool) -> None: ...
    @abc.abstractmethod
    def IsSampleRateEnabled(self, rate: BluetoothAptxLowLatencySampleRate) -> bool: ...


class IBluetoothAtCommandInfo(typing.Protocol):
    @property
    def Command(self) -> str: ...
    @property
    def CommandType(self) -> BluetoothAtCommandInfoType: ...
    @property
    def Timestamp(self) -> DateTime: ...


class IBluetoothAtCommandInfoLog(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IBluetoothAtCommandInfo: ...
    @abc.abstractmethod
    def Clear(self) -> None: ...
    @abc.abstractmethod
    def Save(self, fileName: str, appendIfExists: bool) -> None: ...


class IBluetoothAvrcpCommandInfo(typing.Protocol):
    @property
    def Command(self) -> str: ...
    @property
    def DisplayType(self) -> BluetoothAvrcpCommandInfoDisplayType: ...
    @property
    def IsReceived(self) -> bool: ...
    @property
    def Modifier(self) -> str: ...
    @property
    def Timestamp(self) -> DateTime: ...


class IBluetoothAvrcpCommandInfoLog(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Filter(self) -> BluetoothAvrcpCommandInfoFilter: ...
    @Filter.setter
    def Filter(self, value: BluetoothAvrcpCommandInfoFilter) -> BluetoothAvrcpCommandInfoFilter: ...
    @property
    def Item(self) -> IBluetoothAvrcpCommandInfo: ...
    @abc.abstractmethod
    def Clear(self) -> None: ...
    @abc.abstractmethod
    def Save(self, fileName: str, appendIfExists: bool) -> None: ...


class IBluetoothAvrcpControllerSettings(IBluetoothAvrcpSettingsBase, typing.Protocol):
    @property
    def AbsoluteVolume(self) -> int: ...
    @AbsoluteVolume.setter
    def AbsoluteVolume(self, value: int) -> int: ...
    @property
    def IsFastForwardPressed(self) -> bool: ...
    @property
    def IsRewindPressed(self) -> bool: ...
    @property
    def PlaybackPosition(self) -> int: ...
    @property
    def PlaybackStatus(self) -> BluetoothAvrcpPlaybackStatus: ...
    @abc.abstractmethod
    def SendCommand(self, command: BluetoothAvrcpCommand) -> None: ...


class IBluetoothAvrcpSettingsBase(typing.Protocol):
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Version(self) -> BluetoothAvrcpVersion: ...
    @Version.setter
    def Version(self, value: BluetoothAvrcpVersion) -> BluetoothAvrcpVersion: ...


class IBluetoothAvrcpTargetSettings(IBluetoothAvrcpSettingsBase, typing.Protocol):
    @property
    def AbsoluteVolume(self) -> int: ...
    @AbsoluteVolume.setter
    def AbsoluteVolume(self, value: int) -> int: ...
    @property
    def ApplyGeneratorSettings(self) -> bool: ...
    @ApplyGeneratorSettings.setter
    def ApplyGeneratorSettings(self, value: bool) -> bool: ...
    @property
    def PlaybackStatus(self) -> BluetoothAvrcpPlaybackStatus: ...
    @PlaybackStatus.setter
    def PlaybackStatus(self, value: BluetoothAvrcpPlaybackStatus) -> BluetoothAvrcpPlaybackStatus: ...


class IBluetoothCodecSettings(typing.Protocol):
    @property
    def Aac(self) -> IBluetoothAacCodecSettings: ...
    @property
    def Aptx(self) -> IBluetoothAptxCodecSettings: ...
    @property
    def AptxHd(self) -> IBluetoothAptxHdCodecSettings: ...
    @property
    def AptxLowLatency(self) -> IBluetoothAptxLowLatencyCodecSettings: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IBluetoothCodecSettingsBase: ...
    @property
    def Sbc(self) -> IBluetoothSbcCodecSettings: ...


class IBluetoothCodecSettingsBase(typing.Protocol):
    @property
    def CodecType(self) -> BluetoothA2dpCodec: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Priority(self) -> int: ...
    @Priority.setter
    def Priority(self, value: int) -> int: ...
    @abc.abstractmethod
    def MoveDown(self) -> None: ...
    @abc.abstractmethod
    def MoveUp(self) -> None: ...


class IBluetoothDevice(IBluetoothDeviceInfo, typing.Protocol):
    @property
    def IsConnected(self) -> bool: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def IsPaired(self) -> bool: ...
    @property
    def LinkKey(self) -> str: ...
    @property
    def Status(self) -> BluetoothDeviceStatus: ...
    @abc.abstractmethod
    def IsAvrcpEventSupported(self, eventType: BluetoothAvrcpEvent) -> bool: ...
    @abc.abstractmethod
    def QueryFriendlyName(self) -> str: ...


class IBluetoothDeviceCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IBluetoothDevice: ...


class IBluetoothDeviceInfo(typing.Protocol):
    @property
    def Address(self) -> str: ...
    @property
    def DeviceClass(self) -> str: ...
    @property
    def FriendlyName(self) -> str: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...


class IBluetoothDeviceInfoCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IBluetoothDeviceInfo: ...
    @abc.abstractmethod
    def Clear(self) -> None: ...
    # Skipped Remove due to it being static, abstract and generic.

    Remove : Remove_MethodGroup
    class Remove_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, address: str) -> None:...



class IBluetoothMonitor(ISignalMonitorWindow, typing.Protocol):
    @property
    def FieldCount(self) -> int: ...
    @abc.abstractmethod
    def GetFieldName(self, fieldIndex: int) -> str: ...
    @abc.abstractmethod
    def GetFieldValue(self, fieldIndex: int) -> str: ...


class IBluetoothPacketSettings(typing.Protocol):
    @property
    def Latency(self) -> int: ...
    @Latency.setter
    def Latency(self, value: int) -> int: ...
    @property
    def Retransmission(self) -> BluetoothRetransmissionEffort: ...
    @Retransmission.setter
    def Retransmission(self, value: BluetoothRetransmissionEffort) -> BluetoothRetransmissionEffort: ...
    @abc.abstractmethod
    def GetPacketTypeEnabled(self, packetType: BluetoothPacketType) -> bool: ...
    @abc.abstractmethod
    def SetPacketTypeEnabled(self, packetType: BluetoothPacketType, enabled: bool) -> None: ...


class IBluetoothSbcCodecSettings(IBluetoothCodecSettingsBase, typing.Protocol):
    @property
    def PreferredChannnelMode(self) -> BluetoothSbcChannelMode: ...
    @PreferredChannnelMode.setter
    def PreferredChannnelMode(self, value: BluetoothSbcChannelMode) -> BluetoothSbcChannelMode: ...
    @property
    def PreferredSampleRate(self) -> BluetoothSbcSampleRate: ...
    @PreferredSampleRate.setter
    def PreferredSampleRate(self, value: BluetoothSbcSampleRate) -> BluetoothSbcSampleRate: ...
    @abc.abstractmethod
    def EnableChannelMode(self, channelMode: BluetoothSbcChannelMode, enabled: bool) -> None: ...
    @abc.abstractmethod
    def EnableSampleRate(self, rate: BluetoothSbcSampleRate, enabled: bool) -> None: ...
    @abc.abstractmethod
    def IsChannelModeEnabled(self, channelMode: BluetoothSbcChannelMode) -> bool: ...
    @abc.abstractmethod
    def IsSampleRateEnabled(self, rate: BluetoothSbcSampleRate) -> bool: ...


class IBluetoothSettings(typing.Protocol):
    @property
    def A2dpCodec(self) -> BluetoothA2dpCodec: ...
    @A2dpCodec.setter
    def A2dpCodec(self, value: BluetoothA2dpCodec) -> BluetoothA2dpCodec: ...
    @property
    def A2dpSink(self) -> IBluetoothA2dpSinkSettings: ...
    @property
    def A2dpSource(self) -> IBluetoothA2dpSourceSettings: ...
    @property
    def AcceptA2dpConnections(self) -> bool: ...
    @AcceptA2dpConnections.setter
    def AcceptA2dpConnections(self, value: bool) -> bool: ...
    @property
    def AcceptAvrcpConnections(self) -> bool: ...
    @AcceptAvrcpConnections.setter
    def AcceptAvrcpConnections(self, value: bool) -> bool: ...
    @property
    def AcceptHfpHspConnections(self) -> bool: ...
    @AcceptHfpHspConnections.setter
    def AcceptHfpHspConnections(self, value: bool) -> bool: ...
    @property
    def AtCommandsLog(self) -> IBluetoothAtCommandInfoLog: ...
    @property
    def AutoAnswerHfpHspCalls(self) -> bool: ...
    @AutoAnswerHfpHspCalls.setter
    def AutoAnswerHfpHspCalls(self, value: bool) -> bool: ...
    @property
    def AutoClassOfDevice(self) -> bool: ...
    @AutoClassOfDevice.setter
    def AutoClassOfDevice(self, value: bool) -> bool: ...
    @property
    def AvrcpCommandsLog(self) -> IBluetoothAvrcpCommandInfoLog: ...
    @property
    def AvrcpController(self) -> IBluetoothAvrcpControllerSettings: ...
    @property
    def AvrcpReceivedCommandsLog(self) -> IBluetoothAvrcpCommandInfoLog: ...
    @property
    def AvrcpTarget(self) -> IBluetoothAvrcpTargetSettings: ...
    @property
    def ClockRecovery(self) -> BluetoothClockRecovery: ...
    @ClockRecovery.setter
    def ClockRecovery(self, value: BluetoothClockRecovery) -> BluetoothClockRecovery: ...
    @property
    def CodecSettings(self) -> IBluetoothCodecSettings: ...
    @property
    def ConnectedDevice(self) -> IBluetoothDevice: ...
    @property
    def CustomClassOfDevice(self) -> str: ...
    @CustomClassOfDevice.setter
    def CustomClassOfDevice(self, value: str) -> str: ...
    @property
    def DCCoupled(self) -> bool: ...
    @DCCoupled.setter
    def DCCoupled(self, value: bool) -> bool: ...
    @property
    def DeviceAddress(self) -> str: ...
    @property
    def DeviceList(self) -> IBluetoothDeviceCollection: ...
    @property
    def DiscoverAndConnectMode(self) -> BluetoothDiscoverAndConnectMode: ...
    @DiscoverAndConnectMode.setter
    def DiscoverAndConnectMode(self, value: BluetoothDiscoverAndConnectMode) -> BluetoothDiscoverAndConnectMode: ...
    @property
    def eScoSettings(self) -> IBluetoothPacketSettings: ...
    @property
    def FindAllDevicesInInquiry(self) -> bool: ...
    @FindAllDevicesInInquiry.setter
    def FindAllDevicesInInquiry(self, value: bool) -> bool: ...
    @property
    def FriendlyName(self) -> str: ...
    @FriendlyName.setter
    def FriendlyName(self, value: str) -> str: ...
    @property
    def GetFriendlyNamesDuringInquiry(self) -> bool: ...
    @GetFriendlyNamesDuringInquiry.setter
    def GetFriendlyNamesDuringInquiry(self, value: bool) -> bool: ...
    @property
    def InquiryDeviceClass(self) -> str: ...
    @InquiryDeviceClass.setter
    def InquiryDeviceClass(self, value: str) -> str: ...
    @property
    def InquiryTimeout(self) -> int: ...
    @InquiryTimeout.setter
    def InquiryTimeout(self, value: int) -> int: ...
    @property
    def IsA2dpStreamingStarted(self) -> bool: ...
    @property
    def IsConnected(self) -> bool: ...
    @property
    def IsFirmwareUpdateRequired(self) -> bool: ...
    @property
    def KnownDevices(self) -> IBluetoothDeviceInfoCollection: ...
    @property
    def MaintainConnection(self) -> bool: ...
    @MaintainConnection.setter
    def MaintainConnection(self, value: bool) -> bool: ...
    @property
    def MaxDevicesInInquiry(self) -> int: ...
    @MaxDevicesInInquiry.setter
    def MaxDevicesInInquiry(self, value: int) -> int: ...
    @property
    def ModuleVersion(self) -> BluetoothModuleVersion: ...
    @property
    def mSbcSettings(self) -> IBluetoothPacketSettings: ...
    @property
    def PreferredA2dpSampleRate(self) -> BluetoothA2dpSampleRate: ...
    @PreferredA2dpSampleRate.setter
    def PreferredA2dpSampleRate(self, value: BluetoothA2dpSampleRate) -> BluetoothA2dpSampleRate: ...
    @property
    def ProfileSet(self) -> BluetoothProfileSet: ...
    @ProfileSet.setter
    def ProfileSet(self, value: BluetoothProfileSet) -> BluetoothProfileSet: ...
    @property
    def SbcChannelMode(self) -> BluetoothSbcChannelMode: ...
    @SbcChannelMode.setter
    def SbcChannelMode(self, value: BluetoothSbcChannelMode) -> BluetoothSbcChannelMode: ...
    @property
    def SinkDeviceAddress(self) -> str: ...
    @property
    def SourceDeviceAddress(self) -> str: ...
    @property
    def SspMode(self) -> BluetoothSspPairingMode: ...
    @SspMode.setter
    def SspMode(self, value: BluetoothSspPairingMode) -> BluetoothSspPairingMode: ...
    @property
    def SupportsWidebandSpeech(self) -> bool: ...
    @property
    def TransmitPower(self) -> BluetoothTransmitPower: ...
    @TransmitPower.setter
    def TransmitPower(self, value: BluetoothTransmitPower) -> BluetoothTransmitPower: ...
    @property
    def WidebandSpeechEnabled(self) -> bool: ...
    @WidebandSpeechEnabled.setter
    def WidebandSpeechEnabled(self, value: bool) -> bool: ...
    @abc.abstractmethod
    def ConnectAll(self, addr: str) -> None: ...
    @abc.abstractmethod
    def ConnectAvrcp(self, addr: str) -> None: ...
    @abc.abstractmethod
    def ConnectHfp(self, addr: str) -> None: ...
    @abc.abstractmethod
    def ConnectHsp(self, addr: str) -> None: ...
    @abc.abstractmethod
    def Disconnect(self) -> None: ...
    @abc.abstractmethod
    def HfpAudioGatewayCommand(self, command: BluetoothHfpAgCommand) -> None: ...
    @abc.abstractmethod
    def HfpHfpCommand(self, command: BluetoothHfpHfCommand) -> None: ...
    @abc.abstractmethod
    def HspAudioGatewayCommand(self, command: BluetoothHspAgCommand) -> None: ...
    @abc.abstractmethod
    def HspHsCommand(self, command: BluetoothHspHsCommand) -> None: ...
    @abc.abstractmethod
    def IsProfileConnected(self, profile: BluetoothProfile) -> bool: ...
    @abc.abstractmethod
    def QueryFriendlyName(self, address: str) -> str: ...
    @abc.abstractmethod
    def ScanForDevices(self, durationInSeconds: int) -> IBluetoothDeviceCollection: ...
    @abc.abstractmethod
    def SendAvrcpCommand(self, command: BluetoothAvrcpCommand) -> None: ...
    @abc.abstractmethod
    def StartA2dpStreaming(self) -> None: ...
    @abc.abstractmethod
    def StopA2dpStreaming(self) -> None: ...
    @abc.abstractmethod
    def UnpairDevice(self, addr: str) -> None: ...
    # Skipped ClearDeviceList due to it being static, abstract and generic.

    ClearDeviceList : ClearDeviceList_MethodGroup
    class ClearDeviceList_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, listType: BluetoothDeviceListType) -> None:...

    # Skipped ConnectA2dp due to it being static, abstract and generic.

    ConnectA2dp : ConnectA2dp_MethodGroup
    class ConnectA2dp_MethodGroup:
        @typing.overload
        def __call__(self, addr: str) -> None:...
        @typing.overload
        def __call__(self, addr: str, codec: BluetoothA2dpCodec, sampleRate: BluetoothA2dpSampleRate, channelMode: BluetoothSbcChannelMode) -> None:...

    # Skipped PairWithDevice due to it being static, abstract and generic.

    PairWithDevice : PairWithDevice_MethodGroup
    class PairWithDevice_MethodGroup:
        @typing.overload
        def __call__(self, addr: str) -> bool:...
        @typing.overload
        def __call__(self, addr: str, pin: str) -> bool:...

    # Skipped SendATCommand due to it being static, abstract and generic.

    SendATCommand : SendATCommand_MethodGroup
    class SendATCommand_MethodGroup:
        @typing.overload
        def __call__(self, command: str) -> None:...
        @typing.overload
        def __call__(self, command: str, waitForResponse: BluetoothAtCommandWait) -> None:...



class IBluetoothSignalPathSettings(typing.Protocol):
    @property
    def AudioProfile(self) -> BluetoothAudioProfile: ...
    @property
    def AutoConnectDeviceSettings(self) -> IConnectBluetoothDeviceSettings: ...
    @property
    def IsInputProfileValid(self) -> bool: ...
    @property
    def IsOutputProfileValid(self) -> bool: ...
    @property
    def SelectDeviceInSequence(self) -> SelectBluetoothDeviceType: ...
    @SelectDeviceInSequence.setter
    def SelectDeviceInSequence(self, value: SelectBluetoothDeviceType) -> SelectBluetoothDeviceType: ...


class IBurstGenerator(IGenerator, typing.Protocol):
    @property
    def SignalType(self) -> BurstSignalType: ...
    @SignalType.setter
    def SignalType(self, value: BurstSignalType) -> BurstSignalType: ...


class ICalibrateFromTedsAcousticStep(ISequenceStep, typing.Protocol):
    @property
    def ApplyTo(self) -> InputChannelIndex: ...
    @ApplyTo.setter
    def ApplyTo(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def TedsInterface(self) -> TedsInterfaceType: ...
    @TedsInterface.setter
    def TedsInterface(self, value: TedsInterfaceType) -> TedsInterfaceType: ...
    @property
    def TedsMicrophoneId(self) -> int: ...
    @TedsMicrophoneId.setter
    def TedsMicrophoneId(self, value: int) -> int: ...
    @property
    def TedsSource(self) -> TransducerTedsChannel: ...
    @TedsSource.setter
    def TedsSource(self, value: TransducerTedsChannel) -> TransducerTedsChannel: ...


class ICalibrateFromTedsAcousticStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ICalibrateFromTedsAcousticStep: ...
    @abc.abstractmethod
    def Add(self) -> ICalibrateFromTedsAcousticStep: ...


class ICalibrateFromTedsStep(ISequenceStep, typing.Protocol):
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def SetdBSpl1(self) -> bool: ...
    @SetdBSpl1.setter
    def SetdBSpl1(self, value: bool) -> bool: ...
    @property
    def SetdBSpl2(self) -> bool: ...
    @SetdBSpl2.setter
    def SetdBSpl2(self, value: bool) -> bool: ...
    @property
    def TedsInterface(self) -> TedsInterfaceType: ...
    @TedsInterface.setter
    def TedsInterface(self, value: TedsInterfaceType) -> TedsInterfaceType: ...
    @property
    def TedsMicrophoneId(self) -> int: ...
    @TedsMicrophoneId.setter
    def TedsMicrophoneId(self, value: int) -> int: ...
    @property
    def TedsSource(self) -> TransducerTedsChannel: ...
    @TedsSource.setter
    def TedsSource(self, value: TransducerTedsChannel) -> TransducerTedsChannel: ...


class ICalibrateFromTedsStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ICalibrateFromTedsStep: ...
    @abc.abstractmethod
    def Add(self) -> ICalibrateFromTedsStep: ...


class IChannelInfo(typing.Protocol):
    @property
    def Channel(self) -> int: ...
    @property
    def Group(self) -> int: ...
    @property
    def IsInput(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def SampleType(self) -> AsioSampleType: ...


class IClearBluetoothDeviceListStep(ISequenceStep, typing.Protocol):
    @property
    def DeviceListType(self) -> BluetoothDeviceListType: ...
    @DeviceListType.setter
    def DeviceListType(self, value: BluetoothDeviceListType) -> BluetoothDeviceListType: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...


class IClearBluetoothDeviceListStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IClearBluetoothDeviceListStep: ...
    @abc.abstractmethod
    def Add(self) -> IClearBluetoothDeviceListStep: ...


class IClearVariableValueStep(ISequenceStep, typing.Protocol):
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def VariableName(self) -> str: ...
    @VariableName.setter
    def VariableName(self, value: str) -> str: ...


class IClearVariableValueStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IClearVariableValueStep: ...
    @abc.abstractmethod
    def Add(self) -> IClearVariableValueStep: ...


class IClockSourceInfo(typing.Protocol):
    @property
    def AssociatedChannel(self) -> int: ...
    @property
    def AssociatedGroup(self) -> int: ...
    @property
    def Index(self) -> int: ...
    @property
    def Name(self) -> str: ...


class IClockSyncSettings(typing.Protocol):
    @property
    def CustomOutputRate(self) -> float: ...
    @CustomOutputRate.setter
    def CustomOutputRate(self, value: float) -> float: ...
    @property
    def DarsTermination(self) -> DarsInputTermination: ...
    @DarsTermination.setter
    def DarsTermination(self, value: DarsInputTermination) -> DarsInputTermination: ...
    @property
    def ExternalReferenceRate(self) -> IDoubleSetting: ...
    @property
    def JitterGenerator(self) -> IJitterGeneratorSettings: ...
    @property
    def OutputRateType(self) -> RefSyncOutputRate: ...
    @OutputRateType.setter
    def OutputRateType(self, value: RefSyncOutputRate) -> RefSyncOutputRate: ...
    @property
    def SyncOutLevel(self) -> IDoubleSetting: ...
    @property
    def SyncOutPolarity(self) -> SyncOutPolarityMode: ...
    @SyncOutPolarity.setter
    def SyncOutPolarity(self, value: SyncOutPolarityMode) -> SyncOutPolarityMode: ...
    @property
    def TimebaseReference(self) -> TimebaseReferenceType: ...
    @TimebaseReference.setter
    def TimebaseReference(self, value: TimebaseReferenceType) -> TimebaseReferenceType: ...


class ICmrrGenerator(IBatchSplitSineGenerator, typing.Protocol):
    pass


class ICmrrIecGenerator(IBatchSplitSineGenerator, typing.Protocol):
    pass


class ICmrrIecMeasurement(IBatchMeasurement, typing.Protocol):
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def Cmrr(self) -> IMeterGraph: ...
    @property
    def CmrrPin2(self) -> IMeterGraph: ...
    @property
    def CmrrPin3(self) -> IMeterGraph: ...
    @property
    def Generator(self) -> ICmrrIecGenerator: ...
    @property
    def Settling(self) -> ICmrrSettlingParametersCollection: ...


class ICmrrMeasurement(IBatchMeasurement, typing.Protocol):
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def Cmrr(self) -> IMeterGraph: ...
    @property
    def Generator(self) -> ICmrrGenerator: ...
    @property
    def Settling(self) -> ICmrrSettlingParametersCollection: ...


class ICmrrSettlingParametersCollection(typing.Protocol):
    @property
    def CommonMode(self) -> ISettlingParameters: ...
    @property
    def Signal(self) -> ISettlingParameters: ...


class ICommonDigitalInputSettings(typing.Protocol):
    @property
    def FixedInputSampleRate(self) -> float: ...
    @FixedInputSampleRate.setter
    def FixedInputSampleRate(self, value: float) -> float: ...
    @property
    def ScaleFreqBy(self) -> InputFrequencyScalingType: ...
    @ScaleFreqBy.setter
    def ScaleFreqBy(self, value: InputFrequencyScalingType) -> InputFrequencyScalingType: ...


class ICompareEncodeBitstreamPromptSettings(typing.Protocol):
    @property
    def ImageName(self) -> str: ...
    @ImageName.setter
    def ImageName(self, value: str) -> str: ...
    @property
    def ImageNames(self) -> Array_1[str]: ...
    @property
    def PlayAlertSound(self) -> bool: ...
    @PlayAlertSound.setter
    def PlayAlertSound(self, value: bool) -> bool: ...
    @property
    def RTF(self) -> str: ...
    @RTF.setter
    def RTF(self, value: str) -> str: ...
    @property
    def ShowCancel(self) -> bool: ...
    @ShowCancel.setter
    def ShowCancel(self, value: bool) -> bool: ...
    @property
    def Text(self) -> str: ...
    @Text.setter
    def Text(self, value: str) -> str: ...
    @property
    def TimeoutEnabled(self) -> bool: ...
    @TimeoutEnabled.setter
    def TimeoutEnabled(self, value: bool) -> bool: ...
    @property
    def TimeoutInSeconds(self) -> float: ...
    @TimeoutInSeconds.setter
    def TimeoutInSeconds(self, value: float) -> float: ...
    @abc.abstractmethod
    def ClearImage(self) -> None: ...
    @abc.abstractmethod
    def LoadImage(self, fileName: str, replaceIfExists: bool) -> None: ...


class ICompareEncodedBitstreamError(typing.Protocol):
    @property
    def ErrorData(self) -> Array_1[int]: ...
    @property
    def ErrorFrame(self) -> int: ...
    @property
    def ErrorFrameWordOffset(self) -> int: ...
    @property
    def ErrorMessage(self) -> str: ...
    @property
    def ReferenceData(self) -> Array_1[int]: ...


class ICompareEncodedBitstreamErrorCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ICompareEncodedBitstreamError: ...


class ICompareEncodedBitstreamGenerator(IArbitraryGenerator, typing.Protocol):
    @property
    def TotalFrameCount(self) -> int: ...
    @property
    def UsableFrameCount(self) -> int: ...


class ICompareEncodedBitstreamMeasurement(IBatchMeasurement, typing.Protocol):
    @property
    def CompareBitstream(self) -> ICompareEncodedBitstreamResult: ...
    @property
    def Generator(self) -> ICompareEncodedBitstreamGenerator: ...
    @property
    def InitialSyncFrameLimit(self) -> int: ...
    @InitialSyncFrameLimit.setter
    def InitialSyncFrameLimit(self, value: int) -> int: ...
    @property
    def InitialSyncLimitInSeconds(self) -> float: ...
    @property
    def LossOfSyncFrameLimit(self) -> int: ...
    @LossOfSyncFrameLimit.setter
    def LossOfSyncFrameLimit(self, value: int) -> int: ...
    @property
    def LossOfSyncLimitInSeconds(self) -> float: ...
    @property
    def PromptSettings(self) -> ICompareEncodeBitstreamPromptSettings: ...
    @property
    def ReferenceFile(self) -> str: ...
    @ReferenceFile.setter
    def ReferenceFile(self, value: str) -> str: ...
    @property
    def ReferenceFileNames(self) -> Array_1[str]: ...
    @property
    def ReferenceFrameCount(self) -> int: ...
    @property
    def ShowPrompt(self) -> bool: ...
    @ShowPrompt.setter
    def ShowPrompt(self, value: bool) -> bool: ...
    @property
    def TimeoutSeconds(self) -> int: ...
    @TimeoutSeconds.setter
    def TimeoutSeconds(self, value: int) -> int: ...
    @abc.abstractmethod
    def LoadReferenceFile(self, fileName: str, replaceIfExists: bool) -> None: ...


class ICompareEncodedBitstreamResult(IGraph, typing.Protocol):
    @property
    def Error(self) -> ICompareEncodedBitstreamError: ...
    @property
    def FirstSyncFrame(self) -> int: ...
    @property
    def InvalidFrames(self) -> ICompareEncodedBitstreamErrorCollection: ...
    @property
    def LastSyncFrame(self) -> int: ...
    @property
    def Passed(self) -> bool: ...
    @property
    def ReceivedFrameCount(self) -> int: ...
    @property
    def SkippedFrames(self) -> ICompareEncodedBitstreamErrorCollection: ...


class ICompareLevelAndDistortionDataElement(typing.Protocol):
    @property
    def Channel(self) -> InputChannelIndex: ...
    @Channel.setter
    def Channel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def DataSetType(self) -> MeterDataSetType: ...
    @DataSetType.setter
    def DataSetType(self, value: MeterDataSetType) -> MeterDataSetType: ...
    @property
    def HarmonicIndex(self) -> DistortionHarmonicIndex: ...
    @HarmonicIndex.setter
    def HarmonicIndex(self, value: DistortionHarmonicIndex) -> DistortionHarmonicIndex: ...
    @property
    def SourceDataSet(self) -> int: ...
    @SourceDataSet.setter
    def SourceDataSet(self, value: int) -> int: ...
    @property
    def SourceDataSetType(self) -> SourceDataType: ...
    @SourceDataSetType.setter
    def SourceDataSetType(self, value: SourceDataType) -> SourceDataType: ...


class ICompareLevelAndDistortionDataTrace(IDerivedDataTrace, typing.Protocol):
    @property
    def CompareTo(self) -> ICompareLevelAndDistortionDataElement: ...
    @property
    def Reference(self) -> ICompareLevelAndDistortionDataElement: ...


class ICompareLevelAndDistortionDataTraceCollection(IDerivedDataTraceCollection, typing.Protocol):
    @property
    def Item(self) -> ICompareLevelAndDistortionDataTrace: ...
    @abc.abstractmethod
    def Add(self) -> ICompareLevelAndDistortionDataTrace: ...


class ICompareLevelAndDistortionResult(IXYGraphWithLimits, IDerivedResult, typing.Protocol):
    @property
    def Traces(self) -> ICompareLevelAndDistortionDataTraceCollection: ...


class ICompareMeterResult(IMeterGraph, IDerivedResult, typing.Protocol):
    @property
    def ComparisonValue(self) -> IDoubleSetting: ...
    @property
    def ReferenceType(self) -> CompareMeterReference: ...
    @ReferenceType.setter
    def ReferenceType(self, value: CompareMeterReference) -> CompareMeterReference: ...


class ICompareXYDataElement(typing.Protocol):
    @property
    def Channel(self) -> InputChannelIndex: ...
    @Channel.setter
    def Channel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def DataSetType(self) -> MeterDataSetType: ...
    @DataSetType.setter
    def DataSetType(self, value: MeterDataSetType) -> MeterDataSetType: ...
    @property
    def SourceDataSet(self) -> int: ...
    @SourceDataSet.setter
    def SourceDataSet(self, value: int) -> int: ...
    @property
    def SourceDataSetType(self) -> SourceDataType: ...
    @SourceDataSetType.setter
    def SourceDataSetType(self, value: SourceDataType) -> SourceDataType: ...


class ICompareXYDataTrace(IDerivedDataTrace, typing.Protocol):
    @property
    def CompareTo(self) -> ICompareXYDataElement: ...
    @property
    def Reference(self) -> ICompareXYDataElement: ...


class ICompareXYDataTraceCollection(IDerivedDataTraceCollection, typing.Protocol):
    @property
    def Item(self) -> ICompareXYDataTrace: ...
    @abc.abstractmethod
    def Add(self) -> ICompareXYDataTrace: ...


class ICompareXYResult(IXYGraphWithLimits, IDerivedResult, typing.Protocol):
    @property
    def Traces(self) -> ICompareXYDataTraceCollection: ...


class IConnectBluetoothDeviceSettings(typing.Protocol):
    @property
    def A2dpCodec(self) -> BluetoothA2dpCodec: ...
    @A2dpCodec.setter
    def A2dpCodec(self, value: BluetoothA2dpCodec) -> BluetoothA2dpCodec: ...
    @property
    def A2dpSampleRate(self) -> BluetoothA2dpSampleRate: ...
    @A2dpSampleRate.setter
    def A2dpSampleRate(self, value: BluetoothA2dpSampleRate) -> BluetoothA2dpSampleRate: ...
    @property
    def CodecSettings(self) -> IBluetoothCodecSettings: ...
    @property
    def ConnectType(self) -> BluetoothDeviceAutoConnectType: ...
    @ConnectType.setter
    def ConnectType(self, value: BluetoothDeviceAutoConnectType) -> BluetoothDeviceAutoConnectType: ...
    @property
    def DeviceAddressVariable(self) -> str: ...
    @DeviceAddressVariable.setter
    def DeviceAddressVariable(self, value: str) -> str: ...
    @property
    def FindAllDevicesInInquiry(self) -> bool: ...
    @FindAllDevicesInInquiry.setter
    def FindAllDevicesInInquiry(self, value: bool) -> bool: ...
    @property
    def ForcePairing(self) -> bool: ...
    @ForcePairing.setter
    def ForcePairing(self, value: bool) -> bool: ...
    @property
    def InquiryDeviceClass(self) -> str: ...
    @InquiryDeviceClass.setter
    def InquiryDeviceClass(self, value: str) -> str: ...
    @property
    def MaxDevicesInInquiry(self) -> int: ...
    @MaxDevicesInInquiry.setter
    def MaxDevicesInInquiry(self, value: int) -> int: ...
    @property
    def PartialAddress(self) -> str: ...
    @PartialAddress.setter
    def PartialAddress(self, value: str) -> str: ...
    @property
    def Pin(self) -> str: ...
    @Pin.setter
    def Pin(self, value: str) -> str: ...
    @property
    def PinRequired(self) -> bool: ...
    @PinRequired.setter
    def PinRequired(self, value: bool) -> bool: ...
    @property
    def Profile(self) -> BluetoothConnectProfile: ...
    @Profile.setter
    def Profile(self, value: BluetoothConnectProfile) -> BluetoothConnectProfile: ...
    @property
    def SbcChannelMode(self) -> BluetoothSbcChannelMode: ...
    @SbcChannelMode.setter
    def SbcChannelMode(self, value: BluetoothSbcChannelMode) -> BluetoothSbcChannelMode: ...
    @property
    def ScanDuration(self) -> int: ...
    @ScanDuration.setter
    def ScanDuration(self, value: int) -> int: ...
    @property
    def SelectFirstDevice(self) -> bool: ...
    @SelectFirstDevice.setter
    def SelectFirstDevice(self, value: bool) -> bool: ...
    @property
    def SpecificAddress(self) -> str: ...
    @SpecificAddress.setter
    def SpecificAddress(self, value: str) -> str: ...


class IConnectBluetoothDeviceStep(IConnectBluetoothDeviceSettings, ISequenceStep, typing.Protocol):
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...


class IConnectBluetoothDeviceStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IConnectBluetoothDeviceStep: ...
    @abc.abstractmethod
    def Add(self) -> IConnectBluetoothDeviceStep: ...


class IConstantValues(typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def TrackFirstChannel(self) -> bool: ...
    @TrackFirstChannel.setter
    def TrackFirstChannel(self, value: bool) -> bool: ...
    @abc.abstractmethod
    def GetValue(self, ch: OutputChannelIndex) -> int: ...
    @abc.abstractmethod
    def SetValue(self, ch: OutputChannelIndex, constantValue: int) -> None: ...


class IConsumerStatusBitsSettings(typing.Protocol):
    @property
    def AudioMode(self) -> StatusBitsAudioMode: ...
    @AudioMode.setter
    def AudioMode(self, value: StatusBitsAudioMode) -> StatusBitsAudioMode: ...
    @property
    def CategoryCode(self) -> StatusBitsCategoryCode: ...
    @CategoryCode.setter
    def CategoryCode(self, value: StatusBitsCategoryCode) -> StatusBitsCategoryCode: ...
    @property
    def CgmsA(self) -> StatusBitsCgmsA: ...
    @CgmsA.setter
    def CgmsA(self, value: StatusBitsCgmsA) -> StatusBitsCgmsA: ...
    @property
    def ChannelNumber(self) -> StatusBitsChannelNumber: ...
    @ChannelNumber.setter
    def ChannelNumber(self, value: StatusBitsChannelNumber) -> StatusBitsChannelNumber: ...
    @property
    def ChannelStatusMode(self) -> StatusBitsChannelStatusMode: ...
    @ChannelStatusMode.setter
    def ChannelStatusMode(self, value: StatusBitsChannelStatusMode) -> StatusBitsChannelStatusMode: ...
    @property
    def ClockAccuracy(self) -> StatusBitsClockAccuracy: ...
    @ClockAccuracy.setter
    def ClockAccuracy(self, value: StatusBitsClockAccuracy) -> StatusBitsClockAccuracy: ...
    @property
    def Copyright(self) -> StatusBitsCopyright: ...
    @Copyright.setter
    def Copyright(self, value: StatusBitsCopyright) -> StatusBitsCopyright: ...
    @property
    def Emphasis(self) -> StatusBitsEmphasisConsumerAudio: ...
    @Emphasis.setter
    def Emphasis(self, value: StatusBitsEmphasisConsumerAudio) -> StatusBitsEmphasisConsumerAudio: ...
    @property
    def EmphasisNonAudio(self) -> StatusBitsEmphasisConsumerNonAudio: ...
    @EmphasisNonAudio.setter
    def EmphasisNonAudio(self, value: StatusBitsEmphasisConsumerNonAudio) -> StatusBitsEmphasisConsumerNonAudio: ...
    @property
    def OriginalSamplingFrequency(self) -> StatusBitsOriginalSamplingFrequency: ...
    @OriginalSamplingFrequency.setter
    def OriginalSamplingFrequency(self, value: StatusBitsOriginalSamplingFrequency) -> StatusBitsOriginalSamplingFrequency: ...
    @property
    def SampleWordLength20Bits(self) -> StatusBitsWordLength20Bits: ...
    @SampleWordLength20Bits.setter
    def SampleWordLength20Bits(self, value: StatusBitsWordLength20Bits) -> StatusBitsWordLength20Bits: ...
    @property
    def SampleWordLength24Bits(self) -> StatusBitsWordLength24Bits: ...
    @SampleWordLength24Bits.setter
    def SampleWordLength24Bits(self, value: StatusBitsWordLength24Bits) -> StatusBitsWordLength24Bits: ...
    @property
    def SamplingFrequency(self) -> StatusBitsSamplingFrequencyConsumer: ...
    @SamplingFrequency.setter
    def SamplingFrequency(self, value: StatusBitsSamplingFrequencyConsumer) -> StatusBitsSamplingFrequencyConsumer: ...
    @property
    def SourceNumber(self) -> StatusBitsSourceNumber: ...
    @SourceNumber.setter
    def SourceNumber(self, value: StatusBitsSourceNumber) -> StatusBitsSourceNumber: ...
    @property
    def WordLength(self) -> StatusBitsWordLength: ...
    @WordLength.setter
    def WordLength(self, value: StatusBitsWordLength) -> StatusBitsWordLength: ...


class IConsumerStatusBitsValues(typing.Protocol):
    @property
    def AudioMode(self) -> StatusBitsAudioMode: ...
    @property
    def CategoryCode(self) -> StatusBitsCategoryCode: ...
    @property
    def CgmsA(self) -> StatusBitsCgmsA: ...
    @property
    def ChannelNumber(self) -> StatusBitsChannelNumber: ...
    @property
    def ChannelStatusMode(self) -> StatusBitsChannelStatusMode: ...
    @property
    def ClockAccuracy(self) -> StatusBitsClockAccuracy: ...
    @property
    def Copyright(self) -> StatusBitsCopyright: ...
    @property
    def Emphasis(self) -> StatusBitsEmphasisConsumerAudio: ...
    @property
    def EmphasisNonAudio(self) -> StatusBitsEmphasisConsumerNonAudio: ...
    @property
    def OriginalSamplingFrequency(self) -> StatusBitsOriginalSamplingFrequency: ...
    @property
    def SampleWordLength20Bits(self) -> StatusBitsWordLength20Bits: ...
    @property
    def SampleWordLength24Bits(self) -> StatusBitsWordLength24Bits: ...
    @property
    def SamplingFrequency(self) -> StatusBitsSamplingFrequencyConsumer: ...
    @property
    def SourceNumber(self) -> StatusBitsSourceNumber: ...
    @property
    def WordLength(self) -> StatusBitsWordLength: ...


class IContinuousSweep(IContinuousSweepSettingsWithCrosstalk, IBenchModeMeasurement, IContinuousSweepMeasurementSettings, IContinuousSweepResults, typing.Protocol):
    @property
    def EQSettings(self) -> IGenEqSettings: ...
    @property
    def Generator(self) -> IContinuousSweepGenerator: ...
    @property
    def GeneratorWithPilot(self) -> IContinuousSweepPilotGenerator: ...
    @property
    def NestedSweep(self) -> INestedSweepSettings: ...
    @abc.abstractmethod
    def Generate(self) -> None: ...


class IContinuousSweepGenerator(IGenerator, IContinuousSweepMeasurementSettings, typing.Protocol):
    @property
    def EQSettings(self) -> IGenEqSettings: ...


class IContinuousSweepMeasurement(IBatchMeasurementWithAppend, IContinuousSweepSettingsWithCrosstalk, IHighpassFilterMeasurement, ILowpassFilterMeasurement, INoiseWeightingMeasurement, IContinuousSweepResults, typing.Protocol):
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def Generator(self) -> IContinuousSweepGenerator: ...
    @property
    def GeneratorWithPilot(self) -> IContinuousSweepPilotGenerator: ...
    @property
    def NestedSweep(self) -> INestedSweepSettings: ...
    @abc.abstractmethod
    def Analyze(self) -> None: ...
    @abc.abstractmethod
    def Generate(self) -> None: ...


class IContinuousSweepMeasurementBase(IBatchMeasurementWithAppend, typing.Protocol):
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def Generator(self) -> IContinuousSweepGenerator: ...


class IContinuousSweepMeasurementSettings(typing.Protocol):
    @property
    def Duration(self) -> IDoubleSetting: ...
    @property
    def PreMeasurementDelay(self) -> IDoubleSetting: ...
    @property
    def StartFrequency(self) -> IDoubleSetting: ...
    @property
    def StopFrequency(self) -> IDoubleSetting: ...


class IContinuousSweepMeasurementWithAdditionalAcqTimeBase(IContinuousSweepMeasurementBase, typing.Protocol):
    @property
    def AdditionalAcquisitionTime(self) -> IDoubleSetting: ...


class IContinuousSweepPilotGenerator(typing.Protocol):
    @property
    def AudioFileSettings(self) -> IAudioFileSettings: ...
    @property
    def Durations(self) -> IDurations: ...
    @property
    def EQSettings(self) -> IGenEqSettings: ...
    @property
    def Frequencies(self) -> IFrequencies: ...
    @property
    def Iterations(self) -> int: ...
    @Iterations.setter
    def Iterations(self, value: int) -> int: ...
    @property
    def Levels(self) -> ILevels: ...
    @property
    def SaveWaveformFileSettings(self) -> ISaveGeneratorFileSettings: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped SaveWaveform due to it being static, abstract and generic.

    SaveWaveform : SaveWaveform_MethodGroup
    class SaveWaveform_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, folder: str, filename: str, audioType: FileAudioType, bitdepth: WavExportBitDepth, replaceexisting: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class IContinuousSweepResults(typing.Protocol):
    @property
    def AcquiredCrosstalkWaveformOneChannelDriven(self) -> ITimeDomainWithSourceChannel: ...
    @property
    def AcquiredCrosstalkWaveformOneChannelUndriven(self) -> ITimeDomainXYGraph: ...
    @property
    def AcquiredWaveform(self) -> IAcquiredWaveformGraph: ...
    @property
    def CrossCorrelation(self) -> IXYGraph: ...
    @property
    def CrosstalkOneChannelDriven(self) -> IXYGraph: ...
    @property
    def CrosstalkOneChannelUndriven(self) -> IXYGraph: ...
    @property
    def Deviation(self) -> IDeviationMeterGraph: ...
    @property
    def DistortionProductLevel(self) -> IHarmonicXYGraph: ...
    @property
    def DistortionProductRatio(self) -> INormalizedHarmonicRatioXYGraph: ...
    @property
    def FrequencyShift(self) -> IMeterGraph: ...
    @property
    def Gain(self) -> IXYGraph: ...
    @property
    def GroupDelay(self) -> IXYGraph: ...
    @property
    def ImpulseResponse(self) -> IImpulseResponseGraph: ...
    @property
    def Level(self) -> IXYGraph: ...
    @property
    def Phase(self) -> IPhaseXYGraph: ...
    @property
    def ReferenceWaveform(self) -> IXYGraph: ...
    @property
    def RelativeLevel(self) -> IRelativeLevelXYGraph: ...
    @property
    def ThdLevel(self) -> IXYGraph: ...
    @property
    def ThdNLevel(self) -> IXYGraph: ...
    @property
    def ThdNRatio(self) -> IThdNRatioXyGraph: ...
    @property
    def ThdRatio(self) -> INormalizedDistortionRatioXYGraph: ...


class IContinuousSweepSettingsWithAdditionalAcqTimeBase(typing.Protocol):
    @property
    def AdditionalAcquisitionTime(self) -> IDoubleSetting: ...
    @property
    def FrequencyCorrectionEnabled(self) -> bool: ...
    @FrequencyCorrectionEnabled.setter
    def FrequencyCorrectionEnabled(self, value: bool) -> bool: ...
    @property
    def Generator(self) -> IContinuousSweepGenerator: ...
    @property
    def HasWarnings(self) -> bool: ...
    @property
    def OpenLoop(self) -> bool: ...
    @OpenLoop.setter
    def OpenLoop(self, value: bool) -> bool: ...
    @property
    def TriggerSettings(self) -> ITriggerSettings: ...
    @property
    def Warnings(self) -> str: ...


class IContinuousSweepSettingsWithCrosstalk(IFastFrequencyThdNSettings, IContinuousSweepSettingsWithAdditionalAcqTimeBase, typing.Protocol):
    @property
    def ChannelDelay(self) -> IDoubleSetting: ...
    @property
    def CrosstalkType(self) -> ChirpCrosstalkType: ...
    @CrosstalkType.setter
    def CrosstalkType(self, value: ChirpCrosstalkType) -> ChirpCrosstalkType: ...


class ICrosstalkCustomGenerator(ISineWithArbGenerator, typing.Protocol):
    pass


class ICrosstalkCustomMeasurement(IMeasurement, typing.Protocol):
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def Crosstalk(self) -> IMeterGraph: ...
    @property
    def Generator(self) -> ICrosstalkCustomGenerator: ...
    @property
    def Settling(self) -> ICrosstalkCustomSettlingParametersCollection: ...


class ICrosstalkCustomSettlingParametersCollection(typing.Protocol):
    @property
    def Crosstalk(self) -> ISettlingParameters: ...


class ICrosstalkFrequencySweepCustomMeasurement(ISteppedSweepMeasurement, typing.Protocol):
    @property
    def Crosstalk(self) -> IXYGraph: ...
    @property
    def Generator(self) -> ICrosstalkFrequencySweepGenerator: ...
    @property
    def Settling(self) -> ICrosstalkFrequencySweepSettlingParametersCollection: ...


class ICrosstalkFrequencySweepGenerator(IGenerator, typing.Protocol):
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def StartFrequency(self) -> IDoubleSetting: ...
    @property
    def StopFrequency(self) -> IDoubleSetting: ...
    @property
    def SweepParameters(self) -> IFrequencySweepParameters: ...


class ICrosstalkFrequencySweepOneChannelDrivenMeasurement(ISteppedSweepMeasurement, typing.Protocol):
    @property
    def Crosstalk(self) -> ICrosstalkXYGraph: ...
    @property
    def Generator(self) -> ICrosstalkFrequencySweepGenerator: ...
    @property
    def Settling(self) -> ICrosstalkFrequencySweepSettlingParametersCollection: ...


class ICrosstalkFrequencySweepOneChannelUndrivenMeasurement(ISteppedSweepMeasurement, typing.Protocol):
    @property
    def Crosstalk(self) -> IXYGraph: ...
    @property
    def Generator(self) -> ICrosstalkFrequencySweepGenerator: ...
    @property
    def Settling(self) -> ICrosstalkFrequencySweepSettlingParametersCollection: ...


class ICrosstalkFrequencySweepSettlingParametersCollection(typing.Protocol):
    @property
    def CrosstalkSettlingParams(self) -> ISettlingParameters: ...


class ICrosstalkOneChannelDrivenGenerator(ISineWithArbGenerator, typing.Protocol):
    pass


class ICrosstalkOneChannelDrivenMeasurement(IMeasurement, typing.Protocol):
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def Crosstalk(self) -> IMeterGraph: ...
    @property
    def Generator(self) -> ICrosstalkOneChannelDrivenGenerator: ...
    @property
    def OneToOneSourceChannel(self) -> OutputChannelIndex: ...
    @OneToOneSourceChannel.setter
    def OneToOneSourceChannel(self, value: OutputChannelIndex) -> OutputChannelIndex: ...
    @property
    def Settling(self) -> ICrosstalkOneChannelDrivenSettlingParametersCollection: ...


class ICrosstalkOneChannelDrivenSettlingParametersCollection(typing.Protocol):
    @property
    def Crosstalk(self) -> ISettlingParameters: ...


class ICrosstalkOneChannelUndrivenGenerator(IBatchSineGenerator, typing.Protocol):
    pass


class ICrosstalkOneChannelUndrivenMeasurement(IBatchMeasurement, typing.Protocol):
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def Crosstalk(self) -> IMeterGraph: ...
    @property
    def Generator(self) -> ICrosstalkOneChannelUndrivenGenerator: ...
    @property
    def Settling(self) -> ICrosstalkOneChannelUndrivenSettlingParametersCollection: ...


class ICrosstalkOneChannelUndrivenSettlingParametersCollection(typing.Protocol):
    @property
    def Crosstalk(self) -> ISettlingParameters: ...


class ICrosstalkXYGraph(IXYGraph, typing.Protocol):
    @property
    def SourceChannel(self) -> OutputChannelIndex: ...
    @SourceChannel.setter
    def SourceChannel(self, value: OutputChannelIndex) -> OutputChannelIndex: ...


class ICurrentOutputReferences(typing.Protocol):
    @property
    def dBrG(self) -> IDoubleSetting: ...


class ICursor(typing.Protocol):
    @property
    def Color(self) -> Color: ...
    @Color.setter
    def Color(self, value: Color) -> Color: ...
    @property
    def HorizontalGraticule(self) -> Graticule: ...
    @HorizontalGraticule.setter
    def HorizontalGraticule(self, value: Graticule) -> Graticule: ...
    @property
    def Label(self) -> str: ...
    @Label.setter
    def Label(self, value: str) -> str: ...
    @property
    def LineStyle(self) -> DashStyle: ...
    @LineStyle.setter
    def LineStyle(self, value: DashStyle) -> DashStyle: ...
    @property
    def LineWidth(self) -> int: ...
    @LineWidth.setter
    def LineWidth(self, value: int) -> int: ...
    @property
    def Selected(self) -> bool: ...
    @Selected.setter
    def Selected(self, value: bool) -> bool: ...
    @property
    def Shape(self) -> CursorShape: ...
    @Shape.setter
    def Shape(self, value: CursorShape) -> CursorShape: ...
    @property
    def ShowLabel(self) -> bool: ...
    @ShowLabel.setter
    def ShowLabel(self, value: bool) -> bool: ...
    @property
    def VerticalGraticule(self) -> Graticule: ...
    @VerticalGraticule.setter
    def VerticalGraticule(self, value: Graticule) -> Graticule: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...
    @property
    def XValue(self) -> float: ...
    @XValue.setter
    def XValue(self, value: float) -> float: ...
    @property
    def YValue(self) -> float: ...
    @YValue.setter
    def YValue(self, value: float) -> float: ...
    @abc.abstractmethod
    def Center(self) -> None: ...
    @abc.abstractmethod
    def Detach(self) -> None: ...
    # Skipped Attach due to it being static, abstract and generic.

    Attach : Attach_MethodGroup
    class Attach_MethodGroup:
        @typing.overload
        def __call__(self, channel: int, axis: VerticalAxis = ...) -> None:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, axis: VerticalAxis = ...) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, channel: int, axis: VerticalAxis = ...) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, channel: InputChannelIndex, axis: VerticalAxis = ...) -> None:...



class ICursorHarmonic(ICursor, typing.Protocol):
    @property
    def AttachedTrace(self) -> IHarmonicTraceInfo: ...
    # Skipped AttachHarmonic due to it being static, abstract and generic.

    AttachHarmonic : AttachHarmonic_MethodGroup
    class AttachHarmonic_MethodGroup:
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int) -> None:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, channel: int, harmonicIndex: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex) -> None:...



class ICustomMeterGraph(IMeterGraph, typing.Protocol):
    @property
    def CenterXAxisAtOrigin(self) -> bool: ...
    @CenterXAxisAtOrigin.setter
    def CenterXAxisAtOrigin(self, value: bool) -> bool: ...
    @property
    def CustomDataFile(self) -> str: ...
    @CustomDataFile.setter
    def CustomDataFile(self, value: str) -> str: ...
    @abc.abstractmethod
    def Refresh(self) -> None: ...


class ICustomProcessingDerivedMeterResult(ICustomProcessingMeterResult, IDerivedResult, typing.Protocol):
    @property
    def DataSetType(self) -> MeterDataSetType: ...
    @DataSetType.setter
    def DataSetType(self, value: MeterDataSetType) -> MeterDataSetType: ...
    @property
    def SourceDataSet(self) -> int: ...
    @SourceDataSet.setter
    def SourceDataSet(self, value: int) -> int: ...
    @property
    def SourceDataSetType(self) -> SourceDataType: ...
    @SourceDataSetType.setter
    def SourceDataSetType(self, value: SourceDataType) -> SourceDataType: ...
    @property
    def SourceDataType(self) -> CustomProcessingSourceDataType: ...


class ICustomProcessingMeterResult(IMeterGraph, typing.Protocol):
    @property
    def Properties(self) -> ICustomProcessingProperties: ...


class ICustomProcessingProperties(typing.Protocol):
    @property
    def PropertyNames(self) -> Array_1[str]: ...
    @abc.abstractmethod
    def GetBool(self, name: str) -> bool: ...
    @abc.abstractmethod
    def GetBoolArrayValue(self, name: str, index: int) -> bool: ...
    @abc.abstractmethod
    def GetDouble(self, name: str) -> float: ...
    @abc.abstractmethod
    def GetEnum(self, name: str) -> Enum: ...
    @abc.abstractmethod
    def GetInt(self, name: str) -> int: ...
    @abc.abstractmethod
    def GetPropertyType(self, name: str) -> str: ...
    @abc.abstractmethod
    def GetString(self, name: str) -> str: ...
    @abc.abstractmethod
    def GetStringValues(self, name: str) -> Array_1[str]: ...
    @abc.abstractmethod
    def SetBool(self, name: str, val: bool) -> None: ...
    @abc.abstractmethod
    def SetBoolArrayValue(self, name: str, index: int, val: bool) -> None: ...
    @abc.abstractmethod
    def SetDouble(self, name: str, val: float) -> None: ...
    @abc.abstractmethod
    def SetEnum(self, name: str, val: Enum) -> None: ...
    @abc.abstractmethod
    def SetInt(self, name: str, val: int) -> None: ...
    @abc.abstractmethod
    def SetString(self, name: str, val: str) -> None: ...


class ICustomProcessingTabularResult(ITabularResult, IDerivedResult, typing.Protocol):
    @property
    def Properties(self) -> ICustomProcessingProperties: ...
    @property
    def SourceDataType(self) -> CustomProcessingSourceDataType: ...


class ICustomProcessingXyResult(IXYGraphWithLimits, IDerivedResult, typing.Protocol):
    @property
    def Properties(self) -> ICustomProcessingProperties: ...


class ICustomXYGraph(IXYGraphWithLimits, typing.Protocol):
    @property
    def CustomDataFile(self) -> str: ...
    @CustomDataFile.setter
    def CustomDataFile(self, value: str) -> str: ...
    @abc.abstractmethod
    def Refresh(self) -> None: ...


class IDataDistributionResult(IMeterGraph, IDerivedResult, typing.Protocol):
    @property
    def DataSetType(self) -> MeterDataSetType: ...
    @DataSetType.setter
    def DataSetType(self, value: MeterDataSetType) -> MeterDataSetType: ...
    @property
    def DistributionType(self) -> DataDistributionType: ...
    @DistributionType.setter
    def DistributionType(self, value: DataDistributionType) -> DataDistributionType: ...
    @property
    def SourceDataSet(self) -> int: ...
    @SourceDataSet.setter
    def SourceDataSet(self, value: int) -> int: ...
    @property
    def SourceDataSetType(self) -> SourceDataType: ...
    @SourceDataSetType.setter
    def SourceDataSetType(self, value: SourceDataType) -> SourceDataType: ...
    # Skipped GetDeviation due to it being static, abstract and generic.

    GetDeviation : GetDeviation_MethodGroup
    class GetDeviation_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[float]:...
        @typing.overload
        def __call__(self, unit: str) -> Array_1[float]:...

    # Skipped GetDeviationText due to it being static, abstract and generic.

    GetDeviationText : GetDeviationText_MethodGroup
    class GetDeviationText_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[str]:...
        @typing.overload
        def __call__(self, unit: str) -> Array_1[str]:...



class IDcLevelDcxMeasurement(IMeasurement, typing.Protocol):
    @property
    def AveragingTime(self) -> IDoubleSetting: ...
    @property
    def DelayTime(self) -> IDoubleSetting: ...
    @property
    def Generator(self) -> IDcxGenerator: ...
    @property
    def Range(self) -> DcxVoltRange: ...
    @Range.setter
    def Range(self, value: DcxVoltRange) -> DcxVoltRange: ...
    @property
    def Rate(self) -> DcxDmmRate: ...
    @Rate.setter
    def Rate(self, value: DcxDmmRate) -> DcxDmmRate: ...
    @property
    def Volts(self) -> IMeterGraph: ...


class IDCLevelGenerator(ISineWithArbGenerator, typing.Protocol):
    pass


class IDCLevelMeasurement(IMeasurement, typing.Protocol):
    @property
    def AcquisitionTime(self) -> IDoubleSetting: ...
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def DCLevel(self) -> IMeterGraph: ...
    @property
    def DelayTime(self) -> IDoubleSetting: ...
    @property
    def Generator(self) -> IDCLevelGenerator: ...


class IDCLevelSettlingParametersCollection(typing.Protocol):
    @property
    def DCLevel(self) -> ISettlingParameters: ...


class IDcLevelSweepGenerator(IGenerator, typing.Protocol):
    @property
    def AmplitudeStart(self) -> IDoubleSetting: ...
    @property
    def AmplitudeStop(self) -> IDoubleSetting: ...
    @property
    def SweepParameters(self) -> ISweepParameters: ...


class IDcLevelSweepMeasurement(ISteppedSweepMeasurement, IHighpassFilterMeasurement, ILowpassFilterMeasurement, INoiseWeightingMeasurement, typing.Protocol):
    @property
    def AcquisitionTime(self) -> IDoubleSetting: ...
    @property
    def DcLevel(self) -> IXYGraph: ...
    @property
    def DelayTime(self) -> IDoubleSetting: ...
    @property
    def Generator(self) -> IDcLevelSweepGenerator: ...
    @property
    def HighpassFilterFrequencyEnabled(self) -> bool: ...
    @HighpassFilterFrequencyEnabled.setter
    def HighpassFilterFrequencyEnabled(self, value: bool) -> bool: ...
    @property
    def LowpassFilterFrequencyEnabled(self) -> bool: ...
    @LowpassFilterFrequencyEnabled.setter
    def LowpassFilterFrequencyEnabled(self, value: bool) -> bool: ...
    @property
    def Noise(self) -> IXYGraph: ...
    @property
    def NoiseWeightingEnabled(self) -> bool: ...
    @NoiseWeightingEnabled.setter
    def NoiseWeightingEnabled(self, value: bool) -> bool: ...


class IDcxGenerator(ISineWithArbGenerator, typing.Protocol):
    pass


class IDcxSettings(typing.Protocol):
    @abc.abstractmethod
    def GetEnable(self, channel: DcxDcvChannel) -> bool: ...
    @abc.abstractmethod
    def GetLevel(self, channel: DcxDcvChannel) -> float: ...
    @abc.abstractmethod
    def SetEnable(self, channel: DcxDcvChannel, state: bool) -> None: ...
    @abc.abstractmethod
    def SetLevel(self, channel: DcxDcvChannel, level: float) -> None: ...
    # Skipped GetState due to it being static, abstract and generic.

    GetState : GetState_MethodGroup
    class GetState_MethodGroup:
        @typing.overload
        def __call__(self, port: DcxPort) -> int:...
        @typing.overload
        def __call__(self, port: DcxPort, bit: int) -> AuxControlState:...

    # Skipped SetState due to it being static, abstract and generic.

    SetState : SetState_MethodGroup
    class SetState_MethodGroup:
        @typing.overload
        def __call__(self, port: DcxPort, value: int) -> None:...
        @typing.overload
        def __call__(self, port: DcxPort, bit: int, state: AuxControlState) -> None:...



class IDcxSweepSettings(typing.Protocol):
    @property
    def PortTable(self) -> Array_1[int]: ...
    @PortTable.setter
    def PortTable(self, value: Array_1[int]) -> Array_1[int]: ...
    @abc.abstractmethod
    def GetPortEnable(self, port: DcxPort) -> bool: ...
    @abc.abstractmethod
    def GetPortEntry(self, port: DcxPort, index: int) -> int: ...
    @abc.abstractmethod
    def SetPortEnable(self, port: DcxPort, state: bool) -> None: ...
    @abc.abstractmethod
    def SetPortEntry(self, port: DcxPort, index: int, value: int) -> None: ...


class IDelayCalibrationMeasurement(IMeasurement, typing.Protocol):
    pass


class IDelayChirpCalibrationMeasurement(IMeasurement, typing.Protocol):
    pass


class IDelayGenerator(IGenerator, typing.Protocol):
    @property
    def NoiseShape(self) -> NoiseShape: ...
    @NoiseShape.setter
    def NoiseShape(self, value: NoiseShape) -> NoiseShape: ...
    @property
    def SequenceLength(self) -> DelayStimulusSequenceLength: ...
    @SequenceLength.setter
    def SequenceLength(self, value: DelayStimulusSequenceLength) -> DelayStimulusSequenceLength: ...
    @property
    def SequenceType(self) -> DelayStimulusType: ...
    @SequenceType.setter
    def SequenceType(self, value: DelayStimulusType) -> DelayStimulusType: ...


class IDelayStep(ISequenceStep, typing.Protocol):
    @property
    def Delay(self) -> float: ...
    @Delay.setter
    def Delay(self, value: float) -> float: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...


class IDelayStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IDelayStep: ...
    @abc.abstractmethod
    def Add(self) -> IDelayStep: ...


class IDeltaCursor(typing.Protocol):
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...
    @property
    def XText(self) -> str: ...
    @property
    def XValue(self) -> float: ...
    @property
    def YText(self) -> str: ...
    @property
    def YValue(self) -> float: ...


class IDerivedDataTrace(typing.Protocol):
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @abc.abstractmethod
    def Delete(self) -> None: ...


class IDerivedDataTraceCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @abc.abstractmethod
    def Remove(self, index: int) -> None: ...


class IDerivedMeterFromLevelAndDistortionSettings(typing.Protocol):
    @property
    def Channel(self) -> SignalPathSetupOutputChannelIndex: ...
    @property
    def DataSelection(self) -> LevelAndDistortionDataSelection: ...
    @property
    def HarmonicIndex(self) -> DistortionHarmonicIndex: ...
    @abc.abstractmethod
    def SelectAllChannelsOneTrace(self, harmonicIndex: DistortionHarmonicIndex) -> None: ...
    @abc.abstractmethod
    def SelectAllTracesOneChannel(self, channelIndex: InputChannelIndex) -> None: ...


class IDerivedResult(typing.Protocol):
    @property
    def Source(self) -> IGraph: ...


class IDeviationMeterGraph(IMeterGraph, typing.Protocol):
    @property
    def MaxFrequency(self) -> IDoubleSetting: ...
    @property
    def MinFrequency(self) -> IDoubleSetting: ...


class IDeviationMeterWithSmoothingGraph(IDeviationMeterGraph, typing.Protocol):
    @property
    def OctaveSmoothing(self) -> OctaveSmoothingType: ...
    @OctaveSmoothing.setter
    def OctaveSmoothing(self, value: OctaveSmoothingType) -> OctaveSmoothingType: ...


class IDifferenceFrequencyDistortionXyGraph(IXYGraphSettings, IXYGraphExport, typing.Protocol):
    @property
    def DisplayChannel(self) -> InputChannelIndex: ...
    @DisplayChannel.setter
    def DisplayChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, traceIndex: int, dataType: SourceDataType = ..., dataIndex: int = ...) -> Array_1[float]:...
        @typing.overload
        def __call__(self, traceName: str, dataType: SourceDataType = ..., dataIndex: int = ...) -> Array_1[float]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, traceIndex: int, dataType: SourceDataType = ..., dataIndex: int = ...) -> Array_1[float]:...
        @typing.overload
        def __call__(self, traceName: str, dataType: SourceDataType = ..., dataIndex: int = ...) -> Array_1[float]:...



class IDigitalErrorRateGenerator(IArbitraryGenerator, typing.Protocol):
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def Type(self) -> DigitalErrorGeneratorType: ...


class IDigitalErrorRateMeasurement(IBatchMeasurementWithAppend, typing.Protocol):
    @property
    def AverageErrorRate(self) -> IMeterGraph: ...
    @property
    def CumulativeErrors(self) -> IXYGraph: ...
    @property
    def Duration(self) -> IDoubleSetting: ...
    @property
    def Generator(self) -> IDigitalErrorRateGenerator: ...
    @property
    def InstantaneousErrorRate(self) -> IXYGraph: ...
    @property
    def TotalErrors(self) -> IMeterGraph: ...


class IDigitalInputReferences(typing.Protocol):
    @property
    def dBrA(self) -> IDoubleSetting: ...
    @property
    def dBrAOffset(self) -> IDoubleSetting: ...
    @property
    def dBrB(self) -> IDoubleSetting: ...
    @property
    def dBrBOffset(self) -> IDoubleSetting: ...
    @property
    def dBSpl1(self) -> IDoubleSetting: ...
    @property
    def dBSpl1CalibratorLevel(self) -> IDoubleSetting: ...
    @property
    def dBSpl2(self) -> IDoubleSetting: ...
    @property
    def dBSpl2CalibratorLevel(self) -> IDoubleSetting: ...
    @abc.abstractmethod
    def SetReferenceFromInput(self, dbReference: DbReferenceType, channel: int) -> None: ...


class IDigitalInputSettings(ICommonDigitalInputSettings, typing.Protocol):
    @property
    def BalancedInputTermination(self) -> bool: ...
    @BalancedInputTermination.setter
    def BalancedInputTermination(self, value: bool) -> bool: ...
    @property
    def BitDepth(self) -> int: ...
    @BitDepth.setter
    def BitDepth(self, value: int) -> int: ...
    @property
    def MeasureInputSignalType(self) -> MeasureJitterInputSignal: ...
    @MeasureInputSignalType.setter
    def MeasureInputSignalType(self, value: MeasureJitterInputSignal) -> MeasureJitterInputSignal: ...
    @property
    def UnbalancedInputTermination(self) -> bool: ...
    @UnbalancedInputTermination.setter
    def UnbalancedInputTermination(self, value: bool) -> bool: ...


class IDigitalOutputReferences(typing.Protocol):
    @property
    def dBrG(self) -> IDoubleSetting: ...


class IDigitalOutputSettings(typing.Protocol):
    @property
    def BitDepth(self) -> int: ...
    @BitDepth.setter
    def BitDepth(self, value: int) -> int: ...
    @property
    def Dither(self) -> bool: ...
    @Dither.setter
    def Dither(self, value: bool) -> bool: ...
    @property
    def SampleRate(self) -> IDoubleSetting: ...
    @abc.abstractmethod
    def GetValidityBit(self, side: ValidityBitSide) -> ValidityBitType: ...
    @abc.abstractmethod
    def SetValidityBit(self, side: ValidityBitSide, txValid: ValidityBitType) -> None: ...


class IDigitalOutputStatusBitsSettings(typing.Protocol):
    @property
    def Application(self) -> StatusBitsApplication: ...
    @Application.setter
    def Application(self, value: StatusBitsApplication) -> StatusBitsApplication: ...
    @property
    def ConsumerSettings(self) -> IConsumerStatusBitsSettings: ...
    @property
    def ProfessionalSettings(self) -> IProfessionalStatusBitsSettings: ...
    @property
    def StatusBytes(self) -> Array_1[int]: ...
    @StatusBytes.setter
    def StatusBytes(self, value: Array_1[int]) -> Array_1[int]: ...


class IDigitalSerialMonitor(ISignalMonitorWindow, typing.Protocol):
    @property
    def RefClockOutputEnabled(self) -> bool: ...
    @RefClockOutputEnabled.setter
    def RefClockOutputEnabled(self, value: bool) -> bool: ...
    @property
    def RefClockRate(self) -> float: ...
    @RefClockRate.setter
    def RefClockRate(self, value: float) -> float: ...


class IDigitalSyncDelayStep(IDelayStep, typing.Protocol):
    pass


class IDigitalSyncDelayStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IDigitalSyncDelayStep: ...
    @abc.abstractmethod
    def Add(self) -> IDigitalSyncDelayStep: ...


class IDimImdGenerator(IGenerator, typing.Protocol):
    @property
    def AnalogLevels(self) -> IGeneratorLevels: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def SineFrequency(self) -> float: ...
    @property
    def SquareFrequency(self) -> float: ...
    @property
    def Waveform(self) -> DimWaveform: ...
    @Waveform.setter
    def Waveform(self, value: DimWaveform) -> DimWaveform: ...


class IDimImdMeasurement(IMeasurement, typing.Protocol):
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def DimRatio(self) -> IMeterGraph: ...
    @property
    def DistortionProductRatio(self) -> IVerticalBarGraph: ...
    @property
    def Generator(self) -> IDimImdGenerator: ...
    @property
    def MeasurementMode(self) -> DimMode: ...
    @MeasurementMode.setter
    def MeasurementMode(self, value: DimMode) -> DimMode: ...
    @property
    def Settling(self) -> IDimSettlingParametersCollection: ...


class IDimLevelSweepMeasurement(ISteppedSweepMeasurement, typing.Protocol):
    @property
    def DimRatioVsLevel(self) -> IXYGraph: ...
    @property
    def DimRatioVsMeasuredLevel(self) -> IXYGraph: ...
    @property
    def Generator(self) -> ISteppedDimSweepGenerator: ...
    @property
    def MeasurementMode(self) -> DimMode: ...
    @MeasurementMode.setter
    def MeasurementMode(self, value: DimMode) -> DimMode: ...
    @property
    def Settling(self) -> IDimSettlingParametersCollection: ...


class IDimSettlingParametersCollection(typing.Protocol):
    @property
    def DimSettlingParameters(self) -> ISettlingParameters: ...


class IDisconnectBluetoothDeviceStep(ISequenceStep, typing.Protocol):
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...


class IDisconnectBluetoothDeviceStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IDisconnectBluetoothDeviceStep: ...
    @abc.abstractmethod
    def Add(self) -> IDisconnectBluetoothDeviceStep: ...


class IDmm(typing.Protocol):
    @property
    def Mode(self) -> DcxDmmMode: ...
    @Mode.setter
    def Mode(self, value: DcxDmmMode) -> DcxDmmMode: ...
    @property
    def OhmsRange(self) -> DcxOhmRange: ...
    @OhmsRange.setter
    def OhmsRange(self, value: DcxOhmRange) -> DcxOhmRange: ...
    @property
    def Rate(self) -> DcxDmmRate: ...
    @Rate.setter
    def Rate(self, value: DcxDmmRate) -> DcxDmmRate: ...
    @property
    def Reading(self) -> float: ...
    @property
    def VoltsRange(self) -> DcxVoltRange: ...
    @VoltsRange.setter
    def VoltsRange(self, value: DcxVoltRange) -> DcxVoltRange: ...


class IDockableWindow(IDockableWindowBase, typing.Protocol):
    @property
    def UndockedHeight(self) -> int: ...
    @UndockedHeight.setter
    def UndockedHeight(self, value: int) -> int: ...
    @property
    def UndockedLeft(self) -> int: ...
    @UndockedLeft.setter
    def UndockedLeft(self, value: int) -> int: ...
    @property
    def UndockedTop(self) -> int: ...
    @UndockedTop.setter
    def UndockedTop(self, value: int) -> int: ...
    @property
    def UndockedWidth(self) -> int: ...
    @UndockedWidth.setter
    def UndockedWidth(self, value: int) -> int: ...
    @abc.abstractmethod
    def Maximize(self) -> None: ...
    @abc.abstractmethod
    def Minimize(self) -> None: ...
    @abc.abstractmethod
    def Restore(self) -> None: ...


class IDockableWindowBase(typing.Protocol):
    @property
    def IsDocked(self) -> bool: ...
    @abc.abstractmethod
    def Dock(self) -> None: ...
    @abc.abstractmethod
    def Undock(self) -> None: ...


class IDoubleReadOnlySetting(IReadOnlySettingUnit, typing.Protocol):
    @property
    def Value(self) -> float: ...
    @property
    def ValuesWithReferenceValue(self) -> Array_1[str]: ...
    @abc.abstractmethod
    def GetText(self, Unit: str) -> str: ...
    @abc.abstractmethod
    def GetValue(self, Unit: str) -> float: ...


class IDoubleSetting(ISettingUnit, typing.Protocol):
    @property
    def Value(self) -> float: ...
    @Value.setter
    def Value(self, value: float) -> float: ...
    @property
    def ValuesWithReferenceValue(self) -> Array_1[str]: ...
    @abc.abstractmethod
    def GetText(self, Unit: str) -> str: ...
    @abc.abstractmethod
    def GetValue(self, Unit: str) -> float: ...


class IDriverCollection(typing.Protocol):
    @property
    def Count(self) -> int: ...
    @Count.setter
    def Count(self, value: int) -> int: ...
    @property
    def Item(self) -> IDriverSettings: ...
    @property
    def Item(self) -> IDriverSettings: ...
    @abc.abstractmethod
    def Add(self, name: str) -> IDriverSettings: ...
    # Skipped Remove due to it being static, abstract and generic.

    Remove : Remove_MethodGroup
    class Remove_MethodGroup:
        @typing.overload
        def __call__(self, driverIndex: int) -> None:...
        @typing.overload
        def __call__(self, driverName: str) -> None:...



class IDriverSettings(typing.Protocol):
    @property
    def AmplifierGain(self) -> IDoubleSetting: ...
    @property
    def ExternalResistance(self) -> float: ...
    @ExternalResistance.setter
    def ExternalResistance(self, value: float) -> float: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def VdrvrChannel(self) -> InputChannelIndex: ...
    @VdrvrChannel.setter
    def VdrvrChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def VsenseChannel(self) -> InputChannelIndex: ...
    @VsenseChannel.setter
    def VsenseChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...


class IDurations(typing.Protocol):
    @property
    def AdditionalPostSweepSilence(self) -> IDoubleSetting: ...
    @property
    def DurationWarning(self) -> str: ...
    @property
    def Pilot(self) -> IDoubleSetting: ...
    @property
    def PostPilotSilence(self) -> IDoubleSetting: ...
    @property
    def PreSweep(self) -> IDoubleSetting: ...
    @property
    def Sweep(self) -> IDoubleSetting: ...


class IDutDelayMeasurement(IBatchMeasurementWithAppend, ISaveAcquisitionToFileSettings, IDutDelaySettings, typing.Protocol):
    @property
    def AcquiredWaveform(self) -> IAcquiredWaveformGraph: ...
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def Correlation(self) -> IXYGraph: ...
    @property
    def Delay(self) -> IMeterGraph: ...
    @property
    def Generator(self) -> IDelayGenerator: ...


class IDutDelaySettings(typing.Protocol):
    @property
    def AcquisitionSeconds(self) -> float: ...
    @AcquisitionSeconds.setter
    def AcquisitionSeconds(self, value: float) -> float: ...


class IDynamicRangeGenerator(IBatchSplitSineWithArbGenerator, typing.Protocol):
    @property
    def LevelRatio(self) -> IDoubleSetting: ...


class IDynamicRangeMeasurement(IBatchMeasurement, IHighpassFilterMeasurement, ILowpassFilterMeasurement, INoiseWeightingMeasurement, typing.Protocol):
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def DynamicRange(self) -> IMeterGraph: ...
    @property
    def Generator(self) -> IDynamicRangeGenerator: ...
    @property
    def HighpassFilterFrequencyEnabled(self) -> bool: ...
    @HighpassFilterFrequencyEnabled.setter
    def HighpassFilterFrequencyEnabled(self, value: bool) -> bool: ...
    @property
    def LowpassFilterFrequencyEnabled(self) -> bool: ...
    @LowpassFilterFrequencyEnabled.setter
    def LowpassFilterFrequencyEnabled(self, value: bool) -> bool: ...
    @property
    def NoiseWeightingEnabled(self) -> bool: ...
    @NoiseWeightingEnabled.setter
    def NoiseWeightingEnabled(self, value: bool) -> bool: ...
    @property
    def Settling(self) -> IDynamicRangeSettlingParametersCollection: ...


class IDynamicRangeSettlingParametersCollection(typing.Protocol):
    @property
    def Noise(self) -> ISettlingParameters: ...
    @property
    def Signal(self) -> ISettlingParameters: ...


class IDynamicResultGraph(typing.Protocol):
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsAnsiS322FitLimitsToDataXyResult(self) -> bool: ...
    @property
    def IsBitsGraph(self) -> bool: ...
    @property
    def IsCompareEncodedBitstreamResult(self) -> bool: ...
    @property
    def IsCompareLevelAndDistortionResult(self) -> bool: ...
    @property
    def IsCompareMeterResult(self) -> bool: ...
    @property
    def IsCompareXYResult(self) -> bool: ...
    @property
    def IsCustomMeterGraph(self) -> bool: ...
    @property
    def IsCustomProcessingMeterResult(self) -> bool: ...
    @property
    def IsCustomProcessingTabularResult(self) -> bool: ...
    @property
    def IsCustomProcessingXyResult(self) -> bool: ...
    @property
    def IsCustomXYGraph(self) -> bool: ...
    @property
    def IsDataDistributionResult(self) -> bool: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDifferenceFrequencyDistortionXyGraph(self) -> bool: ...
    @property
    def IsEqXyResult(self) -> bool: ...
    @property
    def IsHarmonicSumMeter(self) -> bool: ...
    @property
    def IsHarmonicXYGraph(self) -> bool: ...
    @property
    def IsLinearityXyGraph(self) -> bool: ...
    @property
    def IsMetadataGraph(self) -> bool: ...
    @property
    def IsMeterGraph(self) -> bool: ...
    @property
    def IsNormalizedDistortionRatioXYGraph(self) -> bool: ...
    @property
    def IsNormalizeInvertResult(self) -> bool: ...
    @property
    def IsOffsetMeterResult(self) -> bool: ...
    @property
    def IsOffsetXYResult(self) -> bool: ...
    @property
    def IsRatioToneMeterGraph(self) -> bool: ...
    @property
    def IsSensitivityMeterResult(self) -> bool: ...
    @property
    def IsSensitivityXYResult(self) -> bool: ...
    @property
    def IsSmoothResult(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsSpecifyDataPointsResult(self) -> bool: ...
    @property
    def IsSpecifySingleDataPointFromLevelAndDistortionResult(self) -> bool: ...
    @property
    def IsSpecifySingleDataPointResult(self) -> bool: ...
    @property
    def IsStatisticsMeterFromLevelAndDistortionResult(self) -> bool: ...
    @property
    def IsStatisticsMeterFromMeterResult(self) -> bool: ...
    @property
    def IsStatisticsMeterFromXYResult(self) -> bool: ...
    @property
    def IsStatisticsXYLevelAndDistortionResult(self) -> bool: ...
    @property
    def IsStatisticsXYResult(self) -> bool: ...
    @property
    def IsTabularResult(self) -> bool: ...
    @property
    def IsTedsTabularResult(self) -> bool: ...
    @property
    def IsTimeDomainSmoothResult(self) -> bool: ...
    @property
    def IsToneCrosstalkMeterGraph(self) -> bool: ...
    @property
    def IsToneMeterGraph(self) -> bool: ...
    @property
    def IsVerticalBarGraph(self) -> bool: ...
    @property
    def IsWaveformDataGraph(self) -> bool: ...
    @property
    def IsXYDistortionGraph(self) -> bool: ...
    @property
    def IsXYGraph(self) -> bool: ...
    @property
    def ResultType(self) -> MeasurementResultType: ...
    @abc.abstractmethod
    def AsAnsiS322FitLimitsToDataXyResult(self) -> IAnsiS322FitLimitsToDataXyResult: ...
    @abc.abstractmethod
    def AsBitsGraph(self) -> IBitsGraph: ...
    @abc.abstractmethod
    def AsCompareEncodedBitstreamResult(self) -> ICompareEncodedBitstreamResult: ...
    @abc.abstractmethod
    def AsCompareLevelAndDistortionResult(self) -> ICompareLevelAndDistortionResult: ...
    @abc.abstractmethod
    def AsCompareMeterResult(self) -> ICompareMeterResult: ...
    @abc.abstractmethod
    def AsCompareXYResult(self) -> ICompareXYResult: ...
    @abc.abstractmethod
    def AsCustomMeterGraph(self) -> ICustomMeterGraph: ...
    @abc.abstractmethod
    def AsCustomProcessingMeterResult(self) -> ICustomProcessingMeterResult: ...
    @abc.abstractmethod
    def AsCustomProcessingTabularResult(self) -> ICustomProcessingTabularResult: ...
    @abc.abstractmethod
    def AsCustomProcessingXyResult(self) -> ICustomProcessingXyResult: ...
    @abc.abstractmethod
    def AsCustomXYGraph(self) -> ICustomXYGraph: ...
    @abc.abstractmethod
    def AsDataDistributionResult(self) -> IDataDistributionResult: ...
    @abc.abstractmethod
    def AsDifferenceFrequencyDistortionXyGraph(self) -> IDifferenceFrequencyDistortionXyGraph: ...
    @abc.abstractmethod
    def AsEqXyResult(self) -> IEqXyResult: ...
    @abc.abstractmethod
    def AsHarmonicSumMeter(self) -> IHarmonicSumMeter: ...
    @abc.abstractmethod
    def AsHarmonicXYGraph(self) -> IHarmonicXYGraph: ...
    @abc.abstractmethod
    def AsLinearityXyGraph(self) -> ILinearityXYGraph: ...
    @abc.abstractmethod
    def AsMetadataGraph(self) -> IMetadataGraph: ...
    @abc.abstractmethod
    def AsMeterGraph(self) -> IMeterGraph: ...
    @abc.abstractmethod
    def AsNormalizedDistortionRatioXYGraph(self) -> INormalizedDistortionRatioXYGraph: ...
    @abc.abstractmethod
    def AsNormalizeInvertResult(self) -> INormalizeInvertResult: ...
    @abc.abstractmethod
    def AsOffsetMeterResult(self) -> IOffsetMeterResult: ...
    @abc.abstractmethod
    def AsOffsetXYResult(self) -> IOffsetXYResult: ...
    @abc.abstractmethod
    def AsRatioToneMeterGraph(self) -> IRatioToneMeterGraph: ...
    @abc.abstractmethod
    def AsSensitivityMeterResult(self) -> ISensitivityMeterResult: ...
    @abc.abstractmethod
    def AsSensitivityXYResult(self) -> ISensitivityXYResult: ...
    @abc.abstractmethod
    def AsSmoothResult(self) -> ISmoothResult: ...
    @abc.abstractmethod
    def AsSpecifyDataPointsResult(self) -> ISpecifyDataPointsResult: ...
    @abc.abstractmethod
    def AsSpecifySingleDataPointFromLevelAndDistortionResult(self) -> ISpecifySingleDataPointFromLevelAndDistortionResult: ...
    @abc.abstractmethod
    def AsSpecifySingleDataPointResult(self) -> ISpecifySingleDataPointResult: ...
    @abc.abstractmethod
    def AsStatisticsMeterFromLevelAndDistortionResult(self) -> IStatisticsMeterFromLevelAndDistortionResult: ...
    @abc.abstractmethod
    def AsStatisticsMeterFromMeterResult(self) -> IStatisticsMeterFromMeterResult: ...
    @abc.abstractmethod
    def AsStatisticsMeterFromXYResult(self) -> IStatisticsMeterFromXYResult: ...
    @abc.abstractmethod
    def AsStatisticsXYLevelAndDistortionResult(self) -> IStatisticsXYLevelAndDistortionResult: ...
    @abc.abstractmethod
    def AsStatisticsXYResult(self) -> IStatisticsXYResult: ...
    @abc.abstractmethod
    def AsTabularResult(self) -> ITabularResult: ...
    @abc.abstractmethod
    def AsTedsTabularResult(self) -> ITedsTabularResult: ...
    @abc.abstractmethod
    def AsTimeDomainSmoothResult(self) -> ITimeDomainSmoothResult: ...
    @abc.abstractmethod
    def AsToneCrosstalkMeterGraph(self) -> IToneCrosstalkMeterGraph: ...
    @abc.abstractmethod
    def AsToneMeterGraph(self) -> IToneMeterGraph: ...
    @abc.abstractmethod
    def AsVerticalBarGraph(self) -> IVerticalBarGraph: ...
    @abc.abstractmethod
    def AsWaveformDataGraph(self) -> IWaveformDataGraph: ...
    @abc.abstractmethod
    def AsXYDistortionGraph(self) -> IXYDistortionGraph: ...
    @abc.abstractmethod
    def AsXYGraph(self) -> IXYGraph: ...


class Iec60118ImdFrequencySweepGenerator:
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def Split(self) -> bool: ...
    @Split.setter
    def Split(self, value: bool) -> bool: ...
    @property
    def StartFrequency1(self) -> DoubleReadOnlySetting: ...
    @property
    def StartFrequency2(self) -> DoubleSetting: ...
    @property
    def StopFrequency1(self) -> DoubleReadOnlySetting: ...
    @property
    def StopFrequency2(self) -> DoubleSetting: ...
    @property
    def SweepParameters(self) -> FrequencySweepParameters: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class Iec60118ImdFrequencySweepMeasurement:
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def DifferenceFrequencyDistortion(self) -> DifferenceFrequencyDistortionXyGraph: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> Iec60118ImdFrequencySweepGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def SettlingParams(self) -> Iec60118ImdFrequencySweepSettlingParametersCollection: ...
    @property
    def TotalDifferenceFrequencyDistortion(self) -> XYGraph: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class Iec60118ImdFrequencySweepSettlingParametersCollection:
    @property
    def TotalFrequencyDistortionSettlingParams(self) -> SettlingParameters: ...


class IEnableGeneratorStep(ISequenceStep, typing.Protocol):
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...


class IEnableGeneratorStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IEnableGeneratorStep: ...


class IEnableVBiasStep(ISequenceStep, typing.Protocol):
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...


class IEnableVBiasStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IEnableVBiasStep: ...
    @abc.abstractmethod
    def Add(self) -> IEnableVBiasStep: ...


class IEnableWidebandSpeechStep(ISequenceStep, typing.Protocol):
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def WidebandSpeechEnabled(self) -> bool: ...
    @WidebandSpeechEnabled.setter
    def WidebandSpeechEnabled(self, value: bool) -> bool: ...


class IEnableWidebandSpeechStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IEnableWidebandSpeechStep: ...
    @abc.abstractmethod
    def Add(self) -> IEnableWidebandSpeechStep: ...


class IEQGeneratorLevels(IGeneratorLevels, typing.Protocol):
    @property
    def EQSettings(self) -> IGenEqSettings: ...


class IEqSettings(typing.Protocol):
    @property
    def Eq(self) -> str: ...
    @Eq.setter
    def Eq(self, value: str) -> str: ...
    @property
    def EqNames(self) -> Array_1[str]: ...
    @property
    def FrequencyValues(self) -> Array_1[float]: ...
    @property
    def LevelValues(self) -> Array_1[float]: ...
    # Skipped LoadEqFromFile due to it being static, abstract and generic.

    LoadEqFromFile : LoadEqFromFile_MethodGroup
    class LoadEqFromFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, invertData: bool, replaceIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, invertData: bool, renameIfInverted: bool, replaceIfExists: bool) -> None:...



class IEqXyDataTrace(IEqSettings, IDerivedDataTrace, typing.Protocol):
    @property
    def Channel(self) -> InputChannelIndex: ...
    @Channel.setter
    def Channel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def DataSetType(self) -> MeterDataSetType: ...
    @DataSetType.setter
    def DataSetType(self, value: MeterDataSetType) -> MeterDataSetType: ...
    @property
    def SourceDataSet(self) -> int: ...
    @SourceDataSet.setter
    def SourceDataSet(self, value: int) -> int: ...
    @property
    def SourceDataSetType(self) -> SourceDataType: ...
    @SourceDataSetType.setter
    def SourceDataSetType(self, value: SourceDataType) -> SourceDataType: ...


class IEqXyResult(IXYGraphWithLimits, IDerivedResult, typing.Protocol):
    @property
    def Traces(self) -> IEqXyResultDataTraceCollection: ...


class IEqXyResultDataTraceCollection(IDerivedDataTraceCollection, typing.Protocol):
    @property
    def Item(self) -> IEqXyDataTrace: ...
    @abc.abstractmethod
    def Add(self) -> IEqXyDataTrace: ...


class IExportResultDataStep(ISequenceStep, typing.Protocol):
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def AppendYDataOnly(self) -> bool: ...
    @AppendYDataOnly.setter
    def AppendYDataOnly(self, value: bool) -> bool: ...
    @property
    def DataIndex(self) -> int: ...
    @DataIndex.setter
    def DataIndex(self, value: int) -> int: ...
    @property
    def DataType(self) -> SourceDataType: ...
    @DataType.setter
    def DataType(self, value: SourceDataType) -> SourceDataType: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FileName(self) -> str: ...
    @FileName.setter
    def FileName(self, value: str) -> str: ...
    @property
    def IncludeSummarySheet(self) -> bool: ...
    @IncludeSummarySheet.setter
    def IncludeSummarySheet(self, value: bool) -> bool: ...
    @property
    def InsertVariableInHeader(self) -> bool: ...
    @InsertVariableInHeader.setter
    def InsertVariableInHeader(self, value: bool) -> bool: ...
    @property
    def NumberOfPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfPoints.setter
    def NumberOfPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def ResultName(self) -> str: ...
    @ResultName.setter
    def ResultName(self, value: str) -> str: ...
    @property
    def ResultNames(self) -> Array_1[str]: ...
    @property
    def SheetPerChannel(self) -> bool: ...
    @SheetPerChannel.setter
    def SheetPerChannel(self, value: bool) -> bool: ...
    @property
    def VariableInHeader(self) -> str: ...
    @VariableInHeader.setter
    def VariableInHeader(self, value: str) -> str: ...
    @abc.abstractmethod
    def GetChannelEnabled(self, ch: int) -> bool: ...
    @abc.abstractmethod
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> IXyDataExportSpecification: ...
    @abc.abstractmethod
    def SetChannelEnabled(self, ch: int, enabled: bool) -> None: ...


class IExportResultDataStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IExportResultDataStep: ...
    @abc.abstractmethod
    def Add(self) -> IExportResultDataStep: ...


class IExportWavFileStep(ISaveDataToWavFileSettings, ISequenceStep, typing.Protocol):
    @property
    def DataIndex(self) -> int: ...
    @DataIndex.setter
    def DataIndex(self, value: int) -> int: ...
    @property
    def DataType(self) -> SourceDataType: ...
    @DataType.setter
    def DataType(self, value: SourceDataType) -> SourceDataType: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def ResultName(self) -> str: ...
    @ResultName.setter
    def ResultName(self, value: str) -> str: ...
    @property
    def ResultNames(self) -> Array_1[str]: ...
    @property
    def SavedAcquisitionAudioType(self) -> FileAudioType: ...
    @SavedAcquisitionAudioType.setter
    def SavedAcquisitionAudioType(self, value: FileAudioType) -> FileAudioType: ...


class IExportWavFileStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IExportWavFileStep: ...
    @abc.abstractmethod
    def Add(self) -> IExportWavFileStep: ...


class IExternalTriggerSettings(typing.Protocol):
    @property
    def InputTriggerEdge(self) -> TriggerEdge: ...
    @InputTriggerEdge.setter
    def InputTriggerEdge(self, value: TriggerEdge) -> TriggerEdge: ...
    @property
    def InputTriggerLogicLevel(self) -> IDoubleSetting: ...
    @property
    def InputTriggerThreshold(self) -> IDoubleSetting: ...
    @property
    def OutputTriggerLogicLevel(self) -> IDoubleSetting: ...
    @property
    def OutputTriggerSource(self) -> TriggerSource: ...
    @OutputTriggerSource.setter
    def OutputTriggerSource(self, value: TriggerSource) -> TriggerSource: ...


class IFailedSequenceResult(ISequenceResult, typing.Protocol):
    pass


class IFailedSequenceResultCollection(ISequenceSignalPathResultCollection, typing.Protocol):
    pass


class IFastFrequencyResponseSettings(typing.Protocol):
    @property
    def AutoDelayCompensation(self) -> bool: ...
    @AutoDelayCompensation.setter
    def AutoDelayCompensation(self, value: bool) -> bool: ...
    @property
    def DiscardDistribution(self) -> ITimingDistribution: ...
    @property
    def FastSweepAutoDuration(self) -> bool: ...
    @FastSweepAutoDuration.setter
    def FastSweepAutoDuration(self, value: bool) -> bool: ...
    @property
    def FastSweepGeneratorSettings(self) -> IFrequencySweepParameters: ...
    @property
    def MeasureDistribution(self) -> ITimingDistribution: ...
    @property
    def SweepType(self) -> FastFrequencyResponseSweepType: ...
    @SweepType.setter
    def SweepType(self, value: FastFrequencyResponseSweepType) -> FastFrequencyResponseSweepType: ...
    @property
    def TransitionDistribution(self) -> ITimingDistribution: ...


class IFastFrequencyThdNSettings(IFastFrequencyResponseSettings, typing.Protocol):
    @property
    def MeasureThdN(self) -> bool: ...
    @MeasureThdN.setter
    def MeasureThdN(self, value: bool) -> bool: ...


class IFftAnalyzer(IBenchModeMeasurement, IFftSettings, IFftResults, typing.Protocol):
    pass


class IFftResults(typing.Protocol):
    @property
    def AmplitudeSpectralDensity(self) -> IXYGraph: ...
    @property
    def FFTSpectrum(self) -> IXYGraph: ...
    @property
    def PowerSpectralDensity(self) -> IXYGraph: ...
    @property
    def Scope(self) -> ITimeDomainXYGraph: ...


class IFftSettings(ITriggeredAcquisitionSettings, typing.Protocol):
    @property
    def Averages(self) -> int: ...
    @Averages.setter
    def Averages(self, value: int) -> int: ...
    @property
    def AveragingType(self) -> AveragingType: ...
    @AveragingType.setter
    def AveragingType(self, value: AveragingType) -> AveragingType: ...
    @property
    def FFTLength(self) -> FFTLength: ...
    @FFTLength.setter
    def FFTLength(self, value: FFTLength) -> FFTLength: ...
    @property
    def FFTLengthSamples(self) -> int: ...
    @FFTLengthSamples.setter
    def FFTLengthSamples(self, value: int) -> int: ...
    @property
    def WindowType(self) -> WindowType: ...
    @WindowType.setter
    def WindowType(self, value: WindowType) -> WindowType: ...


class IFFTSpectrumMonitorSettings(IPerInputSignalMonitor, typing.Protocol):
    @property
    def Averages(self) -> int: ...
    @Averages.setter
    def Averages(self, value: int) -> int: ...
    @property
    def FFTLength(self) -> FFTLength: ...
    @FFTLength.setter
    def FFTLength(self, value: FFTLength) -> FFTLength: ...
    @property
    def FFTSpectrum(self) -> IBaseXYGraph: ...
    @property
    def ShowResidual(self) -> bool: ...
    @ShowResidual.setter
    def ShowResidual(self, value: bool) -> bool: ...
    @property
    def WindowType(self) -> WindowType: ...
    @WindowType.setter
    def WindowType(self, value: WindowType) -> WindowType: ...
    @abc.abstractmethod
    def ResetAverages(self) -> None: ...


class IFFTSpectrumSignalMonitorWindow(ISignalMonitorWindow, IFFTSpectrumMonitorSettings, typing.Protocol):
    @abc.abstractmethod
    def Settings(self, input: APxInputSelection) -> IFFTSpectrumMonitorSettings: ...


class IFileAnalysisSettings(typing.Protocol):
    @property
    def FixedSampleRate(self) -> float: ...
    @FixedSampleRate.setter
    def FixedSampleRate(self, value: float) -> float: ...
    @property
    def SampleRateMode(self) -> FileAnalysisSampleRateMode: ...
    @SampleRateMode.setter
    def SampleRateMode(self, value: FileAnalysisSampleRateMode) -> FileAnalysisSampleRateMode: ...
    @property
    def WavFiles(self) -> Array_1[str]: ...
    @WavFiles.setter
    def WavFiles(self, value: Array_1[str]) -> Array_1[str]: ...


class IFitLimitToDataXyDataTrace(IDerivedDataTrace, typing.Protocol):
    @property
    def Channel(self) -> InputChannelIndex: ...
    @Channel.setter
    def Channel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def DataSetType(self) -> MeterDataSetType: ...
    @DataSetType.setter
    def DataSetType(self, value: MeterDataSetType) -> MeterDataSetType: ...
    @property
    def SourceDataSet(self) -> int: ...
    @SourceDataSet.setter
    def SourceDataSet(self, value: int) -> int: ...
    @property
    def SourceDataSetType(self) -> SourceDataType: ...
    @SourceDataSetType.setter
    def SourceDataSetType(self, value: SourceDataType) -> SourceDataType: ...


class IFrequencies(typing.Protocol):
    @property
    def Pilot(self) -> IDoubleSetting: ...
    @property
    def Start(self) -> IDoubleSetting: ...
    @property
    def Stop(self) -> IDoubleSetting: ...


class IFrequencyGenerator(ISquareWithArbGenerator, typing.Protocol):
    pass


class IFrequencyMeasurement(IMeasurement, typing.Protocol):
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def Frequency(self) -> IMeterGraph: ...
    @property
    def Generator(self) -> IFrequencyGenerator: ...
    @property
    def Settling(self) -> IFrequencySettlingParametersCollection: ...


class IFrequencyResponseMeasurement(IContinuousSweepMeasurementWithAdditionalAcqTimeBase, typing.Protocol):
    @property
    def Deviation(self) -> IDeviationMeterGraph: ...
    @property
    def Gain(self) -> IXYGraph: ...
    @property
    def Level(self) -> IXYGraph: ...
    @property
    def NestedSweep(self) -> INestedSweepSettings: ...
    @property
    def RelativeLevel(self) -> IRelativeLevelXYGraph: ...


class IFrequencySettlingParametersCollection(typing.Protocol):
    @property
    def Frequency(self) -> ISettlingParameters: ...


class IFrequencySweepParameters(ISweepParameters, typing.Protocol):
    @property
    def IsoSpacing(self) -> IsoRSpacingType: ...
    @IsoSpacing.setter
    def IsoSpacing(self, value: IsoRSpacingType) -> IsoRSpacingType: ...


class IFrfPhaseSpectrum(IXYGraph, typing.Protocol):
    @property
    def Mode(self) -> FrfPhaseMode: ...
    @Mode.setter
    def Mode(self, value: FrfPhaseMode) -> FrfPhaseMode: ...


class IGenEqSettings(typing.Protocol):
    @property
    def EQTableType(self) -> EQType: ...
    @EQTableType.setter
    def EQTableType(self, value: EQType) -> EQType: ...
    @property
    def FrequencyUnit(self) -> str: ...
    @FrequencyUnit.setter
    def FrequencyUnit(self, value: str) -> str: ...
    @property
    def FrequencyUnitList(self) -> Array_1[str]: ...
    @property
    def FrequencyValues(self) -> Array_1[float]: ...
    @property
    def LevelUnit(self) -> str: ...
    @LevelUnit.setter
    def LevelUnit(self, value: str) -> str: ...
    @property
    def LevelUnitList(self) -> Array_1[str]: ...
    @property
    def LevelValues(self) -> Array_1[float]: ...
    @abc.abstractmethod
    def ExportData(self, fileName: str) -> None: ...
    @abc.abstractmethod
    def ImportData(self, fileName: str, resultName: str, ch: InputChannelIndex) -> None: ...
    @abc.abstractmethod
    def ImportRelativeEqData(self, fileName: str, invertData: bool) -> None: ...
    @abc.abstractmethod
    def ResetTable(self) -> None: ...
    @abc.abstractmethod
    def SetEQTable(self, frequency: Array_1[float], level: Array_1[float]) -> None: ...


class IGenerator(typing.Protocol):
    @property
    def Levels(self) -> IGeneratorLevels: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class IGeneratorChannelAssignments(typing.Protocol):
    @abc.abstractmethod
    def GetOutputChannelAssignment(self, ch: OutputChannelIndex) -> OutputChannelAssignment: ...
    @abc.abstractmethod
    def ResetChannelAssignments(self, setting: OutputChannelAssignments) -> None: ...
    @abc.abstractmethod
    def SetOutputChannelAssignment(self, ch: OutputChannelIndex, assignment: OutputChannelAssignment) -> None: ...


class IGeneratorChannelLevels(typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Unit(self) -> str: ...
    @Unit.setter
    def Unit(self, value: str) -> str: ...
    @property
    def UnitList(self) -> Array_1[str]: ...
    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> str:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, unit: str) -> str:...

    # Skipped GetValue due to it being static, abstract and generic.

    GetValue : GetValue_MethodGroup
    class GetValue_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> float:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, unit: str) -> float:...

    # Skipped SetValue due to it being static, abstract and generic.

    SetValue : SetValue_MethodGroup
    class SetValue_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, level: float) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, level: str) -> None:...



class IGeneratorLevels(IGeneratorChannelLevels, typing.Protocol):
    @property
    def OffsetUnit(self) -> str: ...
    @OffsetUnit.setter
    def OffsetUnit(self, value: str) -> str: ...
    @property
    def OffsetUnitList(self) -> Array_1[str]: ...
    @property
    def TrackFirstChannel(self) -> bool: ...
    @TrackFirstChannel.setter
    def TrackFirstChannel(self, value: bool) -> bool: ...
    # Skipped GetOffsetText due to it being static, abstract and generic.

    GetOffsetText : GetOffsetText_MethodGroup
    class GetOffsetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> str:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, unit: str) -> str:...

    # Skipped GetOffsetValue due to it being static, abstract and generic.

    GetOffsetValue : GetOffsetValue_MethodGroup
    class GetOffsetValue_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> float:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, unit: str) -> float:...

    # Skipped SetOffsetValue due to it being static, abstract and generic.

    SetOffsetValue : SetOffsetValue_MethodGroup
    class SetOffsetValue_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, offset: float) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, offset: str) -> None:...



class IGlobalVMaxSettings(typing.Protocol):
    @abc.abstractmethod
    def EnableVmax(self, connectorType: VmaxConnectorType, enabled: bool, clipValues: bool) -> None: ...
    @abc.abstractmethod
    def GetVmax(self, connectorType: VmaxConnectorType, unit: str) -> float: ...
    @abc.abstractmethod
    def IsVmaxEnabled(self, connectorType: VmaxConnectorType) -> bool: ...
    @abc.abstractmethod
    def SetVmax(self, connectorType: VmaxConnectorType, level: float, unit: str, clipValues: bool) -> None: ...


class IGraph(IDockableWindowBase, ISequenceResultGraph, typing.Protocol):
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Message(self) -> str: ...
    @property
    def Result(self) -> IDynamicResultGraph: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> IGraphTitle: ...
    @abc.abstractmethod
    def CopyToClipboard(self) -> None: ...
    @abc.abstractmethod
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    @abc.abstractmethod
    def SetZoomPanToOriginal(self) -> None: ...
    @abc.abstractmethod
    def Show(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> IGraph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> IGraph:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...



class IGraphAxis(typing.Protocol):
    @property
    def AutoScale(self) -> bool: ...
    @AutoScale.setter
    def AutoScale(self, value: bool) -> bool: ...
    @property
    def AutoTitle(self) -> bool: ...
    @AutoTitle.setter
    def AutoTitle(self, value: bool) -> bool: ...
    @property
    def IsLog(self) -> bool: ...
    @IsLog.setter
    def IsLog(self, value: bool) -> bool: ...
    @property
    def Maximum(self) -> float: ...
    @Maximum.setter
    def Maximum(self, value: float) -> float: ...
    @property
    def Minimum(self) -> float: ...
    @Minimum.setter
    def Minimum(self, value: float) -> float: ...
    @property
    def RangeType(self) -> GraphRangeType: ...
    @RangeType.setter
    def RangeType(self, value: GraphRangeType) -> GraphRangeType: ...
    @property
    def ScrollingRange(self) -> float: ...
    @ScrollingRange.setter
    def ScrollingRange(self, value: float) -> float: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @property
    def TitleVisible(self) -> bool: ...
    @TitleVisible.setter
    def TitleVisible(self, value: bool) -> bool: ...
    @property
    def Unit(self) -> str: ...
    @Unit.setter
    def Unit(self, value: str) -> str: ...
    @property
    def UnitList(self) -> Array_1[str]: ...


class IGraphCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IGraph: ...
    @property
    def Item(self) -> IGraph: ...
    @property
    def ResultTypeNames(self) -> Array_1[str]: ...
    @property
    def ResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @abc.abstractmethod
    def Contains(self, resultName: str) -> bool: ...
    @abc.abstractmethod
    def Sort(self, sortType: ResultSortType) -> None: ...
    # Skipped Add due to it being static, abstract and generic.

    Add : Add_MethodGroup
    class Add_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> IGraph:...
        @typing.overload
        def __call__(self, resultTypeName: str) -> IGraph:...
        @typing.overload
        def __call__(self, input: APxInputSelection, resultType: MeasurementResultType) -> IGraph:...

    # Skipped Delete due to it being static, abstract and generic.

    Delete : Delete_MethodGroup
    class Delete_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, resultNames: Array_1[str]) -> None:...
        @typing.overload
        def __call__(self, resultName: str) -> None:...



class IGraphFont(typing.Protocol):
    @property
    def Bold(self) -> bool: ...
    @Bold.setter
    def Bold(self, value: bool) -> bool: ...
    @property
    def Color(self) -> Color: ...
    @Color.setter
    def Color(self, value: Color) -> Color: ...
    @property
    def FontName(self) -> str: ...
    @FontName.setter
    def FontName(self, value: str) -> str: ...
    @property
    def Italic(self) -> bool: ...
    @Italic.setter
    def Italic(self, value: bool) -> bool: ...
    @property
    def Size(self) -> int: ...
    @Size.setter
    def Size(self, value: int) -> int: ...
    @property
    def Strikeout(self) -> bool: ...
    @Strikeout.setter
    def Strikeout(self, value: bool) -> bool: ...
    @property
    def Style(self) -> FontStyle: ...
    @property
    def Underline(self) -> bool: ...
    @Underline.setter
    def Underline(self, value: bool) -> bool: ...


class IGraphLimit(IGraphLimitData, typing.Protocol):
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def LimitOffsetCurves(self) -> Array_1[str]: ...
    @abc.abstractmethod
    def Clear(self) -> None: ...
    @abc.abstractmethod
    def CreateLimitOffsetCurve(self, curveName: str, xUnit: str, xValues: Array_1[float], yUnit: str, yValues: Array_1[float], replaceIfExists: bool) -> str: ...
    @abc.abstractmethod
    def LoadLimitOffsetCurve(self, fileName: str, replaceIfExists: bool) -> None: ...
    # Skipped CopyFromGraphData due to it being static, abstract and generic.

    CopyFromGraphData : CopyFromGraphData_MethodGroup
    class CopyFromGraphData_MethodGroup:
        @typing.overload
        def __call__(self, dataPoints: NumberOfGraphPoints, pointcount: int = ...) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, dataPoints: NumberOfGraphPoints, pointcount: int = ...) -> None:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, limitCurveName: str, invertLimitCurve: bool, invertLimitData: bool) -> None:...

    # Skipped OffsetValues due to it being static, abstract and generic.

    OffsetValues : OffsetValues_MethodGroup
    class OffsetValues_MethodGroup:
        @typing.overload
        def __call__(self, adjustment: float) -> None:...
        @typing.overload
        def __call__(self, adjustment: Array_1[float]) -> None:...
        @typing.overload
        def __call__(self, limitCurveName: str, invertData: bool) -> None:...
        @typing.overload
        def __call__(self, limitCurveName: str, invertData: bool, selectedChannels: Array_1[bool]) -> None:...

    # Skipped RemoveChannel due to it being static, abstract and generic.

    RemoveChannel : RemoveChannel_MethodGroup
    class RemoveChannel_MethodGroup:
        @typing.overload
        def __call__(self, channel: int) -> None:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex) -> None:...

    # Skipped SetValues due to it being static, abstract and generic.

    SetValues : SetValues_MethodGroup
    class SetValues_MethodGroup:
        @typing.overload
        def __call__(self, xValues: Array_1[float], yValues: Array_1[float]) -> None:...
        @typing.overload
        def __call__(self, ch: int, xValues: Array_1[float], yValues: Array_1[float]) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xValues: Array_1[float], yValues: Array_1[float]) -> None:...

    # Skipped SetX due to it being static, abstract and generic.

    SetX : SetX_MethodGroup
    class SetX_MethodGroup:
        @typing.overload
        def __call__(self, channel: int, index: int, x: float) -> None:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, index: int, x: float) -> None:...

    # Skipped SetY due to it being static, abstract and generic.

    SetY : SetY_MethodGroup
    class SetY_MethodGroup:
        @typing.overload
        def __call__(self, channel: int, index: int, y: float) -> None:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, index: int, y: float) -> None:...



class IGraphLimitData(typing.Protocol):
    @property
    def ChannelCount(self) -> int: ...
    @property
    def PassedLimitCheck(self) -> bool: ...
    @abc.abstractmethod
    def ExportData(self, fileName: str) -> None: ...
    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str) -> Array_1[GraphPoint]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> Array_1[float]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> Array_1[float]:...

    # Skipped HasLimitOnChannel due to it being static, abstract and generic.

    HasLimitOnChannel : HasLimitOnChannel_MethodGroup
    class HasLimitOnChannel_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped PassedLimitCheckOnChannel due to it being static, abstract and generic.

    PassedLimitCheckOnChannel : PassedLimitCheckOnChannel_MethodGroup
    class PassedLimitCheckOnChannel_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...
        @typing.overload
        def __call__(self, ch: int, dataType: SourceDataType, dataIndex: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, dataType: SourceDataType, dataIndex: int) -> bool:...



class IGraphTitle(typing.Protocol):
    @property
    def Alignment(self) -> TitleAlignment: ...
    @Alignment.setter
    def Alignment(self, value: TitleAlignment) -> TitleAlignment: ...
    @property
    def Auto(self) -> bool: ...
    @Auto.setter
    def Auto(self, value: bool) -> bool: ...
    @property
    def Font(self) -> IGraphFont: ...
    @property
    def Text(self) -> str: ...
    @Text.setter
    def Text(self, value: str) -> str: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...


class IHarmonicSumMeter(IMeterGraph, typing.Protocol):
    @property
    def AllHarmonics(self) -> bool: ...
    @AllHarmonics.setter
    def AllHarmonics(self, value: bool) -> bool: ...
    @abc.abstractmethod
    def GetHarmonicSelected(self, harmonicIndex: DiscreteHarmonicIndex) -> bool: ...
    @abc.abstractmethod
    def SetHarmonicSelected(self, harmonicIndex: DiscreteHarmonicIndex, selected: bool) -> None: ...


class IHarmonicTraceInfo(ITraceInfo, typing.Protocol):
    @property
    def Harmonic(self) -> DistortionHarmonicIndex: ...


class IHarmonicXYGraph(IXYGraph, typing.Protocol):
    @property
    def AllHarmonics(self) -> bool: ...
    @AllHarmonics.setter
    def AllHarmonics(self, value: bool) -> bool: ...
    @property
    def HarmonicNumber(self) -> int: ...
    @HarmonicNumber.setter
    def HarmonicNumber(self, value: int) -> int: ...
    @property
    def HarmonicSelectionType(self) -> DistortionProductSelection: ...
    @HarmonicSelectionType.setter
    def HarmonicSelectionType(self, value: DistortionProductSelection) -> DistortionProductSelection: ...
    @property
    def MaxHarmonicNumber(self) -> int: ...
    @property
    def MinHarmonicNumber(self) -> int: ...
    @abc.abstractmethod
    def GetHarmonicSelected(self, harmonicIndex: int) -> bool: ...
    @abc.abstractmethod
    def SetHarmonicSelected(self, harmonicIndex: int, selected: bool) -> None: ...


class IHdmi2ArcInputSettings(ICommonDigitalInputSettings, typing.Protocol):
    @property
    def BitDepth(self) -> int: ...
    @BitDepth.setter
    def BitDepth(self, value: int) -> int: ...
    @abc.abstractmethod
    def SendCec(self, command: CecCommandTypeEnum) -> None: ...


class IHdmi2ArcOutputSettings(IDigitalOutputSettings, typing.Protocol):
    @property
    def TransmitterNegotiation(self) -> ArcTransmitterNegotiation: ...
    @TransmitterNegotiation.setter
    def TransmitterNegotiation(self, value: ArcTransmitterNegotiation) -> ArcTransmitterNegotiation: ...
    @abc.abstractmethod
    def SendCec(self, command: CecCommandTypeEnum) -> None: ...


class IHdmi2eArcInputSettings(ICommonDigitalInputSettings, typing.Protocol):
    @property
    def AvailableCapabilityDataStructures(self) -> Array_1[str]: ...
    @property
    def BitDepth(self) -> int: ...
    @BitDepth.setter
    def BitDepth(self, value: int) -> int: ...
    @property
    def SelectedCapabilityDataStructure(self) -> str: ...
    @SelectedCapabilityDataStructure.setter
    def SelectedCapabilityDataStructure(self, value: str) -> str: ...
    @abc.abstractmethod
    def LoadCapabilityDataStructure(self, filename: str, replaceIfExists: bool) -> None: ...


class IHdmi2EArcOutputSettings(IDigitalOutputSettings, typing.Protocol):
    @property
    def AudioFormat(self) -> EArcAudioFormat: ...
    @AudioFormat.setter
    def AudioFormat(self, value: EArcAudioFormat) -> EArcAudioFormat: ...
    @abc.abstractmethod
    def SaveCds(self, fileName: str) -> bool: ...


class IHdmi2InputSettings(typing.Protocol):
    @property
    def AvailableEdids(self) -> Array_1[str]: ...
    @property
    def BitDepth(self) -> int: ...
    @BitDepth.setter
    def BitDepth(self, value: int) -> int: ...
    @property
    def CecLogicalAddress(self) -> CecDeviceType: ...
    @CecLogicalAddress.setter
    def CecLogicalAddress(self, value: CecDeviceType) -> CecDeviceType: ...
    @property
    def DisableCECForwarding(self) -> bool: ...
    @DisableCECForwarding.setter
    def DisableCECForwarding(self, value: bool) -> bool: ...
    @property
    def SelectedEdid(self) -> str: ...
    @SelectedEdid.setter
    def SelectedEdid(self, value: str) -> str: ...
    @property
    def UseAuxOutEdid(self) -> bool: ...
    @UseAuxOutEdid.setter
    def UseAuxOutEdid(self, value: bool) -> bool: ...
    @abc.abstractmethod
    def LoadEdid(self, filename: str, replaceIfExists: bool) -> None: ...


class IHdmi2OutputSettings(IDigitalOutputSettings, typing.Protocol):
    @property
    def AudioFormat(self) -> HdmiAudioFormat: ...
    @AudioFormat.setter
    def AudioFormat(self, value: HdmiAudioFormat) -> HdmiAudioFormat: ...
    @property
    def AutoStatusBits(self) -> bool: ...
    @AutoStatusBits.setter
    def AutoStatusBits(self, value: bool) -> bool: ...
    @property
    def CecLogicalAddress(self) -> CecDeviceType: ...
    @CecLogicalAddress.setter
    def CecLogicalAddress(self, value: CecDeviceType) -> CecDeviceType: ...
    @property
    def ColorDepth(self) -> HdmiColorDepth: ...
    @ColorDepth.setter
    def ColorDepth(self, value: HdmiColorDepth) -> HdmiColorDepth: ...
    @property
    def EnableHdcpEncryption(self) -> bool: ...
    @EnableHdcpEncryption.setter
    def EnableHdcpEncryption(self, value: bool) -> bool: ...
    @property
    def FrameRate(self) -> HdmiFrameRate: ...
    @FrameRate.setter
    def FrameRate(self, value: HdmiFrameRate) -> HdmiFrameRate: ...
    @property
    def PassThrough(self) -> bool: ...
    @PassThrough.setter
    def PassThrough(self, value: bool) -> bool: ...
    @property
    def StatusBits(self) -> IDigitalOutputStatusBitsSettings: ...
    @property
    def VideoResolution(self) -> HdmiVideoResolution: ...
    @VideoResolution.setter
    def VideoResolution(self, value: HdmiVideoResolution) -> HdmiVideoResolution: ...
    @abc.abstractmethod
    def SaveEdid(self, fileName: str) -> None: ...


class IHdmiArcInputSettings(ICommonDigitalInputSettings, typing.Protocol):
    @property
    def BitDepth(self) -> int: ...
    @BitDepth.setter
    def BitDepth(self, value: int) -> int: ...
    @property
    def PhysicalLayer(self) -> ArcPhysicalLayerMode: ...
    @PhysicalLayer.setter
    def PhysicalLayer(self, value: ArcPhysicalLayerMode) -> ArcPhysicalLayerMode: ...
    @abc.abstractmethod
    def SendCec(self, command: CecCommandTypeEnum) -> None: ...


class IHdmiArcOutputSettings(IDigitalOutputSettings, typing.Protocol):
    @property
    def CustomEdid(self) -> Array_1[int]: ...
    @CustomEdid.setter
    def CustomEdid(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def PhysicalLayer(self) -> ArcPhysicalLayerMode: ...
    @PhysicalLayer.setter
    def PhysicalLayer(self, value: ArcPhysicalLayerMode) -> ArcPhysicalLayerMode: ...
    @property
    def TransmitterNegotiation(self) -> ArcTransmitterNegotiation: ...
    @TransmitterNegotiation.setter
    def TransmitterNegotiation(self, value: ArcTransmitterNegotiation) -> ArcTransmitterNegotiation: ...
    @abc.abstractmethod
    def SendCec(self, command: CecCommandTypeEnum) -> None: ...


class IHdmiAudioInfoFrameSettings(typing.Protocol):
    @property
    def Auto(self) -> bool: ...
    @Auto.setter
    def Auto(self, value: bool) -> bool: ...
    @property
    def ChannelCount(self) -> AudioInfoFrameChannelCount: ...
    @ChannelCount.setter
    def ChannelCount(self, value: AudioInfoFrameChannelCount) -> AudioInfoFrameChannelCount: ...
    @property
    def CodingType(self) -> AudioInfoFrameCodingType: ...
    @CodingType.setter
    def CodingType(self, value: AudioInfoFrameCodingType) -> AudioInfoFrameCodingType: ...
    @property
    def Downmix(self) -> AudioInfoFrameInhibitDownmixFlag: ...
    @Downmix.setter
    def Downmix(self, value: AudioInfoFrameInhibitDownmixFlag) -> AudioInfoFrameInhibitDownmixFlag: ...
    @property
    def InfoFrameBytes(self) -> Array_1[int]: ...
    @InfoFrameBytes.setter
    def InfoFrameBytes(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def LevelShift(self) -> AudioInfoFrameLevelShiftValue: ...
    @LevelShift.setter
    def LevelShift(self, value: AudioInfoFrameLevelShiftValue) -> AudioInfoFrameLevelShiftValue: ...
    @property
    def SampleSize(self) -> AudioInfoFrameSampleSize: ...
    @SampleSize.setter
    def SampleSize(self, value: AudioInfoFrameSampleSize) -> AudioInfoFrameSampleSize: ...
    @property
    def SamplingFrequency(self) -> AudioInfoFrameSamplingFrequency: ...
    @SamplingFrequency.setter
    def SamplingFrequency(self, value: AudioInfoFrameSamplingFrequency) -> AudioInfoFrameSamplingFrequency: ...
    @property
    def SpeakerAllocation(self) -> HdmiSpeakerAllocation: ...
    @SpeakerAllocation.setter
    def SpeakerAllocation(self, value: HdmiSpeakerAllocation) -> HdmiSpeakerAllocation: ...


class IHdmiAudioInfoFrameValues(typing.Protocol):
    @property
    def AudioLayout(self) -> str: ...
    @property
    def AvMute(self) -> bool: ...
    @property
    def ChannelCount(self) -> AudioInfoFrameChannelCount: ...
    @property
    def CodingType(self) -> AudioInfoFrameCodingType: ...
    @property
    def CTS(self) -> int: ...
    @property
    def Downmix(self) -> AudioInfoFrameInhibitDownmixFlag: ...
    @property
    def Hbr(self) -> bool: ...
    @property
    def HdcpDecrypting(self) -> bool: ...
    @property
    def InfoFrameBytes(self) -> Array_1[int]: ...
    @property
    def LevelShift(self) -> AudioInfoFrameLevelShiftValue: ...
    @property
    def N(self) -> int: ...
    @property
    def SampleSize(self) -> AudioInfoFrameSampleSize: ...
    @property
    def SamplingFrequency(self) -> AudioInfoFrameSamplingFrequency: ...
    @property
    def SpeakerAllocation(self) -> HdmiSpeakerAllocation: ...


class IHdmiInputSettings(typing.Protocol):
    @property
    def BitDepth(self) -> int: ...
    @BitDepth.setter
    def BitDepth(self, value: int) -> int: ...
    @property
    def CecLogicalAddress(self) -> CecDeviceType: ...
    @CecLogicalAddress.setter
    def CecLogicalAddress(self, value: CecDeviceType) -> CecDeviceType: ...
    @property
    def DisableCECForwarding(self) -> bool: ...
    @DisableCECForwarding.setter
    def DisableCECForwarding(self, value: bool) -> bool: ...
    @property
    def SinkCustomEdid(self) -> Array_1[int]: ...
    @SinkCustomEdid.setter
    def SinkCustomEdid(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def SinkEdidType(self) -> HdmiSinkEdidType: ...
    @SinkEdidType.setter
    def SinkEdidType(self, value: HdmiSinkEdidType) -> HdmiSinkEdidType: ...
    @abc.abstractmethod
    def ReadEdidFromAuxOut(self) -> Array_1[int]: ...
    @abc.abstractmethod
    def ReadEdidFromFile(self, fileName: str) -> Array_1[int]: ...


class IHdmiMonitor(ISignalMonitorWindow, typing.Protocol):
    @property
    def AudioInfoFrameValues(self) -> IHdmiAudioInfoFrameValues: ...
    @property
    def CecMessageFollower(self) -> CecDeviceType: ...
    @CecMessageFollower.setter
    def CecMessageFollower(self, value: CecDeviceType) -> CecDeviceType: ...
    @property
    def CecMessageOpcode(self) -> int: ...
    @CecMessageOpcode.setter
    def CecMessageOpcode(self, value: int) -> int: ...
    @property
    def CecMessageOperands(self) -> Array_1[int]: ...
    @CecMessageOperands.setter
    def CecMessageOperands(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def CecMessageType(self) -> CecMessageSendType: ...
    @CecMessageType.setter
    def CecMessageType(self, value: CecMessageSendType) -> CecMessageSendType: ...
    @property
    def SendCecMessageFrom(self) -> CecMessageSendFrom: ...
    @SendCecMessageFrom.setter
    def SendCecMessageFrom(self, value: CecMessageSendFrom) -> CecMessageSendFrom: ...
    @property
    def VideoRefreshRate(self) -> HdmiInputFrameRate: ...
    @property
    def VideoResolution(self) -> HdmiInputVideoResolution: ...
    @abc.abstractmethod
    def SendCecMessage(self) -> CecSendResult: ...


class IHdmiOutputMetadata(typing.Protocol):
    @property
    def AudioInfoFrames(self) -> IHdmiAudioInfoFrameSettings: ...
    @property
    def AutoStatusBits(self) -> bool: ...
    @AutoStatusBits.setter
    def AutoStatusBits(self, value: bool) -> bool: ...
    @property
    def StatusBits(self) -> IDigitalOutputStatusBitsSettings: ...


class IHdmiOutputSettings(IDigitalOutputSettings, typing.Protocol):
    @property
    def AudioFormat(self) -> HdmiAudioFormat: ...
    @AudioFormat.setter
    def AudioFormat(self, value: HdmiAudioFormat) -> HdmiAudioFormat: ...
    @property
    def CecLogicalAddress(self) -> CecDeviceType: ...
    @CecLogicalAddress.setter
    def CecLogicalAddress(self, value: CecDeviceType) -> CecDeviceType: ...
    @property
    def ColorDepth(self) -> HdmiColorDepth: ...
    @ColorDepth.setter
    def ColorDepth(self, value: HdmiColorDepth) -> HdmiColorDepth: ...
    @property
    def EnableHdcpEncryption(self) -> bool: ...
    @EnableHdcpEncryption.setter
    def EnableHdcpEncryption(self, value: bool) -> bool: ...
    @property
    def IsSinkEdidValid(self) -> bool: ...
    @property
    def Metadata(self) -> IHdmiOutputMetadata: ...
    @property
    def OverrideCtsValue(self) -> int: ...
    @OverrideCtsValue.setter
    def OverrideCtsValue(self, value: int) -> int: ...
    @property
    def OverrideNCts(self) -> bool: ...
    @OverrideNCts.setter
    def OverrideNCts(self, value: bool) -> bool: ...
    @property
    def OverrideNValue(self) -> int: ...
    @OverrideNValue.setter
    def OverrideNValue(self, value: int) -> int: ...
    @property
    def PassThrough(self) -> bool: ...
    @PassThrough.setter
    def PassThrough(self, value: bool) -> bool: ...
    @property
    def SinkEdid(self) -> Array_1[int]: ...
    @property
    def VerifyDdcInSequence(self) -> bool: ...
    @VerifyDdcInSequence.setter
    def VerifyDdcInSequence(self, value: bool) -> bool: ...
    @property
    def VideoColor(self) -> Color: ...
    @VideoColor.setter
    def VideoColor(self, value: Color) -> Color: ...
    @property
    def VideoFormat(self) -> HdmiVideoFormat: ...
    @VideoFormat.setter
    def VideoFormat(self, value: HdmiVideoFormat) -> HdmiVideoFormat: ...


class IHeadphoneAmplifierSettings(typing.Protocol):
    @property
    def GetHpFaultStatus(self) -> HeadphoneFaultStatus: ...
    @property
    def Output(self) -> HeadphoneAmplifierOutput: ...
    @Output.setter
    def Output(self, value: HeadphoneAmplifierOutput) -> HeadphoneAmplifierOutput: ...
    @property
    def SenseChannel(self) -> AmplifierSenseChannel: ...
    @SenseChannel.setter
    def SenseChannel(self, value: AmplifierSenseChannel) -> AmplifierSenseChannel: ...


class IHfpAudioGatewayATCommandStep(IATCommandStep, typing.Protocol):
    pass


class IHfpAudioGatewayATCommandStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IHfpAudioGatewayATCommandStep: ...
    @abc.abstractmethod
    def Add(self) -> IHfpAudioGatewayATCommandStep: ...


class IHfpAudioGatewayStep(ISequenceStep, typing.Protocol):
    @property
    def Command(self) -> BluetoothHfpAgCommand: ...
    @Command.setter
    def Command(self, value: BluetoothHfpAgCommand) -> BluetoothHfpAgCommand: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...


class IHfpAudioGatewayStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IHfpAudioGatewayStep: ...
    @abc.abstractmethod
    def Add(self) -> IHfpAudioGatewayStep: ...


class IHfpHandsFreeCommandStep(ISequenceStep, typing.Protocol):
    @property
    def Command(self) -> BluetoothHfpHfCommand: ...
    @Command.setter
    def Command(self, value: BluetoothHfpHfCommand) -> BluetoothHfpHfCommand: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...


class IHfpHandsFreeCommandStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IHfpHandsFreeCommandStep: ...
    @abc.abstractmethod
    def Add(self) -> IHfpHandsFreeCommandStep: ...


class IHfpHandsFreeStep(IATCommandStep, typing.Protocol):
    pass


class IHfpHandsFreeStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IHfpHandsFreeStep: ...
    @abc.abstractmethod
    def Add(self) -> IHfpHandsFreeStep: ...


class IHighOrderHarmonicDistortionXyGraph(INormalizedDistortionRatioXYGraph, typing.Protocol):
    @property
    def MaxHarmonicNumber(self) -> int: ...
    @MaxHarmonicNumber.setter
    def MaxHarmonicNumber(self, value: int) -> int: ...
    @property
    def MinHarmonicNumber(self) -> int: ...
    @MinHarmonicNumber.setter
    def MinHarmonicNumber(self, value: int) -> int: ...


class IHighpassFilterMeasurement(typing.Protocol):
    @property
    def HighpassFilterFrequency(self) -> IDoubleSetting: ...
    @property
    def HighpassFilterType(self) -> MeasurementHighpassFilterType: ...
    @HighpassFilterType.setter
    def HighpassFilterType(self, value: MeasurementHighpassFilterType) -> MeasurementHighpassFilterType: ...


class IHspAudioGatewayATCommandStep(IATCommandStep, typing.Protocol):
    pass


class IHspAudioGatewayATCommandStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IHspAudioGatewayATCommandStep: ...
    @abc.abstractmethod
    def Add(self) -> IHspAudioGatewayATCommandStep: ...


class IHspAudioGatewayStep(ISequenceStep, typing.Protocol):
    @property
    def Command(self) -> BluetoothHspAgCommand: ...
    @Command.setter
    def Command(self, value: BluetoothHspAgCommand) -> BluetoothHspAgCommand: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...


class IHspAudioGatewayStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IHspAudioGatewayStep: ...
    @abc.abstractmethod
    def Add(self) -> IHspAudioGatewayStep: ...


class IHspHeadsetATCommandStep(IATCommandStep, typing.Protocol):
    pass


class IHspHeadsetATCommandStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IHspHeadsetATCommandStep: ...
    @abc.abstractmethod
    def Add(self) -> IHspHeadsetATCommandStep: ...


class IHspHeadsetStep(ISequenceStep, typing.Protocol):
    @property
    def Command(self) -> BluetoothHspHsCommand: ...
    @Command.setter
    def Command(self, value: BluetoothHspHsCommand) -> BluetoothHspHsCommand: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...


class IHspHeadsetStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IHspHeadsetStep: ...
    @abc.abstractmethod
    def Add(self) -> IHspHeadsetStep: ...


class IIec60118ImdFrequencySweepGenerator(IGenerator, typing.Protocol):
    @property
    def Split(self) -> bool: ...
    @Split.setter
    def Split(self, value: bool) -> bool: ...
    @property
    def StartFrequency1(self) -> IDoubleReadOnlySetting: ...
    @property
    def StartFrequency2(self) -> IDoubleSetting: ...
    @property
    def StopFrequency1(self) -> IDoubleReadOnlySetting: ...
    @property
    def StopFrequency2(self) -> IDoubleSetting: ...
    @property
    def SweepParameters(self) -> IFrequencySweepParameters: ...


class IIec60118ImdFrequencySweepMeasurement(IBatchMeasurementWithAppend, typing.Protocol):
    @property
    def DifferenceFrequencyDistortion(self) -> IDifferenceFrequencyDistortionXyGraph: ...
    @property
    def Generator(self) -> IIec60118ImdFrequencySweepGenerator: ...
    @property
    def SettlingParams(self) -> IIec60118ImdFrequencySweepSettlingParametersCollection: ...
    @property
    def TotalDifferenceFrequencyDistortion(self) -> IXYGraph: ...


class IIec60118ImdFrequencySweepSettlingParametersCollection(typing.Protocol):
    @property
    def TotalFrequencyDistortionSettlingParams(self) -> ISettlingParameters: ...


class IIMDFrequencySweepGenerator(IGenerator, typing.Protocol):
    @property
    def Frequency1(self) -> IDoubleSetting: ...
    @property
    def Frequency2(self) -> IDoubleSetting: ...
    @property
    def ModAmplitudeRatio(self) -> ModGeneratorLevelRatio: ...
    @ModAmplitudeRatio.setter
    def ModAmplitudeRatio(self, value: ModGeneratorLevelRatio) -> ModGeneratorLevelRatio: ...
    @property
    def SmpteAmplitudeRatio(self) -> SmpteGeneratorLevelRatio: ...
    @SmpteAmplitudeRatio.setter
    def SmpteAmplitudeRatio(self, value: SmpteGeneratorLevelRatio) -> SmpteGeneratorLevelRatio: ...
    @property
    def Split(self) -> bool: ...
    @Split.setter
    def Split(self, value: bool) -> bool: ...
    @property
    def StartFrequency(self) -> IDoubleSetting: ...
    @property
    def StopFrequency(self) -> IDoubleSetting: ...
    @property
    def SweepParameters(self) -> IFrequencySweepParameters: ...
    @property
    def SweepType(self) -> ImdFrequencySweepType: ...
    @SweepType.setter
    def SweepType(self, value: ImdFrequencySweepType) -> ImdFrequencySweepType: ...


class IImdFrequencySweepMeasurement(ISteppedSweepMeasurement, typing.Protocol):
    @property
    def Generator(self) -> IIMDFrequencySweepGenerator: ...
    @property
    def ImdRatio(self) -> IXYGraph: ...
    @property
    def ImdType(self) -> IMDType: ...
    @ImdType.setter
    def ImdType(self, value: IMDType) -> IMDType: ...
    @property
    def MeasurementMode(self) -> IMDMode: ...
    @MeasurementMode.setter
    def MeasurementMode(self, value: IMDMode) -> IMDMode: ...
    @property
    def Settling(self) -> IImdFrequencySweepSettlingParametersCollection: ...


class IImdFrequencySweepSettlingParametersCollection(typing.Protocol):
    @property
    def ImdRatioSettlingParams(self) -> ISettlingParameters: ...


class IImdGeneratorSettings(IGeneratorChannelAssignments, typing.Protocol):
    @property
    def Frequency1(self) -> IDoubleSetting: ...
    @property
    def Frequency1ToFrequency2AmplitudeRatio(self) -> float: ...
    @Frequency1ToFrequency2AmplitudeRatio.setter
    def Frequency1ToFrequency2AmplitudeRatio(self, value: float) -> float: ...
    @property
    def Frequency2(self) -> IDoubleSetting: ...
    @property
    def SignalType(self) -> ImdGeneratorSignalType: ...
    @SignalType.setter
    def SignalType(self, value: ImdGeneratorSignalType) -> ImdGeneratorSignalType: ...
    @property
    def Split(self) -> bool: ...
    @Split.setter
    def Split(self, value: bool) -> bool: ...


class IImdLevelSweepMeasurement(ISteppedSweepMeasurement, typing.Protocol):
    @property
    def Generator(self) -> IIMDSteppedLevelGenerator: ...
    @property
    def ImdRatioVsLevel(self) -> IXYGraph: ...
    @property
    def ImdRatioVsMeasuredLevel(self) -> IXYGraph: ...
    @property
    def ImdType(self) -> IMDType: ...
    @ImdType.setter
    def ImdType(self, value: IMDType) -> IMDType: ...
    @property
    def MeasurementMode(self) -> IMDMode: ...
    @MeasurementMode.setter
    def MeasurementMode(self, value: IMDMode) -> IMDMode: ...
    @property
    def Settling(self) -> IImdSteppedLevelSettlingParametersCollection: ...


class IImdMeasurement(IMeasurement, typing.Protocol):
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def DistortionProductRatio(self) -> IVerticalBarGraph: ...
    @property
    def Generator(self) -> IImdMeasurementGenerator: ...
    @property
    def ImdRatio(self) -> IMeterGraph: ...
    @property
    def ImdType(self) -> IMDType: ...
    @ImdType.setter
    def ImdType(self, value: IMDType) -> IMDType: ...
    @property
    def MeasurementMode(self) -> IMDMode: ...
    @MeasurementMode.setter
    def MeasurementMode(self, value: IMDMode) -> IMDMode: ...
    @property
    def Settling(self) -> IImdSettlingParametersCollection: ...


class IImdMeasurementGenerator(IArbitraryGenerator, typing.Protocol):
    @property
    def Frequency1(self) -> IDoubleSetting: ...
    @property
    def Frequency2(self) -> IDoubleSetting: ...
    @property
    def ModAmplitudeRatio(self) -> ModGeneratorLevelRatio: ...
    @ModAmplitudeRatio.setter
    def ModAmplitudeRatio(self, value: ModGeneratorLevelRatio) -> ModGeneratorLevelRatio: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def SmpteAmplitudeRatio(self) -> SmpteGeneratorLevelRatio: ...
    @SmpteAmplitudeRatio.setter
    def SmpteAmplitudeRatio(self, value: SmpteGeneratorLevelRatio) -> SmpteGeneratorLevelRatio: ...
    @property
    def Split(self) -> bool: ...
    @Split.setter
    def Split(self, value: bool) -> bool: ...
    @property
    def Type(self) -> ImdGeneratorType: ...


class IImdSettlingParametersCollection(typing.Protocol):
    @property
    def Imd(self) -> ISettlingParameters: ...


class IIMDSteppedLevelGenerator(typing.Protocol):
    @property
    def AmplitudeStart(self) -> IDoubleSetting: ...
    @property
    def AmplitudeStop(self) -> IDoubleSetting: ...
    @property
    def Frequency1(self) -> IDoubleSetting: ...
    @property
    def Frequency2(self) -> IDoubleSetting: ...
    @property
    def ModAmplitudeRatio(self) -> ModGeneratorLevelRatio: ...
    @ModAmplitudeRatio.setter
    def ModAmplitudeRatio(self, value: ModGeneratorLevelRatio) -> ModGeneratorLevelRatio: ...
    @property
    def SmpteAmplitudeRatio(self) -> SmpteGeneratorLevelRatio: ...
    @SmpteAmplitudeRatio.setter
    def SmpteAmplitudeRatio(self, value: SmpteGeneratorLevelRatio) -> SmpteGeneratorLevelRatio: ...
    @property
    def Split(self) -> bool: ...
    @Split.setter
    def Split(self, value: bool) -> bool: ...
    @property
    def SweepParameters(self) -> ISweepParameters: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class IImdSteppedLevelSettlingParametersCollection(typing.Protocol):
    @property
    def ImdRatioSettlingParams(self) -> ISettlingParameters: ...
    @property
    def MeasuredLevelSettlingParams(self) -> ISettlingParameters: ...


class IImpedanceThieleSmallMeasurement(IContinuousSweepMeasurementBase, IHighpassFilterMeasurement, ILowpassFilterMeasurement, INoiseWeightingMeasurement, IFastFrequencyResponseSettings, typing.Protocol):
    @property
    def AddedMass(self) -> IDoubleSetting: ...
    @property
    def AmplifierCorrectionCurve(self) -> str: ...
    @AmplifierCorrectionCurve.setter
    def AmplifierCorrectionCurve(self, value: str) -> str: ...
    @property
    def AmplifierCorrectionCurves(self) -> Array_1[str]: ...
    @property
    def AmplifierGain(self) -> IDoubleSetting: ...
    @property
    def CalculateTsParameters(self) -> bool: ...
    @CalculateTsParameters.setter
    def CalculateTsParameters(self, value: bool) -> bool: ...
    @property
    def DriverDiameter(self) -> IDoubleSetting: ...
    @property
    def Drivers(self) -> IDriverCollection: ...
    @property
    def ExternalSenseResistance(self) -> float: ...
    @ExternalSenseResistance.setter
    def ExternalSenseResistance(self, value: float) -> float: ...
    @property
    def ExternalSenseResistorChannel(self) -> InputChannelIndex: ...
    @property
    def FitMaximumFrequency(self) -> IDoubleSetting: ...
    @property
    def FitMinimumFrequency(self) -> IDoubleSetting: ...
    @property
    def FitRangeType(self) -> CurveFitRangeType: ...
    @FitRangeType.setter
    def FitRangeType(self, value: CurveFitRangeType) -> CurveFitRangeType: ...
    @property
    def FixedDcr(self) -> float: ...
    @FixedDcr.setter
    def FixedDcr(self, value: float) -> float: ...
    @property
    def Imaginary(self) -> IImpedanceXYGraph: ...
    @property
    def Magnitude(self) -> IImpedanceXYGraph: ...
    @property
    def Measure(self) -> ImpedanceMeasurementType: ...
    @Measure.setter
    def Measure(self, value: ImpedanceMeasurementType) -> ImpedanceMeasurementType: ...
    @property
    def Mmd(self) -> IDoubleSetting: ...
    @property
    def ModelFit(self) -> ThieleSmallModelFit: ...
    @ModelFit.setter
    def ModelFit(self, value: ThieleSmallModelFit) -> ThieleSmallModelFit: ...
    @property
    def Phase(self) -> IImpedanceXYGraph: ...
    @property
    def PrimaryChannel(self) -> InputChannelIndex: ...
    @PrimaryChannel.setter
    def PrimaryChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def Real(self) -> IImpedanceXYGraph: ...
    @property
    def ReType(self) -> ThieleSmallReType: ...
    @ReType.setter
    def ReType(self, value: ThieleSmallReType) -> ThieleSmallReType: ...
    @property
    def TestConfiguration(self) -> ImpedanceConfiguration: ...
    @TestConfiguration.setter
    def TestConfiguration(self, value: ImpedanceConfiguration) -> ImpedanceConfiguration: ...
    @property
    def ThieleSmall(self) -> IThieleSmallResult: ...
    @property
    def ThieleSmallMode(self) -> ThieleSmallMeasurementMode: ...
    @ThieleSmallMode.setter
    def ThieleSmallMode(self, value: ThieleSmallMeasurementMode) -> ThieleSmallMeasurementMode: ...
    @property
    def VdrvrChannel(self) -> InputChannelIndex: ...
    @VdrvrChannel.setter
    def VdrvrChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def Volume(self) -> IDoubleSetting: ...
    @property
    def VsenseChannel(self) -> InputChannelIndex: ...
    @VsenseChannel.setter
    def VsenseChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @abc.abstractmethod
    def ExportAmplifierCorrectionCurve(self, fileName: str, xUnit: str, gainUnit: str, phaseUnit: str) -> None: ...
    @abc.abstractmethod
    def GetChannelName(self, ch: InputChannelIndex) -> str: ...
    @abc.abstractmethod
    def LoadAmplifierCorrectionCurveFromFile(self, fileName: str, replaceIfExists: bool) -> None: ...
    @abc.abstractmethod
    def MeasureAddedMassKnownVolume(self) -> None: ...


class IImpedanceXYGraph(IXYGraph, typing.Protocol):
    @property
    def Display(self) -> ThieleSmallPlottedDataType: ...
    @Display.setter
    def Display(self, value: ThieleSmallPlottedDataType) -> ThieleSmallPlottedDataType: ...


class IImportAmplifierCorrectionCurveStep(ISequenceStep, typing.Protocol):
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Filename(self) -> str: ...
    @Filename.setter
    def Filename(self, value: str) -> str: ...


class IImportAmplifierCorrectionCurveStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IImportAmplifierCorrectionCurveStep: ...
    @abc.abstractmethod
    def Add(self) -> IImportAmplifierCorrectionCurveStep: ...


class IImportGeneratorEqCurveStep(ISequenceStep, typing.Protocol):
    @property
    def ChannelForAbsoluteEq(self) -> InputChannelIndex: ...
    @ChannelForAbsoluteEq.setter
    def ChannelForAbsoluteEq(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def EQTableType(self) -> EQType: ...
    @EQTableType.setter
    def EQTableType(self, value: EQType) -> EQType: ...
    @property
    def Filename(self) -> str: ...
    @Filename.setter
    def Filename(self, value: str) -> str: ...
    @property
    def Invert(self) -> bool: ...
    @Invert.setter
    def Invert(self, value: bool) -> bool: ...
    @property
    def ResultNameForAbsoluteEq(self) -> str: ...
    @ResultNameForAbsoluteEq.setter
    def ResultNameForAbsoluteEq(self, value: str) -> str: ...


class IImportGeneratorEqCurveStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IImportGeneratorEqCurveStep: ...
    @abc.abstractmethod
    def Add(self) -> IImportGeneratorEqCurveStep: ...


class IImportLimitsDataStep(ISequenceStep, typing.Protocol):
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def FileName(self) -> str: ...
    @FileName.setter
    def FileName(self, value: str) -> str: ...
    @property
    def ImportToLowerLimit(self) -> bool: ...
    @ImportToLowerLimit.setter
    def ImportToLowerLimit(self, value: bool) -> bool: ...
    @property
    def ImportToUpperLimit(self) -> bool: ...
    @ImportToUpperLimit.setter
    def ImportToUpperLimit(self, value: bool) -> bool: ...
    @property
    def InvertLowerLimitOffsetCurve(self) -> bool: ...
    @InvertLowerLimitOffsetCurve.setter
    def InvertLowerLimitOffsetCurve(self, value: bool) -> bool: ...
    @property
    def InvertUpperLimitOffsetCurve(self) -> bool: ...
    @InvertUpperLimitOffsetCurve.setter
    def InvertUpperLimitOffsetCurve(self, value: bool) -> bool: ...
    @property
    def LimitOffsetCurves(self) -> Array_1[str]: ...
    @property
    def LowerLimitOffsetCurve(self) -> str: ...
    @LowerLimitOffsetCurve.setter
    def LowerLimitOffsetCurve(self, value: str) -> str: ...
    @property
    def ResultName(self) -> str: ...
    @ResultName.setter
    def ResultName(self, value: str) -> str: ...
    @property
    def ResultNames(self) -> Array_1[str]: ...
    @property
    def TrackFirst(self) -> bool: ...
    @TrackFirst.setter
    def TrackFirst(self, value: bool) -> bool: ...
    @property
    def UpperLimitOffsetCurve(self) -> str: ...
    @UpperLimitOffsetCurve.setter
    def UpperLimitOffsetCurve(self, value: str) -> str: ...
    @abc.abstractmethod
    def CreateLimitOffsetCurve(self, curveName: str, xUnit: str, xValues: Array_1[float], yUnit: str, yValues: Array_1[float], replaceIfExists: bool) -> None: ...
    @abc.abstractmethod
    def LoadLimitOffsetCurve(self, fileName: str, replaceIfExists: bool) -> None: ...


class IImportLimitsDataStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IImportLimitsDataStep: ...
    @abc.abstractmethod
    def Add(self) -> IImportLimitsDataStep: ...


class IImportOutputEqCurveStep(ISequenceStep, typing.Protocol):
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def EqNames(self) -> Array_1[str]: ...
    @property
    def Filename(self) -> str: ...
    @Filename.setter
    def Filename(self, value: str) -> str: ...
    @property
    def Invert(self) -> bool: ...
    @Invert.setter
    def Invert(self, value: bool) -> bool: ...
    @property
    def ProjectItemName(self) -> str: ...
    @ProjectItemName.setter
    def ProjectItemName(self, value: str) -> str: ...
    @property
    def Selection(self) -> EqStepSelection: ...
    @Selection.setter
    def Selection(self, value: EqStepSelection) -> EqStepSelection: ...
    # Skipped LoadEqFromFile due to it being static, abstract and generic.

    LoadEqFromFile : LoadEqFromFile_MethodGroup
    class LoadEqFromFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, invertData: bool, replaceIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, invertData: bool, replaceIfExists: bool, renameIfInverted: bool) -> None:...



class IImportOutputEqCurveStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IImportOutputEqCurveStep: ...
    @abc.abstractmethod
    def Add(self) -> IImportOutputEqCurveStep: ...


class IImportResultDataStep(ISequenceStep, typing.Protocol):
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def FileName(self) -> str: ...
    @FileName.setter
    def FileName(self, value: str) -> str: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def ResultName(self) -> str: ...
    @ResultName.setter
    def ResultName(self, value: str) -> str: ...
    @property
    def ResultNames(self) -> Array_1[str]: ...


class IImportResultDataStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IImportResultDataStep: ...
    @abc.abstractmethod
    def Add(self) -> IImportResultDataStep: ...


class IImpulseResponseGraph(IWaveformDataGraph, ITimeDomainXYGraph, typing.Protocol):
    pass


class IImpulseResponseWithWindowGraph(IWaveformDataGraph, ITimeDomainWithWindowXYGraph, typing.Protocol):
    pass


class IInputConnector(typing.Protocol):
    @property
    def IsAnalog(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Type(self) -> InputConnectorType: ...
    @Type.setter
    def Type(self, value: InputConnectorType) -> InputConnectorType: ...


class IInputEqSettings(IEqSettings, typing.Protocol):
    @property
    def EnabledOnChannels(self) -> Array_1[bool]: ...
    @abc.abstractmethod
    def EnableOnChannel(self, ch: int, value: bool) -> None: ...


class IInputEqSettingsCollection(typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IInputEqSettings: ...
    @property
    def Item(self) -> IInputEqSettings: ...
    @property
    def TrackFirst(self) -> bool: ...
    @TrackFirst.setter
    def TrackFirst(self, value: bool) -> bool: ...


class IInputStep(IMessageStepBase, typing.Protocol):
    @property
    def FailButtonLabel(self) -> str: ...
    @FailButtonLabel.setter
    def FailButtonLabel(self, value: str) -> str: ...
    @property
    def InputType(self) -> InputStepType: ...
    @InputType.setter
    def InputType(self, value: InputStepType) -> InputStepType: ...
    @property
    def PassButtonLabel(self) -> str: ...
    @PassButtonLabel.setter
    def PassButtonLabel(self, value: str) -> str: ...
    @property
    def UserResponse(self) -> str: ...


class IInputStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IInputStep: ...
    @abc.abstractmethod
    def Add(self) -> IInputStep: ...


class IInputSwitcherConfigurationBaseCollection(typing.Protocol):
    @abc.abstractmethod
    def GetChannelA(self, address: SwitcherAddress) -> SwitcherChannelSelection: ...
    @abc.abstractmethod
    def GetChannelB(self, address: SwitcherAddress) -> SwitcherChannelSelection: ...
    @abc.abstractmethod
    def Open(self, fileName: str) -> None: ...
    @abc.abstractmethod
    def Save(self, fileName: str) -> None: ...
    @abc.abstractmethod
    def SetChannelA(self, address: SwitcherAddress, channelSelection: SwitcherChannelSelection) -> None: ...
    @abc.abstractmethod
    def SetChannelB(self, address: SwitcherAddress, channelSelection: SwitcherChannelSelection) -> None: ...


class IInputSwitcherConfigurationCollection(IInputSwitcherConfigurationBaseCollection, typing.Protocol):
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...


class IInstrumentModule(typing.Protocol):
    @property
    def BoardName(self) -> str: ...
    @property
    def Info(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Signature(self) -> str: ...
    @property
    def SwVersionMajorRevision(self) -> int: ...
    @property
    def SwVersionMinorRevision(self) -> int: ...


class IInstrumentModuleCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IInstrumentModule: ...


class IInterchannelPhaseGenerator(ISplitSineWithArbGenerator, typing.Protocol):
    pass


class IInterchannelPhaseMeasurement(IMeasurement, typing.Protocol):
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def Generator(self) -> IInterchannelPhaseGenerator: ...
    @property
    def MeterRange(self) -> PhaseMeterRange: ...
    @MeterRange.setter
    def MeterRange(self, value: PhaseMeterRange) -> PhaseMeterRange: ...
    @property
    def Phase(self) -> IMeterGraph: ...
    @property
    def ReferenceChannel(self) -> InputChannelIndex: ...
    @ReferenceChannel.setter
    def ReferenceChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def Settling(self) -> IInterchannelPhaseSettlingParametersCollection: ...


class IInterchannelPhaseSettlingParametersCollection(typing.Protocol):
    @property
    def Phase(self) -> ISettlingParameters: ...


class IJitterFrequencySweepGenerator(IBatchSquareWithArbGenerator, ISineBurstGenerator, typing.Protocol):
    @property
    def JitterGeneratorSettings(self) -> IJitterGeneratorSettings: ...
    @property
    def NoiseShape(self) -> NoiseShape: ...
    @NoiseShape.setter
    def NoiseShape(self, value: NoiseShape) -> NoiseShape: ...
    @property
    def StartFrequency(self) -> IDoubleSetting: ...
    @property
    def StopFrequency(self) -> IDoubleSetting: ...
    @property
    def SweepParameters(self) -> ISweepParameters: ...


class IJitterFrequencySweepMeasurement(ISteppedSweepMeasurement, IHighpassFilterMeasurement, ILowpassFilterMeasurement, INoiseWeightingMeasurement, typing.Protocol):
    @property
    def AvergeJitterLevel(self) -> IXYGraph: ...
    @property
    def Deviation(self) -> IDeviationMeterGraph: ...
    @property
    def DistortionProductLevel(self) -> IHarmonicXYGraph: ...
    @property
    def DistortionProductRatio(self) -> IHarmonicXYGraph: ...
    @property
    def Gain(self) -> IXYGraph: ...
    @property
    def Generator(self) -> IJitterFrequencySweepGenerator: ...
    @property
    def HighpassFilterFrequencyEnabled(self) -> bool: ...
    @HighpassFilterFrequencyEnabled.setter
    def HighpassFilterFrequencyEnabled(self, value: bool) -> bool: ...
    @property
    def Level(self) -> IXYGraph: ...
    @property
    def LowpassFilterFrequencyEnabled(self) -> bool: ...
    @LowpassFilterFrequencyEnabled.setter
    def LowpassFilterFrequencyEnabled(self, value: bool) -> bool: ...
    @property
    def NestedSweep(self) -> INestedSweepSettings: ...
    @property
    def NoiseWeightingEnabled(self) -> bool: ...
    @NoiseWeightingEnabled.setter
    def NoiseWeightingEnabled(self, value: bool) -> bool: ...
    @property
    def PeakLevel(self) -> IXYGraph: ...
    @property
    def Phase(self) -> IXYGraph: ...
    @property
    def PhaseReferenceChannel(self) -> InputChannelIndex: ...
    @PhaseReferenceChannel.setter
    def PhaseReferenceChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def RelativeLevel(self) -> IRelativeLevelXYGraph: ...
    @property
    def Settling(self) -> IJitterFrequencySweepSettlingParametersCollection: ...
    @property
    def Sinad(self) -> IXYGraph: ...
    @property
    def ThdLevel(self) -> IXYGraph: ...
    @property
    def ThdNLevel(self) -> IXYGraph: ...
    @property
    def ThdNRatio(self) -> IXYGraph: ...
    @property
    def ThdRatio(self) -> IXYGraph: ...


class IJitterFrequencySweepSettlingParametersCollection(typing.Protocol):
    @property
    def Level(self) -> ISettlingParameters: ...
    @property
    def Phase(self) -> ISettlingParameters: ...
    @property
    def ThdN(self) -> ISettlingParameters: ...


class IJitterGeneratorSettings(typing.Protocol):
    @property
    def ApplyTo(self) -> JitterApplication: ...
    @ApplyTo.setter
    def ApplyTo(self, value: JitterApplication) -> JitterApplication: ...
    @property
    def DefineUIBy(self) -> RefSyncUI: ...
    @DefineUIBy.setter
    def DefineUIBy(self, value: RefSyncUI) -> RefSyncUI: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Frequency(self) -> IDoubleSetting: ...
    @property
    def OutputEq(self) -> IEqSettings: ...
    @property
    def PeakLevelSec(self) -> IDoubleSetting: ...
    @property
    def PeakLevelUi(self) -> IDoubleSetting: ...
    @property
    def PeakLevelUnit(self) -> JitterGeneratorOutputSignal: ...
    @PeakLevelUnit.setter
    def PeakLevelUnit(self, value: JitterGeneratorOutputSignal) -> JitterGeneratorOutputSignal: ...
    @property
    def Waveform(self) -> JitterSource: ...
    @Waveform.setter
    def Waveform(self, value: JitterSource) -> JitterSource: ...
    @abc.abstractmethod
    def GetPeakLevelUI(self, refSync: RefSyncUI, unit: str = ...) -> float: ...


class IJitterLevelSweepGenerator(IBatchSquareWithArbGenerator, typing.Protocol):
    @property
    def JitterGeneratorSettings(self) -> IJitterGeneratorSettings: ...
    @property
    def StartPeakLevel(self) -> IDoubleSetting: ...
    @property
    def StopPeakLevel(self) -> IDoubleSetting: ...
    @property
    def SweepParameters(self) -> ISweepParameters: ...


class IJitterLevelSweepMeasurement(ISteppedSweepMeasurement, IHighpassFilterMeasurement, ILowpassFilterMeasurement, INoiseWeightingMeasurement, typing.Protocol):
    @property
    def AvergeJitterLevel(self) -> IXYGraph: ...
    @property
    def DistortionProductLevel(self) -> IHarmonicXYGraph: ...
    @property
    def DistortionProductRatio(self) -> IHarmonicXYGraph: ...
    @property
    def FilterTuningMode(self) -> FilterTuningType: ...
    @FilterTuningMode.setter
    def FilterTuningMode(self, value: FilterTuningType) -> FilterTuningType: ...
    @property
    def Gain(self) -> IXYGraph: ...
    @property
    def Generator(self) -> IJitterLevelSweepGenerator: ...
    @property
    def HighpassFilterFrequencyEnabled(self) -> bool: ...
    @HighpassFilterFrequencyEnabled.setter
    def HighpassFilterFrequencyEnabled(self, value: bool) -> bool: ...
    @property
    def Level(self) -> IXYGraph: ...
    @property
    def Linearity(self) -> ILinearityXYGraph: ...
    @property
    def LowpassFilterFrequencyEnabled(self) -> bool: ...
    @LowpassFilterFrequencyEnabled.setter
    def LowpassFilterFrequencyEnabled(self, value: bool) -> bool: ...
    @property
    def NestedSweep(self) -> INestedSweepSettings: ...
    @property
    def NoiseWeightingEnabled(self) -> bool: ...
    @NoiseWeightingEnabled.setter
    def NoiseWeightingEnabled(self, value: bool) -> bool: ...
    @property
    def NotchFilterFrequency(self) -> IDoubleSetting: ...
    @property
    def NotchTuningMode(self) -> FilterTuningType: ...
    @NotchTuningMode.setter
    def NotchTuningMode(self, value: FilterTuningType) -> FilterTuningType: ...
    @property
    def PeakLevel(self) -> IXYGraph: ...
    @property
    def Settling(self) -> IJitterLevelSweepSettlingParametersCollection: ...
    @property
    def Sinad(self) -> IXYGraph: ...
    @property
    def ThdLevel(self) -> IXYGraph: ...
    @property
    def ThdLevelVsMeasuredLevel(self) -> IXYGraph: ...
    @property
    def ThdNLevel(self) -> IXYGraph: ...
    @property
    def ThdNLevelVsMeasuredLevel(self) -> IXYGraph: ...
    @property
    def ThdNRatio(self) -> IXYGraph: ...
    @property
    def ThdNRatioVsMeasuredLevel(self) -> IXYGraph: ...
    @property
    def ThdRatio(self) -> IXYGraph: ...
    @property
    def ThdRatioVsMeasuredLevel(self) -> IXYGraph: ...


class IJitterLevelSweepSettlingParametersCollection(typing.Protocol):
    @property
    def Level(self) -> ISettlingParameters: ...
    @property
    def ThdN(self) -> ISettlingParameters: ...


class ILevelAndGainGenerator(ISquareWithArbGenerator, typing.Protocol):
    pass


class ILevelAndGainMeasurement(IMeasurement, ILowpassFilterMeasurement, typing.Protocol):
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def AverageJitterLevel(self) -> IMeterGraph: ...
    @property
    def Gain(self) -> IMeterGraph: ...
    @property
    def Generator(self) -> ILevelAndGainGenerator: ...
    @property
    def Level(self) -> IMeterGraph: ...
    @property
    def LowpassFilterFrequencyEnabled(self) -> bool: ...
    @LowpassFilterFrequencyEnabled.setter
    def LowpassFilterFrequencyEnabled(self, value: bool) -> bool: ...
    @property
    def PeakLevel(self) -> IMeterGraph: ...
    @property
    def RmsLevelAcPlusDc(self) -> IMeterGraph: ...
    @property
    def Settling(self) -> ILevelAndGainSettlingParametersCollection: ...


class ILevelAndGainSettlingParametersCollection(typing.Protocol):
    @property
    def Level(self) -> ISettlingParameters: ...
    @property
    def RmsLevelAcPlusDc(self) -> ISettlingParameters: ...


class ILevelRatioGenerator(ISineWithArbGenerator, ISplitSineGenerator, typing.Protocol):
    pass


class ILevelRatioMeasurement(IMeasurement, typing.Protocol):
    @property
    def Generator(self) -> ILevelRatioGenerator: ...
    @property
    def Ratio(self) -> IMeterGraph: ...
    @property
    def ReferenceChannel(self) -> InputChannelIndex: ...
    @ReferenceChannel.setter
    def ReferenceChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def Settling(self) -> ILevelRatioSettlingParametersCollection: ...


class ILevelRatioSettlingParametersCollection(typing.Protocol):
    @property
    def LevelRatio(self) -> ISettlingParameters: ...


class ILevels(typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Offset(self) -> IGeneratorChannelLevels: ...
    @property
    def OffsetUnit(self) -> str: ...
    @OffsetUnit.setter
    def OffsetUnit(self, value: str) -> str: ...
    @property
    def OffsetUnitList(self) -> Array_1[str]: ...
    @property
    def Pilot(self) -> IGeneratorChannelLevels: ...
    @property
    def Sweep(self) -> IGeneratorChannelLevels: ...
    @property
    def TrackFirstChannel(self) -> bool: ...
    @TrackFirstChannel.setter
    def TrackFirstChannel(self, value: bool) -> bool: ...
    @property
    def Unit(self) -> str: ...
    @Unit.setter
    def Unit(self, value: str) -> str: ...
    @property
    def UnitList(self) -> Array_1[str]: ...
    # Skipped GetOffsetText due to it being static, abstract and generic.

    GetOffsetText : GetOffsetText_MethodGroup
    class GetOffsetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> str:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, unit: str) -> str:...

    # Skipped GetOffsetValue due to it being static, abstract and generic.

    GetOffsetValue : GetOffsetValue_MethodGroup
    class GetOffsetValue_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> float:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, unit: str) -> float:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> str:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, unit: str) -> str:...

    # Skipped GetValue due to it being static, abstract and generic.

    GetValue : GetValue_MethodGroup
    class GetValue_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> float:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, unit: str) -> float:...

    # Skipped SetOffsetValue due to it being static, abstract and generic.

    SetOffsetValue : SetOffsetValue_MethodGroup
    class SetOffsetValue_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, offset: float) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, offset: str) -> None:...

    # Skipped SetValue due to it being static, abstract and generic.

    SetValue : SetValue_MethodGroup
    class SetValue_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, level: float) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, level: str) -> None:...



class ILinearityXYGraph(IXYGraph, typing.Protocol):
    @property
    def DataMode(self) -> RelativeDataMode: ...
    @DataMode.setter
    def DataMode(self, value: RelativeDataMode) -> RelativeDataMode: ...
    @property
    def MaxLimit(self) -> IDoubleSetting: ...
    @property
    def MinLimit(self) -> IDoubleSetting: ...
    @property
    def RelativeLevel(self) -> IDoubleSetting: ...


class ILoudspeakerProductionTestMeasurement(IContinuousSweepMeasurementWithAdditionalAcqTimeBase, IFastFrequencyThdNSettings, IHighpassFilterMeasurement, ILowpassFilterMeasurement, INoiseWeightingMeasurement, typing.Protocol):
    @property
    def AcquiredWaveform(self) -> IAcquiredWaveformGraph: ...
    @property
    def AmplifierCorrectionCurve(self) -> str: ...
    @AmplifierCorrectionCurve.setter
    def AmplifierCorrectionCurve(self, value: str) -> str: ...
    @property
    def AmplifierCorrectionCurves(self) -> Array_1[str]: ...
    @property
    def AmplifierGain(self) -> IDoubleSetting: ...
    @property
    def CalculateTsParameters(self) -> bool: ...
    @CalculateTsParameters.setter
    def CalculateTsParameters(self, value: bool) -> bool: ...
    @property
    def Correlation(self) -> IXYGraph: ...
    @property
    def DistortionProductLevel(self) -> IHarmonicXYGraph: ...
    @property
    def DistortionProductRatio(self) -> INormalizedHarmonicRatioXYGraph: ...
    @property
    def Drivers(self) -> IDriverCollection: ...
    @property
    def ExternalSenseResistance(self) -> float: ...
    @ExternalSenseResistance.setter
    def ExternalSenseResistance(self, value: float) -> float: ...
    @property
    def ExternalSenseResistorChannel(self) -> InputChannelIndex: ...
    @property
    def FitMaximumFrequency(self) -> IDoubleSetting: ...
    @property
    def FitMinimumFrequency(self) -> IDoubleSetting: ...
    @property
    def FitRangeType(self) -> CurveFitRangeType: ...
    @FitRangeType.setter
    def FitRangeType(self, value: CurveFitRangeType) -> CurveFitRangeType: ...
    @property
    def HOHD(self) -> IHighOrderHarmonicDistortionXyGraph: ...
    @property
    def ImpedanceMagnitude(self) -> IImpedanceXYGraph: ...
    @property
    def ImpedancePhase(self) -> IImpedanceXYGraph: ...
    @property
    def ImpulseResponse(self) -> IImpulseResponseGraph: ...
    @property
    def Level(self) -> IXYGraph: ...
    @property
    def LevelAndDistortion(self) -> IXYDistortionGraph: ...
    @property
    def Measure(self) -> LoudspeakerTestMeasurementType: ...
    @Measure.setter
    def Measure(self, value: LoudspeakerTestMeasurementType) -> LoudspeakerTestMeasurementType: ...
    @property
    def ModelFit(self) -> ThieleSmallModelFit: ...
    @ModelFit.setter
    def ModelFit(self, value: ThieleSmallModelFit) -> ThieleSmallModelFit: ...
    @property
    def Phase(self) -> IPhaseXYGraph: ...
    @property
    def PrimaryChannel(self) -> InputChannelIndex: ...
    @PrimaryChannel.setter
    def PrimaryChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def ReferenceWaveform(self) -> IXYGraph: ...
    @property
    def RelativeLevel(self) -> IRelativeLevelXYGraph: ...
    @property
    def RubAndBuzz(self) -> IRubAndBuzzGraph: ...
    @property
    def RubAndBuzzCrestFactor(self) -> IRubAndBuzzGraph: ...
    @property
    def RubAndBuzzLoudness(self) -> IXYGraph: ...
    @property
    def RubAndBuzzPeakRatio(self) -> IRubAndBuzzGraph: ...
    @property
    def SoneTracResidualWaveform(self) -> ISoneTracResidualGraph: ...
    @property
    def SoneTracRubAndBuzz(self) -> ISoneTracRubAndBuzzGraph: ...
    @property
    def TestConfiguration(self) -> LoudspeakerTestConfiguration: ...
    @TestConfiguration.setter
    def TestConfiguration(self, value: LoudspeakerTestConfiguration) -> LoudspeakerTestConfiguration: ...
    @property
    def ThdLevel(self) -> IXYGraph: ...
    @property
    def ThdNLevel(self) -> IXYGraph: ...
    @property
    def ThdNRatio(self) -> IThdNRatioXyGraph: ...
    @property
    def ThdRatio(self) -> INormalizedDistortionRatioXYGraph: ...
    @property
    def ThieleSmall(self) -> IThieleSmallResult: ...
    @property
    def TimeWindow(self) -> IDoubleSetting: ...
    @property
    def VdrvrChannel(self) -> InputChannelIndex: ...
    @VdrvrChannel.setter
    def VdrvrChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def VsenseChannel(self) -> InputChannelIndex: ...
    @VsenseChannel.setter
    def VsenseChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @abc.abstractmethod
    def ExportAmplifierCorrectionCurve(self, fileName: str, xUnit: str, gainUnit: str, phaseUnit: str) -> None: ...
    @abc.abstractmethod
    def GetChannelName(self, ch: InputChannelIndex) -> str: ...
    @abc.abstractmethod
    def LoadAmplifierCorrectionCurveFromFile(self, fileName: str, replaceIfExists: bool) -> None: ...


class ILowpassFilterMeasurement(typing.Protocol):
    @property
    def LowpassFilterFrequency(self) -> IDoubleSetting: ...
    @property
    def LowpassFilterType(self) -> MeasurementLowpassFilterType: ...
    @LowpassFilterType.setter
    def LowpassFilterType(self, value: MeasurementLowpassFilterType) -> MeasurementLowpassFilterType: ...


class IMakeResultVisibleStep(ISequenceStep, typing.Protocol):
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def ResultName(self) -> str: ...
    @ResultName.setter
    def ResultName(self, value: str) -> str: ...
    @property
    def ResultNames(self) -> Array_1[str]: ...


class IMakeResultVisibleStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IMakeResultVisibleStep: ...
    @abc.abstractmethod
    def Add(self) -> IMakeResultVisibleStep: ...


class IMaxOutputBase(IBatchMeasurement, ILowpassFilterMeasurement, INoiseWeightingMeasurement, typing.Protocol):
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def GeneratorLevel(self) -> IMeterGraph: ...
    @property
    def GeneratorTolerance(self) -> IDoubleSetting: ...
    @property
    def Level(self) -> IMeterGraph: ...
    @property
    def LowpassFilterFrequencyEnabled(self) -> bool: ...
    @LowpassFilterFrequencyEnabled.setter
    def LowpassFilterFrequencyEnabled(self, value: bool) -> bool: ...
    @property
    def MaximumGeneratorAmplitude(self) -> IDoubleSetting: ...
    @property
    def MeasuredChannel(self) -> InputChannelIndex: ...
    @MeasuredChannel.setter
    def MeasuredChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def NoiseWeightingEnabled(self) -> bool: ...
    @NoiseWeightingEnabled.setter
    def NoiseWeightingEnabled(self, value: bool) -> bool: ...
    @property
    def RegulationSettings(self) -> ITargetChannelRegulationSettings: ...
    @property
    def RmsLevelAcPlusDc(self) -> IMeterGraph: ...
    @property
    def TargetThdN(self) -> IDoubleSetting: ...
    @property
    def ThdNLevel(self) -> IMeterGraph: ...
    @property
    def ThdNRatio(self) -> IMeterGraph: ...


class IMaxOutputBurstMeasurement(IMaxOutputBase, typing.Protocol):
    @property
    def Generator(self) -> IBurstGenerator: ...
    @property
    def HighpassFilterFrequency(self) -> IDoubleSetting: ...
    @property
    def HighpassFilterFrequencyEnabled(self) -> bool: ...
    @HighpassFilterFrequencyEnabled.setter
    def HighpassFilterFrequencyEnabled(self, value: bool) -> bool: ...
    @property
    def HighpassFilterType(self) -> MeasurementHighpassFilterType: ...
    @HighpassFilterType.setter
    def HighpassFilterType(self, value: MeasurementHighpassFilterType) -> MeasurementHighpassFilterType: ...


class IMaxOutputGenerator(ISplitSineGenerator, IBatchSineGenerator, typing.Protocol):
    @property
    def Type(self) -> SplitSineGeneratorType: ...


class IMaxOutputMeasurement(IMaxOutputBase, IHighpassFilterMeasurement, typing.Protocol):
    @property
    def Generator(self) -> IMaxOutputGenerator: ...
    @property
    def HighpassFilterFrequencyEnabled(self) -> bool: ...
    @HighpassFilterFrequencyEnabled.setter
    def HighpassFilterFrequencyEnabled(self, value: bool) -> bool: ...
    @property
    def Settling(self) -> IMaxOutputSettlingParametersCollection: ...


class IMaxOutputSettlingParametersCollection(typing.Protocol):
    @property
    def Level(self) -> ISettlingParameters: ...
    @property
    def RmsLevelAcPlusDc(self) -> ISettlingParameters: ...
    @property
    def ThdN(self) -> ISettlingParameters: ...


class ImdAnalysisType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    SmpteDin : ImdAnalysisType # 0
    Dfd : ImdAnalysisType # 1
    Ccif : ImdAnalysisType # 2
    Dim : ImdAnalysisType # 3


class IMDFrequencySweepGenerator:
    @property
    def Frequency1(self) -> DoubleSetting: ...
    @property
    def Frequency2(self) -> DoubleSetting: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def ModAmplitudeRatio(self) -> ModGeneratorLevelRatio: ...
    @ModAmplitudeRatio.setter
    def ModAmplitudeRatio(self, value: ModGeneratorLevelRatio) -> ModGeneratorLevelRatio: ...
    @property
    def SmpteAmplitudeRatio(self) -> SmpteGeneratorLevelRatio: ...
    @SmpteAmplitudeRatio.setter
    def SmpteAmplitudeRatio(self, value: SmpteGeneratorLevelRatio) -> SmpteGeneratorLevelRatio: ...
    @property
    def Split(self) -> bool: ...
    @Split.setter
    def Split(self, value: bool) -> bool: ...
    @property
    def StartFrequency(self) -> DoubleSetting: ...
    @property
    def StopFrequency(self) -> DoubleSetting: ...
    @property
    def SweepParameters(self) -> FrequencySweepParameters: ...
    @property
    def SweepType(self) -> ImdFrequencySweepType: ...
    @SweepType.setter
    def SweepType(self, value: ImdFrequencySweepType) -> ImdFrequencySweepType: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class ImdFrequencySweepMeasurement:
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> IMDFrequencySweepGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def ImdRatio(self) -> XYGraph: ...
    @property
    def ImdType(self) -> IMDType: ...
    @ImdType.setter
    def ImdType(self, value: IMDType) -> IMDType: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementMode(self) -> IMDMode: ...
    @MeasurementMode.setter
    def MeasurementMode(self, value: IMDMode) -> IMDMode: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def Settling(self) -> ImdFrequencySweepSettlingParametersCollection: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class ImdFrequencySweepSettlingParametersCollection:
    @property
    def ImdRatioSettlingParams(self) -> SettlingParameters: ...


class ImdFrequencySweepType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Frequency1 : ImdFrequencySweepType # 0
    Frequency2 : ImdFrequencySweepType # 1


class ImdGeneratorSettings:
    @property
    def Frequency1(self) -> DoubleSetting: ...
    @property
    def Frequency1ToFrequency2AmplitudeRatio(self) -> float: ...
    @Frequency1ToFrequency2AmplitudeRatio.setter
    def Frequency1ToFrequency2AmplitudeRatio(self, value: float) -> float: ...
    @property
    def Frequency2(self) -> DoubleSetting: ...
    @property
    def SignalType(self) -> ImdGeneratorSignalType: ...
    @SignalType.setter
    def SignalType(self, value: ImdGeneratorSignalType) -> ImdGeneratorSignalType: ...
    @property
    def Split(self) -> bool: ...
    @Split.setter
    def Split(self, value: bool) -> bool: ...
    def GetOutputChannelAssignment(self, ch: OutputChannelIndex) -> OutputChannelAssignment: ...
    def ResetChannelAssignments(self, setting: OutputChannelAssignments) -> None: ...
    def SetOutputChannelAssignment(self, ch: OutputChannelIndex, assignment: OutputChannelAssignment) -> None: ...


class ImdGeneratorSignalType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Smpte10To1 : ImdGeneratorSignalType # 0
    Smpte4To1 : ImdGeneratorSignalType # 1
    Smpte1To1 : ImdGeneratorSignalType # 2
    Din : ImdGeneratorSignalType # 3
    Dfd : ImdGeneratorSignalType # 4
    DIM_30 : ImdGeneratorSignalType # 5
    DIM_100 : ImdGeneratorSignalType # 6
    DIM_B : ImdGeneratorSignalType # 7
    DIM_B8 : ImdGeneratorSignalType # 8


class ImdGeneratorType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Imd : ImdGeneratorType # 0
    File : ImdGeneratorType # 1


class ImdLevelSweepMeasurement:
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> IMDSteppedLevelGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def ImdRatioVsLevel(self) -> XYGraph: ...
    @property
    def ImdRatioVsMeasuredLevel(self) -> XYGraph: ...
    @property
    def ImdType(self) -> IMDType: ...
    @ImdType.setter
    def ImdType(self, value: IMDType) -> IMDType: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementMode(self) -> IMDMode: ...
    @MeasurementMode.setter
    def MeasurementMode(self, value: IMDMode) -> IMDMode: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def Settling(self) -> ImdSteppedLevelSettlingParametersCollection: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class ImdMeasurement:
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def DistortionProductRatio(self) -> VerticalBarGraph: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> ImdMeasurementGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def ImdRatio(self) -> MeterGraph: ...
    @property
    def ImdType(self) -> IMDType: ...
    @ImdType.setter
    def ImdType(self, value: IMDType) -> IMDType: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementMode(self) -> IMDMode: ...
    @MeasurementMode.setter
    def MeasurementMode(self, value: IMDMode) -> IMDMode: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def Settling(self) -> ImdSettlingParametersCollection: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class ImdMeasurementGenerator:
    @property
    def Frequency1(self) -> DoubleSetting: ...
    @property
    def Frequency2(self) -> DoubleSetting: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def ModAmplitudeRatio(self) -> ModGeneratorLevelRatio: ...
    @ModAmplitudeRatio.setter
    def ModAmplitudeRatio(self, value: ModGeneratorLevelRatio) -> ModGeneratorLevelRatio: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def SmpteAmplitudeRatio(self) -> SmpteGeneratorLevelRatio: ...
    @SmpteAmplitudeRatio.setter
    def SmpteAmplitudeRatio(self, value: SmpteGeneratorLevelRatio) -> SmpteGeneratorLevelRatio: ...
    @property
    def Split(self) -> bool: ...
    @Split.setter
    def Split(self, value: bool) -> bool: ...
    @property
    def Type(self) -> ImdGeneratorType: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class IMDMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    d2 : IMDMode # 0
    d3 : IMDMode # 1
    d23 : IMDMode # 2
    d25 : IMDMode # 3


class ImdSettlingParametersCollection:
    @property
    def Imd(self) -> SettlingParameters: ...


class IMDSteppedLevelGenerator:
    @property
    def AmplitudeStart(self) -> DoubleSetting: ...
    @property
    def AmplitudeStop(self) -> DoubleSetting: ...
    @property
    def Frequency1(self) -> DoubleSetting: ...
    @property
    def Frequency2(self) -> DoubleSetting: ...
    @property
    def ModAmplitudeRatio(self) -> ModGeneratorLevelRatio: ...
    @ModAmplitudeRatio.setter
    def ModAmplitudeRatio(self, value: ModGeneratorLevelRatio) -> ModGeneratorLevelRatio: ...
    @property
    def SmpteAmplitudeRatio(self) -> SmpteGeneratorLevelRatio: ...
    @SmpteAmplitudeRatio.setter
    def SmpteAmplitudeRatio(self, value: SmpteGeneratorLevelRatio) -> SmpteGeneratorLevelRatio: ...
    @property
    def Split(self) -> bool: ...
    @Split.setter
    def Split(self, value: bool) -> bool: ...
    @property
    def SweepParameters(self) -> SweepParameters: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class ImdSteppedLevelSettlingParametersCollection:
    @property
    def ImdRatioSettlingParams(self) -> SettlingParameters: ...
    @property
    def MeasuredLevelSettlingParams(self) -> SettlingParameters: ...


class IMDType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    SMPTE : IMDType # 0
    DFD : IMDType # 1
    CCIF : IMDType # 2
    MOD : IMDType # 3


class IMeasurement(IMeasurementBase, typing.Protocol):
    @property
    def AnalyzeFilesFixedSampleRate(self) -> float: ...
    @AnalyzeFilesFixedSampleRate.setter
    def AnalyzeFilesFixedSampleRate(self, value: float) -> float: ...
    @property
    def AnalyzeFilesSampleRateMode(self) -> FileAnalysisSampleRateMode: ...
    @AnalyzeFilesSampleRateMode.setter
    def AnalyzeFilesSampleRateMode(self, value: FileAnalysisSampleRateMode) -> FileAnalysisSampleRateMode: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> IFileAnalysisSettings: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> ISequenceMeasurement: ...
    @property
    def WavFilesForAnalysis(self) -> Array_1[str]: ...
    @WavFilesForAnalysis.setter
    def WavFilesForAnalysis(self, value: Array_1[str]) -> Array_1[str]: ...
    @abc.abstractmethod
    def AnalyzeFiles(self) -> bool: ...


class IMeasurementBase(typing.Protocol):
    @property
    def Graphs(self) -> IGraphCollection: ...
    @abc.abstractmethod
    def CreateExportSettings(self) -> IMeasurementExportSettings: ...
    @abc.abstractmethod
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    @abc.abstractmethod
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    @abc.abstractmethod
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    @abc.abstractmethod
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    @abc.abstractmethod
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: IMeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints = ..., appendIfExists: bool = ...) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool = ...) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class IMeasurementExportSettings(typing.Protocol):
    @property
    def AppendIfExists(self) -> bool: ...
    @AppendIfExists.setter
    def AppendIfExists(self, value: bool) -> bool: ...
    @property
    def DataIndex(self) -> int: ...
    @DataIndex.setter
    def DataIndex(self, value: int) -> int: ...
    @property
    def DataType(self) -> SourceDataType: ...
    @DataType.setter
    def DataType(self, value: SourceDataType) -> SourceDataType: ...
    @property
    def ResultNames(self) -> Array_1[str]: ...
    @abc.abstractmethod
    def GetResultEnabled(self, resultName: str) -> bool: ...
    @abc.abstractmethod
    def SetResultEnabled(self, resultName: str, enabled: bool) -> None: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, enabled: bool) -> None:...



class IMeasurementRecorderGenerator(IBatchSquareWithArbGenerator, typing.Protocol):
    @property
    def LoopWaveform(self) -> bool: ...
    @LoopWaveform.setter
    def LoopWaveform(self, value: bool) -> bool: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def RepeatWaveformCount(self) -> int: ...
    @RepeatWaveformCount.setter
    def RepeatWaveformCount(self, value: int) -> int: ...


class IMeasurementRecorderMeasurement(IBatchMeasurementWithAppend, ISaveAcquisitionToFileSettings, IHighpassFilterMeasurement, INoiseWeightingMeasurement, ILowpassFilterMeasurement, typing.Protocol):
    @property
    def AnalogInputBandwidth(self) -> SignalAnalyzerBandwidthType: ...
    @AnalogInputBandwidth.setter
    def AnalogInputBandwidth(self, value: SignalAnalyzerBandwidthType) -> SignalAnalyzerBandwidthType: ...
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def AvergeJitterLevel(self) -> IXYGraph: ...
    @property
    def BandpassFilterTuning(self) -> FilterTuningType: ...
    @BandpassFilterTuning.setter
    def BandpassFilterTuning(self, value: FilterTuningType) -> FilterTuningType: ...
    @property
    def BandpassFixedFilterFrequency(self) -> IDoubleSetting: ...
    @property
    def BandpassLevelVsTime(self) -> IXYGraph: ...
    @property
    def BandpassRectangularBandMaxFrequency(self) -> IDoubleSetting: ...
    @property
    def BandpassRectangularBandMinFrequency(self) -> IDoubleSetting: ...
    @property
    def BandpassSelectivity(self) -> BandpassSelectivityType: ...
    @BandpassSelectivity.setter
    def BandpassSelectivity(self, value: BandpassSelectivityType) -> BandpassSelectivityType: ...
    @property
    def DcLevelVsTime(self) -> IXYGraph: ...
    @property
    def FixNotchFrequency(self) -> bool: ...
    @FixNotchFrequency.setter
    def FixNotchFrequency(self, value: bool) -> bool: ...
    @property
    def FrequencyVsTime(self) -> IXYGraph: ...
    @property
    def GainVsTime(self) -> IXYGraph: ...
    @property
    def Generator(self) -> IMeasurementRecorderGenerator: ...
    @property
    def HighpassFilterFrequencyEnabled(self) -> bool: ...
    @HighpassFilterFrequencyEnabled.setter
    def HighpassFilterFrequencyEnabled(self, value: bool) -> bool: ...
    @property
    def LevelTriggerSlope(self) -> LevelSlopeType: ...
    @LevelTriggerSlope.setter
    def LevelTriggerSlope(self, value: LevelSlopeType) -> LevelSlopeType: ...
    @property
    def LevelVsTime(self) -> IXYGraph: ...
    @property
    def LowpassFilterFrequencyEnabled(self) -> bool: ...
    @LowpassFilterFrequencyEnabled.setter
    def LowpassFilterFrequencyEnabled(self, value: bool) -> bool: ...
    @property
    def NoiseWeightingEnabled(self) -> bool: ...
    @NoiseWeightingEnabled.setter
    def NoiseWeightingEnabled(self, value: bool) -> bool: ...
    @property
    def NotchFilterFrequency(self) -> IDoubleSetting: ...
    @property
    def NotchFrequency(self) -> IDoubleSetting: ...
    @property
    def NotchTuningMode(self) -> FilterTuningType: ...
    @NotchTuningMode.setter
    def NotchTuningMode(self, value: FilterTuningType) -> FilterTuningType: ...
    @property
    def PeakLevel(self) -> IXYGraph: ...
    @property
    def PhaseReferenceChannel(self) -> InputChannelIndex: ...
    @PhaseReferenceChannel.setter
    def PhaseReferenceChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def PhaseVsTime(self) -> IXYGraph: ...
    @property
    def ReadingRate(self) -> MeasurementRecorderReadingRate: ...
    @ReadingRate.setter
    def ReadingRate(self, value: MeasurementRecorderReadingRate) -> MeasurementRecorderReadingRate: ...
    @property
    def RmsLevelAcPlusDcVsTime(self) -> IXYGraph: ...
    @property
    def SinadRatioVsTime(self) -> IXYGraph: ...
    @property
    def StopOnUnlock(self) -> bool: ...
    @StopOnUnlock.setter
    def StopOnUnlock(self, value: bool) -> bool: ...
    @property
    def SweepTime(self) -> IDoubleSetting: ...
    @property
    def ThdLevelVsTime(self) -> IXYGraph: ...
    @property
    def ThdNLevelVsTime(self) -> IXYGraph: ...
    @property
    def ThdNRatioVsTime(self) -> IXYGraph: ...
    @property
    def ThdRatioVsTime(self) -> IXYGraph: ...
    @property
    def TriggerChannel(self) -> InputChannelIndex: ...
    @TriggerChannel.setter
    def TriggerChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def TriggerInput(self) -> APxInputSelection: ...
    @TriggerInput.setter
    def TriggerInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def TriggerLevel(self) -> IDoubleSetting: ...
    @property
    def TriggerTimeout(self) -> float: ...
    @TriggerTimeout.setter
    def TriggerTimeout(self, value: float) -> float: ...
    @property
    def TriggerType(self) -> TriggerType: ...
    @TriggerType.setter
    def TriggerType(self, value: TriggerType) -> TriggerType: ...
    @abc.abstractmethod
    def GetPhaseReferenceChannelForInput(self, input: APxInputSelection) -> InputChannelIndex: ...
    @abc.abstractmethod
    def SetPhaseReferenceChannelForInput(self, input: APxInputSelection, ch: InputChannelIndex) -> None: ...


class IMeasurementStep(ISequenceStep, typing.Protocol):
    @property
    def DataSetNoteCustomText(self) -> str: ...
    @DataSetNoteCustomText.setter
    def DataSetNoteCustomText(self, value: str) -> str: ...
    @property
    def DataSetNotePrompt(self) -> str: ...
    @DataSetNotePrompt.setter
    def DataSetNotePrompt(self, value: str) -> str: ...
    @property
    def DataSetNoteType(self) -> DataNoteType: ...
    @DataSetNoteType.setter
    def DataSetNoteType(self, value: DataNoteType) -> DataNoteType: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...


class IMeasurementStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IMeasurementStep: ...


class IMessageStepBase(ISequenceStep, typing.Protocol):
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def RTF(self) -> str: ...
    @RTF.setter
    def RTF(self, value: str) -> str: ...
    @property
    def SelectedImage(self) -> str: ...
    @SelectedImage.setter
    def SelectedImage(self, value: str) -> str: ...
    @property
    def Text(self) -> str: ...
    @Text.setter
    def Text(self, value: str) -> str: ...
    @abc.abstractmethod
    def LoadImageFile(self, fileName: str, replaceIfExists: bool) -> None: ...


class IMetadataGraph(IGraph, typing.Protocol):
    @property
    def AutoScale(self) -> bool: ...
    @AutoScale.setter
    def AutoScale(self, value: bool) -> bool: ...
    @property
    def FieldTraceCount(self) -> int: ...
    @property
    def NumberOfReadings(self) -> int: ...
    @property
    def Transitions(self) -> int: ...
    @Transitions.setter
    def Transitions(self, value: int) -> int: ...
    @abc.abstractmethod
    def ClearFieldTrace(self, traceIndex: int) -> None: ...
    @abc.abstractmethod
    def ExportData(self, fileName: str) -> None: ...
    @abc.abstractmethod
    def FitDataToView(self) -> None: ...
    @abc.abstractmethod
    def GetFieldColor(self, fieldIndex: int) -> Color: ...
    @abc.abstractmethod
    def GetFieldTrace(self, traceIndex: int) -> MetadataField: ...
    @abc.abstractmethod
    def GetFieldTraceName(self, traceIndex: int) -> str: ...
    @abc.abstractmethod
    def GetTimestamp(self, readingIndex: int) -> float: ...
    @abc.abstractmethod
    def IsFieldTraceValid(self, traceIndex: int) -> bool: ...
    @abc.abstractmethod
    def SetFieldColor(self, fieldIndex: int, color: Color) -> None: ...
    @abc.abstractmethod
    def SetFieldTrace(self, traceIndex: int, field: MetadataField) -> None: ...
    # Skipped GetFieldTraceValue due to it being static, abstract and generic.

    GetFieldTraceValue : GetFieldTraceValue_MethodGroup
    class GetFieldTraceValue_MethodGroup:
        @typing.overload
        def __call__(self, readingIndex: int, fieldTraceIndex: int) -> str:...
        @typing.overload
        def __call__(self, readingIndex: int, field: MetadataField) -> str:...



class IMetadataRecorderGenerator(IBatchSineWithArbGenerator, typing.Protocol):
    pass


class IMetadataRecorderMeasurement(IBatchMeasurement, typing.Protocol):
    @property
    def Generator(self) -> IMetadataRecorderGenerator: ...
    @property
    def MetadataGraph(self) -> IMetadataGraph: ...
    @property
    def SweepTime(self) -> IDoubleSetting: ...


class IMeterDataFromXyTrace(IDerivedDataTrace, typing.Protocol):
    @property
    def AllChannels(self) -> bool: ...
    @AllChannels.setter
    def AllChannels(self, value: bool) -> bool: ...
    # Skipped IsChannelSelected due to it being static, abstract and generic.

    IsChannelSelected : IsChannelSelected_MethodGroup
    class IsChannelSelected_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped SelectChannel due to it being static, abstract and generic.

    SelectChannel : SelectChannel_MethodGroup
    class SelectChannel_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, selected: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, selected: bool) -> None:...



class IMeterDataFromXyTraceCollection(IDerivedDataTraceCollection, typing.Protocol):
    @property
    def Item(self) -> IMeterDataFromXyTrace: ...
    @abc.abstractmethod
    def Add(self) -> IMeterDataFromXyTrace: ...


class IMeterGraph(IGraph, typing.Protocol):
    @property
    def Axis(self) -> IGraphAxis: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Limits(self) -> IMeterLimits: ...
    @property
    def LowerLimit(self) -> IMeterLimit: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> IMeterLimit: ...
    @abc.abstractmethod
    def ClearLimits(self) -> None: ...
    @abc.abstractmethod
    def FitDataToView(self) -> None: ...
    @abc.abstractmethod
    def GetTraceColor(self, traceIndex: int) -> Color: ...
    @abc.abstractmethod
    def GetTraceName(self, traceIndex: int) -> str: ...
    @abc.abstractmethod
    def ResetTraceStyle(self, traceIndex: int) -> None: ...
    @abc.abstractmethod
    def SetTraceColor(self, traceIndex: int, color: Color) -> None: ...
    @abc.abstractmethod
    def SetTraceName(self, traceIndex: int, name: str) -> None: ...
    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, unit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool]) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool], append: bool) -> None:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[str]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[str]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[float]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[float]:...



class IMeterLimit(typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def PassedLimitCheck(self) -> bool: ...
    @abc.abstractmethod
    def Clear(self) -> None: ...
    @abc.abstractmethod
    def PassedLimitCheckOnChannel(self, ch: InputChannelIndex) -> bool: ...
    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[str]:...
        @typing.overload
        def __call__(self, unit: str) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str) -> str:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str) -> str:...

    # Skipped GetValue due to it being static, abstract and generic.

    GetValue : GetValue_MethodGroup
    class GetValue_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, unit: str) -> float:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str) -> float:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[float]:...
        @typing.overload
        def __call__(self, unit: str) -> Array_1[float]:...

    # Skipped SetValue due to it being static, abstract and generic.

    SetValue : SetValue_MethodGroup
    class SetValue_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, limit: float) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, limit: float) -> None:...
        @typing.overload
        def __call__(self, ch: int, limit: float, unit: str) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, limit: float, unit: str) -> None:...



class IMeterLimits(typing.Protocol):
    @property
    def Lower(self) -> IMeterLimit: ...
    @property
    def TrackFirstChannel(self) -> bool: ...
    @TrackFirstChannel.setter
    def TrackFirstChannel(self, value: bool) -> bool: ...
    @property
    def Upper(self) -> IMeterLimit: ...
    @abc.abstractmethod
    def Clear(self) -> None: ...


class IMeterSettlingConfiguration(typing.Protocol):
    @property
    def Count(self) -> int: ...
    @abc.abstractmethod
    def Add(self, input: APxInputSelection, meterType: SettlingMeterType) -> None: ...
    @abc.abstractmethod
    def Contains(self, input: APxInputSelection, meterType: SettlingMeterType) -> bool: ...
    @abc.abstractmethod
    def GetInput(self, index: int) -> APxInputSelection: ...
    @abc.abstractmethod
    def GetMeterType(self, index: int) -> SettlingMeterType: ...


class IMeterValues(IEnumerable, typing.Protocol):
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> float: ...
    @property
    def Item(self) -> float: ...
    @property
    def LowerLimitEnabled(self) -> bool: ...
    @property
    def LowerLimitValues(self) -> Array_1[float]: ...
    @property
    def Name(self) -> str: ...
    @property
    def PassedLowerLimitCheck(self) -> bool: ...
    @property
    def PassedUpperLimitCheck(self) -> bool: ...
    @property
    def Text(self) -> Array_1[str]: ...
    @property
    def TextWithReferenceValue(self) -> Array_1[str]: ...
    @property
    def Type(self) -> MeasurementResultType: ...
    @property
    def Unit(self) -> str: ...
    @property
    def UnitList(self) -> Array_1[str]: ...
    @property
    def UpperLimitEnabled(self) -> bool: ...
    @property
    def UpperLimitValues(self) -> Array_1[float]: ...
    @abc.abstractmethod
    def GetText(self, Unit: str) -> Array_1[str]: ...
    @abc.abstractmethod
    def GetValues(self, Unit: str) -> Array_1[float]: ...
    # Skipped GetAllUnitConvertedText due to it being static, abstract and generic.

    GetAllUnitConvertedText : GetAllUnitConvertedText_MethodGroup
    class GetAllUnitConvertedText_MethodGroup:
        @typing.overload
        def __call__(self, channel: int) -> Array_1[str]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex) -> Array_1[str]:...



class IMicInputSettings(IAnalogInputChannelSettings, typing.Protocol):
    @property
    def GetMicInputFaultStatus(self) -> MicInputFaultStatus: ...
    @property
    def TedsCalibration(self) -> ITedsCalibration: ...
    @property
    def TedsSysCheck(self) -> ITedsSysCheck: ...
    @property
    def TestMode(self) -> bool: ...
    @TestMode.setter
    def TestMode(self, value: bool) -> bool: ...
    @abc.abstractmethod
    def GetBalancedMicPower(self, ch: int) -> MicPowerBalanced: ...
    @abc.abstractmethod
    def GetCcpLevel(self, ch: int) -> MicCcpLevel: ...
    @abc.abstractmethod
    def GetConnector(self, ch: int) -> MicInputConnectorType: ...
    @abc.abstractmethod
    def GetDcvLevel(self, ch: int) -> float: ...
    @abc.abstractmethod
    def GetMicPowerOn(self, ch: int) -> bool: ...
    @abc.abstractmethod
    def GetUnbalancedMicPower(self, ch: int) -> MicPowerUnbalanced: ...
    @abc.abstractmethod
    def SetBalancedMicPower(self, ch: int, micPower: MicPowerBalanced) -> None: ...
    @abc.abstractmethod
    def SetCcpLevel(self, ch: int, level: MicCcpLevel) -> None: ...
    @abc.abstractmethod
    def SetConnector(self, ch: int, connector: MicInputConnectorType) -> None: ...
    @abc.abstractmethod
    def SetDcvLevel(self, ch: int, dcLevel: float) -> None: ...
    @abc.abstractmethod
    def SetMicPowerOn(self, ch: int, powerOn: bool) -> None: ...
    @abc.abstractmethod
    def SetUnbalancedMicPower(self, ch: int, micPower: MicPowerUnbalanced) -> None: ...


class IMicrophonePowerModuleInfo(typing.Protocol):
    @property
    def ChannelCount(self) -> int: ...
    @property
    def SerialNumber(self) -> str: ...
    @abc.abstractmethod
    def GetId(self, channel: int) -> int: ...
    @abc.abstractmethod
    def Identify(self) -> None: ...


class IModulatedNoiseGenerator(ISineGenerator, typing.Protocol):
    pass


class IModulatedNoiseMeasurement(IBatchMeasurement, typing.Protocol):
    @property
    def AcquisitionTime(self) -> IDoubleSetting: ...
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def Generator(self) -> IModulatedNoiseGenerator: ...
    @property
    def HighpassFilter(self) -> IDoubleSetting: ...
    @property
    def LineRejection(self) -> LineRejectionType: ...
    @LineRejection.setter
    def LineRejection(self, value: LineRejectionType) -> LineRejectionType: ...
    @property
    def ModulatedNoiseRatio(self) -> IMeterGraph: ...


class ImpedanceConfiguration(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Internal : ImpedanceConfiguration # 0
    External2Ch : ImpedanceConfiguration # 1
    External1Ch : ImpedanceConfiguration # 2


class ImpedanceMeasurementType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    VdrvrOnly : ImpedanceMeasurementType # 0
    VdrvrAndVsense : ImpedanceMeasurementType # 1
    VsenseOnly : ImpedanceMeasurementType # 2


class ImpedanceThieleSmallMeasurement:
    @property
    def AddedMass(self) -> DoubleSetting: ...
    @property
    def AmplifierCorrectionCurve(self) -> str: ...
    @AmplifierCorrectionCurve.setter
    def AmplifierCorrectionCurve(self, value: str) -> str: ...
    @property
    def AmplifierCorrectionCurves(self) -> Array_1[str]: ...
    @property
    def AmplifierGain(self) -> DoubleSetting: ...
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def AutoDelayCompensation(self) -> bool: ...
    @AutoDelayCompensation.setter
    def AutoDelayCompensation(self, value: bool) -> bool: ...
    @property
    def CalculateTsParameters(self) -> bool: ...
    @CalculateTsParameters.setter
    def CalculateTsParameters(self, value: bool) -> bool: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def DiscardDistribution(self) -> TimingDistribution: ...
    @property
    def DriverDiameter(self) -> DoubleSetting: ...
    @property
    def Drivers(self) -> DriverCollection: ...
    @property
    def ExternalSenseResistance(self) -> float: ...
    @ExternalSenseResistance.setter
    def ExternalSenseResistance(self, value: float) -> float: ...
    @property
    def FastSweepAutoDuration(self) -> bool: ...
    @FastSweepAutoDuration.setter
    def FastSweepAutoDuration(self, value: bool) -> bool: ...
    @property
    def FastSweepGeneratorSettings(self) -> FrequencySweepParameters: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def FitMaximumFrequency(self) -> DoubleSetting: ...
    @property
    def FitMinimumFrequency(self) -> DoubleSetting: ...
    @property
    def FitRangeType(self) -> CurveFitRangeType: ...
    @FitRangeType.setter
    def FitRangeType(self, value: CurveFitRangeType) -> CurveFitRangeType: ...
    @property
    def FixedDcr(self) -> float: ...
    @FixedDcr.setter
    def FixedDcr(self, value: float) -> float: ...
    @property
    def Generator(self) -> ContinuousSweepGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def HighpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def HighpassFilterType(self) -> MeasurementHighpassFilterType: ...
    @HighpassFilterType.setter
    def HighpassFilterType(self, value: MeasurementHighpassFilterType) -> MeasurementHighpassFilterType: ...
    @property
    def Imaginary(self) -> ImpedanceXYGraph: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def LowpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def LowpassFilterType(self) -> MeasurementLowpassFilterType: ...
    @LowpassFilterType.setter
    def LowpassFilterType(self, value: MeasurementLowpassFilterType) -> MeasurementLowpassFilterType: ...
    @property
    def Magnitude(self) -> ImpedanceXYGraph: ...
    @property
    def Measure(self) -> ImpedanceMeasurementType: ...
    @Measure.setter
    def Measure(self, value: ImpedanceMeasurementType) -> ImpedanceMeasurementType: ...
    @property
    def MeasureDistribution(self) -> TimingDistribution: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Mmd(self) -> DoubleSetting: ...
    @property
    def ModelFit(self) -> ThieleSmallModelFit: ...
    @ModelFit.setter
    def ModelFit(self, value: ThieleSmallModelFit) -> ThieleSmallModelFit: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NoiseWeighting(self) -> WeightingFilterType: ...
    @NoiseWeighting.setter
    def NoiseWeighting(self, value: WeightingFilterType) -> WeightingFilterType: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def Phase(self) -> ImpedanceXYGraph: ...
    @property
    def Real(self) -> ImpedanceXYGraph: ...
    @property
    def ReType(self) -> ThieleSmallReType: ...
    @ReType.setter
    def ReType(self, value: ThieleSmallReType) -> ThieleSmallReType: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def SweepType(self) -> FastFrequencyResponseSweepType: ...
    @SweepType.setter
    def SweepType(self, value: FastFrequencyResponseSweepType) -> FastFrequencyResponseSweepType: ...
    @property
    def ThieleSmall(self) -> ThieleSmallResult: ...
    @property
    def ThieleSmallMode(self) -> ThieleSmallMeasurementMode: ...
    @ThieleSmallMode.setter
    def ThieleSmallMode(self, value: ThieleSmallMeasurementMode) -> ThieleSmallMeasurementMode: ...
    @property
    def TransitionDistribution(self) -> TimingDistribution: ...
    @property
    def VdrvrChannel(self) -> InputChannelIndex: ...
    @VdrvrChannel.setter
    def VdrvrChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def Volume(self) -> DoubleSetting: ...
    @property
    def VsenseChannel(self) -> InputChannelIndex: ...
    @VsenseChannel.setter
    def VsenseChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def ExportAmplifierCorrectionCurve(self, fileName: str, xUnit: str, gainUnit: str, phaseUnit: str) -> None: ...
    def GetChannelName(self, ch: InputChannelIndex) -> str: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def LoadAmplifierCorrectionCurveFromFile(self, fileName: str, replaceIfExists: bool) -> None: ...
    def MeasureAddedMassKnownVolume(self) -> None: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class ImpedanceXYGraph:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def Display(self) -> ThieleSmallPlottedDataType: ...
    @Display.setter
    def Display(self, value: ThieleSmallPlottedDataType) -> ThieleSmallPlottedDataType: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def HasDataOnAxis(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> bool: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetData due to it being static, abstract and generic.

    GetData : GetData_MethodGroup
    class GetData_MethodGroup:
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> XYValues:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int) -> XYValues:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class ImportAmplifierCorrectionCurveStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Filename(self) -> str: ...
    @Filename.setter
    def Filename(self, value: str) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class ImportAmplifierCorrectionCurveStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ImportAmplifierCorrectionCurveStep: ...
    def Add(self) -> ImportAmplifierCorrectionCurveStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class ImportGeneratorEqCurveStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def ChannelForAbsoluteEq(self) -> InputChannelIndex: ...
    @ChannelForAbsoluteEq.setter
    def ChannelForAbsoluteEq(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def EQTableType(self) -> EQType: ...
    @EQTableType.setter
    def EQTableType(self, value: EQType) -> EQType: ...
    @property
    def Filename(self) -> str: ...
    @Filename.setter
    def Filename(self, value: str) -> str: ...
    @property
    def Invert(self) -> bool: ...
    @Invert.setter
    def Invert(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def ResultNameForAbsoluteEq(self) -> str: ...
    @ResultNameForAbsoluteEq.setter
    def ResultNameForAbsoluteEq(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class ImportGeneratorEqCurveStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ImportGeneratorEqCurveStep: ...
    def Add(self) -> ImportGeneratorEqCurveStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class ImportLimitsDataStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def FileName(self) -> str: ...
    @FileName.setter
    def FileName(self, value: str) -> str: ...
    @property
    def ImportToLowerLimit(self) -> bool: ...
    @ImportToLowerLimit.setter
    def ImportToLowerLimit(self, value: bool) -> bool: ...
    @property
    def ImportToUpperLimit(self) -> bool: ...
    @ImportToUpperLimit.setter
    def ImportToUpperLimit(self, value: bool) -> bool: ...
    @property
    def InvertLowerLimitOffsetCurve(self) -> bool: ...
    @InvertLowerLimitOffsetCurve.setter
    def InvertLowerLimitOffsetCurve(self, value: bool) -> bool: ...
    @property
    def InvertUpperLimitOffsetCurve(self) -> bool: ...
    @InvertUpperLimitOffsetCurve.setter
    def InvertUpperLimitOffsetCurve(self, value: bool) -> bool: ...
    @property
    def LimitOffsetCurves(self) -> Array_1[str]: ...
    @property
    def LowerLimitOffsetCurve(self) -> str: ...
    @LowerLimitOffsetCurve.setter
    def LowerLimitOffsetCurve(self, value: str) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def ResultName(self) -> str: ...
    @ResultName.setter
    def ResultName(self, value: str) -> str: ...
    @property
    def ResultNames(self) -> Array_1[str]: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    @property
    def TrackFirst(self) -> bool: ...
    @TrackFirst.setter
    def TrackFirst(self, value: bool) -> bool: ...
    @property
    def UpperLimitOffsetCurve(self) -> str: ...
    @UpperLimitOffsetCurve.setter
    def UpperLimitOffsetCurve(self, value: str) -> str: ...
    def CopyToClipboard(self) -> bool: ...
    def CreateLimitOffsetCurve(self, curveName: str, xUnit: str, xValues: Array_1[float], yUnit: str, yValues: Array_1[float], replaceIfExists: bool) -> None: ...
    def Delete(self) -> None: ...
    def LoadLimitOffsetCurve(self, fileName: str, replaceIfExists: bool) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class ImportLimitsDataStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ImportLimitsDataStep: ...
    def Add(self) -> ImportLimitsDataStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class ImportLimitType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Upper : ImportLimitType # 0
    Lower : ImportLimitType # 1
    Both : ImportLimitType # 2


class ImportOutputEqCurveStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def EqNames(self) -> Array_1[str]: ...
    @property
    def Filename(self) -> str: ...
    @Filename.setter
    def Filename(self, value: str) -> str: ...
    @property
    def Invert(self) -> bool: ...
    @Invert.setter
    def Invert(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def ProjectItemName(self) -> str: ...
    @ProjectItemName.setter
    def ProjectItemName(self, value: str) -> str: ...
    @property
    def Selection(self) -> EqStepSelection: ...
    @Selection.setter
    def Selection(self, value: EqStepSelection) -> EqStepSelection: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...
    # Skipped LoadEqFromFile due to it being static, abstract and generic.

    LoadEqFromFile : LoadEqFromFile_MethodGroup
    class LoadEqFromFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, invertData: bool, replaceIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, invertData: bool, replaceIfExists: bool, renameIfInverted: bool) -> None:...



class ImportOutputEqCurveStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ImportOutputEqCurveStep: ...
    def Add(self) -> ImportOutputEqCurveStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class ImportResultDataStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def FileName(self) -> str: ...
    @FileName.setter
    def FileName(self, value: str) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def ResultName(self) -> str: ...
    @ResultName.setter
    def ResultName(self, value: str) -> str: ...
    @property
    def ResultNames(self) -> Array_1[str]: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class ImportResultDataStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ImportResultDataStep: ...
    def Add(self) -> ImportResultDataStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class ImpulseResponseGraph:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def InterpolationOn(self) -> bool: ...
    @InterpolationOn.setter
    def InterpolationOn(self, value: bool) -> bool: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def ExportWav(self, fileName: str, audioFileType: FileAudioType, bitDepth: SavedAcquisitionBitDepthType, dataType: SourceDataType, dataIndex: int, replaceFileIfExists: bool) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def HasDataOnAxis(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> bool: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetData due to it being static, abstract and generic.

    GetData : GetData_MethodGroup
    class GetData_MethodGroup:
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> XYValues:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int) -> XYValues:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class ImpulseResponseWithWindowGraph:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def EndTaperWidth(self) -> DoubleSetting: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def InterpolationOn(self) -> bool: ...
    @InterpolationOn.setter
    def InterpolationOn(self, value: bool) -> bool: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def StartTaperWidth(self) -> DoubleSetting: ...
    @property
    def TaperType(self) -> TaperType: ...
    @TaperType.setter
    def TaperType(self, value: TaperType) -> TaperType: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def TimeWindowAutoStart(self) -> bool: ...
    @TimeWindowAutoStart.setter
    def TimeWindowAutoStart(self, value: bool) -> bool: ...
    @property
    def TimeWindowEnd(self) -> DoubleSetting: ...
    @property
    def TimeWindowStart(self) -> DoubleSetting: ...
    @property
    def TimeWindowType(self) -> TimeWindowType: ...
    @TimeWindowType.setter
    def TimeWindowType(self, value: TimeWindowType) -> TimeWindowType: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def ExportWav(self, fileName: str, audioFileType: FileAudioType, bitDepth: SavedAcquisitionBitDepthType, dataType: SourceDataType, dataIndex: int, replaceFileIfExists: bool) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def HasDataOnAxis(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> bool: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetData due to it being static, abstract and generic.

    GetData : GetData_MethodGroup
    class GetData_MethodGroup:
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> XYValues:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int) -> XYValues:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class IMultitoneAnalyzerMeasurement(IBatchMeasurementWithAppend, ISaveAcquisitionToFileSettings, IHighpassFilterMeasurement, ILowpassFilterMeasurement, INoiseWeightingMeasurement, typing.Protocol):
    @property
    def AcquiredWaveform(self) -> IAcquiredWaveformGraph: ...
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def Averages(self) -> int: ...
    @Averages.setter
    def Averages(self, value: int) -> int: ...
    @property
    def CrosstalkVsFrequency(self) -> IXYGraph: ...
    @property
    def DCLevel(self) -> IMeterGraph: ...
    @property
    def Deviation(self) -> IDeviationMeterGraph: ...
    @property
    def FFTSpectrum(self) -> IXYGraph: ...
    @property
    def FrequencyCorrectionEnabled(self) -> bool: ...
    @FrequencyCorrectionEnabled.setter
    def FrequencyCorrectionEnabled(self, value: bool) -> bool: ...
    @property
    def FrequencyShift(self) -> IMeterGraph: ...
    @property
    def Gain(self) -> IXYGraph: ...
    @property
    def Generator(self) -> IMultitoneGenerator: ...
    @property
    def HighpassFilterFrequencyEnabled(self) -> bool: ...
    @HighpassFilterFrequencyEnabled.setter
    def HighpassFilterFrequencyEnabled(self, value: bool) -> bool: ...
    @property
    def Level(self) -> IXYGraph: ...
    @property
    def LowpassFilterFrequencyEnabled(self) -> bool: ...
    @LowpassFilterFrequencyEnabled.setter
    def LowpassFilterFrequencyEnabled(self, value: bool) -> bool: ...
    @property
    def MaxFrequencyShift(self) -> IDoubleSetting: ...
    @property
    def MaximumToneLevel(self) -> IToneMeterGraph: ...
    @property
    def MultitoneSignal(self) -> str: ...
    @MultitoneSignal.setter
    def MultitoneSignal(self, value: str) -> str: ...
    @property
    def MultitoneSignalDefinition(self) -> IMultitoneSignalDefinition: ...
    @property
    def MultitoneSignalNames(self) -> Array_1[str]: ...
    @property
    def NoiseDensity(self) -> IXYGraph: ...
    @property
    def NoiseLevel(self) -> IMeterGraph: ...
    @property
    def NoiseWeightingEnabled(self) -> bool: ...
    @NoiseWeightingEnabled.setter
    def NoiseWeightingEnabled(self, value: bool) -> bool: ...
    @property
    def Phase(self) -> IXYGraph: ...
    @property
    def PhaseReferenceChannel(self) -> InputChannelIndex: ...
    @PhaseReferenceChannel.setter
    def PhaseReferenceChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def RelativeLevel(self) -> IRelativeLevelXYGraph: ...
    @property
    def SignalToNoiseRatio(self) -> IRatioToneMeterGraph: ...
    @property
    def SignalTrigger(self) -> IMultitoneSignalTrigger: ...
    @property
    def SkirtWidth(self) -> IDoubleSetting: ...
    @property
    def TdPlusNFilter(self) -> WeightingFilterType: ...
    @TdPlusNFilter.setter
    def TdPlusNFilter(self, value: WeightingFilterType) -> WeightingFilterType: ...
    @property
    def TdPlusNFilterEnabled(self) -> bool: ...
    @TdPlusNFilterEnabled.setter
    def TdPlusNFilterEnabled(self, value: bool) -> bool: ...
    @property
    def TdPlusNSpectrum(self) -> IXYGraph: ...
    @property
    def ToneCrosstalk(self) -> IToneCrosstalkMeterGraph: ...
    @property
    def ToneInterchannelPhase(self) -> IToneMeterGraph: ...
    @property
    def ToneRmsLevel(self) -> IToneMeterGraph: ...
    @property
    def TotalDistortionPlusNoiseLevel(self) -> IMeterGraph: ...
    @property
    def TotalDistortionPlusNoiseRatio(self) -> IRatioToneMeterGraph: ...
    @property
    def TotalRmsLevel(self) -> IMeterGraph: ...
    @property
    def TriggerChannel(self) -> InputChannelIndex: ...
    @TriggerChannel.setter
    def TriggerChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def TriggerDelay(self) -> IDoubleSetting: ...
    @property
    def TriggerLevel(self) -> IDoubleSetting: ...
    @property
    def TriggerTimeout(self) -> float: ...
    @TriggerTimeout.setter
    def TriggerTimeout(self, value: float) -> float: ...
    @property
    def TriggerTimeoutEnabled(self) -> bool: ...
    @TriggerTimeoutEnabled.setter
    def TriggerTimeoutEnabled(self, value: bool) -> bool: ...
    @property
    def TriggerType(self) -> MultitoneTriggerType: ...
    @TriggerType.setter
    def TriggerType(self, value: MultitoneTriggerType) -> MultitoneTriggerType: ...
    @abc.abstractmethod
    def LoadMultitoneSignalFile(self, fileName: str, replaceIfExists: bool) -> None: ...


class IMultitoneGenerator(IArbitraryGenerator, IGeneratorChannelAssignments, typing.Protocol):
    @property
    def MultitoneSignal(self) -> str: ...
    @MultitoneSignal.setter
    def MultitoneSignal(self, value: str) -> str: ...
    @property
    def MultitoneSignalDefinition(self) -> IMultitoneSignalDefinition: ...
    @property
    def MultitoneSignalNames(self) -> Array_1[str]: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def Type(self) -> MultitoneGeneratorType: ...
    @abc.abstractmethod
    def LoadMultitoneSignalFile(self, fileName: str, replaceIfExists: bool) -> None: ...


class IMultitoneSignalDefinition(typing.Protocol):
    @property
    def HasCrosstalkTones(self) -> bool: ...
    @property
    def Length(self) -> int: ...
    @property
    def MaxFrequency(self) -> float: ...
    @property
    def MinFrequency(self) -> float: ...
    @property
    def Name(self) -> str: ...
    @property
    def NumberOfTones(self) -> int: ...
    @property
    def SampleRate(self) -> float: ...
    @property
    def StepSize(self) -> float: ...
    @property
    def StepType(self) -> SweepStepType: ...
    @abc.abstractmethod
    def Export(self, fileName: str) -> None: ...
    @abc.abstractmethod
    def ExportWav(self, fileName: str, bitDepth: WavExportBitDepth, durationInSeconds: float) -> None: ...
    @abc.abstractmethod
    def GetCrestFactor(self, ch: int) -> float: ...
    @abc.abstractmethod
    def GetFrequency(self, ch: int) -> Array_1[float]: ...
    @abc.abstractmethod
    def GetPhase(self, ch: int) -> Array_1[float]: ...
    @abc.abstractmethod
    def GetToneBins(self, ch: int) -> Array_1[int]: ...
    # Skipped GetAmplitude due to it being static, abstract and generic.

    GetAmplitude : GetAmplitude_MethodGroup
    class GetAmplitude_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str) -> Array_1[float]:...



class IMultitoneSignalTrigger(typing.Protocol):
    @property
    def ToneMatchPercent(self) -> int: ...
    @ToneMatchPercent.setter
    def ToneMatchPercent(self, value: int) -> int: ...
    @property
    def ToneSignalToNoiseRatio(self) -> float: ...
    @ToneSignalToNoiseRatio.setter
    def ToneSignalToNoiseRatio(self, value: float) -> float: ...


class INestedSweepSettings(typing.Protocol):
    @property
    def DcxSweep(self) -> IDcxSweepSettings: ...
    @property
    def Source(self) -> NestedSweepParameterType: ...
    @Source.setter
    def Source(self, value: NestedSweepParameterType) -> NestedSweepParameterType: ...
    @property
    def SourceParameters(self) -> IStartStopSweepParameters: ...
    @property
    def Sources(self) -> Array_1[NestedSweepParameterType]: ...
    @property
    def SwitcherSweep(self) -> ISwitcherSweepSettings: ...


class INoiseGenerator(IArbitraryGenerator, typing.Protocol):
    @property
    def NoiseShape(self) -> NoiseShape: ...
    @NoiseShape.setter
    def NoiseShape(self, value: NoiseShape) -> NoiseShape: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...


class INoiseMeasurement(IMeasurement, IHighpassFilterMeasurement, ILowpassFilterMeasurement, INoiseWeightingMeasurement, typing.Protocol):
    @property
    def AcquisitionTime(self) -> IDoubleSetting: ...
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def DelayTime(self) -> IDoubleSetting: ...
    @property
    def Generator(self) -> INoiseGenerator: ...
    @property
    def HighpassFilterFrequencyEnabled(self) -> bool: ...
    @HighpassFilterFrequencyEnabled.setter
    def HighpassFilterFrequencyEnabled(self, value: bool) -> bool: ...
    @property
    def Level(self) -> IMeterGraph: ...
    @property
    def LowpassFilterFrequencyEnabled(self) -> bool: ...
    @LowpassFilterFrequencyEnabled.setter
    def LowpassFilterFrequencyEnabled(self, value: bool) -> bool: ...
    @property
    def NoiseWeightingEnabled(self) -> bool: ...
    @NoiseWeightingEnabled.setter
    def NoiseWeightingEnabled(self, value: bool) -> bool: ...
    @property
    def RmsLevelAcPlusDc(self) -> IMeterGraph: ...


class INoiseRecorderGenerator(IArbitraryGenerator, typing.Protocol):
    @property
    def NoiseShape(self) -> NoiseShape: ...
    @NoiseShape.setter
    def NoiseShape(self, value: NoiseShape) -> NoiseShape: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...


class INoiseRecorderMeasurement(IBatchMeasurementWithAppend, ISaveAcquisitionToFileSettings, IHighpassFilterMeasurement, ILowpassFilterMeasurement, INoiseWeightingMeasurement, typing.Protocol):
    @property
    def AnalogInputBandwidth(self) -> SignalAnalyzerBandwidthType: ...
    @AnalogInputBandwidth.setter
    def AnalogInputBandwidth(self, value: SignalAnalyzerBandwidthType) -> SignalAnalyzerBandwidthType: ...
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def Generator(self) -> INoiseRecorderGenerator: ...
    @property
    def HighpassFilterFrequencyEnabled(self) -> bool: ...
    @HighpassFilterFrequencyEnabled.setter
    def HighpassFilterFrequencyEnabled(self, value: bool) -> bool: ...
    @property
    def LowpassFilterFrequencyEnabled(self) -> bool: ...
    @LowpassFilterFrequencyEnabled.setter
    def LowpassFilterFrequencyEnabled(self, value: bool) -> bool: ...
    @property
    def NoiseWeightingEnabled(self) -> bool: ...
    @NoiseWeightingEnabled.setter
    def NoiseWeightingEnabled(self, value: bool) -> bool: ...
    @property
    def ReadingRate(self) -> MeasurementRecorderReadingRate: ...
    @ReadingRate.setter
    def ReadingRate(self, value: MeasurementRecorderReadingRate) -> MeasurementRecorderReadingRate: ...
    @property
    def RmsLevelAcPlusDcVsTime(self) -> IXYGraph: ...
    @property
    def RmsLevelVsTime(self) -> IXYGraph: ...
    @property
    def SweepTime(self) -> IDoubleSetting: ...


class INoiseWeightingMeasurement(typing.Protocol):
    @property
    def NoiseWeighting(self) -> WeightingFilterType: ...
    @NoiseWeighting.setter
    def NoiseWeighting(self, value: WeightingFilterType) -> WeightingFilterType: ...


class INormalizedDistortionRatioXYGraph(IXYGraph, typing.Protocol):
    @property
    def Calculation(self) -> DistortionRatioCalculation: ...
    @Calculation.setter
    def Calculation(self, value: DistortionRatioCalculation) -> DistortionRatioCalculation: ...
    @property
    def Normalized(self) -> bool: ...
    @Normalized.setter
    def Normalized(self, value: bool) -> bool: ...


class INormalizedHarmonicRatioXYGraph(IHarmonicXYGraph, INormalizedDistortionRatioXYGraph, typing.Protocol):
    pass


class INormalizeInvertResult(IXYGraph, IDerivedResult, typing.Protocol):
    @property
    def Mode(self) -> NormalizationMode: ...
    @Mode.setter
    def Mode(self, value: NormalizationMode) -> NormalizationMode: ...
    @property
    def Reference(self) -> IDoubleSetting: ...


class InputBandwidthType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Bw20k : InputBandwidthType # 0
    Bw40k : InputBandwidthType # 1
    Bw80k : InputBandwidthType # 2
    Bw250k : InputBandwidthType # 3
    Bw500k : InputBandwidthType # 4
    Bw1M : InputBandwidthType # 5


class InputChannelIndex(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Ch1 : InputChannelIndex # 0
    Ch2 : InputChannelIndex # 1
    Ch3 : InputChannelIndex # 2
    Ch4 : InputChannelIndex # 3
    Ch5 : InputChannelIndex # 4
    Ch6 : InputChannelIndex # 5
    Ch7 : InputChannelIndex # 6
    Ch8 : InputChannelIndex # 7
    Ch9 : InputChannelIndex # 8
    Ch10 : InputChannelIndex # 9
    Ch11 : InputChannelIndex # 10
    Ch12 : InputChannelIndex # 11
    Ch13 : InputChannelIndex # 12
    Ch14 : InputChannelIndex # 13
    Ch15 : InputChannelIndex # 14
    Ch16 : InputChannelIndex # 15


class InputConnector:
    @property
    def IsAnalog(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Type(self) -> InputConnectorType: ...
    @Type.setter
    def Type(self, value: InputConnectorType) -> InputConnectorType: ...


class InputConnectorType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    AnalogUnbalanced : InputConnectorType # 0
    AnalogBalanced : InputConnectorType # 1
    Analog : InputConnectorType # 2
    DigitalUnbalanced : InputConnectorType # 3
    DigitalBalanced : InputConnectorType # 4
    DigitalOptical : InputConnectorType # 5
    DigitalHdmi : InputConnectorType # 6
    DigitalHdmi2 : InputConnectorType # 7
    HdmiArc : InputConnectorType # 8
    Hdmi2EArc : InputConnectorType # 9
    Hdmi2Arc : InputConnectorType # 10
    Bluetooth : InputConnectorType # 11
    DigitalSerial : InputConnectorType # 12
    PDM : InputConnectorType # 13
    PDM16 : InputConnectorType # 14
    ASIO : InputConnectorType # 15
    TransducerInterface : InputConnectorType # 16
    Microphone : InputConnectorType # 17
    BatteryVoltage : InputConnectorType # 18
    BatteryCurrent : InputConnectorType # 19
    SpeakerVoltage : InputConnectorType # 20
    TelecoilCurrent : InputConnectorType # 21
    MicBiasVoltage : InputConnectorType # 22
    AnalogFile : InputConnectorType # 23
    DigitalFile : InputConnectorType # 24
    MicInput : InputConnectorType # 25
    ImpedanceMonitor : InputConnectorType # 26
    CurrentMonitor : InputConnectorType # 27
    None_ : InputConnectorType # 28


class InputEqSettings:
    @property
    def Eq(self) -> str: ...
    @Eq.setter
    def Eq(self, value: str) -> str: ...
    @property
    def EqNames(self) -> Array_1[str]: ...
    @property
    def FrequencyValues(self) -> Array_1[float]: ...
    @property
    def LevelValues(self) -> Array_1[float]: ...
    # Skipped LoadEqFromFile due to it being static, abstract and generic.

    LoadEqFromFile : LoadEqFromFile_MethodGroup
    class LoadEqFromFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, invertData: bool, replaceIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, invertData: bool, renameIfInverted: bool, replaceIfExists: bool) -> None:...



class InputEqSettingsCollection:
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> InputEqSettings: ...
    @property
    def Item(self) -> InputEqSettings: ...
    @property
    def TrackFirst(self) -> bool: ...
    @TrackFirst.setter
    def TrackFirst(self, value: bool) -> bool: ...


class InputFrequencyScalingType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    InputRate : InputFrequencyScalingType # 0
    OutputSampleRate : InputFrequencyScalingType # 1
    FixedRate : InputFrequencyScalingType # 2


class InputStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def FailButtonLabel(self) -> str: ...
    @FailButtonLabel.setter
    def FailButtonLabel(self, value: str) -> str: ...
    @property
    def InputType(self) -> InputStepType: ...
    @InputType.setter
    def InputType(self, value: InputStepType) -> InputStepType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassButtonLabel(self) -> str: ...
    @PassButtonLabel.setter
    def PassButtonLabel(self, value: str) -> str: ...
    @property
    def RTF(self) -> str: ...
    @RTF.setter
    def RTF(self, value: str) -> str: ...
    @property
    def SelectedImage(self) -> str: ...
    @SelectedImage.setter
    def SelectedImage(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    @property
    def Text(self) -> str: ...
    @Text.setter
    def Text(self, value: str) -> str: ...
    @property
    def UserResponse(self) -> str: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def LoadImageFile(self, fileName: str, replaceIfExists: bool) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class InputStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> InputStep: ...
    def Add(self) -> InputStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class InputStepType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    PromptUserForInput : InputStepType # 0
    PromptUserForPassFail : InputStepType # 1


class InputSwitcherConfigurationBaseCollection:
    def GetChannelA(self, address: SwitcherAddress) -> SwitcherChannelSelection: ...
    def GetChannelB(self, address: SwitcherAddress) -> SwitcherChannelSelection: ...
    def Open(self, fileName: str) -> None: ...
    def Save(self, fileName: str) -> None: ...
    def SetChannelA(self, address: SwitcherAddress, channelSelection: SwitcherChannelSelection) -> None: ...
    def SetChannelB(self, address: SwitcherAddress, channelSelection: SwitcherChannelSelection) -> None: ...


class InputSwitcherConfigurationCollection:
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    def GetChannelA(self, address: SwitcherAddress) -> SwitcherChannelSelection: ...
    def GetChannelB(self, address: SwitcherAddress) -> SwitcherChannelSelection: ...
    def Open(self, fileName: str) -> None: ...
    def Save(self, fileName: str) -> None: ...
    def SetChannelA(self, address: SwitcherAddress, channelSelection: SwitcherChannelSelection) -> None: ...
    def SetChannelB(self, address: SwitcherAddress, channelSelection: SwitcherChannelSelection) -> None: ...


class InstrumentModule:
    @property
    def BoardName(self) -> str: ...
    @property
    def Info(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def Signature(self) -> str: ...
    @property
    def SwVersionMajorRevision(self) -> int: ...
    @property
    def SwVersionMinorRevision(self) -> int: ...


class InstrumentModuleCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> InstrumentModule: ...
    def GetEnumerator(self) -> IEnumerator: ...


class InterchannelPhaseGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def SineDual(self) -> SineDualGenerator: ...
    @property
    def SineVarPhase(self) -> SineVarPhaseGenerator: ...
    @property
    def Type(self) -> SplitSineWithFileGeneratorType: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class InterchannelPhaseMeasurement:
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> InterchannelPhaseGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def MeterRange(self) -> PhaseMeterRange: ...
    @MeterRange.setter
    def MeterRange(self, value: PhaseMeterRange) -> PhaseMeterRange: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def Phase(self) -> MeterGraph: ...
    @property
    def ReferenceChannel(self) -> InputChannelIndex: ...
    @ReferenceChannel.setter
    def ReferenceChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def Settling(self) -> InterchannelPhaseSettlingParametersCollection: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class InterchannelPhaseSettlingParametersCollection:
    @property
    def Phase(self) -> SettlingParameters: ...


class IOffsetMeterResult(IMeterGraph, IDerivedResult, typing.Protocol):
    @property
    def Offset(self) -> IDoubleSetting: ...
    @property
    def OffsetType(self) -> OffsetResultType: ...


class IOffsetXYResult(IXYGraph, IDerivedResult, typing.Protocol):
    @property
    def Offset(self) -> IDoubleSetting: ...
    @property
    def OffsetType(self) -> OffsetResultType: ...


class IOutputConnector(typing.Protocol):
    @property
    def IsAnalog(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Type(self) -> OutputConnectorType: ...
    @Type.setter
    def Type(self, value: OutputConnectorType) -> OutputConnectorType: ...


class IOutputSwitcherConfigurationBaseCollection(typing.Protocol):
    @abc.abstractmethod
    def GetChannelA(self, address: SwitcherAddress) -> SwitcherChannelSelection: ...
    @abc.abstractmethod
    def GetChannelB(self, address: SwitcherAddress) -> OutputSwitcherChannelBSelection: ...
    @abc.abstractmethod
    def Open(self, fileName: str) -> None: ...
    @abc.abstractmethod
    def Save(self, fileName: str) -> None: ...
    @abc.abstractmethod
    def SetChannelA(self, address: SwitcherAddress, channelSelection: SwitcherChannelSelection) -> None: ...
    @abc.abstractmethod
    def SetChannelB(self, address: SwitcherAddress, channelSelection: OutputSwitcherChannelBSelection) -> None: ...


class IOutputSwitcherConfigurationCollection(IOutputSwitcherConfigurationBaseCollection, typing.Protocol):
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...


class IPassFailMeasurement(IMeasurement, typing.Protocol):
    @property
    def FailButtonLabel(self) -> str: ...
    @FailButtonLabel.setter
    def FailButtonLabel(self, value: str) -> str: ...
    @property
    def PassButtonLabel(self) -> str: ...
    @PassButtonLabel.setter
    def PassButtonLabel(self, value: str) -> str: ...
    @property
    def PlayAlertSound(self) -> bool: ...
    @PlayAlertSound.setter
    def PlayAlertSound(self, value: bool) -> bool: ...
    @property
    def ProgramSettings(self) -> IPassFailProgramSettings: ...
    @property
    def RTF(self) -> str: ...
    @RTF.setter
    def RTF(self, value: str) -> str: ...
    @property
    def RunMode(self) -> PassFailRunMode: ...
    @RunMode.setter
    def RunMode(self, value: PassFailRunMode) -> PassFailRunMode: ...
    @property
    def ShowCancel(self) -> bool: ...
    @ShowCancel.setter
    def ShowCancel(self, value: bool) -> bool: ...
    @property
    def Text(self) -> str: ...
    @Text.setter
    def Text(self, value: str) -> str: ...
    @property
    def TextFileSettings(self) -> IPassFailTextFileSettings: ...
    @property
    def TimeoutEnabled(self) -> bool: ...
    @TimeoutEnabled.setter
    def TimeoutEnabled(self, value: bool) -> bool: ...
    @property
    def TimeoutInSeconds(self) -> float: ...
    @TimeoutInSeconds.setter
    def TimeoutInSeconds(self, value: float) -> float: ...
    @abc.abstractmethod
    def ClearImage(self) -> None: ...
    @abc.abstractmethod
    def LoadImage(self, fileName: str, replaceIfExists: bool) -> None: ...


class IPassFailProgramSettings(typing.Protocol):
    @property
    def ActualOutput(self) -> str: ...
    @property
    def Arguments(self) -> str: ...
    @Arguments.setter
    def Arguments(self, value: str) -> str: ...
    @property
    def Command(self) -> str: ...
    @Command.setter
    def Command(self, value: str) -> str: ...
    @property
    def ExpectedOutput(self) -> str: ...
    @ExpectedOutput.setter
    def ExpectedOutput(self, value: str) -> str: ...
    @property
    def RanToCompletion(self) -> bool: ...
    @property
    def WorkingDirectory(self) -> str: ...
    @WorkingDirectory.setter
    def WorkingDirectory(self, value: str) -> str: ...


class IPassFailTextFileSettings(typing.Protocol):
    @property
    def ActualFileContents(self) -> str: ...
    @property
    def ExpectedFileContents(self) -> str: ...
    @ExpectedFileContents.setter
    def ExpectedFileContents(self, value: str) -> str: ...
    @property
    def FilePath(self) -> str: ...
    @FilePath.setter
    def FilePath(self, value: str) -> str: ...


class IPDM16InputSettings(ICommonDigitalInputSettings, typing.Protocol):
    @property
    def BitClkDir(self) -> ClockDirection: ...
    @BitClkDir.setter
    def BitClkDir(self, value: ClockDirection) -> ClockDirection: ...
    @property
    def BitClockRate(self) -> float: ...
    @property
    def DecimatedRate(self) -> IDoubleSetting: ...
    @property
    def Decimation(self) -> Pdm16DecimationRatio: ...
    @Decimation.setter
    def Decimation(self, value: Pdm16DecimationRatio) -> Pdm16DecimationRatio: ...
    @property
    def EnableClkOutputs(self) -> bool: ...
    @EnableClkOutputs.setter
    def EnableClkOutputs(self, value: bool) -> bool: ...
    @property
    def IsPodPresent(self) -> bool: ...
    @property
    def LimitLogicLevel(self) -> bool: ...
    @LimitLogicLevel.setter
    def LimitLogicLevel(self, value: bool) -> bool: ...
    @property
    def LogicLevel(self) -> IDoubleSetting: ...
    @property
    def NumChannels(self) -> int: ...
    @NumChannels.setter
    def NumChannels(self, value: int) -> int: ...
    @property
    def VddLevel(self) -> IDoubleSetting: ...
    @property
    def VddOn(self) -> bool: ...
    @VddOn.setter
    def VddOn(self, value: bool) -> bool: ...


class IPdm16Monitor(ISignalMonitorWindow, typing.Protocol):
    @property
    def BitClockFrequency(self) -> IDoubleSetting: ...
    @property
    def ReceiverBitClockOn(self) -> bool: ...
    @ReceiverBitClockOn.setter
    def ReceiverBitClockOn(self, value: bool) -> bool: ...
    @property
    def VddLevel(self) -> IDoubleSetting: ...
    @property
    def VddOn(self) -> bool: ...
    @VddOn.setter
    def VddOn(self, value: bool) -> bool: ...


class IPdmInputSettings(ICommonDigitalInputSettings, typing.Protocol):
    @property
    def BitClkDir(self) -> ClockDirection: ...
    @BitClkDir.setter
    def BitClkDir(self, value: ClockDirection) -> ClockDirection: ...
    @property
    def BitClockRate(self) -> float: ...
    @property
    def DataEdge(self) -> PdmDataEdge: ...
    @DataEdge.setter
    def DataEdge(self, value: PdmDataEdge) -> PdmDataEdge: ...
    @property
    def DecimatedRate(self) -> IDoubleSetting: ...
    @property
    def Decimation(self) -> PdmDecimationRatio: ...
    @Decimation.setter
    def Decimation(self, value: PdmDecimationRatio) -> PdmDecimationRatio: ...
    @property
    def EnableOutputs(self) -> bool: ...
    @EnableOutputs.setter
    def EnableOutputs(self, value: bool) -> bool: ...
    @property
    def LimitLogicLevel(self) -> bool: ...
    @LimitLogicLevel.setter
    def LimitLogicLevel(self, value: bool) -> bool: ...
    @property
    def LogicLevel(self) -> IDoubleSetting: ...
    @property
    def MeasureInputSignalType(self) -> MeasureJitterInputSignal: ...
    @MeasureInputSignalType.setter
    def MeasureInputSignalType(self, value: MeasureJitterInputSignal) -> MeasureJitterInputSignal: ...
    @property
    def VddLevel(self) -> IDoubleSetting: ...
    @property
    def VddOn(self) -> bool: ...
    @VddOn.setter
    def VddOn(self, value: bool) -> bool: ...


class IPdmMonitor(ISignalMonitorWindow, typing.Protocol):
    @property
    def BitClockFrequency(self) -> IDoubleSetting: ...
    @property
    def MonitorCode(self) -> IPdmMonitorControlCodes: ...
    @property
    def ReceiverBitClockOn(self) -> bool: ...
    @ReceiverBitClockOn.setter
    def ReceiverBitClockOn(self, value: bool) -> bool: ...
    @property
    def SendCodes(self) -> IPdmOutputControlCodes: ...
    @property
    def VddLevel(self) -> IDoubleSetting: ...
    @property
    def VddOn(self) -> bool: ...
    @VddOn.setter
    def VddOn(self, value: bool) -> bool: ...


class IPdmMonitorControlCodes(typing.Protocol):
    @property
    def ControlCodeCount(self) -> int: ...
    @ControlCodeCount.setter
    def ControlCodeCount(self, value: int) -> int: ...
    @property
    def ControlCodeValue(self) -> int: ...
    @ControlCodeValue.setter
    def ControlCodeValue(self, value: int) -> int: ...
    @property
    def MsbFirst(self) -> bool: ...
    @MsbFirst.setter
    def MsbFirst(self, value: bool) -> bool: ...
    @property
    def Observed(self) -> bool: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def ReceiveEdge(self) -> PdmControlCodeEdge: ...
    @ReceiveEdge.setter
    def ReceiveEdge(self, value: PdmControlCodeEdge) -> PdmControlCodeEdge: ...


class IPdmOutputControlCodes(typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def IsSendingContinuousCode(self) -> bool: ...
    @property
    def MsbFirst(self) -> bool: ...
    @MsbFirst.setter
    def MsbFirst(self, value: bool) -> bool: ...
    @property
    def SendEdge(self) -> PdmControlCodeEdge: ...
    @SendEdge.setter
    def SendEdge(self, value: PdmControlCodeEdge) -> PdmControlCodeEdge: ...
    @property
    def SendType(self) -> PdmControlCodeSendType: ...
    @SendType.setter
    def SendType(self, value: PdmControlCodeSendType) -> PdmControlCodeSendType: ...
    @abc.abstractmethod
    def Add(self, code: int, repetitions: int) -> None: ...
    @abc.abstractmethod
    def Delete(self, index: int) -> None: ...
    @abc.abstractmethod
    def GetCode(self, index: int) -> int: ...
    @abc.abstractmethod
    def GetRepetitions(self, index: int) -> int: ...
    @abc.abstractmethod
    def Send(self) -> None: ...
    @abc.abstractmethod
    def SetCode(self, index: int, code: int) -> None: ...
    @abc.abstractmethod
    def SetRepetitions(self, index: int, count: int) -> None: ...
    @abc.abstractmethod
    def StopSending(self) -> None: ...


class IPdmOutputSettings(typing.Protocol):
    @property
    def BitClkDir(self) -> ClockDirection: ...
    @BitClkDir.setter
    def BitClkDir(self, value: ClockDirection) -> ClockDirection: ...
    @property
    def BitClockRate(self) -> float: ...
    @property
    def DataEdge(self) -> PdmDataEdge: ...
    @DataEdge.setter
    def DataEdge(self, value: PdmDataEdge) -> PdmDataEdge: ...
    @property
    def DecimatedRate(self) -> IDoubleSetting: ...
    @property
    def EnableOutputs(self) -> bool: ...
    @EnableOutputs.setter
    def EnableOutputs(self, value: bool) -> bool: ...
    @property
    def FixedRate(self) -> IDoubleSetting: ...
    @property
    def Interpolation(self) -> PdmInterpolationRatio: ...
    @Interpolation.setter
    def Interpolation(self, value: PdmInterpolationRatio) -> PdmInterpolationRatio: ...
    @property
    def LimitLogicLevel(self) -> bool: ...
    @LimitLogicLevel.setter
    def LimitLogicLevel(self, value: bool) -> bool: ...
    @property
    def LogicLevel(self) -> IDoubleSetting: ...
    @property
    def ModulatorOrder(self) -> PdmModulatorOrder: ...
    @ModulatorOrder.setter
    def ModulatorOrder(self, value: PdmModulatorOrder) -> PdmModulatorOrder: ...
    @property
    def ModulatorOsr(self) -> PdmModulatorOsr: ...
    @ModulatorOsr.setter
    def ModulatorOsr(self, value: PdmModulatorOsr) -> PdmModulatorOsr: ...
    @property
    def ScaleFreqBy(self) -> ScalePdmOutputFreqBy: ...
    @ScaleFreqBy.setter
    def ScaleFreqBy(self, value: ScalePdmOutputFreqBy) -> ScalePdmOutputFreqBy: ...
    @property
    def VddLevel(self) -> IDoubleSetting: ...
    @property
    def VddOn(self) -> bool: ...
    @VddOn.setter
    def VddOn(self, value: bool) -> bool: ...


class IPerInputSignalMonitor(typing.Protocol):
    @property
    def Input(self) -> APxInputSelection: ...


class IPesqAcquiredWaveformGraph(IWaveformDataGraph, typing.Protocol):
    @property
    def ShowDropouts(self) -> bool: ...
    @ShowDropouts.setter
    def ShowDropouts(self, value: bool) -> bool: ...


class IPesqAverageGenerator(IGenerator, typing.Protocol):
    pass


class IPesqAverageMeasurement(IBatchMeasurementWithAppend, typing.Protocol):
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def ConformanceAdjustment(self) -> bool: ...
    @ConformanceAdjustment.setter
    def ConformanceAdjustment(self, value: bool) -> bool: ...
    @property
    def ExtendAcquisition(self) -> IDoubleSetting: ...
    @property
    def FileMos(self) -> IPesqAverageXYGraph: ...
    @property
    def Generator(self) -> IPesqAverageGenerator: ...
    @property
    def Mode(self) -> PesqAnalysisMode: ...
    @Mode.setter
    def Mode(self, value: PesqAnalysisMode) -> PesqAnalysisMode: ...
    @property
    def MosAverage(self) -> IPesqMeterGraph: ...
    @property
    def ReferenceFileNames(self) -> Array_1[str]: ...
    @ReferenceFileNames.setter
    def ReferenceFileNames(self, value: Array_1[str]) -> Array_1[str]: ...
    @abc.abstractmethod
    def LoadReferenceFile(self, fileName: str, replaceIfExists: bool) -> None: ...


class IPesqAverageXYGraph(IXYGraph, typing.Protocol):
    @property
    def AnalysisRegion(self) -> PesqAnalysisRegion: ...
    @AnalysisRegion.setter
    def AnalysisRegion(self, value: PesqAnalysisRegion) -> PesqAnalysisRegion: ...


class IPesqGenerator(IArbitraryGenerator, typing.Protocol):
    pass


class IPesqMeasurement(IBatchMeasurementWithAppend, ISaveAcquisitionToFileSettings, typing.Protocol):
    @property
    def AcquiredWaveform(self) -> IPesqAcquiredWaveformGraph: ...
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def AverageDelay(self) -> IMeterGraph: ...
    @property
    def ConformanceAdjustment(self) -> bool: ...
    @ConformanceAdjustment.setter
    def ConformanceAdjustment(self, value: bool) -> bool: ...
    @property
    def DelayVsTime(self) -> IXYGraph: ...
    @property
    def ExtendAcquisition(self) -> IDoubleSetting: ...
    @property
    def Generator(self) -> IPesqGenerator: ...
    @property
    def Mode(self) -> PesqAnalysisMode: ...
    @Mode.setter
    def Mode(self, value: PesqAnalysisMode) -> PesqAnalysisMode: ...
    @property
    def Mos(self) -> IPesqMeterGraph: ...
    @property
    def MosVsTime(self) -> IXYGraph: ...
    @property
    def Pesq(self) -> IPesqMeterGraph: ...
    @property
    def ReferenceFile(self) -> str: ...
    @ReferenceFile.setter
    def ReferenceFile(self, value: str) -> str: ...
    @property
    def ReferenceFileNames(self) -> Array_1[str]: ...
    @property
    def ReferenceWaveform(self) -> IXYGraph: ...
    @abc.abstractmethod
    def LoadReferenceFile(self, fileName: str, replaceIfExists: bool) -> None: ...


class IPesqMeterGraph(IMeterGraph, typing.Protocol):
    @property
    def AnalysisRegion(self) -> PesqAnalysisRegion: ...
    @AnalysisRegion.setter
    def AnalysisRegion(self, value: PesqAnalysisRegion) -> PesqAnalysisRegion: ...


class IPhaseXYGraph(IXYGraph, typing.Protocol):
    @property
    def DelayMaxFrequency(self) -> IDoubleSetting: ...
    @property
    def DelayMinFrequency(self) -> IDoubleSetting: ...
    @property
    def Mode(self) -> PhaseMode: ...
    @Mode.setter
    def Mode(self, value: PhaseMode) -> PhaseMode: ...


class IPolqaAcquiredWaveformGraph(IWaveformDataGraph, typing.Protocol):
    @property
    def ShowVAD(self) -> bool: ...
    @ShowVAD.setter
    def ShowVAD(self, value: bool) -> bool: ...


class IPolqaAverageGenerator(IGenerator, typing.Protocol):
    pass


class IPolqaAverageMeasurement(IBatchMeasurementWithAppend, typing.Protocol):
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def AutoLevelAlignmentAdjustment(self) -> bool: ...
    @AutoLevelAlignmentAdjustment.setter
    def AutoLevelAlignmentAdjustment(self, value: bool) -> bool: ...
    @property
    def AutoResamplingAdjustment(self) -> bool: ...
    @AutoResamplingAdjustment.setter
    def AutoResamplingAdjustment(self, value: bool) -> bool: ...
    @property
    def ExtendAcquisition(self) -> IDoubleSetting: ...
    @property
    def FileMos(self) -> IPolqaAverageXYGraph: ...
    @property
    def Generator(self) -> IPolqaAverageGenerator: ...
    @property
    def HighAccuracyMode(self) -> bool: ...
    @HighAccuracyMode.setter
    def HighAccuracyMode(self, value: bool) -> bool: ...
    @property
    def ItuVersion(self) -> PolqaItuVersion: ...
    @ItuVersion.setter
    def ItuVersion(self, value: PolqaItuVersion) -> PolqaItuVersion: ...
    @property
    def Mode(self) -> PolqaAnalysisMode: ...
    @Mode.setter
    def Mode(self, value: PolqaAnalysisMode) -> PolqaAnalysisMode: ...
    @property
    def MosAverage(self) -> IPolqaMeterGraph: ...
    @property
    def OverloadReference(self) -> IDoubleSetting: ...
    @property
    def ReferenceFileNames(self) -> Array_1[str]: ...
    @ReferenceFileNames.setter
    def ReferenceFileNames(self, value: Array_1[str]) -> Array_1[str]: ...
    @abc.abstractmethod
    def LoadReferenceFile(self, fileName: str, replaceIfExists: bool) -> None: ...


class IPolqaAverageXYGraph(IXYGraph, typing.Protocol):
    pass


class IPolqaGenerator(IArbitraryGenerator, typing.Protocol):
    pass


class IPolqaMeasurement(IBatchMeasurementWithAppend, ISaveAcquisitionToFileSettings, typing.Protocol):
    @property
    def AcquiredWaveform(self) -> IPolqaAcquiredWaveformGraph: ...
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def AutoLevelAlignmentAdjustment(self) -> bool: ...
    @AutoLevelAlignmentAdjustment.setter
    def AutoLevelAlignmentAdjustment(self, value: bool) -> bool: ...
    @property
    def AutoResamplingAdjustment(self) -> bool: ...
    @AutoResamplingAdjustment.setter
    def AutoResamplingAdjustment(self, value: bool) -> bool: ...
    @property
    def AverageDelay(self) -> IMeterGraph: ...
    @property
    def DelayVsTime(self) -> IXYGraph: ...
    @property
    def DelayVsTimeResampled(self) -> IXYGraph: ...
    @property
    def ExtendAcquisition(self) -> IDoubleSetting: ...
    @property
    def G107(self) -> IPolqaMeterGraph: ...
    @property
    def Generator(self) -> IPolqaGenerator: ...
    @property
    def HighAccuracyMode(self) -> bool: ...
    @HighAccuracyMode.setter
    def HighAccuracyMode(self, value: bool) -> bool: ...
    @property
    def ItuVersion(self) -> PolqaItuVersion: ...
    @ItuVersion.setter
    def ItuVersion(self, value: PolqaItuVersion) -> PolqaItuVersion: ...
    @property
    def Mode(self) -> PolqaAnalysisMode: ...
    @Mode.setter
    def Mode(self, value: PolqaAnalysisMode) -> PolqaAnalysisMode: ...
    @property
    def Mos(self) -> IPolqaMeterGraph: ...
    @property
    def MosVsTime(self) -> IXYGraph: ...
    @property
    def NumberOfLicensedChannels(self) -> int: ...
    @property
    def OverloadReference(self) -> IDoubleSetting: ...
    @property
    def PolqaResultData(self) -> ITabularResult: ...
    @property
    def ReferenceFile(self) -> str: ...
    @ReferenceFile.setter
    def ReferenceFile(self, value: str) -> str: ...
    @property
    def ReferenceFileNames(self) -> Array_1[str]: ...
    @property
    def ReferenceWaveform(self) -> IXYGraph: ...
    @abc.abstractmethod
    def LoadReferenceFile(self, fileName: str, replaceIfExists: bool) -> None: ...


class IPolqaMeterGraph(IMeterGraph, typing.Protocol):
    pass


class IPowerAmplifierSettings(typing.Protocol):
    @property
    def GetDriverFaultStatus(self) -> PowerAmpFaultStatus: ...
    @property
    def Output(self) -> PowerAmplifierOutput: ...
    @Output.setter
    def Output(self, value: PowerAmplifierOutput) -> PowerAmplifierOutput: ...


class IProductionTestSettings(typing.Protocol):
    @property
    def MessageRTF(self) -> str: ...
    @MessageRTF.setter
    def MessageRTF(self, value: str) -> str: ...
    @property
    def MessageText(self) -> str: ...
    @MessageText.setter
    def MessageText(self, value: str) -> str: ...
    @property
    def SelectedBannerImage(self) -> str: ...
    @SelectedBannerImage.setter
    def SelectedBannerImage(self, value: str) -> str: ...
    @abc.abstractmethod
    def LoadBannerImageFile(self, fileName: str, replaceIfExists: bool) -> None: ...


class IProfessionalStatusBitsSettings(typing.Protocol):
    @property
    def AlignmentLevel(self) -> StatusBitsAlignmentLevel: ...
    @AlignmentLevel.setter
    def AlignmentLevel(self, value: StatusBitsAlignmentLevel) -> StatusBitsAlignmentLevel: ...
    @property
    def AudioMode(self) -> StatusBitsAudioMode: ...
    @AudioMode.setter
    def AudioMode(self, value: StatusBitsAudioMode) -> StatusBitsAudioMode: ...
    @property
    def AuxBits(self) -> StatusBitsAuxSampleBit: ...
    @AuxBits.setter
    def AuxBits(self, value: StatusBitsAuxSampleBit) -> StatusBitsAuxSampleBit: ...
    @property
    def ChannelDest(self) -> str: ...
    @ChannelDest.setter
    def ChannelDest(self, value: str) -> str: ...
    @property
    def ChannelMode(self) -> StatusBitsChannelMode: ...
    @ChannelMode.setter
    def ChannelMode(self, value: StatusBitsChannelMode) -> StatusBitsChannelMode: ...
    @property
    def ChannelNumber(self) -> int: ...
    @ChannelNumber.setter
    def ChannelNumber(self, value: int) -> int: ...
    @property
    def ChannelOrigin(self) -> str: ...
    @ChannelOrigin.setter
    def ChannelOrigin(self, value: str) -> str: ...
    @property
    def DARS(self) -> StatusBitsDars: ...
    @DARS.setter
    def DARS(self, value: StatusBitsDars) -> StatusBitsDars: ...
    @property
    def Emphasis(self) -> StatusBitsEmphasisProfessional: ...
    @Emphasis.setter
    def Emphasis(self, value: StatusBitsEmphasisProfessional) -> StatusBitsEmphasisProfessional: ...
    @property
    def LocalAddress(self) -> int: ...
    @LocalAddress.setter
    def LocalAddress(self, value: int) -> int: ...
    @property
    def Lock(self) -> StatusBitsLock: ...
    @Lock.setter
    def Lock(self, value: StatusBitsLock) -> StatusBitsLock: ...
    @property
    def MultichannelMode(self) -> StatusBitsMultichannelMode: ...
    @MultichannelMode.setter
    def MultichannelMode(self, value: StatusBitsMultichannelMode) -> StatusBitsMultichannelMode: ...
    @property
    def Reliability0_5(self) -> StatusBitsReliability: ...
    @Reliability0_5.setter
    def Reliability0_5(self, value: StatusBitsReliability) -> StatusBitsReliability: ...
    @property
    def Reliability14_17(self) -> StatusBitsReliability: ...
    @Reliability14_17.setter
    def Reliability14_17(self, value: StatusBitsReliability) -> StatusBitsReliability: ...
    @property
    def Reliability18_21(self) -> StatusBitsReliability: ...
    @Reliability18_21.setter
    def Reliability18_21(self, value: StatusBitsReliability) -> StatusBitsReliability: ...
    @property
    def Reliability6_13(self) -> StatusBitsReliability: ...
    @Reliability6_13.setter
    def Reliability6_13(self, value: StatusBitsReliability) -> StatusBitsReliability: ...
    @property
    def SamplingFrequency(self) -> StatusBitsSamplingFrequencyProfessional: ...
    @SamplingFrequency.setter
    def SamplingFrequency(self, value: StatusBitsSamplingFrequencyProfessional) -> StatusBitsSamplingFrequencyProfessional: ...
    @property
    def SamplingFrequencyScaling(self) -> StatusBitsSampleFrequencyScaling: ...
    @SamplingFrequencyScaling.setter
    def SamplingFrequencyScaling(self, value: StatusBitsSampleFrequencyScaling) -> StatusBitsSampleFrequencyScaling: ...
    @property
    def SourceWordLength20Bits(self) -> StatusBitsWordLength20Bits: ...
    @SourceWordLength20Bits.setter
    def SourceWordLength20Bits(self, value: StatusBitsWordLength20Bits) -> StatusBitsWordLength20Bits: ...
    @property
    def SourceWordLength24Bits(self) -> StatusBitsWordLength24Bits: ...
    @SourceWordLength24Bits.setter
    def SourceWordLength24Bits(self, value: StatusBitsWordLength24Bits) -> StatusBitsWordLength24Bits: ...
    @property
    def TimeOfDay(self) -> int: ...
    @TimeOfDay.setter
    def TimeOfDay(self, value: int) -> int: ...
    @property
    def UserBitsManagement(self) -> StatusBitsUserBitsManagement: ...
    @UserBitsManagement.setter
    def UserBitsManagement(self, value: StatusBitsUserBitsManagement) -> StatusBitsUserBitsManagement: ...


class IProfessionalStatusBitsValues(typing.Protocol):
    @property
    def AlignmentLevel(self) -> StatusBitsAlignmentLevel: ...
    @property
    def AudioMode(self) -> StatusBitsAudioMode: ...
    @property
    def AuxBits(self) -> StatusBitsAuxSampleBit: ...
    @property
    def ChannelDest(self) -> str: ...
    @property
    def ChannelMode(self) -> StatusBitsChannelMode: ...
    @property
    def ChannelNumber(self) -> int: ...
    @property
    def ChannelOrigin(self) -> str: ...
    @property
    def DARS(self) -> StatusBitsDars: ...
    @property
    def Emphasis(self) -> StatusBitsEmphasisProfessional: ...
    @property
    def LocalAddress(self) -> int: ...
    @property
    def Lock(self) -> StatusBitsLock: ...
    @property
    def MultichannelMode(self) -> StatusBitsMultichannelMode: ...
    @property
    def Reliability0_5(self) -> StatusBitsReliability: ...
    @property
    def Reliability14_17(self) -> StatusBitsReliability: ...
    @property
    def Reliability18_21(self) -> StatusBitsReliability: ...
    @property
    def Reliability6_13(self) -> StatusBitsReliability: ...
    @property
    def SamplingFrequency(self) -> StatusBitsSamplingFrequencyProfessional: ...
    @property
    def SamplingFrequencyScaling(self) -> StatusBitsSampleFrequencyScaling: ...
    @property
    def SourceWordLength20Bits(self) -> StatusBitsWordLength20Bits: ...
    @property
    def SourceWordLength24Bits(self) -> StatusBitsWordLength24Bits: ...
    @property
    def TimeOfDay(self) -> int: ...
    @property
    def UserBitsManagement(self) -> StatusBitsUserBitsManagement: ...


class IProgramStep(ISequenceStep, typing.Protocol):
    @property
    def ActualOutput(self) -> str: ...
    @property
    def Arguments(self) -> str: ...
    @Arguments.setter
    def Arguments(self, value: str) -> str: ...
    @property
    def Command(self) -> str: ...
    @Command.setter
    def Command(self, value: str) -> str: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def ExpectedOutput(self) -> str: ...
    @ExpectedOutput.setter
    def ExpectedOutput(self, value: str) -> str: ...
    @property
    def ProgramOutputVariable(self) -> str: ...
    @ProgramOutputVariable.setter
    def ProgramOutputVariable(self, value: str) -> str: ...
    @property
    def RanToCompletion(self) -> bool: ...
    @property
    def Timeout(self) -> float: ...
    @Timeout.setter
    def Timeout(self, value: float) -> float: ...
    @property
    def WaitForExitBehavior(self) -> ProgramStepWaitBehavior: ...
    @WaitForExitBehavior.setter
    def WaitForExitBehavior(self, value: ProgramStepWaitBehavior) -> ProgramStepWaitBehavior: ...
    @property
    def WorkingDirectory(self) -> str: ...
    @WorkingDirectory.setter
    def WorkingDirectory(self, value: str) -> str: ...
    @abc.abstractmethod
    def CreateArgumentsChange(self, arguments: str) -> IStateChange: ...
    @abc.abstractmethod
    def CreateCommandChange(self, command: str) -> IStateChange: ...
    @abc.abstractmethod
    def CreateWorkingDirectoryChange(self, workingDirectory: str) -> IStateChange: ...


class IProgramStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IProgramStep: ...
    @abc.abstractmethod
    def Add(self) -> IProgramStep: ...


class IProjectItem(typing.Protocol):
    @property
    def IsUsedInProject(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def SizeInBytes(self) -> int: ...
    @property
    def Type(self) -> ProjectItemType: ...
    @abc.abstractmethod
    def Delete(self) -> None: ...
    @abc.abstractmethod
    def Export(self, fileName: str) -> None: ...
    @abc.abstractmethod
    def Replace(self, fileName: str) -> None: ...


class IProjectItemCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IProjectItem: ...
    @property
    def Item(self) -> IProjectItem: ...
    @abc.abstractmethod
    def DeleteAllUnusedItems(self) -> None: ...


class IProjectSettings(typing.Protocol):
    @property
    def GlobalVmax(self) -> IGlobalVMaxSettings: ...
    @property
    def SaveGraphData(self) -> bool: ...
    @SaveGraphData.setter
    def SaveGraphData(self, value: bool) -> bool: ...
    @property
    def ShowGraphSelector(self) -> bool: ...
    @ShowGraphSelector.setter
    def ShowGraphSelector(self, value: bool) -> bool: ...
    @property
    def ShowMeasuredTime(self) -> bool: ...
    @ShowMeasuredTime.setter
    def ShowMeasuredTime(self, value: bool) -> bool: ...
    @property
    def TraceStyleCycleCount(self) -> int: ...
    @property
    def TransducerCurrentLimitFault(self) -> TransducerFault: ...
    @TransducerCurrentLimitFault.setter
    def TransducerCurrentLimitFault(self, value: TransducerFault) -> TransducerFault: ...
    @abc.abstractmethod
    def ExportTraceCycleStyles(self, fileName: str) -> None: ...
    @abc.abstractmethod
    def GetLineStyle(self, cycleIndex: int, styleIndex: int) -> DashStyle: ...
    @abc.abstractmethod
    def GetLineWidth(self, cycleIndex: int, styleIndex: int) -> int: ...
    @abc.abstractmethod
    def GetTraceColor(self, cycleIndex: int, styleIndex: int) -> Color: ...
    @abc.abstractmethod
    def ImportTraceCycleStyles(self, fileName: str) -> None: ...
    @abc.abstractmethod
    def ResetStyles(self, cycleIndex: int) -> None: ...
    @abc.abstractmethod
    def SetLineStyle(self, cycleIndex: int, styleIndex: int, lineStyle: DashStyle) -> None: ...
    @abc.abstractmethod
    def SetLineWidth(self, cycleIndex: int, styleIndex: int, lineWidth: int) -> None: ...
    @abc.abstractmethod
    def SetTraceColor(self, cycleIndex: int, styleIndex: int, color: Color) -> None: ...


class IPromptInput(typing.Protocol):
    @property
    def DefaultResponse(self) -> str: ...
    @DefaultResponse.setter
    def DefaultResponse(self, value: str) -> str: ...
    @property
    def Label(self) -> str: ...
    @Label.setter
    def Label(self, value: str) -> str: ...
    @property
    def Persist(self) -> bool: ...
    @Persist.setter
    def Persist(self, value: bool) -> bool: ...
    @property
    def Required(self) -> bool: ...
    @Required.setter
    def Required(self, value: bool) -> bool: ...
    @property
    def VariableName(self) -> str: ...
    @VariableName.setter
    def VariableName(self, value: str) -> str: ...


class IPromptInputCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IPromptInput: ...
    @property
    def VariableNames(self) -> Array_1[str]: ...
    @abc.abstractmethod
    def Add(self, label: str, persist: bool = ..., required: bool = ..., variableName: str = ...) -> IPromptInput: ...
    @abc.abstractmethod
    def Move(self, fromIndex: int, toIndex: int) -> None: ...
    # Skipped Remove due to it being static, abstract and generic.

    Remove : Remove_MethodGroup
    class Remove_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, input: IPromptInput) -> None:...



class IPromptStep(IPromptStepBase, typing.Protocol):
    @property
    def dBrAChannel(self) -> InputChannelIndex: ...
    @dBrAChannel.setter
    def dBrAChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def dBrBChannel(self) -> InputChannelIndex: ...
    @dBrBChannel.setter
    def dBrBChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def dBrGChannel(self) -> OutputChannelIndex: ...
    @dBrGChannel.setter
    def dBrGChannel(self, value: OutputChannelIndex) -> OutputChannelIndex: ...
    @property
    def dBSpl1Channel(self) -> InputChannelIndex: ...
    @dBSpl1Channel.setter
    def dBSpl1Channel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def dBSpl2Channel(self) -> InputChannelIndex: ...
    @dBSpl2Channel.setter
    def dBSpl2Channel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def EditGeneratorSettingsEnabled(self) -> bool: ...
    @EditGeneratorSettingsEnabled.setter
    def EditGeneratorSettingsEnabled(self, value: bool) -> bool: ...
    @property
    def Inputs(self) -> IPromptInputCollection: ...
    @property
    def ReferenceInput(self) -> APxInputSelection: ...
    @ReferenceInput.setter
    def ReferenceInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def SetdBrA(self) -> bool: ...
    @SetdBrA.setter
    def SetdBrA(self, value: bool) -> bool: ...
    @property
    def SetdBrB(self) -> bool: ...
    @SetdBrB.setter
    def SetdBrB(self, value: bool) -> bool: ...
    @property
    def SetdBrG(self) -> bool: ...
    @SetdBrG.setter
    def SetdBrG(self, value: bool) -> bool: ...
    @property
    def SetdBSpl1(self) -> bool: ...
    @SetdBSpl1.setter
    def SetdBSpl1(self, value: bool) -> bool: ...
    @property
    def SetdBSpl2(self) -> bool: ...
    @SetdBSpl2.setter
    def SetdBSpl2(self, value: bool) -> bool: ...
    @property
    def ShowCancel(self) -> bool: ...
    @ShowCancel.setter
    def ShowCancel(self, value: bool) -> bool: ...
    @property
    def ShowOK(self) -> bool: ...
    @ShowOK.setter
    def ShowOK(self, value: bool) -> bool: ...


class IPromptStepBase(IMessageStepBase, typing.Protocol):
    @property
    def Icon(self) -> MessageBoxIcon: ...
    @Icon.setter
    def Icon(self, value: MessageBoxIcon) -> MessageBoxIcon: ...
    @property
    def PlayAlertSound(self) -> bool: ...
    @PlayAlertSound.setter
    def PlayAlertSound(self, value: bool) -> bool: ...
    @property
    def TimeoutEnabled(self) -> bool: ...
    @TimeoutEnabled.setter
    def TimeoutEnabled(self, value: bool) -> bool: ...
    @property
    def TimeoutInSeconds(self) -> float: ...
    @TimeoutInSeconds.setter
    def TimeoutInSeconds(self, value: float) -> float: ...


class IPromptStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IPromptStep: ...
    @abc.abstractmethod
    def Add(self) -> IPromptStep: ...


class IPsrGenerator(typing.Protocol):
    @property
    def AcLevel(self) -> IDoubleSetting: ...
    @property
    def Frequency(self) -> IDoubleSetting: ...
    @property
    def GeneratorType(self) -> PsrGeneratorType: ...
    @GeneratorType.setter
    def GeneratorType(self, value: PsrGeneratorType) -> PsrGeneratorType: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def VddLevel(self) -> IDoubleSetting: ...


class IPsrMeasurement(IMeasurement, INoiseWeightingMeasurement, typing.Protocol):
    @property
    def Generator(self) -> IPsrGenerator: ...
    @property
    def NoiseWeightingEnabled(self) -> bool: ...
    @NoiseWeightingEnabled.setter
    def NoiseWeightingEnabled(self, value: bool) -> bool: ...
    @property
    def Psr(self) -> IMeterGraph: ...
    @property
    def PsrPlusN(self) -> IMeterGraph: ...
    @property
    def Psrr(self) -> IMeterGraph: ...
    @property
    def PsrrPlusN(self) -> IMeterGraph: ...
    @property
    def Settling(self) -> IPsrSettlingParametersCollection: ...


class IPsrSettlingParametersCollection(typing.Protocol):
    @property
    def Psr(self) -> ISettlingParameters: ...


class IPsrSweepGenerator(typing.Protocol):
    @property
    def AcLevel(self) -> IDoubleSetting: ...
    @property
    def StartFrequency(self) -> IDoubleSetting: ...
    @property
    def StopFrequency(self) -> IDoubleSetting: ...
    @property
    def SweepParameters(self) -> ISweepParameters: ...
    @property
    def VddLevel(self) -> IDoubleSetting: ...


class IPsrSweepMeasurement(IBatchMeasurementWithAppend, INoiseWeightingMeasurement, typing.Protocol):
    @property
    def Generator(self) -> IPsrSweepGenerator: ...
    @property
    def NoiseWeightingEnabled(self) -> bool: ...
    @NoiseWeightingEnabled.setter
    def NoiseWeightingEnabled(self, value: bool) -> bool: ...
    @property
    def Psr(self) -> IXYGraph: ...
    @property
    def PsrPlusN(self) -> IXYGraph: ...
    @property
    def Psrr(self) -> IXYGraph: ...
    @property
    def PsrrPlusN(self) -> IXYGraph: ...
    @property
    def Settling(self) -> IPsrSettlingParametersCollection: ...


class IQpeakNoiseGenerator(IArbitraryGenerator, typing.Protocol):
    @property
    def NoiseShape(self) -> NoiseShape: ...
    @NoiseShape.setter
    def NoiseShape(self, value: NoiseShape) -> NoiseShape: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...


class IQpeakNoiseMeasurement(IMeasurement, typing.Protocol):
    @property
    def AcquisitionTime(self) -> IDoubleSetting: ...
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def DelayTime(self) -> IDoubleSetting: ...
    @property
    def Generator(self) -> IQpeakNoiseGenerator: ...
    @property
    def Level(self) -> IMeterGraph: ...


class IRatioToneMeterGraph(IToneMeterGraph, typing.Protocol):
    @property
    def RatioType(self) -> MultitoneLevelRatioType: ...
    @RatioType.setter
    def RatioType(self, value: MultitoneLevelRatioType) -> MultitoneLevelRatioType: ...


class IReadOnlySetting(IBaseSetting, typing.Protocol):
    @property
    def Text(self) -> str: ...


class IReadOnlySettingUnit(IReadOnlySetting, IUnitSettings, typing.Protocol):
    pass


class IRecorderSettings(ISaveAcquisitionToFileSettings, IBenchModeMeasurement, typing.Protocol):
    @property
    def FixedTime(self) -> float: ...
    @FixedTime.setter
    def FixedTime(self, value: float) -> float: ...
    @property
    def LevelTriggerSlope(self) -> LevelSlopeType: ...
    @LevelTriggerSlope.setter
    def LevelTriggerSlope(self, value: LevelSlopeType) -> LevelSlopeType: ...
    @property
    def MakeSettledReadings(self) -> bool: ...
    @MakeSettledReadings.setter
    def MakeSettledReadings(self, value: bool) -> bool: ...
    @property
    def Mode(self) -> TimeSweepRunMode: ...
    @Mode.setter
    def Mode(self, value: TimeSweepRunMode) -> TimeSweepRunMode: ...
    @property
    def NestedSweep(self) -> INestedSweepSettings: ...
    @property
    def PreSweepDelay(self) -> float: ...
    @PreSweepDelay.setter
    def PreSweepDelay(self, value: float) -> float: ...
    @property
    def ReadingRate(self) -> RecorderReadingRate: ...
    @ReadingRate.setter
    def ReadingRate(self, value: RecorderReadingRate) -> RecorderReadingRate: ...
    @property
    def Trigger(self) -> TriggerType: ...
    @Trigger.setter
    def Trigger(self, value: TriggerType) -> TriggerType: ...
    @property
    def TriggerChannel(self) -> InputChannelIndex: ...
    @TriggerChannel.setter
    def TriggerChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def TriggerInput(self) -> APxInputSelection: ...
    @TriggerInput.setter
    def TriggerInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def TriggerLevel(self) -> IDoubleSetting: ...
    @property
    def TriggerTimeout(self) -> float: ...
    @TriggerTimeout.setter
    def TriggerTimeout(self, value: float) -> float: ...


class IReferenceLevelsAutoGeneratorLevelSetter(IRegulationSettings, typing.Protocol):
    @property
    def MaximumGeneratorAmplitude(self) -> IDoubleSetting: ...
    @property
    def MeasuredChannel(self) -> InputChannelIndex: ...
    @MeasuredChannel.setter
    def MeasuredChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def MeasureWorstChannel(self) -> bool: ...
    @MeasureWorstChannel.setter
    def MeasureWorstChannel(self, value: bool) -> bool: ...
    @property
    def Mode(self) -> AutoGeneratorLevelMode: ...
    @Mode.setter
    def Mode(self, value: AutoGeneratorLevelMode) -> AutoGeneratorLevelMode: ...
    @property
    def TargetLevel(self) -> IDoubleSetting: ...
    @property
    def TargetThdN(self) -> IDoubleSetting: ...
    @abc.abstractmethod
    def SetGeneratorLevel(self) -> bool: ...


class IReferenceLevelsGenerator(ISplitSineWithArbGenerator, typing.Protocol):
    pass


class IReferenceLevelsMeasurement(IMeasurement, typing.Protocol):
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def AutoGeneratorLevel(self) -> IReferenceLevelsAutoGeneratorLevelSetter: ...
    @property
    def Frequency(self) -> IMeterGraph: ...
    @property
    def Generator(self) -> IReferenceLevelsGenerator: ...
    @property
    def HighpassFilterFrequency(self) -> IDoubleSetting: ...
    @property
    def HighpassFilterFrequencyEnabled(self) -> bool: ...
    @HighpassFilterFrequencyEnabled.setter
    def HighpassFilterFrequencyEnabled(self, value: bool) -> bool: ...
    @property
    def Level(self) -> IMeterGraph: ...
    @property
    def LowpassFilterFrequency(self) -> IDoubleSetting: ...
    @property
    def LowpassFilterFrequencyEnabled(self) -> bool: ...
    @LowpassFilterFrequencyEnabled.setter
    def LowpassFilterFrequencyEnabled(self, value: bool) -> bool: ...
    @property
    def NoiseWeighting(self) -> WeightingFilterType: ...
    @NoiseWeighting.setter
    def NoiseWeighting(self, value: WeightingFilterType) -> WeightingFilterType: ...
    @property
    def NoiseWeightingEnabled(self) -> bool: ...
    @NoiseWeightingEnabled.setter
    def NoiseWeightingEnabled(self, value: bool) -> bool: ...
    @property
    def References(self) -> IReferences: ...
    @property
    def SequenceSettings(self) -> IReferenceLevelsSequenceSettings: ...
    @property
    def ThdNRatio(self) -> IReferenceLevelsThdNMeterGraph: ...


class IReferenceLevelsSequenceSettings(typing.Protocol):
    @property
    def AutoSetGeneratorLevel(self) -> bool: ...
    @AutoSetGeneratorLevel.setter
    def AutoSetGeneratorLevel(self, value: bool) -> bool: ...
    @property
    def CopyReferencesFromSignalPath(self) -> str: ...
    @CopyReferencesFromSignalPath.setter
    def CopyReferencesFromSignalPath(self, value: str) -> str: ...
    @property
    def SignalPaths(self) -> Array_1[str]: ...


class IReferenceLevelsThdNMeterGraph(IMeterGraph, typing.Protocol):
    @property
    def TargetDistortion(self) -> IDoubleSetting: ...


class IReferences(typing.Protocol):
    @property
    def AcousticInputReferences(self) -> IAcousticInputReferences: ...
    @property
    def AcousticOutputLevelRegulation(self) -> IAcousticRegulationSettings: ...
    @property
    def AcousticOutputReferences(self) -> IAcousticOutputReferences: ...
    @property
    def AnalogInputReferences(self) -> IAnalogInputReferences: ...
    @property
    def AnalogOutputReferences(self) -> IAnalogOutputReferences: ...
    @property
    def AutoGeneratorLevel(self) -> IReferenceLevelsAutoGeneratorLevelSetter: ...
    @property
    def CurrentOutputReferences(self) -> ICurrentOutputReferences: ...
    @property
    def DigitalInputReferences(self) -> IDigitalInputReferences: ...
    @property
    def DigitalOutputReferences(self) -> IDigitalOutputReferences: ...
    @property
    def Frequency(self) -> IDoubleSetting: ...


class IRefreshDefinedResultsStep(ISequenceStep, typing.Protocol):
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...


class IRefreshDefinedResultsStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IRefreshDefinedResultsStep: ...


class IRegulatedFrequencySweepGenerator(typing.Protocol):
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def OffsetUnit(self) -> str: ...
    @OffsetUnit.setter
    def OffsetUnit(self, value: str) -> str: ...
    @property
    def OffsetUnitList(self) -> Array_1[str]: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def StartFrequency(self) -> IDoubleSetting: ...
    @property
    def StopFrequency(self) -> IDoubleSetting: ...
    @property
    def SweepParameters(self) -> IFrequencySweepParameters: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped GetOffsetText due to it being static, abstract and generic.

    GetOffsetText : GetOffsetText_MethodGroup
    class GetOffsetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> str:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, unit: str) -> str:...

    # Skipped GetOffsetValue due to it being static, abstract and generic.

    GetOffsetValue : GetOffsetValue_MethodGroup
    class GetOffsetValue_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> float:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, unit: str) -> float:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...

    # Skipped SetOffsetValue due to it being static, abstract and generic.

    SetOffsetValue : SetOffsetValue_MethodGroup
    class SetOffsetValue_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, offset: float) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, offset: str) -> None:...



class IRegulatedFrequencySweepMeasurement(ISteppedSweepMeasurement, IHighpassFilterMeasurement, ILowpassFilterMeasurement, INoiseWeightingMeasurement, typing.Protocol):
    @property
    def Generator(self) -> IRegulatedFrequencySweepGenerator: ...
    @property
    def GeneratorLevel(self) -> IXYGraph: ...
    @property
    def GeneratorTolerance(self) -> IDoubleSetting: ...
    @property
    def HighpassFilterFrequencyEnabled(self) -> bool: ...
    @HighpassFilterFrequencyEnabled.setter
    def HighpassFilterFrequencyEnabled(self, value: bool) -> bool: ...
    @property
    def Level(self) -> IXYGraph: ...
    @property
    def LowpassFilterFrequencyEnabled(self) -> bool: ...
    @LowpassFilterFrequencyEnabled.setter
    def LowpassFilterFrequencyEnabled(self, value: bool) -> bool: ...
    @property
    def MaximumGeneratorAmplitude(self) -> IDoubleSetting: ...
    @property
    def MeasuredLevelChannel(self) -> MeasuredInputChannelIndex: ...
    @MeasuredLevelChannel.setter
    def MeasuredLevelChannel(self, value: MeasuredInputChannelIndex) -> MeasuredInputChannelIndex: ...
    @property
    def MeasuredLevelTolerance(self) -> IDoubleSetting: ...
    @property
    def MeasuredThdNChannel(self) -> InputChannelIndex: ...
    @MeasuredThdNChannel.setter
    def MeasuredThdNChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def Mode(self) -> RegulatedFrequencySweepMode: ...
    @Mode.setter
    def Mode(self, value: RegulatedFrequencySweepMode) -> RegulatedFrequencySweepMode: ...
    @property
    def NoiseWeightingEnabled(self) -> bool: ...
    @NoiseWeightingEnabled.setter
    def NoiseWeightingEnabled(self, value: bool) -> bool: ...
    @property
    def RegulationSettings(self) -> IRegulatedFrequencySweepRegulationSettings: ...
    @property
    def RmsLevelAcPlusDc(self) -> IXYGraph: ...
    @property
    def Settling(self) -> IRegulatedFrequencySweepSettlingParametersCollection: ...
    @property
    def TargetLevel(self) -> IDoubleSetting: ...
    @property
    def TargetThdN(self) -> IDoubleSetting: ...
    @property
    def ThdNLevel(self) -> IXYGraph: ...
    @property
    def ThdNRatio(self) -> IXYGraph: ...


class IRegulatedFrequencySweepRegulationSettings(ITargetChannelRegulationSettings, typing.Protocol):
    @property
    def MeasureAllChannels(self) -> bool: ...
    @MeasureAllChannels.setter
    def MeasureAllChannels(self, value: bool) -> bool: ...


class IRegulatedFrequencySweepSettlingParametersCollection(typing.Protocol):
    @property
    def Level(self) -> ISettlingParameters: ...
    @property
    def RmsLevelAcPlusDc(self) -> ISettlingParameters: ...
    @property
    def ThdN(self) -> ISettlingParameters: ...


class IRegulationSettings(ITargetChannelRegulationSettings, typing.Protocol):
    @property
    def SourceMaxValue(self) -> IDoubleSetting: ...
    @property
    def SourceMinValue(self) -> IDoubleSetting: ...
    @property
    def TargetChannelType(self) -> RegulationTargetChannel: ...
    @TargetChannelType.setter
    def TargetChannelType(self, value: RegulationTargetChannel) -> RegulationTargetChannel: ...
    @property
    def TargetValueType(self) -> RegulationTargetValueType: ...
    @TargetValueType.setter
    def TargetValueType(self, value: RegulationTargetValueType) -> RegulationTargetValueType: ...


class IRelativeLevelXYGraph(IXYGraph, typing.Protocol):
    @property
    def DataMode(self) -> RelativeDataMode: ...
    @DataMode.setter
    def DataMode(self, value: RelativeDataMode) -> RelativeDataMode: ...
    @property
    def MaxLimitFrequency(self) -> IDoubleSetting: ...
    @property
    def MinLimitFrequency(self) -> IDoubleSetting: ...
    @property
    def ReferenceFrequency(self) -> IDoubleSetting: ...


class IReportDefinition(typing.Protocol):
    @property
    def GraphHeight(self) -> float: ...
    @GraphHeight.setter
    def GraphHeight(self, value: float) -> float: ...
    @property
    def GraphWidth(self) -> float: ...
    @GraphWidth.setter
    def GraphWidth(self, value: float) -> float: ...
    @property
    def LogoAlignment(self) -> LogoAlignment: ...
    @LogoAlignment.setter
    def LogoAlignment(self, value: LogoAlignment) -> LogoAlignment: ...
    @property
    def LogoImageScalePercent(self) -> int: ...
    @LogoImageScalePercent.setter
    def LogoImageScalePercent(self, value: int) -> int: ...
    @property
    def Margins(self) -> IReportMargins: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def ShowDateAndTime(self) -> bool: ...
    @ShowDateAndTime.setter
    def ShowDateAndTime(self, value: bool) -> bool: ...
    @property
    def ShowDetails(self) -> bool: ...
    @ShowDetails.setter
    def ShowDetails(self, value: bool) -> bool: ...
    @property
    def ShowPageNumbers(self) -> bool: ...
    @ShowPageNumbers.setter
    def ShowPageNumbers(self, value: bool) -> bool: ...
    @property
    def ShowSummary(self) -> bool: ...
    @ShowSummary.setter
    def ShowSummary(self, value: bool) -> bool: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    @abc.abstractmethod
    def ClearLogoImage(self) -> None: ...
    # Skipped LoadLogoImage due to it being static, abstract and generic.

    LoadLogoImage : LoadLogoImage_MethodGroup
    class LoadLogoImage_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...



class IReportMargins(typing.Protocol):
    @property
    def Bottom(self) -> float: ...
    @Bottom.setter
    def Bottom(self, value: float) -> float: ...
    @property
    def Left(self) -> float: ...
    @Left.setter
    def Left(self, value: float) -> float: ...
    @property
    def Right(self) -> float: ...
    @Right.setter
    def Right(self, value: float) -> float: ...
    @property
    def Top(self) -> float: ...
    @Top.setter
    def Top(self, value: float) -> float: ...


class IResistanceDcxMeasurement(IMeasurement, typing.Protocol):
    @property
    def AveragingTime(self) -> IDoubleSetting: ...
    @property
    def DelayTime(self) -> IDoubleSetting: ...
    @property
    def Ohms(self) -> IMeterGraph: ...
    @property
    def Range(self) -> DcxOhmRange: ...
    @Range.setter
    def Range(self, value: DcxOhmRange) -> DcxOhmRange: ...
    @property
    def Rate(self) -> DcxDmmRate: ...
    @Rate.setter
    def Rate(self, value: DcxDmmRate) -> DcxDmmRate: ...


class IRubAndBuzzGraph(IXYGraph, typing.Protocol):
    @property
    def HPFactor(self) -> int: ...
    @HPFactor.setter
    def HPFactor(self, value: int) -> int: ...
    @abc.abstractmethod
    def Split(self) -> IGraph: ...


class ISampleRateGenerator(ISineWithArbGenerator, typing.Protocol):
    pass


class ISampleRateMeasurement(IMeasurement, typing.Protocol):
    @property
    def Generator(self) -> ISampleRateGenerator: ...
    @property
    def SampleRate(self) -> IMeterGraph: ...
    @property
    def Settling(self) -> ISampleRateSettlingParametersCollection: ...


class ISampleRateSettlingParametersCollection(typing.Protocol):
    @property
    def SampleRate(self) -> ISettlingParameters: ...


class ISaveAcquisitionToFileSettings(ISaveDataToWavFileSettings, typing.Protocol):
    @property
    def SaveAcquisitionToFile(self) -> bool: ...
    @SaveAcquisitionToFile.setter
    def SaveAcquisitionToFile(self, value: bool) -> bool: ...
    @property
    def SavedAcquisitionAnalogBitDepth(self) -> MeasurementRecorderBitDepthType: ...
    @SavedAcquisitionAnalogBitDepth.setter
    def SavedAcquisitionAnalogBitDepth(self, value: MeasurementRecorderBitDepthType) -> MeasurementRecorderBitDepthType: ...
    @property
    def SavedAcquisitionAudioType(self) -> RecordedAudioType: ...
    @SavedAcquisitionAudioType.setter
    def SavedAcquisitionAudioType(self, value: RecordedAudioType) -> RecordedAudioType: ...


class ISaveDataToWavFileSettings(typing.Protocol):
    @property
    def ReplaceSavedFile(self) -> bool: ...
    @ReplaceSavedFile.setter
    def ReplaceSavedFile(self, value: bool) -> bool: ...
    @property
    def SavedAcquisitionBitDepth(self) -> SavedAcquisitionBitDepthType: ...
    @SavedAcquisitionBitDepth.setter
    def SavedAcquisitionBitDepth(self, value: SavedAcquisitionBitDepthType) -> SavedAcquisitionBitDepthType: ...
    @property
    def SavedAcquisitionFileName(self) -> str: ...
    @SavedAcquisitionFileName.setter
    def SavedAcquisitionFileName(self, value: str) -> str: ...
    @property
    def SavedAcquisitionFolderName(self) -> str: ...
    @SavedAcquisitionFolderName.setter
    def SavedAcquisitionFolderName(self, value: str) -> str: ...


class ISaveGeneratorFileSettings(typing.Protocol):
    @property
    def AudioType(self) -> FileAudioType: ...
    @AudioType.setter
    def AudioType(self, value: FileAudioType) -> FileAudioType: ...
    @property
    def BitDepth(self) -> WavExportBitDepth: ...
    @BitDepth.setter
    def BitDepth(self, value: WavExportBitDepth) -> WavExportBitDepth: ...
    @property
    def FileName(self) -> str: ...
    @FileName.setter
    def FileName(self, value: str) -> str: ...
    @property
    def FolderName(self) -> str: ...
    @FolderName.setter
    def FolderName(self, value: str) -> str: ...
    @property
    def ReplaceSavedFile(self) -> bool: ...
    @ReplaceSavedFile.setter
    def ReplaceSavedFile(self, value: bool) -> bool: ...


class ISaveGeneratorWaveformStep(ISequenceStep, typing.Protocol):
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def WaveformSettings(self) -> ISaveGeneratorFileSettings: ...


class ISaveGeneratorWaveformStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ISaveGeneratorWaveformStep: ...


class IScopeSignalMonitorSettings(IPerInputSignalMonitor, typing.Protocol):
    @property
    def Cycles(self) -> int: ...
    @Cycles.setter
    def Cycles(self, value: int) -> int: ...
    @property
    def InterpolationOn(self) -> bool: ...
    @InterpolationOn.setter
    def InterpolationOn(self, value: bool) -> bool: ...
    @property
    def Residual(self) -> ResidualDisplay: ...
    @Residual.setter
    def Residual(self, value: ResidualDisplay) -> ResidualDisplay: ...
    @property
    def Scope(self) -> IBaseXYGraph: ...


class IScopeSignalMonitorWindow(ISignalMonitorWindow, IScopeSignalMonitorSettings, typing.Protocol):
    @abc.abstractmethod
    def Settings(self, input: APxInputSelection) -> IScopeSignalMonitorSettings: ...


class ISelectInputEqCurveStep(ISequenceStep, typing.Protocol):
    @property
    def Channel(self) -> MeasuredInputChannelIndex: ...
    @Channel.setter
    def Channel(self, value: MeasuredInputChannelIndex) -> MeasuredInputChannelIndex: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def EqNames(self) -> Array_1[str]: ...
    @property
    def Filename(self) -> str: ...
    @Filename.setter
    def Filename(self, value: str) -> str: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @Input.setter
    def Input(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def Invert(self) -> bool: ...
    @Invert.setter
    def Invert(self, value: bool) -> bool: ...
    @property
    def ProjectItemName(self) -> str: ...
    @ProjectItemName.setter
    def ProjectItemName(self, value: str) -> str: ...
    @property
    def Selection(self) -> EqStepSelection: ...
    @Selection.setter
    def Selection(self, value: EqStepSelection) -> EqStepSelection: ...
    # Skipped LoadEqFromFile due to it being static, abstract and generic.

    LoadEqFromFile : LoadEqFromFile_MethodGroup
    class LoadEqFromFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, invertData: bool, replaceIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, invertData: bool, replaceIfExists: bool, renameIfInverted: bool) -> None:...



class ISelectInputEqCurveStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ISelectInputEqCurveStep: ...
    @abc.abstractmethod
    def Add(self) -> ISelectInputEqCurveStep: ...


class ISendHdmiCecMessageStep(ISequenceStep, typing.Protocol):
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def MessageFollower(self) -> CecDeviceType: ...
    @MessageFollower.setter
    def MessageFollower(self, value: CecDeviceType) -> CecDeviceType: ...
    @property
    def MessageOpcode(self) -> int: ...
    @MessageOpcode.setter
    def MessageOpcode(self, value: int) -> int: ...
    @property
    def MessageOperands(self) -> Array_1[int]: ...
    @MessageOperands.setter
    def MessageOperands(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def MessageType(self) -> CecMessageSendType: ...
    @MessageType.setter
    def MessageType(self, value: CecMessageSendType) -> CecMessageSendType: ...
    @property
    def SendFrom(self) -> CecMessageSendFrom: ...
    @SendFrom.setter
    def SendFrom(self, value: CecMessageSendFrom) -> CecMessageSendFrom: ...


class ISendHdmiCecMessageStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ISendHdmiCecMessageStep: ...
    @abc.abstractmethod
    def Add(self) -> ISendHdmiCecMessageStep: ...


class ISendPdmControlCodeIndefinitelyStep(ISequenceStep, typing.Protocol):
    @property
    def CodeValue(self) -> int: ...
    @CodeValue.setter
    def CodeValue(self, value: int) -> int: ...
    @property
    def Edge(self) -> PdmControlCodeEdge: ...
    @Edge.setter
    def Edge(self, value: PdmControlCodeEdge) -> PdmControlCodeEdge: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def MsbFirst(self) -> bool: ...
    @MsbFirst.setter
    def MsbFirst(self, value: bool) -> bool: ...


class ISendPdmControlCodeIndefinitelyStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ISendPdmControlCodeIndefinitelyStep: ...
    @abc.abstractmethod
    def Add(self) -> ISendPdmControlCodeIndefinitelyStep: ...


class ISendPdmControlCodesStep(ISequenceStep, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Edge(self) -> PdmControlCodeEdge: ...
    @Edge.setter
    def Edge(self, value: PdmControlCodeEdge) -> PdmControlCodeEdge: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def MsbFirst(self) -> bool: ...
    @MsbFirst.setter
    def MsbFirst(self, value: bool) -> bool: ...
    @abc.abstractmethod
    def Add(self, code: int, repetitions: int) -> None: ...
    @abc.abstractmethod
    def Delete(self, index: int) -> None: ...
    @abc.abstractmethod
    def GetCode(self, index: int) -> int: ...
    @abc.abstractmethod
    def GetRepetitions(self, index: int) -> int: ...
    @abc.abstractmethod
    def SetCode(self, index: int, code: int) -> None: ...
    @abc.abstractmethod
    def SetRepetitions(self, index: int, count: int) -> None: ...


class ISendPdmControlCodesStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ISendPdmControlCodesStep: ...
    @abc.abstractmethod
    def Add(self) -> ISendPdmControlCodesStep: ...


class ISensitivityMeterDataTrace(IDerivedDataTrace, typing.Protocol):
    @property
    def ComparisonChannel(self) -> InputChannelIndex: ...
    @ComparisonChannel.setter
    def ComparisonChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def ReferenceChannel(self) -> InputChannelIndex: ...
    @ReferenceChannel.setter
    def ReferenceChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...


class ISensitivityMeterDataTraceCollection(IDerivedDataTraceCollection, typing.Protocol):
    @property
    def Item(self) -> ISensitivityMeterDataTrace: ...
    @abc.abstractmethod
    def Add(self) -> ISensitivityMeterDataTrace: ...


class ISensitivityMeterResult(IMeterGraph, IDerivedResult, typing.Protocol):
    @property
    def TargetResultName(self) -> str: ...
    @TargetResultName.setter
    def TargetResultName(self, value: str) -> str: ...
    @property
    def TargetResultNames(self) -> Array_1[str]: ...
    @property
    def Traces(self) -> ISensitivityMeterDataTraceCollection: ...


class ISensitivityXYResult(IXYGraphWithLimits, IDerivedResult, typing.Protocol):
    @property
    def TargetResultName(self) -> str: ...
    @TargetResultName.setter
    def TargetResultName(self, value: str) -> str: ...
    @property
    def TargetResultNames(self) -> Array_1[str]: ...
    @property
    def Traces(self) -> ICompareXYDataTraceCollection: ...


class ISequence(IEnumerable, typing.Protocol):
    @property
    def AuxControlInForDialogButtons(self) -> ISequenceAuxControlInputSettings: ...
    @property
    def CloseScoDelay(self) -> IDoubleSetting: ...
    @property
    def Count(self) -> int: ...
    @property
    def DataOutput(self) -> ISequenceDataOutput: ...
    @property
    def DigitalInterfaceSyncDelay(self) -> IDoubleSetting: ...
    @property
    def EndSettings(self) -> ISequenceEndSettings: ...
    @property
    def ExecutionTime(self) -> TimeSpan: ...
    @property
    def FailedResults(self) -> IFailedSequenceResultCollection: ...
    @property
    def FailMessage(self) -> str: ...
    @FailMessage.setter
    def FailMessage(self, value: str) -> str: ...
    @property
    def Item(self) -> ISignalPath: ...
    @property
    def Item(self) -> ISignalPath: ...
    @property
    def LastStartTime(self) -> DateTime: ...
    @property
    def OpenScoDelay(self) -> IDoubleSetting: ...
    @property
    def Passed(self) -> bool: ...
    @property
    def PassMessage(self) -> str: ...
    @PassMessage.setter
    def PassMessage(self, value: str) -> str: ...
    @property
    def PostSequenceSteps(self) -> ISequenceStepCollectionBase: ...
    @property
    def PreSequenceSteps(self) -> ISequenceStepCollectionBase: ...
    @property
    def ProductionTest(self) -> bool: ...
    @ProductionTest.setter
    def ProductionTest(self, value: bool) -> bool: ...
    @property
    def ProductionTestSettings(self) -> IProductionTestSettings: ...
    @property
    def Report(self) -> ISequenceReport: ...
    @property
    def Results(self) -> ISequenceSignalPathResultCollection: ...
    @property
    def SampleRateChangeDelay(self) -> IDoubleSetting: ...
    @property
    def Sequences(self) -> ISequenceCollection: ...
    @property
    def ShowApplicationWindow(self) -> bool: ...
    @ShowApplicationWindow.setter
    def ShowApplicationWindow(self, value: bool) -> bool: ...
    @property
    def ShowPassFailMessage(self) -> bool: ...
    @ShowPassFailMessage.setter
    def ShowPassFailMessage(self, value: bool) -> bool: ...
    @property
    def StartSettings(self) -> ISequenceStartSettings: ...
    @property
    def Status(self) -> SequenceCompletedStatus: ...
    @property
    def StatusMessage(self) -> str: ...
    @abc.abstractmethod
    def ApplyCheckedState(self, checkedState: ISequenceCheckedState) -> None: ...
    @abc.abstractmethod
    def ClearFailImage(self) -> None: ...
    @abc.abstractmethod
    def ClearPassImage(self) -> None: ...
    @abc.abstractmethod
    def GetCheckedState(self) -> ISequenceCheckedState: ...
    @abc.abstractmethod
    def LoadFailImage(self, fileName: str, replaceIfExists: bool) -> None: ...
    @abc.abstractmethod
    def LoadPassImage(self, fileName: str, replaceIfExists: bool) -> None: ...
    @abc.abstractmethod
    def RunProductionTestSequence(self, sequenceName: str, password: str) -> None: ...
    @abc.abstractmethod
    def StartFromMeasurement(self, signalPathName: str, measurementName: str) -> None: ...
    # Skipped GetMeasurement due to it being static, abstract and generic.

    GetMeasurement : GetMeasurement_MethodGroup
    class GetMeasurement_MethodGroup:
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementIndex: int) -> ISequenceMeasurement:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementName: str) -> ISequenceMeasurement:...

    # Skipped GetSignalPath due to it being static, abstract and generic.

    GetSignalPath : GetSignalPath_MethodGroup
    class GetSignalPath_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> ISignalPath:...
        @typing.overload
        def __call__(self, signalPathName: str) -> ISignalPath:...

    # Skipped Run due to it being static, abstract and generic.

    Run : Run_MethodGroup
    class Run_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, deviceId: str) -> None:...



class ISequenceAuxControlInputSettings(typing.Protocol):
    @property
    def AuxControlInForCancelAbortButton(self) -> IAuxControl: ...
    @property
    def AuxControlInForCancelAbortEnabled(self) -> bool: ...
    @AuxControlInForCancelAbortEnabled.setter
    def AuxControlInForCancelAbortEnabled(self, value: bool) -> bool: ...
    @property
    def AuxControlInForFailIgnoreButton(self) -> IAuxControl: ...
    @property
    def AuxControlInForFailIgnoreEnabled(self) -> bool: ...
    @AuxControlInForFailIgnoreEnabled.setter
    def AuxControlInForFailIgnoreEnabled(self, value: bool) -> bool: ...
    @property
    def AuxControlInForOkPassButton(self) -> IAuxControl: ...
    @property
    def AuxControlInForOkPassEnabled(self) -> bool: ...
    @AuxControlInForOkPassEnabled.setter
    def AuxControlInForOkPassEnabled(self, value: bool) -> bool: ...
    @property
    def AuxControlInForRetryButton(self) -> IAuxControl: ...
    @property
    def AuxControlInForRetryEnabled(self) -> bool: ...
    @AuxControlInForRetryEnabled.setter
    def AuxControlInForRetryEnabled(self, value: bool) -> bool: ...


class ISequenceCheckedState(typing.Protocol):
    # Skipped GetCheckedState due to it being static, abstract and generic.

    GetCheckedState : GetCheckedState_MethodGroup
    class GetCheckedState_MethodGroup:
        @typing.overload
        def __call__(self, signalPathIndex: int) -> bool:...
        @typing.overload
        def __call__(self, signalPathName: str) -> bool:...
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementIndex: int) -> bool:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementName: str) -> bool:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementName: str, stepName: str) -> bool:...

    # Skipped SetCheckedState due to it being static, abstract and generic.

    SetCheckedState : SetCheckedState_MethodGroup
    class SetCheckedState_MethodGroup:
        @typing.overload
        def __call__(self, signalPathIndex: int, checkedState: bool) -> None:...
        @typing.overload
        def __call__(self, signalPathName: str, checkedState: bool) -> None:...
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementIndex: int, checkedState: bool) -> None:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementName: str, checkedState: bool) -> None:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementName: str, stepName: str, checkedState: bool) -> None:...



class ISequenceCollection(IEnumerable, typing.Protocol):
    @property
    def ActiveSequence(self) -> ISequenceSettings: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ISequenceSettings: ...
    @property
    def Item(self) -> ISequenceSettings: ...
    @abc.abstractmethod
    def Activate(self, sequenceName: str) -> None: ...
    @abc.abstractmethod
    def Add(self, name: str) -> ISequenceSettings: ...
    # Skipped Delete due to it being static, abstract and generic.

    Delete : Delete_MethodGroup
    class Delete_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, sequenceName: str) -> None:...



class ISequenceDataOutput(typing.Protocol):
    @property
    def MeterReadingsFileName(self) -> str: ...
    @MeterReadingsFileName.setter
    def MeterReadingsFileName(self, value: str) -> str: ...
    @property
    def WriteMeterReadingsToCsvFile(self) -> bool: ...
    @WriteMeterReadingsToCsvFile.setter
    def WriteMeterReadingsToCsvFile(self, value: bool) -> bool: ...


class ISequenceEndAuxControlSettings(typing.Protocol):
    @property
    def AuxControlOutSettingsForAllMeasurementsPassed(self) -> IAuxControl: ...
    @property
    def AuxControlOutSettingsForAnyMeasurementFailed(self) -> IAuxControl: ...
    @property
    def AuxControlOutSettingsForSequenceCancelled(self) -> IAuxControl: ...


class ISequenceEndSettings(typing.Protocol):
    @property
    def AuxControlOutSettingsForAllMeasurementsPassed(self) -> IAuxControl: ...
    @property
    def AuxControlOutSettingsForAnyMeasurementFailed(self) -> IAuxControl: ...
    @property
    def AuxControlOutSettingsForSequenceCancelled(self) -> IAuxControl: ...
    @property
    def ProgramSettings(self) -> ISequenceProgram: ...


class ISequenceMeasurement(typing.Protocol):
    @property
    def AutoRetryFailureBehavior(self) -> AutoRetryMeasurementFailureBehavior: ...
    @AutoRetryFailureBehavior.setter
    def AutoRetryFailureBehavior(self, value: AutoRetryMeasurementFailureBehavior) -> AutoRetryMeasurementFailureBehavior: ...
    @property
    def AutoRetryMaxAttempts(self) -> int: ...
    @AutoRetryMaxAttempts.setter
    def AutoRetryMaxAttempts(self, value: int) -> int: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def FailureBehavior(self) -> MeasurementFailureBehavior: ...
    @FailureBehavior.setter
    def FailureBehavior(self, value: MeasurementFailureBehavior) -> MeasurementFailureBehavior: ...
    @property
    def HasSequenceResults(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def ResultGraphs(self) -> ISequenceResultGraphCollection: ...
    @property
    def SequenceResults(self) -> ISequenceResultCollection: ...
    @property
    def SequenceSteps(self) -> ISequenceStepCollection: ...
    @abc.abstractmethod
    def Run(self) -> None: ...
    @abc.abstractmethod
    def Show(self) -> None: ...


class ISequenceProgram(typing.Protocol):
    @property
    def ActualOutput(self) -> str: ...
    @property
    def Arguments(self) -> str: ...
    @property
    def Command(self) -> str: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def ExpectedOutput(self) -> str: ...
    @property
    def RanToCompletion(self) -> bool: ...
    @property
    def WaitForExitBehavior(self) -> ProgramStepWaitBehavior: ...
    @property
    def WorkingDirectory(self) -> str: ...


class ISequenceReport(typing.Protocol):
    @property
    def AutoSaveReport(self) -> bool: ...
    @AutoSaveReport.setter
    def AutoSaveReport(self, value: bool) -> bool: ...
    @property
    def AutoSaveReportFileFormat(self) -> ReportExportFormat: ...
    @AutoSaveReportFileFormat.setter
    def AutoSaveReportFileFormat(self, value: ReportExportFormat) -> ReportExportFormat: ...
    @property
    def AutoSaveReportFileLocation(self) -> str: ...
    @AutoSaveReportFileLocation.setter
    def AutoSaveReportFileLocation(self, value: str) -> str: ...
    @property
    def AutoSaveReportFileNamePrefix(self) -> str: ...
    @AutoSaveReportFileNamePrefix.setter
    def AutoSaveReportFileNamePrefix(self, value: str) -> str: ...
    @property
    def AutoSaveReportFileNameType(self) -> AutoSaveReportFileNameType: ...
    @AutoSaveReportFileNameType.setter
    def AutoSaveReportFileNameType(self, value: AutoSaveReportFileNameType) -> AutoSaveReportFileNameType: ...
    @property
    def AutoSaveUpdateBehavior(self) -> ReportUpdateBehavior: ...
    @AutoSaveUpdateBehavior.setter
    def AutoSaveUpdateBehavior(self, value: ReportUpdateBehavior) -> ReportUpdateBehavior: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def CustomReportLayout(self) -> str: ...
    @CustomReportLayout.setter
    def CustomReportLayout(self, value: str) -> str: ...
    @property
    def CustomReportLayouts(self) -> Array_1[str]: ...
    @property
    def Definition(self) -> IReportDefinition: ...
    @property
    def IncludeApxInstrumentInfo(self) -> bool: ...
    @IncludeApxInstrumentInfo.setter
    def IncludeApxInstrumentInfo(self, value: bool) -> bool: ...
    @property
    def ReportType(self) -> ReportType: ...
    @ReportType.setter
    def ReportType(self, value: ReportType) -> ReportType: ...
    @property
    def ShowAutoSavedReport(self) -> bool: ...
    @ShowAutoSavedReport.setter
    def ShowAutoSavedReport(self, value: bool) -> bool: ...
    @property
    def ShowFailedMeasurementResultsOnly(self) -> bool: ...
    @ShowFailedMeasurementResultsOnly.setter
    def ShowFailedMeasurementResultsOnly(self, value: bool) -> bool: ...
    @abc.abstractmethod
    def ExportHtml(self, fileName: str) -> None: ...
    @abc.abstractmethod
    def ExportMat(self, fileName: str) -> None: ...
    @abc.abstractmethod
    def ExportPdf(self, fileName: str) -> None: ...
    @abc.abstractmethod
    def ExportRtf(self, fileName: str) -> None: ...
    @abc.abstractmethod
    def ExportXls(self, fileName: str) -> None: ...
    @abc.abstractmethod
    def LoadCustomReportLayout(self, layoutFileName: str) -> None: ...
    @abc.abstractmethod
    def Reset(self) -> None: ...
    # Skipped ExportCustom due to it being static, abstract and generic.

    ExportCustom : ExportCustom_MethodGroup
    class ExportCustom_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, updateBehavior: ReportUpdateBehavior) -> None:...
        @typing.overload
        def __call__(self, fileName: str, append: bool) -> None:...

    # Skipped ExportText due to it being static, abstract and generic.

    ExportText : ExportText_MethodGroup
    class ExportText_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, append: bool) -> None:...



class ISequenceResult(typing.Protocol):
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def ErrorMessage(self) -> str: ...
    @property
    def HasErrorMessage(self) -> bool: ...
    @property
    def HasMeterValues(self) -> bool: ...
    @property
    def HasRawTextResults(self) -> bool: ...
    @property
    def HasThieleSmallValues(self) -> bool: ...
    @property
    def HasXYValues(self) -> bool: ...
    @property
    def HasXYYValues(self) -> bool: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def LeftUnit(self) -> str: ...
    @property
    def LowerLimitCheckEnabled(self) -> bool: ...
    @property
    def Measurement(self) -> str: ...
    @property
    def MeasurementName(self) -> str: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def MeterUnit(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def PassedLowerLimitCheck(self) -> bool: ...
    @property
    def PassedResult(self) -> bool: ...
    @property
    def PassedUpperLimitCheck(self) -> bool: ...
    @property
    def ResultType(self) -> MeasurementResultType: ...
    @property
    def RightUnit(self) -> str: ...
    @property
    def SignalPath(self) -> str: ...
    @property
    def SignalPathName(self) -> str: ...
    @property
    def UpperLimitCheckEnabled(self) -> bool: ...
    @property
    def UserActive(self) -> bool: ...
    @property
    def UserPassed(self) -> bool: ...
    @property
    def XUnit(self) -> str: ...
    @property
    def YUnit(self) -> str: ...
    @abc.abstractmethod
    def ExportData(self, fileName: str) -> None: ...
    @abc.abstractmethod
    def GetMeterLowerLimitText(self) -> Array_1[str]: ...
    @abc.abstractmethod
    def GetMeterLowerLimitValues(self) -> Array_1[float]: ...
    @abc.abstractmethod
    def GetMeterReadingNames(self) -> Array_1[str]: ...
    @abc.abstractmethod
    def GetMeterText(self) -> Array_1[str]: ...
    @abc.abstractmethod
    def GetMeterUpperLimitText(self) -> Array_1[str]: ...
    @abc.abstractmethod
    def GetMeterUpperLimitValues(self) -> Array_1[float]: ...
    @abc.abstractmethod
    def GetRawTextResults(self) -> Array_1[str]: ...
    @abc.abstractmethod
    def GetThieleSmallLowerLimitValue(self, parameter: ThieleSmallParameter) -> float: ...
    @abc.abstractmethod
    def GetThieleSmallUpperLimitValue(self, parameter: ThieleSmallParameter) -> float: ...
    @abc.abstractmethod
    def GetThieleSmallValues(self, parameter: ThieleSmallParameter) -> Array_1[float]: ...
    @abc.abstractmethod
    def GetThieleSmallValuesText(self, parameter: ThieleSmallParameter) -> Array_1[str]: ...
    @abc.abstractmethod
    def GetXYChannelCount(self, axis: VerticalAxis) -> int: ...
    @abc.abstractmethod
    def GetXYChannelNames(self, axis: VerticalAxis) -> Array_1[str]: ...
    @abc.abstractmethod
    def GetXYLowerLimit(self, axis: VerticalAxis) -> ISequenceResultXyGraphLimit: ...
    @abc.abstractmethod
    def GetXYUpperLimit(self, axis: VerticalAxis) -> ISequenceResultXyGraphLimit: ...
    @abc.abstractmethod
    def HasData(self, dataType: SourceDataType, index: int) -> bool: ...
    @abc.abstractmethod
    def LimitCheckEnabled(self, limit: LimitType, axis: VerticalAxis) -> bool: ...
    @abc.abstractmethod
    def PassedLimitCheck(self, limit: LimitType, axis: VerticalAxis) -> bool: ...
    # Skipped GetMeterValues due to it being static, abstract and generic.

    GetMeterValues : GetMeterValues_MethodGroup
    class GetMeterValues_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[float]:...
        @typing.overload
        def __call__(self, readingName: str) -> Array_1[float]:...

    # Skipped GetThieleSmallValue due to it being static, abstract and generic.

    GetThieleSmallValue : GetThieleSmallValue_MethodGroup
    class GetThieleSmallValue_MethodGroup:
        @typing.overload
        def __call__(self, parameter: ThieleSmallParameter) -> float:...
        @typing.overload
        def __call__(self, driverIndex: int, parameter: ThieleSmallParameter) -> float:...

    # Skipped GetThieleSmallValueText due to it being static, abstract and generic.

    GetThieleSmallValueText : GetThieleSmallValueText_MethodGroup
    class GetThieleSmallValueText_MethodGroup:
        @typing.overload
        def __call__(self, parameter: ThieleSmallParameter) -> str:...
        @typing.overload
        def __call__(self, driverIndex: int, parameter: ThieleSmallParameter) -> str:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis = ..., dataType: SourceDataType = ..., dataIndex: int = ...) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis = ..., dataType: SourceDataType = ..., dataIndex: int = ...) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis = ..., dataType: SourceDataType = ..., dataIndex: int = ...) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis = ..., dataType: SourceDataType = ..., dataIndex: int = ...) -> Array_1[float]:...

    # Skipped GetXYText due to it being static, abstract and generic.

    GetXYText : GetXYText_MethodGroup
    class GetXYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis = ..., dataType: SourceDataType = ..., dataIndex: int = ...) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis = ..., dataType: SourceDataType = ..., dataIndex: int = ...) -> Array_1[GraphStringPoint]:...

    # Skipped GetXYValues due to it being static, abstract and generic.

    GetXYValues : GetXYValues_MethodGroup
    class GetXYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis = ..., dataType: SourceDataType = ..., dataIndex: int = ...) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis = ..., dataType: SourceDataType = ..., dataIndex: int = ...) -> Array_1[GraphPoint]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis = ..., dataType: SourceDataType = ..., dataIndex: int = ...) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis = ..., dataType: SourceDataType = ..., dataIndex: int = ...) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis = ..., dataType: SourceDataType = ..., dataIndex: int = ...) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis = ..., dataType: SourceDataType = ..., dataIndex: int = ...) -> Array_1[float]:...

    # Skipped PassedLimitCheckOnChannel due to it being static, abstract and generic.

    PassedLimitCheckOnChannel : PassedLimitCheckOnChannel_MethodGroup
    class PassedLimitCheckOnChannel_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, limit: LimitType, axis: VerticalAxis) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, limit: LimitType, axis: VerticalAxis) -> bool:...

    # Skipped PassedLowerLimitCheckOnChannel due to it being static, abstract and generic.

    PassedLowerLimitCheckOnChannel : PassedLowerLimitCheckOnChannel_MethodGroup
    class PassedLowerLimitCheckOnChannel_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped PassedThieleSmallLowerLimit due to it being static, abstract and generic.

    PassedThieleSmallLowerLimit : PassedThieleSmallLowerLimit_MethodGroup
    class PassedThieleSmallLowerLimit_MethodGroup:
        @typing.overload
        def __call__(self, parameter: ThieleSmallParameter) -> bool:...
        @typing.overload
        def __call__(self, driverIndex: int, parameter: ThieleSmallParameter) -> bool:...

    # Skipped PassedThieleSmallUpperLimit due to it being static, abstract and generic.

    PassedThieleSmallUpperLimit : PassedThieleSmallUpperLimit_MethodGroup
    class PassedThieleSmallUpperLimit_MethodGroup:
        @typing.overload
        def __call__(self, parameter: ThieleSmallParameter) -> bool:...
        @typing.overload
        def __call__(self, driverIndex: int, parameter: ThieleSmallParameter) -> bool:...

    # Skipped PassedUpperLimitCheckOnChannel due to it being static, abstract and generic.

    PassedUpperLimitCheckOnChannel : PassedUpperLimitCheckOnChannel_MethodGroup
    class PassedUpperLimitCheckOnChannel_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...



class ISequenceResultCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def ErrorMessage(self) -> str: ...
    @property
    def HasErrors(self) -> bool: ...
    @property
    def Item(self) -> ISequenceResult: ...
    @property
    def Item(self) -> ISequenceResult: ...
    @property
    def Item(self) -> ISequenceResult: ...
    @property
    def MeasurementName(self) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SignalPathName(self) -> str: ...
    # Skipped ContainsResult due to it being static, abstract and generic.

    ContainsResult : ContainsResult_MethodGroup
    class ContainsResult_MethodGroup:
        @typing.overload
        def __call__(self, resultName: str) -> bool:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> bool:...



class ISequenceResultGraph(typing.Protocol):
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...


class ISequenceResultGraphCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ISequenceResultGraph: ...


class ISequenceResultXyGraphLimit(typing.Protocol):
    @property
    def ChannelCount(self) -> int: ...
    @property
    def PassedLimitCheck(self) -> bool: ...
    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> Array_1[float]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> Array_1[float]:...

    # Skipped HasLimitOnChannel due to it being static, abstract and generic.

    HasLimitOnChannel : HasLimitOnChannel_MethodGroup
    class HasLimitOnChannel_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped PassedLimitCheckOnChannel due to it being static, abstract and generic.

    PassedLimitCheckOnChannel : PassedLimitCheckOnChannel_MethodGroup
    class PassedLimitCheckOnChannel_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...



class ISequenceSettings(typing.Protocol):
    @property
    def AllMeasurementsPassedBehavior(self) -> SequencePassBehavior: ...
    @AllMeasurementsPassedBehavior.setter
    def AllMeasurementsPassedBehavior(self, value: SequencePassBehavior) -> SequencePassBehavior: ...
    @property
    def AnyMeasurementFailedBehavior(self) -> SequenceFailBehavior: ...
    @AnyMeasurementFailedBehavior.setter
    def AnyMeasurementFailedBehavior(self, value: SequenceFailBehavior) -> SequenceFailBehavior: ...
    @property
    def ClearOperatorResponseVariablesOnRetry(self) -> bool: ...
    @ClearOperatorResponseVariablesOnRetry.setter
    def ClearOperatorResponseVariablesOnRetry(self, value: bool) -> bool: ...
    @property
    def EndAuxControlSettings(self) -> ISequenceEndAuxControlSettings: ...
    @property
    def MaxRetries(self) -> int: ...
    @MaxRetries.setter
    def MaxRetries(self, value: int) -> int: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def RequiresPassword(self) -> bool: ...
    @RequiresPassword.setter
    def RequiresPassword(self, value: bool) -> bool: ...
    @property
    def SequenceLogFileName(self) -> str: ...
    @SequenceLogFileName.setter
    def SequenceLogFileName(self, value: str) -> str: ...
    @property
    def StartAuxControlSettings(self) -> ISequenceStartAuxControlSettings: ...
    @property
    def Statistics(self) -> ISequenceStatisticsCollection: ...
    @property
    def Variables(self) -> ISequenceVariablesCollection: ...
    @property
    def WriteSequenceLogFile(self) -> bool: ...
    @WriteSequenceLogFile.setter
    def WriteSequenceLogFile(self, value: bool) -> bool: ...
    @abc.abstractmethod
    def Activate(self) -> None: ...
    @abc.abstractmethod
    def MoveDown(self) -> None: ...
    @abc.abstractmethod
    def MoveUp(self) -> None: ...


class ISequenceSignalPathResultCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ISequenceResult: ...
    # Skipped GetResults due to it being static, abstract and generic.

    GetResults : GetResults_MethodGroup
    class GetResults_MethodGroup:
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementIndex: int) -> ISequenceResultCollection:...
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementName: str) -> ISequenceResultCollection:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementIndex: int) -> ISequenceResultCollection:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementName: str) -> ISequenceResultCollection:...



class ISequenceStartAuxControlSettings(typing.Protocol):
    @property
    def AuxControlInSettingsForSequenceStart(self) -> IAuxControl: ...
    @property
    def AuxControlOutSettingsForSequenceStart(self) -> IAuxControl: ...
    @property
    def StartSequenceOnAuxControlIn(self) -> bool: ...
    @StartSequenceOnAuxControlIn.setter
    def StartSequenceOnAuxControlIn(self, value: bool) -> bool: ...


class ISequenceStartSettings(typing.Protocol):
    @property
    def AuxControlInSettingsForSequenceStart(self) -> IAuxControl: ...
    @property
    def AuxControlOutSettingsForSequenceStart(self) -> IAuxControl: ...
    @property
    def DeviceIdPromptText(self) -> str: ...
    @property
    def DeviceIdUserResponse(self) -> str: ...
    @property
    def PromptUserForDeviceId(self) -> bool: ...
    @PromptUserForDeviceId.setter
    def PromptUserForDeviceId(self, value: bool) -> bool: ...
    @property
    def StartSequenceOnAuxControlIn(self) -> bool: ...
    @StartSequenceOnAuxControlIn.setter
    def StartSequenceOnAuxControlIn(self, value: bool) -> bool: ...


class ISequenceStatistic(typing.Protocol):
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Id(self) -> SequenceStatisticType: ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> str: ...


class ISequenceStatisticsCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ISequenceStatistic: ...
    @property
    def Item(self) -> ISequenceStatistic: ...


class ISequenceStep(typing.Protocol):
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    @abc.abstractmethod
    def CopyToClipboard(self) -> bool: ...
    @abc.abstractmethod
    def Delete(self) -> None: ...
    @abc.abstractmethod
    def MoveTo(self, index: int) -> None: ...


class ISequenceStepCheckedState(typing.Protocol):
    # Skipped GetCheckedState due to it being static, abstract and generic.

    GetCheckedState : GetCheckedState_MethodGroup
    class GetCheckedState_MethodGroup:
        @typing.overload
        def __call__(self, stepIndex: int) -> bool:...
        @typing.overload
        def __call__(self, stepName: str) -> bool:...

    # Skipped SetCheckedState due to it being static, abstract and generic.

    SetCheckedState : SetCheckedState_MethodGroup
    class SetCheckedState_MethodGroup:
        @typing.overload
        def __call__(self, stepIndex: int, checkedState: bool) -> None:...
        @typing.overload
        def __call__(self, stepName: str, checkedState: bool) -> None:...



class ISequenceStepCollection(ISequenceStepCollectionBase, typing.Protocol):
    @property
    def A2dpSinkSteps(self) -> IA2dpSinkStepCollection: ...
    @property
    def A2dpSourceSteps(self) -> IA2dpSourceStepCollection: ...
    @property
    def AppendedMeasurementSteps(self) -> IAppendedMeasurementStepCollection: ...
    @property
    def AvrcpSetAbsoluteVolumeSteps(self) -> IAvrcpSetAbsoluteVolumeStepCollection: ...
    @property
    def CalibrateFromTedsAcousticSteps(self) -> ICalibrateFromTedsAcousticStepCollection: ...
    @property
    def CalibrateFromTedsSteps(self) -> ICalibrateFromTedsStepCollection: ...
    @property
    def ClearBluetoothDeviceListSteps(self) -> IClearBluetoothDeviceListStepCollection: ...
    @property
    def ClearVariableValueSteps(self) -> IClearVariableValueStepCollection: ...
    @property
    def ConnectBluetoothDeviceSteps(self) -> IConnectBluetoothDeviceStepCollection: ...
    @property
    def DigitalSyncDelaySteps(self) -> IDigitalSyncDelayStepCollection: ...
    @property
    def DisconnectBluetoothDeviceSteps(self) -> IDisconnectBluetoothDeviceStepCollection: ...
    @property
    def EnableGeneratorSteps(self) -> IEnableGeneratorStepCollection: ...
    @property
    def EnableVBiasSteps(self) -> IEnableVBiasStepCollection: ...
    @property
    def EnableWidebandSpeechSteps(self) -> IEnableWidebandSpeechStepCollection: ...
    @property
    def ExportResultDataSteps(self) -> IExportResultDataStepCollection: ...
    @property
    def ExportWavFileSteps(self) -> IExportWavFileStepCollection: ...
    @property
    def HfpAudioGatewayATCommandSteps(self) -> IHfpAudioGatewayATCommandStepCollection: ...
    @property
    def HfpAudioGatewaySteps(self) -> IHfpAudioGatewayStepCollection: ...
    @property
    def HfpHandsFreeCommandSteps(self) -> IHfpHandsFreeCommandStepCollection: ...
    @property
    def HfpHandsFreeSteps(self) -> IHfpHandsFreeStepCollection: ...
    @property
    def HspAudioGatewayATCommandSteps(self) -> IHspAudioGatewayATCommandStepCollection: ...
    @property
    def HspAudioGatewaySteps(self) -> IHspAudioGatewayStepCollection: ...
    @property
    def HspHeadsetATCommandSteps(self) -> IHspHeadsetATCommandStepCollection: ...
    @property
    def HspHeadsetSteps(self) -> IHspHeadsetStepCollection: ...
    @property
    def ImportAmplifierCorrectionCurveSteps(self) -> IImportAmplifierCorrectionCurveStepCollection: ...
    @property
    def ImportGeneratorEqCurveSteps(self) -> IImportGeneratorEqCurveStepCollection: ...
    @property
    def ImportLimitsDataSteps(self) -> IImportLimitsDataStepCollection: ...
    @property
    def ImportOutputEqCurveSteps(self) -> IImportOutputEqCurveStepCollection: ...
    @property
    def ImportResultDataSteps(self) -> IImportResultDataStepCollection: ...
    @property
    def InputSteps(self) -> IInputStepCollection: ...
    @property
    def MakeResultVisibleSteps(self) -> IMakeResultVisibleStepCollection: ...
    @property
    def MeasurementSteps(self) -> IMeasurementStepCollection: ...
    @property
    def RefreshDefinedResultsSteps(self) -> IRefreshDefinedResultsStepCollection: ...
    @property
    def SaveGeneratorWaveformSteps(self) -> ISaveGeneratorWaveformStepCollection: ...
    @property
    def SelectInputEqCurveSteps(self) -> ISelectInputEqCurveStepCollection: ...
    @property
    def SendHdmiCecMessageSteps(self) -> ISendHdmiCecMessageStepCollection: ...
    @property
    def SendPdmControlCodeIndefinitelySteps(self) -> ISendPdmControlCodeIndefinitelyStepCollection: ...
    @property
    def SendPdmControlCodesSteps(self) -> ISendPdmControlCodesStepCollection: ...
    @property
    def SetBluetoothTransmitPowerSteps(self) -> ISetBluetoothTransmitPowerStepCollection: ...
    @property
    def SetDcxControlOutputSteps(self) -> ISetDcxControlOutputStepCollection: ...
    @property
    def SetDcxDcvOutputSteps(self) -> ISetDcxDcvOutputStepCollection: ...
    @property
    def SetDeviceDelaySteps(self) -> ISetDeviceDelayStepCollection: ...
    @property
    def SetHeadphoneAmpOutputSteps(self) -> ISetHeadphoneAmpOutputStepCollection: ...
    @property
    def SetPowerAmpOutputSteps(self) -> ISetPowerAmpOutputStepCollection: ...
    @property
    def SetSwitcherConfigurationSteps(self) -> ISetSwitcherConfigurationStepCollection: ...
    @property
    def SetTransducerInputSteps(self) -> ISetTransducerInputStepCollection: ...
    @property
    def SetTransducerOutputSteps(self) -> ISetTransducerOutputStepCollection: ...
    @property
    def SetVddOutputSteps(self) -> ISetVddOutputStepCollection: ...
    @property
    def StartAnalogSineWaveGeneratorSteps(self) -> IStartAnalogSineWaveGeneratorStepCollection: ...
    @property
    def StopAnalogSineWaveGeneratorSteps(self) -> IStopAnalogSineWaveGeneratorStepCollection: ...
    @property
    def StopSendingPdmControlCodeSteps(self) -> IStopSendingPdmControlCodeStepCollection: ...
    @property
    def UserEvaluationOfResultSteps(self) -> IUserEvaluationOfResultStepCollection: ...


class ISequenceStepCollectionBase(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def DelaySteps(self) -> IDelayStepCollection: ...
    @property
    def Item(self) -> ISequenceStep: ...
    @property
    def ProgramSteps(self) -> IProgramStepCollection: ...
    @property
    def PromptSteps(self) -> IPromptStepCollection: ...
    @property
    def SetAuxControlOutputSteps(self) -> ISetAuxControlOutputStepCollection: ...
    @abc.abstractmethod
    def ApplyCheckedState(self, checkedState: ISequenceStepCheckedState) -> None: ...
    @abc.abstractmethod
    def CanAddStep(self, stepType: SequenceStepType) -> bool: ...
    @abc.abstractmethod
    def CopyCheckedStepsToClipboard(self) -> None: ...
    @abc.abstractmethod
    def GetCheckedState(self) -> ISequenceStepCheckedState: ...
    @abc.abstractmethod
    def PasteStepsFromClipboard(self, insertIndex: int) -> None: ...


class ISequenceVariable(typing.Protocol):
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> str: ...


class ISequenceVariablesCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ISequenceVariable: ...
    @property
    def Item(self) -> ISequenceVariable: ...


class ISerialDigitalReceiverSettings(ICommonDigitalInputSettings, typing.Protocol):
    @property
    def BitClkReceiveEdgeSync(self) -> EdgeSync: ...
    @BitClkReceiveEdgeSync.setter
    def BitClkReceiveEdgeSync(self, value: EdgeSync) -> EdgeSync: ...
    @property
    def BitClkSendEdgeSync(self) -> EdgeSync: ...
    @BitClkSendEdgeSync.setter
    def BitClkSendEdgeSync(self, value: EdgeSync) -> EdgeSync: ...
    @property
    def BitDepth(self) -> int: ...
    @BitDepth.setter
    def BitDepth(self, value: int) -> int: ...
    @property
    def BitFrameClockDirection(self) -> ClockDirection: ...
    @BitFrameClockDirection.setter
    def BitFrameClockDirection(self, value: ClockDirection) -> ClockDirection: ...
    @property
    def Channels(self) -> SerialChannels: ...
    @Channels.setter
    def Channels(self, value: SerialChannels) -> SerialChannels: ...
    @property
    def DataJustification(self) -> SerialCustomDataJustification: ...
    @DataJustification.setter
    def DataJustification(self, value: SerialCustomDataJustification) -> SerialCustomDataJustification: ...
    @property
    def EnableOutputs(self) -> bool: ...
    @EnableOutputs.setter
    def EnableOutputs(self, value: bool) -> bool: ...
    @property
    def Format(self) -> SerialFormat: ...
    @Format.setter
    def Format(self, value: SerialFormat) -> SerialFormat: ...
    @property
    def FrameClockInvert(self) -> bool: ...
    @FrameClockInvert.setter
    def FrameClockInvert(self, value: bool) -> bool: ...
    @property
    def FrameClockLeftOneBit(self) -> bool: ...
    @FrameClockLeftOneBit.setter
    def FrameClockLeftOneBit(self, value: bool) -> bool: ...
    @property
    def FrameClockPulseWidth(self) -> FrameClockPulseWidth: ...
    @FrameClockPulseWidth.setter
    def FrameClockPulseWidth(self, value: FrameClockPulseWidth) -> FrameClockPulseWidth: ...
    @property
    def InvertMasterClock(self) -> bool: ...
    @InvertMasterClock.setter
    def InvertMasterClock(self, value: bool) -> bool: ...
    @property
    def LogicLevel(self) -> SerialLogicLevel: ...
    @LogicLevel.setter
    def LogicLevel(self, value: SerialLogicLevel) -> SerialLogicLevel: ...
    @property
    def MasterClockMultiplier(self) -> int: ...
    @MasterClockMultiplier.setter
    def MasterClockMultiplier(self, value: int) -> int: ...
    @property
    def MasterClockOff(self) -> bool: ...
    @MasterClockOff.setter
    def MasterClockOff(self, value: bool) -> bool: ...
    @property
    def MasterClockRate(self) -> IDoubleSetting: ...
    @property
    def MasterClockSource(self) -> MasterClockSource: ...
    @MasterClockSource.setter
    def MasterClockSource(self, value: MasterClockSource) -> MasterClockSource: ...
    @property
    def MeasureInputSignalType(self) -> MeasureJitterInputSignal: ...
    @MeasureInputSignalType.setter
    def MeasureInputSignalType(self, value: MeasureJitterInputSignal) -> MeasureJitterInputSignal: ...
    @property
    def MsbFirst(self) -> bool: ...
    @MsbFirst.setter
    def MsbFirst(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def SampleRate(self) -> IDoubleSetting: ...
    @property
    def SelectedDataLine(self) -> SerialDataLine: ...
    @SelectedDataLine.setter
    def SelectedDataLine(self, value: SerialDataLine) -> SerialDataLine: ...
    @property
    def SingleDataLine(self) -> bool: ...
    @SingleDataLine.setter
    def SingleDataLine(self, value: bool) -> bool: ...
    @property
    def WordWidth(self) -> int: ...
    @WordWidth.setter
    def WordWidth(self, value: int) -> int: ...
    @abc.abstractmethod
    def Open(self, fileName: str) -> None: ...
    @abc.abstractmethod
    def Save(self, fileName: str) -> None: ...


class ISerialDigitalTransmitterSettings(typing.Protocol):
    @property
    def BitClkReceiveEdgeSync(self) -> EdgeSync: ...
    @BitClkReceiveEdgeSync.setter
    def BitClkReceiveEdgeSync(self, value: EdgeSync) -> EdgeSync: ...
    @property
    def BitClkSendEdgeSync(self) -> EdgeSync: ...
    @BitClkSendEdgeSync.setter
    def BitClkSendEdgeSync(self, value: EdgeSync) -> EdgeSync: ...
    @property
    def BitDepth(self) -> int: ...
    @BitDepth.setter
    def BitDepth(self, value: int) -> int: ...
    @property
    def BitFrameClockDirection(self) -> ClockDirection: ...
    @BitFrameClockDirection.setter
    def BitFrameClockDirection(self, value: ClockDirection) -> ClockDirection: ...
    @property
    def Channels(self) -> SerialChannels: ...
    @Channels.setter
    def Channels(self, value: SerialChannels) -> SerialChannels: ...
    @property
    def DataJustification(self) -> SerialCustomDataJustification: ...
    @DataJustification.setter
    def DataJustification(self, value: SerialCustomDataJustification) -> SerialCustomDataJustification: ...
    @property
    def Dither(self) -> bool: ...
    @Dither.setter
    def Dither(self, value: bool) -> bool: ...
    @property
    def EnableOutputs(self) -> bool: ...
    @EnableOutputs.setter
    def EnableOutputs(self, value: bool) -> bool: ...
    @property
    def Format(self) -> SerialFormat: ...
    @Format.setter
    def Format(self, value: SerialFormat) -> SerialFormat: ...
    @property
    def FrameClockInvert(self) -> bool: ...
    @FrameClockInvert.setter
    def FrameClockInvert(self, value: bool) -> bool: ...
    @property
    def FrameClockLeftOneBit(self) -> bool: ...
    @FrameClockLeftOneBit.setter
    def FrameClockLeftOneBit(self, value: bool) -> bool: ...
    @property
    def FrameClockPulseWidth(self) -> FrameClockPulseWidth: ...
    @FrameClockPulseWidth.setter
    def FrameClockPulseWidth(self, value: FrameClockPulseWidth) -> FrameClockPulseWidth: ...
    @property
    def InvertMasterClock(self) -> bool: ...
    @InvertMasterClock.setter
    def InvertMasterClock(self, value: bool) -> bool: ...
    @property
    def LogicLevel(self) -> SerialLogicLevel: ...
    @LogicLevel.setter
    def LogicLevel(self, value: SerialLogicLevel) -> SerialLogicLevel: ...
    @property
    def MasterClockFixedRate(self) -> IDoubleSetting: ...
    @property
    def MasterClockFrequencyScaling(self) -> ScaleSerialOutputFreqBy: ...
    @MasterClockFrequencyScaling.setter
    def MasterClockFrequencyScaling(self, value: ScaleSerialOutputFreqBy) -> ScaleSerialOutputFreqBy: ...
    @property
    def MasterClockMeasuredRate(self) -> float: ...
    @property
    def MasterClockMultiplier(self) -> int: ...
    @MasterClockMultiplier.setter
    def MasterClockMultiplier(self, value: int) -> int: ...
    @property
    def MasterClockOff(self) -> bool: ...
    @MasterClockOff.setter
    def MasterClockOff(self, value: bool) -> bool: ...
    @property
    def MasterClockRate(self) -> IDoubleSetting: ...
    @property
    def MasterClockSource(self) -> MasterClockSource: ...
    @MasterClockSource.setter
    def MasterClockSource(self, value: MasterClockSource) -> MasterClockSource: ...
    @property
    def MsbFirst(self) -> bool: ...
    @MsbFirst.setter
    def MsbFirst(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def SampleRate(self) -> IDoubleSetting: ...
    @property
    def ScaleFreqBy(self) -> ScaleDigitalOutputFreqBy: ...
    @ScaleFreqBy.setter
    def ScaleFreqBy(self, value: ScaleDigitalOutputFreqBy) -> ScaleDigitalOutputFreqBy: ...
    @property
    def ScaleFreqByFixedRate(self) -> float: ...
    @ScaleFreqByFixedRate.setter
    def ScaleFreqByFixedRate(self, value: float) -> float: ...
    @property
    def SingleDataLine(self) -> bool: ...
    @SingleDataLine.setter
    def SingleDataLine(self, value: bool) -> bool: ...
    @property
    def WordWidth(self) -> int: ...
    @WordWidth.setter
    def WordWidth(self, value: int) -> int: ...
    @abc.abstractmethod
    def GetDataLineEnabled(self, dataLine: SerialDataLine) -> bool: ...
    @abc.abstractmethod
    def Open(self, fileName: str) -> None: ...
    @abc.abstractmethod
    def Save(self, fileName: str) -> None: ...
    @abc.abstractmethod
    def SetDataLineEnabled(self, dataLine: SerialDataLine, enabled: bool) -> None: ...


class ISetAuxControlOutputStep(ISequenceStep, typing.Protocol):
    @property
    def ByteValue(self) -> int: ...
    @ByteValue.setter
    def ByteValue(self, value: int) -> int: ...
    @property
    def Delay(self) -> float: ...
    @Delay.setter
    def Delay(self, value: float) -> float: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Message(self) -> str: ...
    @Message.setter
    def Message(self, value: str) -> str: ...
    @abc.abstractmethod
    def GetPinState(self, pin: int) -> AuxControlState: ...
    @abc.abstractmethod
    def SetPinState(self, pin: int, pinState: AuxControlState) -> None: ...


class ISetAuxControlOutputStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ISetAuxControlOutputStep: ...
    @abc.abstractmethod
    def Add(self) -> ISetAuxControlOutputStep: ...


class ISetBluetoothTransmitPowerStep(ISequenceStep, typing.Protocol):
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Power(self) -> BluetoothTransmitPower: ...
    @Power.setter
    def Power(self, value: BluetoothTransmitPower) -> BluetoothTransmitPower: ...


class ISetBluetoothTransmitPowerStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ISetBluetoothTransmitPowerStep: ...
    @abc.abstractmethod
    def Add(self) -> ISetBluetoothTransmitPowerStep: ...


class ISetDcxControlOutputStep(ISequenceStep, typing.Protocol):
    @property
    def Delay(self) -> float: ...
    @Delay.setter
    def Delay(self, value: float) -> float: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Message(self) -> str: ...
    @Message.setter
    def Message(self, value: str) -> str: ...
    @property
    def Port(self) -> DcxPort: ...
    @Port.setter
    def Port(self, value: DcxPort) -> DcxPort: ...
    @abc.abstractmethod
    def GetPinState(self, pin: int) -> AuxControlState: ...
    @abc.abstractmethod
    def SetPinState(self, pin: int, pinState: AuxControlState) -> None: ...


class ISetDcxControlOutputStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ISetDcxControlOutputStep: ...
    @abc.abstractmethod
    def Add(self) -> ISetDcxControlOutputStep: ...


class ISetDcxDcvOutputStep(ISequenceStep, typing.Protocol):
    @property
    def Delay(self) -> float: ...
    @Delay.setter
    def Delay(self, value: float) -> float: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Level(self) -> float: ...
    @Level.setter
    def Level(self, value: float) -> float: ...
    @property
    def Message(self) -> str: ...
    @Message.setter
    def Message(self, value: str) -> str: ...
    @property
    def Port(self) -> DcxDcvChannel: ...
    @Port.setter
    def Port(self, value: DcxDcvChannel) -> DcxDcvChannel: ...
    @property
    def VoltState(self) -> bool: ...
    @VoltState.setter
    def VoltState(self, value: bool) -> bool: ...


class ISetDcxDcvOutputStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ISetDcxDcvOutputStep: ...
    @abc.abstractmethod
    def Add(self) -> ISetDcxDcvOutputStep: ...


class ISetDeviceDelayStep(ISequenceStep, typing.Protocol):
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Generator(self) -> IDelayGenerator: ...
    @property
    def MeasuredChannel(self) -> InputChannelIndex: ...
    @MeasuredChannel.setter
    def MeasuredChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def Settings(self) -> IDutDelaySettings: ...


class ISetDeviceDelayStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ISetDeviceDelayStep: ...


class ISetHeadphoneAmpOutputStep(ISequenceStep, typing.Protocol):
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def ImpedanceSenseChannel(self) -> AmplifierSenseChannel: ...
    @ImpedanceSenseChannel.setter
    def ImpedanceSenseChannel(self, value: AmplifierSenseChannel) -> AmplifierSenseChannel: ...
    @property
    def Output(self) -> HeadphoneAmplifierOutput: ...
    @Output.setter
    def Output(self, value: HeadphoneAmplifierOutput) -> HeadphoneAmplifierOutput: ...


class ISetHeadphoneAmpOutputStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ISetHeadphoneAmpOutputStep: ...
    @abc.abstractmethod
    def Add(self) -> ISetHeadphoneAmpOutputStep: ...


class ISetPowerAmpOutputStep(ISequenceStep, typing.Protocol):
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Output(self) -> PowerAmplifierOutput: ...
    @Output.setter
    def Output(self, value: PowerAmplifierOutput) -> PowerAmplifierOutput: ...


class ISetPowerAmpOutputStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ISetPowerAmpOutputStep: ...
    @abc.abstractmethod
    def Add(self) -> ISetPowerAmpOutputStep: ...


class ISetSwitcherConfigurationStep(ISequenceStep, typing.Protocol):
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def InputSwitcherConfiguration(self) -> IInputSwitcherConfigurationBaseCollection: ...
    @property
    def OutputSwitcherConfiguration(self) -> IOutputSwitcherConfigurationBaseCollection: ...


class ISetSwitcherConfigurationStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ISetSwitcherConfigurationStep: ...
    @abc.abstractmethod
    def Add(self) -> ISetSwitcherConfigurationStep: ...


class ISetting(IBaseSetting, typing.Protocol):
    @property
    def Text(self) -> str: ...
    @Text.setter
    def Text(self, value: str) -> str: ...


class ISettingUnit(ISetting, IUnitSettings, typing.Protocol):
    pass


class ISettledResult(typing.Protocol):
    @property
    def AnyTimedOut(self) -> bool: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def MeterType(self) -> SettlingMeterType: ...
    @abc.abstractmethod
    def GetValues(self, unit: str) -> Array_1[float]: ...
    @abc.abstractmethod
    def TimedOutOnChannel(self, ch: int) -> bool: ...


class ISettledResultCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ISettledResult: ...
    @property
    def Item(self) -> ISettledResult: ...


class ISettlingParameters(typing.Protocol):
    @property
    def Algorithm(self) -> SettlingAlgorithm: ...
    @Algorithm.setter
    def Algorithm(self, value: SettlingAlgorithm) -> SettlingAlgorithm: ...
    @property
    def AveragingTime(self) -> IDoubleSetting: ...
    @property
    def DelayCycles(self) -> IDoubleSetting: ...
    @property
    def DelayTime(self) -> IDoubleSetting: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Mode(self) -> SettlingMode: ...
    @property
    def Name(self) -> str: ...
    @property
    def SettlingCycles(self) -> IDoubleSetting: ...
    @property
    def SettlingTime(self) -> IDoubleSetting: ...
    @property
    def Tolerance(self) -> IDoubleSetting: ...
    @abc.abstractmethod
    def Reset(self) -> None: ...


class ISettlingParametersEx(typing.Protocol):
    @property
    def Algorithm(self) -> SettlingAlgorithmEx: ...
    @Algorithm.setter
    def Algorithm(self, value: SettlingAlgorithmEx) -> SettlingAlgorithmEx: ...
    @property
    def DelayCycles(self) -> float: ...
    @DelayCycles.setter
    def DelayCycles(self, value: float) -> float: ...
    @property
    def DelayTime(self) -> float: ...
    @DelayTime.setter
    def DelayTime(self, value: float) -> float: ...
    @property
    def Floor(self) -> float: ...
    @Floor.setter
    def Floor(self, value: float) -> float: ...
    @property
    def FloorUnit(self) -> str: ...
    @FloorUnit.setter
    def FloorUnit(self, value: str) -> str: ...
    @property
    def FloorUnits(self) -> Array_1[str]: ...
    @property
    def MeterType(self) -> SettlingMeterType: ...
    @property
    def Points(self) -> int: ...
    @Points.setter
    def Points(self, value: int) -> int: ...
    @property
    def SettlingCycles(self) -> float: ...
    @SettlingCycles.setter
    def SettlingCycles(self, value: float) -> float: ...
    @property
    def SettlingTime(self) -> float: ...
    @SettlingTime.setter
    def SettlingTime(self, value: float) -> float: ...
    @property
    def Tolerance(self) -> float: ...
    @Tolerance.setter
    def Tolerance(self, value: float) -> float: ...


class ISettlingParametersExChannelCollection(typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def Item(self) -> ISettlingParametersEx: ...
    @property
    def Item(self) -> ISettlingParametersEx: ...
    @property
    def MeterType(self) -> SettlingMeterType: ...
    @abc.abstractmethod
    def ResetToDefaults(self) -> None: ...


class ISettlingParametersExCollection(typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def Item(self) -> ISettlingParametersExChannelCollection: ...
    @property
    def Item(self) -> ISettlingParametersExChannelCollection: ...
    @property
    def ReadingTimeout(self) -> float: ...
    @ReadingTimeout.setter
    def ReadingTimeout(self, value: float) -> float: ...
    @property
    def TrackFirst(self) -> bool: ...
    @TrackFirst.setter
    def TrackFirst(self, value: bool) -> bool: ...
    @abc.abstractmethod
    def ResetToDefaults(self) -> None: ...


class ISetTransducerInputStep(ISequenceStep, typing.Protocol):
    @property
    def CcpPower(self) -> bool: ...
    @CcpPower.setter
    def CcpPower(self, value: bool) -> bool: ...
    @property
    def CurrentSense(self) -> CurrentSense: ...
    @CurrentSense.setter
    def CurrentSense(self, value: CurrentSense) -> CurrentSense: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Mic1(self) -> TransducerMic1: ...
    @Mic1.setter
    def Mic1(self, value: TransducerMic1) -> TransducerMic1: ...
    @property
    def Mic2(self) -> TransducerMic2: ...
    @Mic2.setter
    def Mic2(self, value: TransducerMic2) -> TransducerMic2: ...
    @property
    def PhantomPower(self) -> bool: ...
    @PhantomPower.setter
    def PhantomPower(self, value: bool) -> bool: ...


class ISetTransducerInputStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ISetTransducerInputStep: ...
    @abc.abstractmethod
    def Add(self) -> ISetTransducerInputStep: ...


class ISetTransducerOutputStep(ISequenceStep, typing.Protocol):
    @property
    def Amplifier1(self) -> bool: ...
    @Amplifier1.setter
    def Amplifier1(self, value: bool) -> bool: ...
    @property
    def Amplifier2(self) -> bool: ...
    @Amplifier2.setter
    def Amplifier2(self, value: bool) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...


class ISetTransducerOutputStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ISetTransducerOutputStep: ...
    @abc.abstractmethod
    def Add(self) -> ISetTransducerOutputStep: ...


class ISetVddOutputStep(ISequenceStep, typing.Protocol):
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Module(self) -> PdmVddSelection: ...
    @Module.setter
    def Module(self, value: PdmVddSelection) -> PdmVddSelection: ...
    @property
    def VddLevel(self) -> float: ...
    @VddLevel.setter
    def VddLevel(self, value: float) -> float: ...
    @property
    def VddOn(self) -> bool: ...
    @VddOn.setter
    def VddOn(self, value: bool) -> bool: ...


class ISetVddOutputStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ISetVddOutputStep: ...
    @abc.abstractmethod
    def Add(self) -> ISetVddOutputStep: ...


class ISignalAcquisitionMeasurement(IBatchMeasurementWithAppend, IAcquisitionSettings, typing.Protocol):
    @property
    def AcquiredWaveform(self) -> IAcquiredWaveformGraph: ...
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def Generator(self) -> ISignalAnalyzerGenerator: ...
    @property
    def GeneratorProperties(self) -> ICustomProcessingProperties: ...
    @property
    def Properties(self) -> ICustomProcessingProperties: ...


class ISignalAnalyzerGenerator(IBatchSquareWithArbGenerator, ISineBurstGenerator, typing.Protocol):
    @property
    def LoopWaveform(self) -> bool: ...
    @LoopWaveform.setter
    def LoopWaveform(self, value: bool) -> bool: ...
    @property
    def NoiseShape(self) -> NoiseShape: ...
    @NoiseShape.setter
    def NoiseShape(self, value: NoiseShape) -> NoiseShape: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def RepeatWaveformCount(self) -> int: ...
    @RepeatWaveformCount.setter
    def RepeatWaveformCount(self, value: int) -> int: ...


class ISignalAnalyzerMeasurement(IBatchMeasurementWithAppend, IFftSettings, IFftResults, typing.Protocol):
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def Generator(self) -> ISignalAnalyzerGenerator: ...


class ISignalMeters(IPerInputSignalMonitor, typing.Protocol):
    @property
    def FrequencyMeter(self) -> IMeterValues: ...
    @property
    def FrequencyMeterUnit(self) -> str: ...
    @FrequencyMeterUnit.setter
    def FrequencyMeterUnit(self, value: str) -> str: ...
    @property
    def LevelMeter(self) -> IMeterValues: ...
    @property
    def LevelMeterUnit(self) -> str: ...
    @LevelMeterUnit.setter
    def LevelMeterUnit(self, value: str) -> str: ...
    @property
    def ThdNMeter(self) -> IMeterValues: ...
    @property
    def ThdNMeterUnit(self) -> str: ...
    @ThdNMeterUnit.setter
    def ThdNMeterUnit(self, value: str) -> str: ...
    @abc.abstractmethod
    def Activate(self) -> None: ...


class ISignalMetersWindow(ISignalMonitorWindow, ISignalMeters, typing.Protocol):
    @abc.abstractmethod
    def Meters(self, input: APxInputSelection) -> ISignalMeters: ...


class ISignalMonitorWindow(IDockableWindow, typing.Protocol):
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @abc.abstractmethod
    def Show(self) -> None: ...


class ISignalPath(IEnumerable, typing.Protocol):
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def Index(self) -> int: ...
    @property
    def Item(self) -> ISequenceMeasurement: ...
    @property
    def Item(self) -> ISequenceMeasurement: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @abc.abstractmethod
    def Run(self) -> None: ...
    # Skipped Contains due to it being static, abstract and generic.

    Contains : Contains_MethodGroup
    class Contains_MethodGroup:
        @typing.overload
        def __call__(self, measurementType: MeasurementType) -> bool:...
        @typing.overload
        def __call__(self, measurement: str) -> bool:...

    # Skipped GetMeasurement due to it being static, abstract and generic.

    GetMeasurement : GetMeasurement_MethodGroup
    class GetMeasurement_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> ISequenceMeasurement:...
        @typing.overload
        def __call__(self, measurementName: str) -> ISequenceMeasurement:...



class ISignalPathInputCalibrationSettings(typing.Protocol):
    @property
    def CalibratorFrequency(self) -> float: ...
    @CalibratorFrequency.setter
    def CalibratorFrequency(self, value: float) -> float: ...
    @property
    def CalibratorFrequencyTolerance(self) -> float: ...
    @CalibratorFrequencyTolerance.setter
    def CalibratorFrequencyTolerance(self, value: float) -> float: ...
    @property
    def CalibratorLevel(self) -> IDoubleSetting: ...


class ISignalPathInputSettings(ISignalPathMeasurandSettings, typing.Protocol):
    @property
    def AcousticInput(self) -> bool: ...
    @AcousticInput.setter
    def AcousticInput(self, value: bool) -> bool: ...
    @property
    def HighpassFilter(self) -> HighpassFilterMode: ...
    @HighpassFilter.setter
    def HighpassFilter(self, value: HighpassFilterMode) -> HighpassFilterMode: ...
    @property
    def HighpassFilterFrequency(self) -> float: ...
    @HighpassFilterFrequency.setter
    def HighpassFilterFrequency(self, value: float) -> float: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def InputChannelCount(self) -> int: ...
    @property
    def InputConnector(self) -> IInputConnector: ...
    @property
    def InputEqChannels(self) -> IInputEqSettingsCollection: ...
    @property
    def IsApplicable(self) -> bool: ...
    @property
    def LowpassFilterAnalog(self) -> LowpassFilterModeAnalog: ...
    @LowpassFilterAnalog.setter
    def LowpassFilterAnalog(self, value: LowpassFilterModeAnalog) -> LowpassFilterModeAnalog: ...
    @property
    def LowpassFilterAnalogBandwidth(self) -> AdcBandwidth: ...
    @LowpassFilterAnalogBandwidth.setter
    def LowpassFilterAnalogBandwidth(self, value: AdcBandwidth) -> AdcBandwidth: ...
    @property
    def LowpassFilterDigital(self) -> LowpassFilterModeDigital: ...
    @LowpassFilterDigital.setter
    def LowpassFilterDigital(self, value: LowpassFilterModeDigital) -> LowpassFilterModeDigital: ...
    @property
    def LowpassFilterFrequencyAnalog(self) -> float: ...
    @LowpassFilterFrequencyAnalog.setter
    def LowpassFilterFrequencyAnalog(self, value: float) -> float: ...
    @property
    def LowpassFilterFrequencyDigital(self) -> float: ...
    @LowpassFilterFrequencyDigital.setter
    def LowpassFilterFrequencyDigital(self, value: float) -> float: ...
    @property
    def WeightingFilter(self) -> SignalPathWeightingFilterType: ...
    @WeightingFilter.setter
    def WeightingFilter(self, value: SignalPathWeightingFilterType) -> SignalPathWeightingFilterType: ...
    @abc.abstractmethod
    def GetInputChannelName(self, channel: int) -> str: ...
    @abc.abstractmethod
    def SetInputChannelName(self, channel: int, name: str) -> None: ...


class ISignalPathMeasurandChannel(typing.Protocol):
    @property
    def Channel(self) -> InputChannelIndex: ...
    @property
    def ExpectedSensitivity(self) -> IDoubleSetting: ...
    @property
    def Gain(self) -> IDoubleSetting: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Sensitivity(self) -> IDoubleSetting: ...
    @property
    def SensitivityTolerance(self) -> IDoubleSetting: ...
    @property
    def SerialNumber(self) -> str: ...
    @SerialNumber.setter
    def SerialNumber(self, value: str) -> str: ...
    @property
    def Source(self) -> InputChannelIndex: ...
    @Source.setter
    def Source(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @abc.abstractmethod
    def Calibrate(self) -> None: ...


class ISignalPathMeasurandChannelCollection(ISignalPathInputCalibrationSettings, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @Count.setter
    def Count(self, value: int) -> int: ...
    @property
    def Item(self) -> ISignalPathMeasurandChannel: ...
    @abc.abstractmethod
    def ResetCalibrationValues(self) -> None: ...


class ISignalPathMeasurandSettings(typing.Protocol):
    @property
    def AutoChannels(self) -> bool: ...
    @AutoChannels.setter
    def AutoChannels(self, value: bool) -> bool: ...
    @property
    def Channels(self) -> ISignalPathMeasurandChannelCollection: ...
    @property
    def Measure(self) -> MeasurandType: ...
    @Measure.setter
    def Measure(self, value: MeasurandType) -> MeasurandType: ...
    @property
    def TedsCalibration(self) -> ITedsCalibration: ...


class ISignalPathSettings(ISignalPathInputSettings, typing.Protocol):
    @property
    def AcousticOutput(self) -> bool: ...
    @AcousticOutput.setter
    def AcousticOutput(self, value: bool) -> bool: ...
    @property
    def AdcTest(self) -> IAdcTestSettings: ...
    @property
    def AdvancedDigitalOutput(self) -> IAdvancedDigitalOutputSettings: ...
    @property
    def AnalogFileInputFullScaleVoltageRatio(self) -> float: ...
    @AnalogFileInputFullScaleVoltageRatio.setter
    def AnalogFileInputFullScaleVoltageRatio(self, value: float) -> float: ...
    @property
    def AnalogInput(self) -> IAnalogInputSettings: ...
    @property
    def AnalogOutput(self) -> IAnalogOutputSettings: ...
    @property
    def Asio(self) -> IAsioSettings: ...
    @property
    def AutoGeneratorLevel(self) -> IReferenceLevelsAutoGeneratorLevelSetter: ...
    @property
    def BatteryCurrentInput(self) -> IBatteryCurrentInputSettings: ...
    @property
    def BatteryPowerOn(self) -> bool: ...
    @BatteryPowerOn.setter
    def BatteryPowerOn(self, value: bool) -> bool: ...
    @property
    def BatteryVoltage(self) -> IDoubleSetting: ...
    @property
    def Bluetooth(self) -> IBluetoothSignalPathSettings: ...
    @property
    def Clocks(self) -> IClockSyncSettings: ...
    @property
    def DCCoupled(self) -> bool: ...
    @DCCoupled.setter
    def DCCoupled(self, value: bool) -> bool: ...
    @property
    def DeviceDelay(self) -> IDoubleSetting: ...
    @property
    def DigitalInput(self) -> IDigitalInputSettings: ...
    @property
    def DigitalOutput(self) -> ISpdifDigitalOutputSettings: ...
    @property
    def Hdmi2ArcInput(self) -> IHdmi2ArcInputSettings: ...
    @property
    def Hdmi2ArcOutput(self) -> IHdmi2ArcOutputSettings: ...
    @property
    def Hdmi2EArcInput(self) -> IHdmi2eArcInputSettings: ...
    @property
    def Hdmi2EArcOutput(self) -> IHdmi2EArcOutputSettings: ...
    @property
    def Hdmi2Input(self) -> IHdmi2InputSettings: ...
    @property
    def Hdmi2Output(self) -> IHdmi2OutputSettings: ...
    @property
    def HdmiArcInput(self) -> IHdmiArcInputSettings: ...
    @property
    def HdmiArcOutput(self) -> IHdmiArcOutputSettings: ...
    @property
    def HdmiInput(self) -> IHdmiInputSettings: ...
    @property
    def HdmiOutput(self) -> IHdmiOutputSettings: ...
    @property
    def HeadphoneAmplifier(self) -> IHeadphoneAmplifierSettings: ...
    @property
    def InputEq(self) -> IInputEqSettings: ...
    @property
    def InputSwitcherConfiguration(self) -> IInputSwitcherConfigurationCollection: ...
    @property
    def IsAnalogLoopbackSupported(self) -> bool: ...
    @property
    def Loopback(self) -> bool: ...
    @Loopback.setter
    def Loopback(self, value: bool) -> bool: ...
    @property
    def MaximumBandwidth(self) -> InputBandwidthType: ...
    @MaximumBandwidth.setter
    def MaximumBandwidth(self, value: InputBandwidthType) -> InputBandwidthType: ...
    @property
    def MicBiasVoltageOn(self) -> bool: ...
    @MicBiasVoltageOn.setter
    def MicBiasVoltageOn(self, value: bool) -> bool: ...
    @property
    def MicInput(self) -> IMicInputSettings: ...
    @property
    def OutputChannelCount(self) -> int: ...
    @property
    def OutputConnector(self) -> IOutputConnector: ...
    @property
    def OutputEq(self) -> IEqSettings: ...
    @property
    def OutputSwitcherConfiguration(self) -> IOutputSwitcherConfigurationCollection: ...
    @property
    def PDM16Input(self) -> IPDM16InputSettings: ...
    @property
    def PdmInput(self) -> IPdmInputSettings: ...
    @property
    def PdmOutput(self) -> IPdmOutputSettings: ...
    @property
    def PowerAmplifier(self) -> IPowerAmplifierSettings: ...
    @property
    def References(self) -> IReferences: ...
    @property
    def SerialDigitalReceiver(self) -> ISerialDigitalReceiverSettings: ...
    @property
    def SerialDigitalTransmitter(self) -> ISerialDigitalTransmitterSettings: ...
    @property
    def TransducerInput(self) -> ITransducerInputSetting: ...
    @property
    def TransducerOutput(self) -> ITransducerOutputSetting: ...
    @property
    def Triggers(self) -> IExternalTriggerSettings: ...
    @property
    def UseInputSwitcher(self) -> bool: ...
    @UseInputSwitcher.setter
    def UseInputSwitcher(self, value: bool) -> bool: ...
    @property
    def UseOutputSwitcher(self) -> bool: ...
    @UseOutputSwitcher.setter
    def UseOutputSwitcher(self, value: bool) -> bool: ...
    @abc.abstractmethod
    def InputSettings(self, input: APxInputSelection) -> ISignalPathInputSettings: ...
    @abc.abstractmethod
    def ScanMicrophonePowerModules(self) -> Array_1[IMicrophonePowerModuleInfo]: ...


class ISignalPathSetup(ISignalPathSettings, IMeasurement, typing.Protocol):
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def Bits(self) -> IBitsGraph: ...
    @property
    def Dcx(self) -> IDcxSettings: ...
    @property
    def DigitalInterfaceLevel(self) -> float: ...
    @property
    def ErrorRate(self) -> IMeterGraph: ...
    @property
    def Frequency(self) -> IMeterGraph: ...
    @property
    def Gain(self) -> IMeterGraph: ...
    @property
    def Generator(self) -> ISignalPathSetupGenerator: ...
    @property
    def Level(self) -> IMeterGraph: ...
    @property
    def OutputSampleRate(self) -> IDoubleSetting: ...
    @property
    def RmsLevelAcPlusDc(self) -> IMeterGraph: ...
    @property
    def SequenceSettings(self) -> IReferenceLevelsSequenceSettings: ...
    @property
    def Settling(self) -> ISignalPathSetupSettlingParametersCollection: ...
    @property
    def ThdNRatio(self) -> IMeterGraph: ...
    @property
    def VerifyConnectionsVisible(self) -> bool: ...
    @VerifyConnectionsVisible.setter
    def VerifyConnectionsVisible(self, value: bool) -> bool: ...


class ISignalPathSetupGenerator(ISplitSineWithArbGenerator, ISineBurstGenerator, typing.Protocol):
    @property
    def AnalogType(self) -> GeneratorType: ...
    @property
    def ConstantValues(self) -> IConstantValues: ...
    @property
    def DigitalType(self) -> DiagnosticsGeneratorType: ...
    @DigitalType.setter
    def DigitalType(self, value: DiagnosticsGeneratorType) -> DiagnosticsGeneratorType: ...
    @property
    def NoiseShape(self) -> NoiseShape: ...
    @NoiseShape.setter
    def NoiseShape(self, value: NoiseShape) -> NoiseShape: ...
    @property
    def SamplesPerStep(self) -> int: ...
    @SamplesPerStep.setter
    def SamplesPerStep(self, value: int) -> int: ...
    @property
    def VerificationChannel(self) -> SignalPathSetupOutputChannelIndex: ...
    @VerificationChannel.setter
    def VerificationChannel(self, value: SignalPathSetupOutputChannelIndex) -> SignalPathSetupOutputChannelIndex: ...


class ISignalPathSetupSettlingParametersCollection(typing.Protocol):
    @property
    def Frequency(self) -> ISettlingParameters: ...
    @property
    def Level(self) -> ISettlingParameters: ...
    @property
    def RmsLevelAcPlusDc(self) -> ISettlingParameters: ...
    @property
    def ThdN(self) -> ISettlingParameters: ...


class ISignalProcessing(typing.Protocol):
    @property
    def ImpedanceThieleSmall(self) -> ISignalProcessingImpedanceThieleSmall: ...


class ISignalProcessingImpedanceThieleSmall(typing.Protocol):
    @abc.abstractmethod
    def ComputeFreeAir(self, reImf: Array_1[float], imImp: Array_1[float], frImp: Array_1[float], fFtMin: float, fFitMax: float, model: ThieleSmallModelFit, dcResistance: float = ...) -> ISignalProcessingImpedanceThieleSmallResults: ...


class ISignalProcessingImpedanceThieleSmallResults(typing.Protocol):
    @property
    def Parameters(self) -> Array_1[ThieleSmallParameter]: ...
    @abc.abstractmethod
    def GetText(self, parameter: ThieleSmallParameter, withUnitString: bool) -> str: ...
    @abc.abstractmethod
    def GetValue(self, parameter: ThieleSmallParameter) -> float: ...


class ISignalToNoiseRatioGenerator(IBatchSplitSineWithArbGenerator, typing.Protocol):
    pass


class ISignalToNoiseRatioMeasurement(IBatchMeasurement, IHighpassFilterMeasurement, ILowpassFilterMeasurement, INoiseWeightingMeasurement, typing.Protocol):
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def Generator(self) -> ISignalToNoiseRatioGenerator: ...
    @property
    def HighpassFilterFrequencyEnabled(self) -> bool: ...
    @HighpassFilterFrequencyEnabled.setter
    def HighpassFilterFrequencyEnabled(self, value: bool) -> bool: ...
    @property
    def LowpassFilterFrequencyEnabled(self) -> bool: ...
    @LowpassFilterFrequencyEnabled.setter
    def LowpassFilterFrequencyEnabled(self, value: bool) -> bool: ...
    @property
    def NoiseWeightingEnabled(self) -> bool: ...
    @NoiseWeightingEnabled.setter
    def NoiseWeightingEnabled(self, value: bool) -> bool: ...
    @property
    def Settling(self) -> ISignalToNoiseSettlingParametersCollection: ...
    @property
    def SignalToNoiseRatio(self) -> IMeterGraph: ...


class ISignalToNoiseSettlingParametersCollection(typing.Protocol):
    @property
    def Noise(self) -> ISettlingParameters: ...
    @property
    def Signal(self) -> ISettlingParameters: ...


class ISinadGenerator(IArbitraryGenerator, typing.Protocol):
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def GeneratorType(self) -> SinadGeneratorType: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...


class ISinadMeasurement(IMeasurement, IHighpassFilterMeasurement, ILowpassFilterMeasurement, INoiseWeightingMeasurement, typing.Protocol):
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def Enob(self) -> IMeterGraph: ...
    @property
    def Generator(self) -> ISinadGenerator: ...
    @property
    def HighpassFilterFrequencyEnabled(self) -> bool: ...
    @HighpassFilterFrequencyEnabled.setter
    def HighpassFilterFrequencyEnabled(self, value: bool) -> bool: ...
    @property
    def LowpassFilterFrequencyEnabled(self) -> bool: ...
    @LowpassFilterFrequencyEnabled.setter
    def LowpassFilterFrequencyEnabled(self, value: bool) -> bool: ...
    @property
    def NoiseWeightingEnabled(self) -> bool: ...
    @NoiseWeightingEnabled.setter
    def NoiseWeightingEnabled(self, value: bool) -> bool: ...
    @property
    def NotchFilterFrequency(self) -> IDoubleSetting: ...
    @property
    def NotchFrequency(self) -> IDoubleSetting: ...
    @property
    def NotchTuningMode(self) -> FilterTuningType: ...
    @NotchTuningMode.setter
    def NotchTuningMode(self, value: FilterTuningType) -> FilterTuningType: ...
    @property
    def Settling(self) -> ISinadSettlingParametersCollection: ...
    @property
    def SinadRatio(self) -> IMeterGraph: ...


class ISinadSettlingParametersCollection(typing.Protocol):
    @property
    def Sinad(self) -> ISettlingParameters: ...


class ISineBurstGenerator(typing.Protocol):
    @property
    def SineBurst(self) -> ISineBurstGeneratorSettings: ...


class ISineBurstGeneratorSettings(typing.Protocol):
    @property
    def HighTimeCycles(self) -> int: ...
    @HighTimeCycles.setter
    def HighTimeCycles(self, value: int) -> int: ...
    @property
    def HighTimeSeconds(self) -> float: ...
    @HighTimeSeconds.setter
    def HighTimeSeconds(self, value: float) -> float: ...
    @property
    def IntervalCycles(self) -> int: ...
    @IntervalCycles.setter
    def IntervalCycles(self, value: int) -> int: ...
    @property
    def IntervalSeconds(self) -> float: ...
    @IntervalSeconds.setter
    def IntervalSeconds(self, value: float) -> float: ...
    @property
    def LengthType(self) -> SineBurstLengthType: ...
    @LengthType.setter
    def LengthType(self, value: SineBurstLengthType) -> SineBurstLengthType: ...
    @property
    def LowHighRatio(self) -> IDoubleSetting: ...


class ISineDualGenerator(IGeneratorChannelAssignments, typing.Protocol):
    @property
    def Frequency1ToFrequency2AmplitudeRatio(self) -> IDoubleSetting: ...
    @property
    def FrequencyB(self) -> IDoubleSetting: ...
    @property
    def Split(self) -> bool: ...
    @Split.setter
    def Split(self, value: bool) -> bool: ...


class ISineGenerator(IGenerator, typing.Protocol):
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Frequency(self) -> IDoubleSetting: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...


class ISineVarPhaseGenerator(IGeneratorChannelAssignments, typing.Protocol):
    @property
    def PhaseB(self) -> IDoubleSetting: ...


class ISineWithArbGenerator(IArbitraryGenerator, ISineGenerator, typing.Protocol):
    @property
    def Type(self) -> GeneratorType: ...


class ISmoothResult(IXYGraph, IDerivedResult, typing.Protocol):
    @property
    def OctaveSmoothing(self) -> OctaveSmoothingType: ...
    @OctaveSmoothing.setter
    def OctaveSmoothing(self, value: OctaveSmoothingType) -> OctaveSmoothingType: ...


class ISoneTracResidualGraph(IWaveformDataGraph, typing.Protocol):
    @property
    def HpFactor(self) -> float: ...
    @HpFactor.setter
    def HpFactor(self, value: float) -> float: ...
    @property
    def HpFilterFrequency(self) -> IDoubleSetting: ...
    @property
    def LpFilterFrequency(self) -> IDoubleSetting: ...


class ISoneTracRubAndBuzzGraph(IXYGraph, typing.Protocol):
    @property
    def Decimation(self) -> SoneTracDecimation: ...
    @Decimation.setter
    def Decimation(self, value: SoneTracDecimation) -> SoneTracDecimation: ...
    @property
    def Detector(self) -> DetectorType: ...
    @Detector.setter
    def Detector(self, value: DetectorType) -> DetectorType: ...
    @property
    def HannFadeIn(self) -> float: ...
    @HannFadeIn.setter
    def HannFadeIn(self, value: float) -> float: ...
    @property
    def HpFactor(self) -> float: ...
    @HpFactor.setter
    def HpFactor(self, value: float) -> float: ...
    @property
    def HpFilterFrequency(self) -> IDoubleSetting: ...
    @property
    def LpFilterFrequency(self) -> IDoubleSetting: ...
    @property
    def PostMask(self) -> float: ...
    @PostMask.setter
    def PostMask(self, value: float) -> float: ...
    @property
    def PreMask(self) -> float: ...
    @PreMask.setter
    def PreMask(self, value: float) -> float: ...
    @property
    def TukeyFraction(self) -> float: ...
    @TukeyFraction.setter
    def TukeyFraction(self, value: float) -> float: ...
    @property
    def WindowType(self) -> SoneTracWindowType: ...
    @WindowType.setter
    def WindowType(self, value: SoneTracWindowType) -> SoneTracWindowType: ...


class IsoRSpacingType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    R10 : IsoRSpacingType # 0
    R20 : IsoRSpacingType # 1
    R40 : IsoRSpacingType # 2
    R80 : IsoRSpacingType # 3


class ISpdifDigitalOutputSettings(IDigitalOutputSettings, typing.Protocol):
    @property
    def Metadata(self) -> ISpdifOutputMetadata: ...
    @property
    def ProfessionalMode(self) -> bool: ...
    @ProfessionalMode.setter
    def ProfessionalMode(self, value: bool) -> bool: ...
    @property
    def ScaleFreqBy(self) -> ScaleDigitalOutputFreqBy: ...
    @ScaleFreqBy.setter
    def ScaleFreqBy(self, value: ScaleDigitalOutputFreqBy) -> ScaleDigitalOutputFreqBy: ...
    @property
    def ScaleFreqByFixedRate(self) -> float: ...
    @ScaleFreqByFixedRate.setter
    def ScaleFreqByFixedRate(self, value: float) -> float: ...


class ISpdifOutputMetadata(typing.Protocol):
    @property
    def AutoStatusBits(self) -> bool: ...
    @AutoStatusBits.setter
    def AutoStatusBits(self, value: bool) -> bool: ...
    @property
    def StatusBitsA(self) -> IDigitalOutputStatusBitsSettings: ...
    @property
    def StatusBitsB(self) -> IDigitalOutputStatusBitsSettings: ...
    @property
    def StatusBitsBSameAsSubframeA(self) -> bool: ...
    @StatusBitsBSameAsSubframeA.setter
    def StatusBitsBSameAsSubframeA(self, value: bool) -> bool: ...
    @property
    def UserBytes(self) -> Array_1[int]: ...
    @UserBytes.setter
    def UserBytes(self, value: Array_1[int]) -> Array_1[int]: ...


class ISpecifyDataPointsResult(IXYGraph, IDerivedResult, typing.Protocol):
    @property
    def DataPoints(self) -> Array_1[float]: ...
    @DataPoints.setter
    def DataPoints(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def IsoSpacing(self) -> IsoRSpacingType: ...
    @IsoSpacing.setter
    def IsoSpacing(self, value: IsoRSpacingType) -> IsoRSpacingType: ...
    @property
    def NumberOfPoints(self) -> int: ...
    @NumberOfPoints.setter
    def NumberOfPoints(self, value: int) -> int: ...
    @property
    def StepSize(self) -> IDoubleSetting: ...
    @property
    def StepType(self) -> SweepStepType: ...
    @StepType.setter
    def StepType(self, value: SweepStepType) -> SweepStepType: ...
    @abc.abstractmethod
    def ConfigureDataPoints(self, min: float, max: float, numPoints: int, isLog: bool) -> None: ...
    @abc.abstractmethod
    def ConfigureIsoDataPoints(self, min: float, max: float, isoSpacing: IsoRSpacingType) -> None: ...
    @abc.abstractmethod
    def Export(self, fileName: str) -> None: ...
    @abc.abstractmethod
    def Import(self, fileName: str) -> None: ...


class ISpecifySingleDataPointFromLevelAndDistortionResult(IMeterGraph, IDerivedMeterFromLevelAndDistortionSettings, IDerivedResult, typing.Protocol):
    @property
    def XValue(self) -> float: ...
    @XValue.setter
    def XValue(self, value: float) -> float: ...


class ISpecifySingleDataPointResult(IMeterGraph, IDerivedResult, typing.Protocol):
    @property
    def DataSetType(self) -> MeterDataSetType: ...
    @DataSetType.setter
    def DataSetType(self, value: MeterDataSetType) -> MeterDataSetType: ...
    @property
    def SourceDataSet(self) -> int: ...
    @SourceDataSet.setter
    def SourceDataSet(self, value: int) -> int: ...
    @property
    def SourceDataSetType(self) -> SourceDataType: ...
    @SourceDataSetType.setter
    def SourceDataSetType(self, value: SourceDataType) -> SourceDataType: ...
    @property
    def XValue(self) -> float: ...
    @XValue.setter
    def XValue(self, value: float) -> float: ...


class ISplitFrequencyGenerator(IGeneratorChannelAssignments, typing.Protocol):
    @property
    def Frequency1ToFrequency2AmplitudeRatio(self) -> IDoubleSetting: ...
    @property
    def FrequencyB(self) -> IDoubleSetting: ...
    @property
    def Split(self) -> bool: ...
    @Split.setter
    def Split(self, value: bool) -> bool: ...


class ISplitPhaseGenerator(IGeneratorChannelAssignments, typing.Protocol):
    @property
    def PhaseB(self) -> IDoubleSetting: ...


class ISplitSineGenerator(IWaveformGenerator, typing.Protocol):
    @property
    def SineDual(self) -> ISineDualGenerator: ...
    @property
    def SineVarPhase(self) -> ISineVarPhaseGenerator: ...
    @property
    def SplitFrequency(self) -> ISplitFrequencyGenerator: ...
    @property
    def SplitPhase(self) -> ISplitPhaseGenerator: ...


class ISplitSineWithArbGenerator(ISplitSineGenerator, IArbitraryGenerator, ISineGenerator, typing.Protocol):
    @property
    def Type(self) -> SplitSineWithFileGeneratorType: ...


class ISquareWithArbGenerator(ISplitSineGenerator, IArbitraryGenerator, ISineGenerator, typing.Protocol):
    @property
    def Type(self) -> SquarewaveGeneratorType: ...


class IStartAnalogSineWaveGeneratorStep(IAnalogOutputMonitorSettings, ISequenceStep, typing.Protocol):
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...


class IStartAnalogSineWaveGeneratorStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IStartAnalogSineWaveGeneratorStep: ...
    @abc.abstractmethod
    def Add(self) -> IStartAnalogSineWaveGeneratorStep: ...


class IStartStopSweepParameters(ISweepParameters, typing.Protocol):
    @property
    def Start(self) -> IDoubleSetting: ...
    @property
    def Stop(self) -> IDoubleSetting: ...


class IStateChange(typing.Protocol):
    pass


class IStateChangeCollection(IEnumerable, typing.Protocol):
    @abc.abstractmethod
    def AddChange(self, change: IStateChange) -> None: ...
    @abc.abstractmethod
    def CommitChanges(self) -> None: ...


class IStatisticsMeterDataTrace(IMeterDataFromXyTrace, typing.Protocol):
    pass


class IStatisticsMeterDataTraceCollection(IDerivedDataTraceCollection, typing.Protocol):
    @property
    def Item(self) -> IStatisticsMeterDataTrace: ...
    @abc.abstractmethod
    def Add(self) -> IStatisticsMeterDataTrace: ...


class IStatisticsMeterFromLevelAndDistortionResult(IMeterGraph, IDerivedMeterFromLevelAndDistortionSettings, IDerivedResult, typing.Protocol):
    @property
    def DataSetType(self) -> MeterDataSetType: ...
    @DataSetType.setter
    def DataSetType(self, value: MeterDataSetType) -> MeterDataSetType: ...
    @property
    def Function(self) -> MeterStatisticsFunctionType: ...
    @Function.setter
    def Function(self, value: MeterStatisticsFunctionType) -> MeterStatisticsFunctionType: ...
    @property
    def SourceDataSet(self) -> int: ...
    @SourceDataSet.setter
    def SourceDataSet(self, value: int) -> int: ...
    @property
    def SourceDataSetType(self) -> SourceDataType: ...
    @SourceDataSetType.setter
    def SourceDataSetType(self, value: SourceDataType) -> SourceDataType: ...


class IStatisticsMeterFromMeterResult(IMeterGraph, IDerivedResult, typing.Protocol):
    @property
    def Function(self) -> MeterStatisticsFunctionType: ...
    @Function.setter
    def Function(self, value: MeterStatisticsFunctionType) -> MeterStatisticsFunctionType: ...
    @property
    def Traces(self) -> IStatisticsMeterDataTraceCollection: ...


class IStatisticsMeterFromXYResult(IMeterGraph, IDerivedResult, typing.Protocol):
    @property
    def DataSetType(self) -> MeterDataSetType: ...
    @DataSetType.setter
    def DataSetType(self, value: MeterDataSetType) -> MeterDataSetType: ...
    @property
    def Function(self) -> MeterStatisticsFunctionType: ...
    @Function.setter
    def Function(self, value: MeterStatisticsFunctionType) -> MeterStatisticsFunctionType: ...
    @property
    def SourceDataSet(self) -> int: ...
    @SourceDataSet.setter
    def SourceDataSet(self, value: int) -> int: ...
    @property
    def SourceDataSetType(self) -> SourceDataType: ...
    @SourceDataSetType.setter
    def SourceDataSetType(self, value: SourceDataType) -> SourceDataType: ...


class IStatisticsXYLevelAndDistortionResult(IXYGraphWithLimits, IDerivedResult, typing.Protocol):
    @property
    def Function(self) -> XYStatisticsFunctionType: ...
    @Function.setter
    def Function(self, value: XYStatisticsFunctionType) -> XYStatisticsFunctionType: ...
    @property
    def Traces(self) -> IXYLevelAndDistortionDataTraceCollection: ...


class IStatisticsXYResult(IXYGraphWithLimits, IDerivedResult, typing.Protocol):
    @property
    def Function(self) -> XYStatisticsFunctionType: ...
    @Function.setter
    def Function(self, value: XYStatisticsFunctionType) -> XYStatisticsFunctionType: ...
    @property
    def Traces(self) -> IXYDataTraceCollection: ...


class IStatusBitsMonitor(ISignalMonitorWindow, typing.Protocol):
    @property
    def StatusBitsA(self) -> IStatusBitsValues: ...
    @property
    def StatusBitsB(self) -> IStatusBitsValues: ...
    @property
    def UserBytes(self) -> Array_1[int]: ...
    @property
    def ValidityA(self) -> ChannelStatusValidity: ...
    @property
    def ValidityB(self) -> ChannelStatusValidity: ...


class IStatusBitsValues(typing.Protocol):
    @property
    def Application(self) -> StatusBitsApplication: ...
    @property
    def ConsumerValues(self) -> IConsumerStatusBitsValues: ...
    @property
    def ProfessionalValues(self) -> IProfessionalStatusBitsValues: ...
    @property
    def StatusBytes(self) -> Array_1[int]: ...


class ISteppedDimSweepGenerator(typing.Protocol):
    @property
    def AmplitudeStart(self) -> IDoubleSetting: ...
    @property
    def AmplitudeStop(self) -> IDoubleSetting: ...
    @property
    def SineFrequency(self) -> float: ...
    @property
    def SquareFrequency(self) -> float: ...
    @property
    def SweepParameters(self) -> ISweepParameters: ...
    @property
    def Waveform(self) -> DimWaveform: ...
    @Waveform.setter
    def Waveform(self, value: DimWaveform) -> DimWaveform: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class ISteppedFrequencySweepDefinition(typing.Protocol):
    @property
    def IncludePilotTone(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NumberOfPoints(self) -> int: ...
    @property
    def PilotToneDuration(self) -> float: ...
    @property
    def PilotToneFrequency(self) -> float: ...
    @property
    def StepSize(self) -> float: ...
    @property
    def StepType(self) -> SweepStepType: ...
    @property
    def SweepPointDurations(self) -> Array_1[float]: ...
    @property
    def SweepPoints(self) -> Array_1[float]: ...
    @abc.abstractmethod
    def Export(self, fileName: str) -> None: ...
    @abc.abstractmethod
    def ExportWav(self, fileName: str, sampleRate: float, bitDepth: WavExportBitDepth) -> None: ...


class ISteppedFrequencySweepGenerator(IArbitraryGenerator, typing.Protocol):
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def EQSettings(self) -> IGenEqSettings: ...
    @property
    def NoiseShape(self) -> NoiseShape: ...
    @NoiseShape.setter
    def NoiseShape(self, value: NoiseShape) -> NoiseShape: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def StartFrequency(self) -> IDoubleSetting: ...
    @property
    def StopFrequency(self) -> IDoubleSetting: ...
    @property
    def SweepParameters(self) -> IFrequencySweepParameters: ...
    @property
    def SweepSignal(self) -> str: ...
    @SweepSignal.setter
    def SweepSignal(self, value: str) -> str: ...
    @property
    def SweepSignalDefinition(self) -> ISteppedFrequencySweepDefinition: ...
    @property
    def SweepSignalNames(self) -> Array_1[str]: ...
    @property
    def Type(self) -> GeneratorType: ...
    @abc.abstractmethod
    def LoadSweepSignalFile(self, fileName: str, replaceIfExists: bool) -> None: ...


class ISteppedFrequencySweepMeasurement(ISteppedFrequencySweepMeasurementBase, IHighpassFilterMeasurement, ILowpassFilterMeasurement, INoiseWeightingMeasurement, typing.Protocol):
    @property
    def AvergeJitterLevel(self) -> IXYGraph: ...
    @property
    def Deviation(self) -> IDeviationMeterGraph: ...
    @property
    def DistortionProductLevel(self) -> IHarmonicXYGraph: ...
    @property
    def DistortionProductRatio(self) -> IHarmonicXYGraph: ...
    @property
    def Gain(self) -> IXYGraph: ...
    @property
    def HighpassFilterFrequencyEnabled(self) -> bool: ...
    @HighpassFilterFrequencyEnabled.setter
    def HighpassFilterFrequencyEnabled(self, value: bool) -> bool: ...
    @property
    def Level(self) -> IXYGraph: ...
    @property
    def LowpassFilterFrequencyEnabled(self) -> bool: ...
    @LowpassFilterFrequencyEnabled.setter
    def LowpassFilterFrequencyEnabled(self, value: bool) -> bool: ...
    @property
    def NoiseLevel(self) -> IXYGraph: ...
    @property
    def NoiseRatio(self) -> IXYGraph: ...
    @property
    def NoiseWeightingEnabled(self) -> bool: ...
    @NoiseWeightingEnabled.setter
    def NoiseWeightingEnabled(self, value: bool) -> bool: ...
    @property
    def PeakLevel(self) -> IXYGraph: ...
    @property
    def Phase(self) -> IXYGraph: ...
    @property
    def PhaseReferenceChannel(self) -> InputChannelIndex: ...
    @PhaseReferenceChannel.setter
    def PhaseReferenceChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def RelativeLevel(self) -> IRelativeLevelXYGraph: ...
    @property
    def RmsLevelAcPlusDc(self) -> IXYGraph: ...
    @property
    def Settling(self) -> ISteppedFrequencySweepSettlingParametersCollection: ...
    @property
    def Sinad(self) -> IXYGraph: ...
    @property
    def ThdLevel(self) -> IXYGraph: ...
    @property
    def ThdNLevel(self) -> IXYGraph: ...
    @property
    def ThdNRatio(self) -> IXYGraph: ...
    @property
    def ThdRatio(self) -> IXYGraph: ...


class ISteppedFrequencySweepMeasurementBase(ISteppedSweepMeasurement, typing.Protocol):
    @property
    def Generator(self) -> ISteppedFrequencySweepGenerator: ...
    @property
    def SweepSignal(self) -> str: ...
    @SweepSignal.setter
    def SweepSignal(self, value: str) -> str: ...
    @property
    def SweepSignalDefinition(self) -> ISteppedFrequencySweepDefinition: ...
    @property
    def SweepSignalNames(self) -> Array_1[str]: ...
    @property
    def TrackChannel(self) -> TrackInputChannelIndex: ...
    @TrackChannel.setter
    def TrackChannel(self, value: TrackInputChannelIndex) -> TrackInputChannelIndex: ...
    @abc.abstractmethod
    def LoadSweepSignalFile(self, fileName: str, replaceIfExists: bool) -> None: ...


class ISteppedFrequencySweepSettlingParametersCollection(typing.Protocol):
    @property
    def Level(self) -> ISettlingParameters: ...
    @property
    def Phase(self) -> ISettlingParameters: ...
    @property
    def RmsLevelAcPlusDc(self) -> ISettlingParameters: ...
    @property
    def ThdN(self) -> ISettlingParameters: ...


class ISteppedLevelSweepGenerator(ISplitSineGenerator, typing.Protocol):
    @property
    def AmplitudeStart(self) -> IDoubleSetting: ...
    @property
    def AmplitudeStop(self) -> IDoubleSetting: ...
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Frequency(self) -> IDoubleSetting: ...
    @property
    def NoiseShape(self) -> NoiseShape: ...
    @NoiseShape.setter
    def NoiseShape(self, value: NoiseShape) -> NoiseShape: ...
    @property
    def Offset(self) -> IDoubleSetting: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def SweepParameters(self) -> ISweepParameters: ...
    @property
    def Type(self) -> SplitSineGeneratorType: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class ISteppedLevelSweepMeasurement(ISteppedSweepMeasurement, IHighpassFilterMeasurement, ILowpassFilterMeasurement, INoiseWeightingMeasurement, typing.Protocol):
    @property
    def AvergeJitterLevel(self) -> IXYGraph: ...
    @property
    def DistortionProductLevel(self) -> IHarmonicXYGraph: ...
    @property
    def DistortionProductRatio(self) -> IHarmonicXYGraph: ...
    @property
    def FilterTuningMode(self) -> FilterTuningType: ...
    @FilterTuningMode.setter
    def FilterTuningMode(self, value: FilterTuningType) -> FilterTuningType: ...
    @property
    def FixedTuningFrequency(self) -> IDoubleSetting: ...
    @property
    def Gain(self) -> IXYGraph: ...
    @property
    def Generator(self) -> ISteppedLevelSweepGenerator: ...
    @property
    def HighpassFilterFrequencyEnabled(self) -> bool: ...
    @HighpassFilterFrequencyEnabled.setter
    def HighpassFilterFrequencyEnabled(self, value: bool) -> bool: ...
    @property
    def Level(self) -> IXYGraph: ...
    @property
    def Linearity(self) -> ILinearityXYGraph: ...
    @property
    def LowpassFilterFrequencyEnabled(self) -> bool: ...
    @LowpassFilterFrequencyEnabled.setter
    def LowpassFilterFrequencyEnabled(self, value: bool) -> bool: ...
    @property
    def NoiseLevel(self) -> IXYGraph: ...
    @property
    def NoiseRatio(self) -> IXYGraph: ...
    @property
    def NoiseWeightingEnabled(self) -> bool: ...
    @NoiseWeightingEnabled.setter
    def NoiseWeightingEnabled(self, value: bool) -> bool: ...
    @property
    def NotchFilterFrequency(self) -> IDoubleSetting: ...
    @property
    def NotchTuningMode(self) -> FilterTuningType: ...
    @NotchTuningMode.setter
    def NotchTuningMode(self, value: FilterTuningType) -> FilterTuningType: ...
    @property
    def PeakLevel(self) -> IXYGraph: ...
    @property
    def RmsLevelAcPlusDc(self) -> IXYGraph: ...
    @property
    def Settling(self) -> ISteppedLevelSweepSettlingParametersCollection: ...
    @property
    def Sinad(self) -> IXYGraph: ...
    @property
    def SinadVsMeasuredLevel(self) -> IXYGraph: ...
    @property
    def ThdLevel(self) -> IXYGraph: ...
    @property
    def ThdLevelVsMeasuredLevel(self) -> IXYGraph: ...
    @property
    def ThdNLevel(self) -> IXYGraph: ...
    @property
    def ThdNLevelVsMeasuredLevel(self) -> IXYGraph: ...
    @property
    def ThdNRatio(self) -> IXYGraph: ...
    @property
    def ThdNRatioVsMeasuredLevel(self) -> IXYGraph: ...
    @property
    def ThdRatio(self) -> IXYGraph: ...
    @property
    def ThdRatioVsMeasuredLevel(self) -> IXYGraph: ...


class ISteppedLevelSweepSettlingParametersCollection(typing.Protocol):
    @property
    def Level(self) -> ISettlingParameters: ...
    @property
    def RmsLevelAcPlusDc(self) -> ISettlingParameters: ...
    @property
    def ThdN(self) -> ISettlingParameters: ...


class ISteppedSweep(IBenchModeMeasurement, typing.Protocol):
    @property
    def FrequencySweepInput(self) -> APxInputSelection: ...
    @FrequencySweepInput.setter
    def FrequencySweepInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def FrequencySweepSignal(self) -> str: ...
    @FrequencySweepSignal.setter
    def FrequencySweepSignal(self, value: str) -> str: ...
    @property
    def FrequencySweepSignalDefinition(self) -> ISteppedFrequencySweepDefinition: ...
    @property
    def FrequencySweepSignalNames(self) -> Array_1[str]: ...
    @property
    def FrequencySweepTrackChannel(self) -> TrackInputChannelIndex: ...
    @FrequencySweepTrackChannel.setter
    def FrequencySweepTrackChannel(self, value: TrackInputChannelIndex) -> TrackInputChannelIndex: ...
    @property
    def NestedSweep(self) -> INestedSweepSettings: ...
    @property
    def PreSweepDelay(self) -> float: ...
    @PreSweepDelay.setter
    def PreSweepDelay(self, value: float) -> float: ...
    @property
    def ReadingRate(self) -> SweepReadingRate: ...
    @ReadingRate.setter
    def ReadingRate(self, value: SweepReadingRate) -> SweepReadingRate: ...
    @property
    def RegulateEachStep(self) -> bool: ...
    @RegulateEachStep.setter
    def RegulateEachStep(self, value: bool) -> bool: ...
    @property
    def Regulation(self) -> IRegulationSettings: ...
    @property
    def Source(self) -> SweepSourceParameterType: ...
    @Source.setter
    def Source(self, value: SweepSourceParameterType) -> SweepSourceParameterType: ...
    @property
    def SourceParameters(self) -> IStartStopSweepParameters: ...
    @property
    def Sources(self) -> Array_1[SweepSourceParameterType]: ...
    @abc.abstractmethod
    def LoadFrequencySweepSignalFile(self, fileName: str, replaceIfExists: bool) -> None: ...


class ISteppedSweepMeasurement(IBatchMeasurementWithAppend, typing.Protocol):
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...


class IStopAnalogSineWaveGeneratorStep(ISequenceStep, typing.Protocol):
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...


class IStopAnalogSineWaveGeneratorStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IStopAnalogSineWaveGeneratorStep: ...
    @abc.abstractmethod
    def Add(self) -> IStopAnalogSineWaveGeneratorStep: ...


class IStopSendingPdmControlCodeStep(ISequenceStep, typing.Protocol):
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...


class IStopSendingPdmControlCodeStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IStopSendingPdmControlCodeStep: ...
    @abc.abstractmethod
    def Add(self) -> IStopSendingPdmControlCodeStep: ...


class ISweepParameters(typing.Protocol):
    @property
    def NumberOfPoints(self) -> int: ...
    @NumberOfPoints.setter
    def NumberOfPoints(self, value: int) -> int: ...
    @property
    def StepSize(self) -> IDoubleSetting: ...
    @property
    def StepType(self) -> SweepStepType: ...
    @StepType.setter
    def StepType(self, value: SweepStepType) -> SweepStepType: ...
    @property
    def SweepPoints(self) -> Array_1[float]: ...
    @SweepPoints.setter
    def SweepPoints(self, value: Array_1[float]) -> Array_1[float]: ...
    @abc.abstractmethod
    def ExportSweepPoints(self, fileName: str) -> None: ...
    @abc.abstractmethod
    def ImportSweepPoints(self, fileName: str) -> None: ...


class ISwitcherSweepSettings(typing.Protocol):
    @property
    def Channel(self) -> SwitcherSweepChannelType: ...
    @Channel.setter
    def Channel(self, value: SwitcherSweepChannelType) -> SwitcherSweepChannelType: ...
    @property
    def ChannelOffset(self) -> int: ...
    @ChannelOffset.setter
    def ChannelOffset(self, value: int) -> int: ...
    @property
    def ResetState(self) -> bool: ...
    @ResetState.setter
    def ResetState(self, value: bool) -> bool: ...
    @property
    def StartAddress(self) -> int: ...
    @StartAddress.setter
    def StartAddress(self, value: int) -> int: ...
    @property
    def StepSize(self) -> int: ...
    @StepSize.setter
    def StepSize(self, value: int) -> int: ...
    @property
    def StopAddress(self) -> int: ...
    @StopAddress.setter
    def StopAddress(self, value: int) -> int: ...
    @property
    def SwitcherType(self) -> SwitcherSweepType: ...
    @SwitcherType.setter
    def SwitcherType(self, value: SwitcherSweepType) -> SwitcherSweepType: ...


class ITabularResult(IGraph, typing.Protocol):
    @property
    def ColumnCount(self) -> int: ...
    @property
    def RowCount(self) -> int: ...
    @abc.abstractmethod
    def ExportData(self, fileName: str) -> None: ...
    @abc.abstractmethod
    def GetValue(self, row: int, col: int) -> str: ...


class ITargetChannelRegulationSettings(typing.Protocol):
    @property
    def AdjustSource(self) -> RegulationSource: ...
    @AdjustSource.setter
    def AdjustSource(self, value: RegulationSource) -> RegulationSource: ...
    @property
    def InitialSteps(self) -> int: ...
    @InitialSteps.setter
    def InitialSteps(self, value: int) -> int: ...
    @property
    def RegulationInput(self) -> APxInputSelection: ...
    @RegulationInput.setter
    def RegulationInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def StartValue(self) -> IDoubleSetting: ...
    @property
    def StopValue(self) -> IDoubleSetting: ...
    @property
    def TargetChannel(self) -> InputChannelIndex: ...
    @TargetChannel.setter
    def TargetChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def TargetType(self) -> RegulationTarget: ...
    @TargetType.setter
    def TargetType(self, value: RegulationTarget) -> RegulationTarget: ...
    @property
    def TargetValue(self) -> IDoubleSetting: ...


class ITedsCalibration(ITedsConnectionSettings, typing.Protocol):
    @abc.abstractmethod
    def ApplyToDbsplReference(self, data: ITedsData, dbSpl1: bool, dbSpl2: bool) -> None: ...
    @abc.abstractmethod
    def ApplyToSensitivity(self, data: ITedsData, ch: InputChannelIndex) -> None: ...
    @abc.abstractmethod
    def Read(self) -> ITedsData: ...


class ITedsConnectionSettings(typing.Protocol):
    @property
    def Interface(self) -> TedsInterfaceType: ...
    @Interface.setter
    def Interface(self, value: TedsInterfaceType) -> TedsInterfaceType: ...
    @property
    def MicrophoneId(self) -> int: ...
    @MicrophoneId.setter
    def MicrophoneId(self, value: int) -> int: ...
    @property
    def Source(self) -> TransducerTedsChannel: ...
    @Source.setter
    def Source(self, value: TransducerTedsChannel) -> TransducerTedsChannel: ...


class ITedsData(typing.Protocol):
    @property
    def Frequency(self) -> float: ...
    @property
    def PropertyCount(self) -> int: ...
    @property
    def PropertyNames(self) -> Array_1[str]: ...
    @property
    def PropertyValues(self) -> Array_1[str]: ...
    @property
    def Sensitivity(self) -> float: ...
    @property
    def SerialNumber(self) -> str: ...


class ITedsDataMeasurement(IBatchMeasurement, typing.Protocol):
    @property
    def TedsInterface(self) -> TedsInterfaceType: ...
    @TedsInterface.setter
    def TedsInterface(self, value: TedsInterfaceType) -> TedsInterfaceType: ...
    @property
    def TedsMicrophoneId(self) -> int: ...
    @TedsMicrophoneId.setter
    def TedsMicrophoneId(self, value: int) -> int: ...
    @property
    def TedsSource(self) -> TransducerTedsChannel: ...
    @TedsSource.setter
    def TedsSource(self, value: TransducerTedsChannel) -> TransducerTedsChannel: ...
    @property
    def TedsTabularData(self) -> ITedsTabularResult: ...


class ITedsSysCheck(ITedsConnectionSettings, typing.Protocol):
    @property
    def AcceptanceLevel(self) -> TedsSysCheckAcceptanceLevel: ...
    @AcceptanceLevel.setter
    def AcceptanceLevel(self, value: TedsSysCheckAcceptanceLevel) -> TedsSysCheckAcceptanceLevel: ...
    @property
    def MeasuredChannel(self) -> InputChannelIndex: ...
    @MeasuredChannel.setter
    def MeasuredChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @abc.abstractmethod
    def GetReferenceValues(self) -> ITedsSysCheckReferenceValues: ...
    @abc.abstractmethod
    def PerformSysCheck(self) -> ITedsSysCheckResults: ...
    @abc.abstractmethod
    def SetReferenceValues(self) -> None: ...


class ITedsSysCheckReferenceValues(typing.Protocol):
    @property
    def FieldNames(self) -> Array_1[str]: ...
    @abc.abstractmethod
    def GetReferenceValue(self, fieldName: str) -> float: ...


class ITedsSysCheckResults(typing.Protocol):
    @property
    def FieldNames(self) -> Array_1[str]: ...
    @property
    def Passed(self) -> bool: ...
    @abc.abstractmethod
    def GetMeasuredValue(self, fieldName: str) -> float: ...
    @abc.abstractmethod
    def GetReferenceValue(self, fieldName: str) -> float: ...


class ITedsTabularResult(ITabularResult, typing.Protocol):
    @property
    def GetProperties(self) -> Array_1[str]: ...
    # Skipped GetValue due to it being static, abstract and generic.

    GetValue : GetValue_MethodGroup
    class GetValue_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> str:...
        @typing.overload
        def __call__(self, property: str) -> str:...



class IThdNGenerator(ISplitSineWithArbGenerator, typing.Protocol):
    pass


class IThdNMeasurement(IMeasurement, IHighpassFilterMeasurement, ILowpassFilterMeasurement, INoiseWeightingMeasurement, typing.Protocol):
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def DistortionProductLevel(self) -> IVerticalBarGraph: ...
    @property
    def DistortionProductRatio(self) -> IVerticalBarGraph: ...
    @property
    def FilterTuningMode(self) -> FilterTuningType: ...
    @FilterTuningMode.setter
    def FilterTuningMode(self, value: FilterTuningType) -> FilterTuningType: ...
    @property
    def FixedTuningFrequency(self) -> IDoubleSetting: ...
    @property
    def Generator(self) -> IThdNGenerator: ...
    @property
    def HighpassFilterFrequencyEnabled(self) -> bool: ...
    @HighpassFilterFrequencyEnabled.setter
    def HighpassFilterFrequencyEnabled(self, value: bool) -> bool: ...
    @property
    def LowpassFilterFrequencyEnabled(self) -> bool: ...
    @LowpassFilterFrequencyEnabled.setter
    def LowpassFilterFrequencyEnabled(self, value: bool) -> bool: ...
    @property
    def NoiseLevel(self) -> IMeterGraph: ...
    @property
    def NoiseRatio(self) -> IMeterGraph: ...
    @property
    def NoiseWeightingEnabled(self) -> bool: ...
    @NoiseWeightingEnabled.setter
    def NoiseWeightingEnabled(self, value: bool) -> bool: ...
    @property
    def NotchFilterFrequency(self) -> IDoubleSetting: ...
    @property
    def NotchTuningMode(self) -> FilterTuningType: ...
    @NotchTuningMode.setter
    def NotchTuningMode(self, value: FilterTuningType) -> FilterTuningType: ...
    @property
    def Settling(self) -> IThdNSettlingParametersCollection: ...
    @property
    def ThdLevel(self) -> IMeterGraph: ...
    @property
    def ThdNLevel(self) -> IMeterGraph: ...
    @property
    def ThdNRatio(self) -> IMeterGraph: ...
    @property
    def ThdRatio(self) -> IMeterGraph: ...


class IThdNRatioXyGraph(IXYGraph, typing.Protocol):
    @property
    def Calculation(self) -> DistortionRatioCalculation: ...
    @Calculation.setter
    def Calculation(self, value: DistortionRatioCalculation) -> DistortionRatioCalculation: ...


class IThdNSettlingParametersCollection(typing.Protocol):
    @property
    def ThdN(self) -> ISettlingParameters: ...


class IThieleSmallResult(IGraph, typing.Protocol):
    @abc.abstractmethod
    def ExportData(self, fileName: str) -> None: ...
    @abc.abstractmethod
    def GetLowerLimit(self, parameter: ThieleSmallParameter) -> float: ...
    @abc.abstractmethod
    def GetTextValues(self, parameter: ThieleSmallParameter, withUnitString: bool) -> Array_1[str]: ...
    @abc.abstractmethod
    def GetUpperLimit(self, parameter: ThieleSmallParameter) -> float: ...
    @abc.abstractmethod
    def GetValues(self, parameter: ThieleSmallParameter) -> Array_1[float]: ...
    @abc.abstractmethod
    def SetLowerLimit(self, parameter: ThieleSmallParameter, limit: float) -> None: ...
    @abc.abstractmethod
    def SetUpperLimit(self, parameter: ThieleSmallParameter, limit: float) -> None: ...
    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, parameter: ThieleSmallParameter, withUnitString: bool) -> str:...
        @typing.overload
        def __call__(self, driverIndex: int, parameter: ThieleSmallParameter, withUnitString: bool) -> str:...

    # Skipped GetValue due to it being static, abstract and generic.

    GetValue : GetValue_MethodGroup
    class GetValue_MethodGroup:
        @typing.overload
        def __call__(self, parameter: ThieleSmallParameter) -> float:...
        @typing.overload
        def __call__(self, driverIndex: int, parameter: ThieleSmallParameter) -> float:...

    # Skipped PassedLowerLimit due to it being static, abstract and generic.

    PassedLowerLimit : PassedLowerLimit_MethodGroup
    class PassedLowerLimit_MethodGroup:
        @typing.overload
        def __call__(self, parameter: ThieleSmallParameter) -> bool:...
        @typing.overload
        def __call__(self, driverIndex: int, parameter: ThieleSmallParameter) -> bool:...

    # Skipped PassedUpperLimit due to it being static, abstract and generic.

    PassedUpperLimit : PassedUpperLimit_MethodGroup
    class PassedUpperLimit_MethodGroup:
        @typing.overload
        def __call__(self, parameter: ThieleSmallParameter) -> bool:...
        @typing.overload
        def __call__(self, driverIndex: int, parameter: ThieleSmallParameter) -> bool:...



class ITimeDomainDiagnosticGraph(IBaseXYGraph, typing.Protocol):
    @property
    def InterpolationOn(self) -> bool: ...
    @InterpolationOn.setter
    def InterpolationOn(self, value: bool) -> bool: ...


class ITimeDomainSmoothResult(IXYGraph, IDerivedResult, typing.Protocol):
    @property
    def TimeDomainSmoothing(self) -> TimeDomainSmoothingType: ...
    @TimeDomainSmoothing.setter
    def TimeDomainSmoothing(self, value: TimeDomainSmoothingType) -> TimeDomainSmoothingType: ...


class ITimeDomainWithSourceChannel(ITimeDomainXYGraph, typing.Protocol):
    @property
    def SourceChannel(self) -> OutputChannelIndex: ...
    @SourceChannel.setter
    def SourceChannel(self, value: OutputChannelIndex) -> OutputChannelIndex: ...


class ITimeDomainWithWindowXYGraph(IXYGraph, typing.Protocol):
    @property
    def EndTaperWidth(self) -> IDoubleSetting: ...
    @property
    def InterpolationOn(self) -> bool: ...
    @InterpolationOn.setter
    def InterpolationOn(self, value: bool) -> bool: ...
    @property
    def StartTaperWidth(self) -> IDoubleSetting: ...
    @property
    def TaperType(self) -> TaperType: ...
    @TaperType.setter
    def TaperType(self, value: TaperType) -> TaperType: ...
    @property
    def TimeWindow(self) -> IDoubleSetting: ...
    @property
    def TimeWindowAutoStart(self) -> bool: ...
    @TimeWindowAutoStart.setter
    def TimeWindowAutoStart(self, value: bool) -> bool: ...
    @property
    def TimeWindowEnd(self) -> IDoubleSetting: ...
    @property
    def TimeWindowStart(self) -> IDoubleSetting: ...
    @property
    def TimeWindowType(self) -> TimeWindowType: ...
    @TimeWindowType.setter
    def TimeWindowType(self, value: TimeWindowType) -> TimeWindowType: ...


class ITimeDomainXYGraph(IXYGraph, typing.Protocol):
    @property
    def InterpolationOn(self) -> bool: ...
    @InterpolationOn.setter
    def InterpolationOn(self, value: bool) -> bool: ...


class ITimeoutData(typing.Protocol):
    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[str]:...
        @typing.overload
        def __call__(self, xUnit: str) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[float]:...
        @typing.overload
        def __call__(self, xUnit: str) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[str]:...
        @typing.overload
        def __call__(self, yUnit: str) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[float]:...
        @typing.overload
        def __call__(self, yUnit: str) -> Array_1[float]:...



class ITimingDistribution(typing.Protocol):
    @property
    def CrossOverFreq(self) -> IDoubleReadOnlySetting: ...
    @property
    def Cycles(self) -> IDoubleSetting: ...
    @property
    def Time(self) -> IDoubleSetting: ...


class IToneCrosstalkMeterGraph(IMeterGraph, typing.Protocol):
    @property
    def CrosstalkToneCount(self) -> int: ...
    @property
    def CrosstalkToneIndex(self) -> int: ...
    @CrosstalkToneIndex.setter
    def CrosstalkToneIndex(self, value: int) -> int: ...
    @property
    def Tones(self) -> Array_1[str]: ...


class IToneMeterGraph(IMeterGraph, typing.Protocol):
    @property
    def IsSelectedToneCrosstalk(self) -> bool: ...
    @property
    def SelectedToneIndex(self) -> int: ...
    @SelectedToneIndex.setter
    def SelectedToneIndex(self, value: int) -> int: ...
    @property
    def ToneCount(self) -> int: ...
    @property
    def Tones(self) -> Array_1[str]: ...


class ITraceInfo(typing.Protocol):
    @property
    def Channel(self) -> CursorChannelIndex: ...
    @property
    def DataIndex(self) -> int: ...
    @property
    def DataType(self) -> SourceDataType: ...


class ITransducerInputSetting(typing.Protocol):
    @property
    def CcpPower(self) -> bool: ...
    @CcpPower.setter
    def CcpPower(self, value: bool) -> bool: ...
    @property
    def CurrentSense(self) -> CurrentSense: ...
    @CurrentSense.setter
    def CurrentSense(self, value: CurrentSense) -> CurrentSense: ...
    @property
    def Mic1(self) -> TransducerMic1: ...
    @Mic1.setter
    def Mic1(self, value: TransducerMic1) -> TransducerMic1: ...
    @property
    def Mic2(self) -> TransducerMic2: ...
    @Mic2.setter
    def Mic2(self, value: TransducerMic2) -> TransducerMic2: ...
    @property
    def PhantomPower(self) -> bool: ...
    @PhantomPower.setter
    def PhantomPower(self, value: bool) -> bool: ...
    @property
    def TedsCalibration(self) -> ITedsCalibration: ...
    @property
    def TedsSysCheck(self) -> ITedsSysCheck: ...


class ITransducerOutputSetting(typing.Protocol):
    @property
    def Amplifier1(self) -> bool: ...
    @Amplifier1.setter
    def Amplifier1(self, value: bool) -> bool: ...
    @property
    def Amplifier2(self) -> bool: ...
    @Amplifier2.setter
    def Amplifier2(self, value: bool) -> bool: ...
    @property
    def AnalogOutputRanges(self) -> IAnalogOutputRanges: ...
    @property
    def Gain(self) -> float: ...
    @property
    def ParasiticResistance(self) -> float: ...
    @ParasiticResistance.setter
    def ParasiticResistance(self, value: float) -> float: ...


class ITransferFunction(IBenchModeMeasurement, ITransferFunctionResults, ITransferFunctionSettings, typing.Protocol):
    @property
    def Generator(self) -> ITransferFunctionGenerator: ...
    @property
    def NestedSweep(self) -> INestedSweepSettings: ...
    @abc.abstractmethod
    def Generate(self) -> None: ...


class ITransferFunctionGenerator(IArbitraryGenerator, typing.Protocol):
    @property
    def AnalogOutputSampleRate(self) -> float: ...
    @AnalogOutputSampleRate.setter
    def AnalogOutputSampleRate(self, value: float) -> float: ...
    @property
    def NoiseShape(self) -> TransferFunctionNoiseShape: ...
    @NoiseShape.setter
    def NoiseShape(self, value: TransferFunctionNoiseShape) -> TransferFunctionNoiseShape: ...


class ITransferFunctionMeasurement(IBatchMeasurementWithAppend, ITransferFunctionResults, ITransferFunctionSettings, typing.Protocol):
    @property
    def AnalogInputRanges(self) -> IAnalogInputRanges: ...
    @property
    def Generator(self) -> ITransferFunctionGenerator: ...
    @property
    def NestedSweep(self) -> INestedSweepSettings: ...
    @abc.abstractmethod
    def Generate(self) -> None: ...


class ITransferFunctionResults(typing.Protocol):
    @property
    def AcquiredWaveform(self) -> IAcquiredWaveformGraph: ...
    @property
    def AmplitudeSpectralDensity(self) -> IXYGraph: ...
    @property
    def AmplitudeSpectralDensityReference(self) -> IXYGraph: ...
    @property
    def Coherence(self) -> IXYGraph: ...
    @property
    def Correlation(self) -> IXYGraph: ...
    @property
    def Delay(self) -> IMeterGraph: ...
    @property
    def FFTSpectrum(self) -> IXYGraph: ...
    @property
    def FFTSpectrumReference(self) -> IXYGraph: ...
    @property
    def FrfImaginarySpectrum(self) -> IXYGraph: ...
    @property
    def FrfMagnitudeSpectrum(self) -> IXYGraph: ...
    @property
    def FrfPhaseSpectrum(self) -> IFrfPhaseSpectrum: ...
    @property
    def FrfRealSpectrum(self) -> IXYGraph: ...
    @property
    def ImpulseResponse(self) -> IWaveformDataGraph: ...
    @property
    def PowerSpectralDensity(self) -> IXYGraph: ...
    @property
    def PowerSpectralDensityReference(self) -> IXYGraph: ...
    @property
    def ReferenceWaveform(self) -> IXYGraph: ...


class ITransferFunctionSettings(typing.Protocol):
    @property
    def AcquisitionLength(self) -> float: ...
    @property
    def Averages(self) -> int: ...
    @Averages.setter
    def Averages(self, value: int) -> int: ...
    @property
    def CalculationMode(self) -> TransferFunctionCalculationMode: ...
    @CalculationMode.setter
    def CalculationMode(self, value: TransferFunctionCalculationMode) -> TransferFunctionCalculationMode: ...
    @property
    def FFTLength(self) -> FFTLength: ...
    @FFTLength.setter
    def FFTLength(self, value: FFTLength) -> FFTLength: ...
    @property
    def FrequencyResolution(self) -> float: ...
    @property
    def GeneratorReferenceChannel(self) -> OutputChannelIndex: ...
    @GeneratorReferenceChannel.setter
    def GeneratorReferenceChannel(self, value: OutputChannelIndex) -> OutputChannelIndex: ...
    @property
    def LevelTriggerSlope(self) -> LevelSlopeType: ...
    @LevelTriggerSlope.setter
    def LevelTriggerSlope(self, value: LevelSlopeType) -> LevelSlopeType: ...
    @property
    def Match(self) -> TransferFunctionSignalMatchConfidence: ...
    @Match.setter
    def Match(self, value: TransferFunctionSignalMatchConfidence) -> TransferFunctionSignalMatchConfidence: ...
    @property
    def MatchChannel(self) -> InputChannelIndex: ...
    @MatchChannel.setter
    def MatchChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def MatchInput(self) -> APxInputSelection: ...
    @MatchInput.setter
    def MatchInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def MatchTimeout(self) -> float: ...
    @MatchTimeout.setter
    def MatchTimeout(self, value: float) -> float: ...
    @property
    def OverlapPercent(self) -> TransferFunctionOverlapPercent: ...
    @OverlapPercent.setter
    def OverlapPercent(self, value: TransferFunctionOverlapPercent) -> TransferFunctionOverlapPercent: ...
    @property
    def ReferenceInput(self) -> APxInputSelection: ...
    @ReferenceInput.setter
    def ReferenceInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def ReferenceInputChannel(self) -> InputChannelIndex: ...
    @ReferenceInputChannel.setter
    def ReferenceInputChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def ReferenceType(self) -> str: ...
    @ReferenceType.setter
    def ReferenceType(self, value: str) -> str: ...
    @property
    def ReferenceTypes(self) -> Array_1[str]: ...
    @property
    def ReferenceWaveforms(self) -> Array_1[str]: ...
    @property
    def SaveImpulseResponseToFileSettings(self) -> ISaveAcquisitionToFileSettings: ...
    @property
    def SaveToFileSettings(self) -> ISaveAcquisitionToFileSettings: ...
    @property
    def TimeAlign(self) -> TransferFunctionTimeAlignType: ...
    @TimeAlign.setter
    def TimeAlign(self, value: TransferFunctionTimeAlignType) -> TransferFunctionTimeAlignType: ...
    @property
    def TimeAlignChannel(self) -> InputChannelIndex: ...
    @TimeAlignChannel.setter
    def TimeAlignChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def TimeAlignInput(self) -> APxInputSelection: ...
    @TimeAlignInput.setter
    def TimeAlignInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def Trigger(self) -> TransferFunctionTriggerType: ...
    @Trigger.setter
    def Trigger(self, value: TransferFunctionTriggerType) -> TransferFunctionTriggerType: ...
    @property
    def TriggerChannel(self) -> InputChannelIndex: ...
    @TriggerChannel.setter
    def TriggerChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def TriggerInput(self) -> APxInputSelection: ...
    @TriggerInput.setter
    def TriggerInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def TriggerLevel(self) -> IDoubleSetting: ...
    @property
    def TriggerTimeout(self) -> float: ...
    @TriggerTimeout.setter
    def TriggerTimeout(self, value: float) -> float: ...
    @property
    def WindowType(self) -> WindowType: ...
    @WindowType.setter
    def WindowType(self, value: WindowType) -> WindowType: ...
    @abc.abstractmethod
    def LoadReferenceWaveformFile(self, fileName: str, replaceIfExists: bool = ...) -> None: ...


class ITriggeredAcquisitionSettings(typing.Protocol):
    @property
    def AcquisitionSamples(self) -> int: ...
    @AcquisitionSamples.setter
    def AcquisitionSamples(self, value: int) -> int: ...
    @property
    def AcquisitionSeconds(self) -> float: ...
    @AcquisitionSeconds.setter
    def AcquisitionSeconds(self, value: float) -> float: ...
    @property
    def AcquisitionType(self) -> AcqLengthType: ...
    @AcquisitionType.setter
    def AcquisitionType(self, value: AcqLengthType) -> AcqLengthType: ...
    @property
    def AnalogInputBandwidth(self) -> SignalAnalyzerBandwidthType: ...
    @AnalogInputBandwidth.setter
    def AnalogInputBandwidth(self, value: SignalAnalyzerBandwidthType) -> SignalAnalyzerBandwidthType: ...
    @property
    def DelayTimeInSamples(self) -> float: ...
    @DelayTimeInSamples.setter
    def DelayTimeInSamples(self, value: float) -> float: ...
    @property
    def DelayTimeInSeconds(self) -> float: ...
    @DelayTimeInSeconds.setter
    def DelayTimeInSeconds(self, value: float) -> float: ...
    @property
    def LevelTriggerSlope(self) -> LevelSlopeType: ...
    @LevelTriggerSlope.setter
    def LevelTriggerSlope(self, value: LevelSlopeType) -> LevelSlopeType: ...
    @property
    def NestedSweep(self) -> INestedSweepSettings: ...
    @property
    def PdmSignalSource(self) -> PdmSignalSource: ...
    @PdmSignalSource.setter
    def PdmSignalSource(self, value: PdmSignalSource) -> PdmSignalSource: ...
    @property
    def SaveToFileSettings(self) -> ISaveAcquisitionToFileSettings: ...
    @property
    def TriggerChannel(self) -> InputChannelIndex: ...
    @TriggerChannel.setter
    def TriggerChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def TriggerInput(self) -> APxInputSelection: ...
    @TriggerInput.setter
    def TriggerInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def TriggerLevel(self) -> IDoubleSetting: ...
    @property
    def TriggerTimeout(self) -> float: ...
    @TriggerTimeout.setter
    def TriggerTimeout(self, value: float) -> float: ...
    @property
    def TriggerType(self) -> TriggerType: ...
    @TriggerType.setter
    def TriggerType(self, value: TriggerType) -> TriggerType: ...
    @property
    def UseDelayTimeInSeconds(self) -> bool: ...
    @UseDelayTimeInSeconds.setter
    def UseDelayTimeInSeconds(self, value: bool) -> bool: ...


class ITriggerSettings(typing.Protocol):
    @property
    def Channel(self) -> InputChannelIndex: ...
    @Channel.setter
    def Channel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @Input.setter
    def Input(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def LevelThreshold(self) -> IDoubleSetting: ...
    @property
    def Timeout(self) -> IDoubleSetting: ...


class IUnitSettings(typing.Protocol):
    @property
    def IsLogUnit(self) -> bool: ...
    @property
    def TextWithoutUnit(self) -> str: ...
    @property
    def TextWithReferenceValue(self) -> str: ...
    @property
    def Unit(self) -> str: ...
    @Unit.setter
    def Unit(self, value: str) -> str: ...
    @property
    def UnitList(self) -> Array_1[str]: ...


class IUserEvaluationOfResultStep(IPromptStepBase, typing.Protocol):
    @property
    def ResultName(self) -> str: ...
    @ResultName.setter
    def ResultName(self, value: str) -> str: ...
    @property
    def ResultNames(self) -> Array_1[str]: ...
    @property
    def UserPassed(self) -> bool: ...


class IUserEvaluationOfResultStepCollection(IEnumerable, typing.Protocol):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> IUserEvaluationOfResultStep: ...
    @abc.abstractmethod
    def Add(self) -> IUserEvaluationOfResultStep: ...


class IVariables(typing.Protocol):
    @abc.abstractmethod
    def DeleteUserDefinedVariable(self, varName: str) -> None: ...
    @abc.abstractmethod
    def ExpandVariableString(self, input: str) -> str: ...
    @abc.abstractmethod
    def GetAPxMeasurementVariable(self, varName: str) -> str: ...
    @abc.abstractmethod
    def GetAPxMeasurementVariables(self) -> Array_1[str]: ...
    @abc.abstractmethod
    def GetAPxSystemVariable(self, varName: str) -> str: ...
    @abc.abstractmethod
    def GetAPxSystemVariables(self) -> Array_1[str]: ...
    @abc.abstractmethod
    def GetEnvironmentVariable(self, varName: str) -> str: ...
    @abc.abstractmethod
    def GetEnvironmentVariables(self) -> Array_1[str]: ...
    @abc.abstractmethod
    def GetSystemFolder(self, folder: Environment.SpecialFolder) -> str: ...
    @abc.abstractmethod
    def GetUserDefinedVariable(self, varName: str) -> str: ...
    @abc.abstractmethod
    def GetUserDefinedVariables(self) -> Array_1[str]: ...
    @abc.abstractmethod
    def SetUserDefinedVariable(self, varName: str, value: str) -> None: ...


class IVddRampMeasurement(IBatchMeasurementWithAppend, typing.Protocol):
    @property
    def Acquisition(self) -> ITimeDomainXYGraph: ...
    @property
    def ExtraAcquisitionTime(self) -> float: ...
    @ExtraAcquisitionTime.setter
    def ExtraAcquisitionTime(self, value: float) -> float: ...
    @property
    def RampTime(self) -> float: ...
    @RampTime.setter
    def RampTime(self, value: float) -> float: ...
    @property
    def StartLevel(self) -> float: ...
    @StartLevel.setter
    def StartLevel(self, value: float) -> float: ...
    @property
    def StopLevel(self) -> float: ...
    @StopLevel.setter
    def StopLevel(self, value: float) -> float: ...


class IVersionInfo(typing.Protocol):
    @property
    def AdditionalVersionInfo(self) -> str: ...
    @property
    def AdjustmentDate(self) -> str: ...
    @property
    def ApplicationExpiration(self) -> DateTime: ...
    @property
    def ApplicationHasExpiration(self) -> bool: ...
    @property
    def APxKeyBoxInfo(self) -> IAPxKeyBoxInfo: ...
    @property
    def APxLicenseInfo(self) -> str: ...
    @property
    def HwModel(self) -> HwModel: ...
    @property
    def InstrumentID(self) -> str: ...
    @property
    def Is64BitProcess(self) -> bool: ...
    @property
    def IsCalibrationEnabled(self) -> bool: ...
    @property
    def IsValidBluetoothAddress(self) -> bool: ...
    @property
    def MaxAnalogInputChannelCount(self) -> int: ...
    @property
    def MaxAnalogOutputChannelCount(self) -> int: ...
    @property
    def Modules(self) -> IInstrumentModuleCollection: ...
    @property
    def SoftwareVersion(self) -> str: ...
    @abc.abstractmethod
    def DoesOptionHaveExpiration(self, option: APxOption) -> bool: ...
    @abc.abstractmethod
    def GetMeasurementExpiration(self, measurementType: MeasurementType) -> DateTime: ...
    @abc.abstractmethod
    def GetOptionExpiration(self, option: APxOption) -> DateTime: ...
    @abc.abstractmethod
    def IsMeasurementLicensed(self, measurementType: MeasurementType) -> bool: ...
    @abc.abstractmethod
    def IsOptionPresent(self, option: APxOption) -> bool: ...


class IVerticalBarGraph(IGraph, typing.Protocol):
    @property
    def Axis(self) -> IGraphAxis: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def DisplayChannel(self) -> InputChannelIndex: ...
    @DisplayChannel.setter
    def DisplayChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def NumBarsPerChannel(self) -> int: ...
    @abc.abstractmethod
    def FitDataToView(self) -> None: ...
    @abc.abstractmethod
    def GetTraceColor(self, channelIndex: int, traceIndex: int) -> Color: ...
    @abc.abstractmethod
    def GetVales(self, ch: int) -> Array_1[GraphPoint]: ...
    @abc.abstractmethod
    def ResetTraceStyle(self, channelIndex: int, traceIndex: int) -> None: ...
    @abc.abstractmethod
    def SetTraceColor(self, channelIndex: int, traceIndex: int, color: Color) -> None: ...
    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str) -> Array_1[GraphPoint]:...



class IWaveformDataGraph(IXYGraph, typing.Protocol):
    @abc.abstractmethod
    def ExportWav(self, fileName: str, audioFileType: FileAudioType, bitDepth: SavedAcquisitionBitDepthType, dataType: SourceDataType, dataIndex: int, replaceFileIfExists: bool) -> None: ...


class IWaveformFileSettings(typing.Protocol):
    @property
    def BitExactDigitalOutput(self) -> bool: ...
    @BitExactDigitalOutput.setter
    def BitExactDigitalOutput(self, value: bool) -> bool: ...
    @property
    def Description(self) -> str: ...
    @property
    def DtsTransmitRate(self) -> DtsTransmitRate: ...
    @DtsTransmitRate.setter
    def DtsTransmitRate(self, value: DtsTransmitRate) -> DtsTransmitRate: ...
    @property
    def DtsXTransmitMode(self) -> DtsXPackMode: ...
    @DtsXTransmitMode.setter
    def DtsXTransmitMode(self, value: DtsXPackMode) -> DtsXPackMode: ...
    @property
    def DurationInSamples(self) -> int: ...
    @property
    def DurationInSeconds(self) -> float: ...
    @property
    def FileName(self) -> str: ...
    @property
    def HasTooManySamples(self) -> bool: ...
    @property
    def IsEncoded(self) -> bool: ...
    @property
    def ShowDurationInSeconds(self) -> bool: ...
    @ShowDurationInSeconds.setter
    def ShowDurationInSeconds(self, value: bool) -> bool: ...
    @property
    def StartOffsetInSamples(self) -> int: ...
    @StartOffsetInSamples.setter
    def StartOffsetInSamples(self, value: int) -> int: ...
    @property
    def StartOffsetInSeconds(self) -> float: ...
    @StartOffsetInSeconds.setter
    def StartOffsetInSeconds(self, value: float) -> float: ...
    @abc.abstractmethod
    def GetMultiWaveChannelAssignment(self, ch: OutputChannelIndex) -> WaveMultiChannelAssignment: ...
    @abc.abstractmethod
    def ResetChannelAssignments(self, setting: WaveformChannelAssignments) -> None: ...
    @abc.abstractmethod
    def SetMultiWaveChannelAssignment(self, ch: OutputChannelIndex, assignment: WaveMultiChannelAssignment) -> None: ...


class IWaveformGenerator(typing.Protocol):
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...


class IXYCursor(ICursor, typing.Protocol):
    @property
    def AttachedTrace(self) -> ITraceInfo: ...


class IXyDataExportSpecification(typing.Protocol):
    @property
    def DataPoints(self) -> Array_1[float]: ...
    @DataPoints.setter
    def DataPoints(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def From(self) -> float: ...
    @From.setter
    def From(self, value: float) -> float: ...
    @property
    def NumberOfDataPoints(self) -> int: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: int) -> int: ...
    @property
    def RangeType(self) -> XyDataRange: ...
    @RangeType.setter
    def RangeType(self, value: XyDataRange) -> XyDataRange: ...
    @property
    def StepType(self) -> SweepStepType: ...
    @StepType.setter
    def StepType(self, value: SweepStepType) -> SweepStepType: ...
    @property
    def To(self) -> float: ...
    @To.setter
    def To(self, value: float) -> float: ...
    @property
    def XUnit(self) -> str: ...
    @abc.abstractmethod
    def SaveToFile(self, fileName: str) -> None: ...
    @abc.abstractmethod
    def SaveToProject(self, name: str, replaceIfExists: bool) -> str: ...


class IXYDataTrace(IDerivedDataTrace, typing.Protocol):
    @property
    def AllChannels(self) -> bool: ...
    @AllChannels.setter
    def AllChannels(self, value: bool) -> bool: ...
    @property
    def DataSetType(self) -> XYDataSetType: ...
    @DataSetType.setter
    def DataSetType(self, value: XYDataSetType) -> XYDataSetType: ...
    @property
    def SourceDataSet(self) -> int: ...
    @SourceDataSet.setter
    def SourceDataSet(self, value: int) -> int: ...
    @property
    def SourceDataSetType(self) -> SourceDataType: ...
    @SourceDataSetType.setter
    def SourceDataSetType(self, value: SourceDataType) -> SourceDataType: ...
    # Skipped IsChannelSelected due to it being static, abstract and generic.

    IsChannelSelected : IsChannelSelected_MethodGroup
    class IsChannelSelected_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped SelectChannel due to it being static, abstract and generic.

    SelectChannel : SelectChannel_MethodGroup
    class SelectChannel_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, selected: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, selected: bool) -> None:...



class IXYDataTraceCollection(IDerivedDataTraceCollection, typing.Protocol):
    @property
    def Item(self) -> IXYDataTrace: ...
    @abc.abstractmethod
    def Add(self) -> IXYDataTrace: ...


class IXYDistortionGraph(IGraph, typing.Protocol):
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ActiveAcquisition(self) -> int: ...
    @ActiveAcquisition.setter
    def ActiveAcquisition(self, value: int) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def DeltaCursor(self) -> IDeltaCursor: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> ICursorHarmonic: ...
    @property
    def SecondaryCursor(self) -> ICursorHarmonic: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def XAxis(self) -> IGraphAxis: ...
    @property
    def YAxis(self) -> IGraphAxis: ...
    @abc.abstractmethod
    def ExportData(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType = ..., dataIndex: int = ...) -> None: ...
    @abc.abstractmethod
    def FitDataToView(self) -> None: ...
    @abc.abstractmethod
    def GetDataIndex(self, index: int) -> int: ...
    @abc.abstractmethod
    def GetDataType(self, index: int) -> SourceDataType: ...
    @abc.abstractmethod
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int) -> IXYDistortionTraceStyleCollection: ...
    @abc.abstractmethod
    def ImportData(self, fileName: str, axis: VerticalAxis = ...) -> None: ...
    @abc.abstractmethod
    def SetActiveAcquisition(self, dataType: SourceDataType, index: int) -> None: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped GetAllHarmonicXValues due to it being static, abstract and generic.

    GetAllHarmonicXValues : GetAllHarmonicXValues_MethodGroup
    class GetAllHarmonicXValues_MethodGroup:
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int, unit: str) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, unit: str) -> Array_1[float]:...

    # Skipped GetAllHarmonicYValues due to it being static, abstract and generic.

    GetAllHarmonicYValues : GetAllHarmonicYValues_MethodGroup
    class GetAllHarmonicYValues_MethodGroup:
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int, unit: str) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, unit: str) -> Array_1[float]:...

    # Skipped GetHarmonicVisible due to it being static, abstract and generic.

    GetHarmonicVisible : GetHarmonicVisible_MethodGroup
    class GetHarmonicVisible_MethodGroup:
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int) -> bool:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex) -> bool:...

    # Skipped GetHarmonicXText due to it being static, abstract and generic.

    GetHarmonicXText : GetHarmonicXText_MethodGroup
    class GetHarmonicXText_MethodGroup:
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int) -> Array_1[str]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex) -> Array_1[str]:...
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int, acquisitionNumber: int) -> Array_1[str]:...
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int, unit: str) -> Array_1[str]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, acquisitionNumber: int) -> Array_1[str]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, unit: str) -> Array_1[str]:...
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int, acquisitionNumber: int, xUnit: str) -> Array_1[str]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, acquisitionNumber: int, xUnit: str) -> Array_1[str]:...

    # Skipped GetHarmonicXValues due to it being static, abstract and generic.

    GetHarmonicXValues : GetHarmonicXValues_MethodGroup
    class GetHarmonicXValues_MethodGroup:
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int, acquisitionNumber: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int, unit: str) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, acquisitionNumber: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, unit: str) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int, acquisitionNumber: int, xUnit: str) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, acquisitionNumber: int, xUnit: str) -> Array_1[float]:...

    # Skipped GetHarmonicYText due to it being static, abstract and generic.

    GetHarmonicYText : GetHarmonicYText_MethodGroup
    class GetHarmonicYText_MethodGroup:
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int) -> Array_1[str]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex) -> Array_1[str]:...
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int, acquisitionNumber: int) -> Array_1[str]:...
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int, unit: str) -> Array_1[str]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, acquisitionNumber: int) -> Array_1[str]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, unit: str) -> Array_1[str]:...
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int, acquisitionNumber: int, yUnit: str) -> Array_1[str]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, acquisitionNumber: int, yUnit: str) -> Array_1[str]:...

    # Skipped GetHarmonicYValues due to it being static, abstract and generic.

    GetHarmonicYValues : GetHarmonicYValues_MethodGroup
    class GetHarmonicYValues_MethodGroup:
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int, acquisitionNumber: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int, unit: str) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, acquisitionNumber: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, unit: str) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int, acquisitionNumber: int, yUnit: str) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, acquisitionNumber: int, yUnit: str) -> Array_1[float]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> IXyDistortionValues:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int = ...) -> IXyDistortionValues:...

    # Skipped SetHarmonicVisible due to it being static, abstract and generic.

    SetHarmonicVisible : SetHarmonicVisible_MethodGroup
    class SetHarmonicVisible_MethodGroup:
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, visible: bool) -> None:...



class IXYDistortionGraphLimit(typing.Protocol):
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def PassedLimitCheck(self) -> bool: ...
    @abc.abstractmethod
    def Clear(self) -> None: ...
    @abc.abstractmethod
    def CopyFromGraphData(self, dataPoints: NumberOfGraphPoints) -> None: ...
    @abc.abstractmethod
    def ExportData(self, fileName: str) -> None: ...
    @abc.abstractmethod
    def ImportData(self, fileName: str) -> None: ...
    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, harmonicIndex: DistortionHarmonicIndex) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex) -> Array_1[float]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, harmonicIndex: DistortionHarmonicIndex) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex) -> Array_1[float]:...

    # Skipped HasLimitOnChannel due to it being static, abstract and generic.

    HasLimitOnChannel : HasLimitOnChannel_MethodGroup
    class HasLimitOnChannel_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped HasLimitOnHarmonic due to it being static, abstract and generic.

    HasLimitOnHarmonic : HasLimitOnHarmonic_MethodGroup
    class HasLimitOnHarmonic_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, harmonicIndex: int) -> bool:...
        @typing.overload
        def __call__(self, ch: int, harmonicIndex: DistortionHarmonicIndex) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonicIndex: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex) -> bool:...

    # Skipped OffsetValue due to it being static, abstract and generic.

    OffsetValue : OffsetValue_MethodGroup
    class OffsetValue_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, harmonic: int, adjustment: float) -> None:...
        @typing.overload
        def __call__(self, ch: int, harmonic: DistortionHarmonicIndex, adjustment: float) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonic: int, adjustment: float) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonic: DistortionHarmonicIndex, adjustment: float) -> None:...

    # Skipped OffsetValues due to it being static, abstract and generic.

    OffsetValues : OffsetValues_MethodGroup
    class OffsetValues_MethodGroup:
        @typing.overload
        def __call__(self, adjustment: float) -> None:...
        @typing.overload
        def __call__(self, ch: int, adjustment: Array_1[float]) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, adjustment: Array_1[float]) -> None:...

    # Skipped PassedLimitCheckOnChannel due to it being static, abstract and generic.

    PassedLimitCheckOnChannel : PassedLimitCheckOnChannel_MethodGroup
    class PassedLimitCheckOnChannel_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped PassedLimitCheckOnHarmonic due to it being static, abstract and generic.

    PassedLimitCheckOnHarmonic : PassedLimitCheckOnHarmonic_MethodGroup
    class PassedLimitCheckOnHarmonic_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, harmonicIndex: int) -> bool:...
        @typing.overload
        def __call__(self, ch: int, harmonicIndex: DistortionHarmonicIndex) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonicIndex: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex) -> bool:...

    # Skipped RemoveChannel due to it being static, abstract and generic.

    RemoveChannel : RemoveChannel_MethodGroup
    class RemoveChannel_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> None:...

    # Skipped RemoveHarmonic due to it being static, abstract and generic.

    RemoveHarmonic : RemoveHarmonic_MethodGroup
    class RemoveHarmonic_MethodGroup:
        @typing.overload
        def __call__(self, harmonicIndex: int) -> None:...
        @typing.overload
        def __call__(self, harmonicIndex: DistortionHarmonicIndex) -> None:...

    # Skipped SetValues due to it being static, abstract and generic.

    SetValues : SetValues_MethodGroup
    class SetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, harmonicIndex: DistortionHarmonicIndex, xValues: Array_1[float], yValues: Array_1[float]) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, xValues: Array_1[float], yValues: Array_1[float]) -> None:...

    # Skipped SetX due to it being static, abstract and generic.

    SetX : SetX_MethodGroup
    class SetX_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, harmonicIndex: DistortionHarmonicIndex, index: int, x: float) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, index: int, x: float) -> None:...

    # Skipped SetY due to it being static, abstract and generic.

    SetY : SetY_MethodGroup
    class SetY_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, harmonicIndex: DistortionHarmonicIndex, index: int, y: float) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, index: int, y: float) -> None:...



class IXYDistortionTraceStyleCollection(typing.Protocol):
    @property
    def Count(self) -> int: ...
    @abc.abstractmethod
    def GetColor(self, traceIndex: int, harmonicIndex: int) -> Color: ...
    @abc.abstractmethod
    def GetLineStyle(self, traceIndex: int, harmonicIndex: int) -> DashStyle: ...
    @abc.abstractmethod
    def GetLineWidth(self, traceIndex: int, harmonicIndex: int) -> int: ...
    @abc.abstractmethod
    def GetName(self, traceIndex: int, harmonicIndex: int) -> str: ...
    @abc.abstractmethod
    def GetVisible(self, traceIndex: int, harmonicIndex: int) -> bool: ...
    @abc.abstractmethod
    def ResetTraceStyle(self, traceIndex: int, harmonicIndex: int) -> None: ...
    @abc.abstractmethod
    def SetColor(self, traceIndex: int, harmonicIndex: int, color: Color) -> None: ...
    @abc.abstractmethod
    def SetLineStyle(self, traceIndex: int, harmonicIndex: int, lineStyle: DashStyle) -> None: ...
    @abc.abstractmethod
    def SetLineWidth(self, traceIndex: int, harmonicIndex: int, lineWidth: int) -> None: ...
    @abc.abstractmethod
    def SetName(self, traceIndex: int, harmonicIndex: int, name: str) -> None: ...
    @abc.abstractmethod
    def SetVisible(self, traceIndex: int, harmonicIndex: int, visible: bool) -> None: ...


class IXyDistortionValues(typing.Protocol):
    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, harmonicIndex: int, axis: VerticalAxis = ...) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, axis: VerticalAxis = ...) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, harmonicIndex: int, xUnit: str, axis: VerticalAxis = ...) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, xUnit: str, axis: VerticalAxis = ...) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, harmonicIndex: int, axis: VerticalAxis = ...) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, axis: VerticalAxis = ...) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, harmonicIndex: int, xUnit: str, axis: VerticalAxis = ...) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, xUnit: str, axis: VerticalAxis = ...) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, harmonicIndex: int, axis: VerticalAxis = ...) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, axis: VerticalAxis = ...) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, harmonicIndex: int, yUnit: str, axis: VerticalAxis = ...) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, yUnit: str, axis: VerticalAxis = ...) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, harmonicIndex: int, axis: VerticalAxis = ...) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, axis: VerticalAxis = ...) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, harmonicIndex: int, yUnit: str, axis: VerticalAxis = ...) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, yUnit: str, axis: VerticalAxis = ...) -> Array_1[float]:...



class IXYGraph(IXYGraphWithLimits, typing.Protocol):
    @property
    def ActiveAcquisition(self) -> int: ...
    @ActiveAcquisition.setter
    def ActiveAcquisition(self, value: int) -> int: ...
    @abc.abstractmethod
    def HasDataOnAxis(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> bool: ...
    @abc.abstractmethod
    def SetActiveAcquisition(self, dataType: SourceDataType, index: int) -> None: ...
    # Skipped GetData due to it being static, abstract and generic.

    GetData : GetData_MethodGroup
    class GetData_MethodGroup:
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> IXYValues:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int = ...) -> IXYValues:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis = ...) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis = ...) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis = ...) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis = ...) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis = ...) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis = ...) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis = ...) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis = ...) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis = ...) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis = ...) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis = ...) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis = ...) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis = ...) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis = ...) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis = ...) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis = ...) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis = ...) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis = ...) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis = ...) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis = ...) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis = ...) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis = ...) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis = ...) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis = ...) -> Array_1[float]:...



class IXYGraphDataImport(typing.Protocol):
    @abc.abstractmethod
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> IXYImportData: ...
    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: IXYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis = ...) -> None:...



class IXYGraphExport(typing.Protocol):
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @abc.abstractmethod
    def CreateExportSpecification(self) -> IXyDataExportSpecification: ...
    @abc.abstractmethod
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> IXyDataExportSpecification: ...
    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...



class IXYGraphSettings(IGraph, typing.Protocol):
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def XAxis(self) -> IGraphAxis: ...
    @property
    def YAxis(self) -> IGraphAxis: ...
    @abc.abstractmethod
    def FitDataToView(self) -> None: ...
    @abc.abstractmethod
    def GetDataIndex(self, index: int) -> int: ...
    @abc.abstractmethod
    def GetDataType(self, index: int) -> SourceDataType: ...
    @abc.abstractmethod
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis = ...) -> IXYTraceStyleCollection: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...



class IXYGraphWithLimits(IBaseXYGraph, typing.Protocol):
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def LowerLimit(self) -> IGraphLimit: ...
    @property
    def LowerLimitRight(self) -> IGraphLimit: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> IGraphLimit: ...
    @property
    def UpperLimitRight(self) -> IGraphLimit: ...
    @abc.abstractmethod
    def ClearLimits(self) -> None: ...


class IXYImportData(typing.Protocol):
    @property
    def ChannelCount(self) -> int: ...
    @property
    def XUnit(self) -> str: ...
    @property
    def YUnit(self) -> str: ...
    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> Array_1[float]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> Array_1[float]:...

    # Skipped SetChannelData due to it being static, abstract and generic.

    SetChannelData : SetChannelData_MethodGroup
    class SetChannelData_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, xValues: Array_1[float], yValues: Array_1[float]) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xValues: Array_1[float], yValues: Array_1[float]) -> None:...



class IXYLevelAndDistortionDataTrace(IXYDataTrace, typing.Protocol):
    # Skipped IsHarmonicSelected due to it being static, abstract and generic.

    IsHarmonicSelected : IsHarmonicSelected_MethodGroup
    class IsHarmonicSelected_MethodGroup:
        @typing.overload
        def __call__(self, harmIndex: int) -> bool:...
        @typing.overload
        def __call__(self, harmIndex: DistortionHarmonicIndex) -> bool:...

    # Skipped SelectHarmonic due to it being static, abstract and generic.

    SelectHarmonic : SelectHarmonic_MethodGroup
    class SelectHarmonic_MethodGroup:
        @typing.overload
        def __call__(self, harmIndex: int, selected: bool) -> None:...
        @typing.overload
        def __call__(self, harmIndex: DistortionHarmonicIndex, selected: bool) -> None:...



class IXYLevelAndDistortionDataTraceCollection(IDerivedDataTraceCollection, typing.Protocol):
    @property
    def Item(self) -> IXYLevelAndDistortionDataTrace: ...
    @abc.abstractmethod
    def Add(self) -> IXYLevelAndDistortionDataTrace: ...


class IXYTraceStyleCollection(typing.Protocol):
    @property
    def Count(self) -> int: ...
    @abc.abstractmethod
    def GetColor(self, traceIndex: int) -> Color: ...
    @abc.abstractmethod
    def GetLineStyle(self, traceIndex: int) -> DashStyle: ...
    @abc.abstractmethod
    def GetLineWidth(self, traceIndex: int) -> int: ...
    @abc.abstractmethod
    def GetName(self, traceIndex: int) -> str: ...
    @abc.abstractmethod
    def GetVisible(self, traceIndex: int) -> bool: ...
    @abc.abstractmethod
    def ResetTraceStyle(self, traceIndex: int) -> None: ...
    @abc.abstractmethod
    def SetColor(self, traceIndex: int, color: Color) -> None: ...
    @abc.abstractmethod
    def SetLineStyle(self, traceIndex: int, lineStyle: DashStyle) -> None: ...
    @abc.abstractmethod
    def SetLineWidth(self, traceIndex: int, lineWidth: int) -> None: ...
    @abc.abstractmethod
    def SetName(self, traceIndex: int, name: str) -> None: ...
    @abc.abstractmethod
    def SetVisible(self, traceIndex: int, visible: bool) -> None: ...


class IXYValues(typing.Protocol):
    @property
    def ChannelCountLeft(self) -> int: ...
    @property
    def ChannelCountRight(self) -> int: ...
    @property
    def HasRightAxisData(self) -> bool: ...
    @abc.abstractmethod
    def GetTimeoutData(self, ch: int, axis: VerticalAxis = ...) -> ITimeoutData: ...
    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis = ...) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis = ...) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, axis: VerticalAxis = ...) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, axis: VerticalAxis = ...) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis = ...) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis = ...) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, axis: VerticalAxis = ...) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, axis: VerticalAxis = ...) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis = ...) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis = ...) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, yUnit: str, axis: VerticalAxis = ...) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, yUnit: str, axis: VerticalAxis = ...) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis = ...) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis = ...) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, yUnit: str, axis: VerticalAxis = ...) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, yUnit: str, axis: VerticalAxis = ...) -> Array_1[float]:...



class JitterApplication(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    DigitalOutput : JitterApplication # 0
    RefSync : JitterApplication # 1
    DigitalInput : JitterApplication # 2


class JitterFrequencySweepGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def JitterGeneratorSettings(self) -> JitterGeneratorSettings: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def NoiseShape(self) -> NoiseShape: ...
    @NoiseShape.setter
    def NoiseShape(self, value: NoiseShape) -> NoiseShape: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def SineBurst(self) -> SineBurstGeneratorSettings: ...
    @property
    def SineDual(self) -> SineDualGenerator: ...
    @property
    def SineVarPhase(self) -> SineVarPhaseGenerator: ...
    @property
    def StartFrequency(self) -> DoubleSetting: ...
    @property
    def StopFrequency(self) -> DoubleSetting: ...
    @property
    def SweepParameters(self) -> SweepParameters: ...
    @property
    def Type(self) -> SquarewaveGeneratorType: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class JitterFrequencySweepMeasurement:
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def AvergeJitterLevel(self) -> XYGraph: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def Deviation(self) -> DeviationMeterGraph: ...
    @property
    def DistortionProductLevel(self) -> HarmonicXYGraph: ...
    @property
    def DistortionProductRatio(self) -> HarmonicXYGraph: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Gain(self) -> XYGraph: ...
    @property
    def Generator(self) -> JitterFrequencySweepGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def HighpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def HighpassFilterType(self) -> MeasurementHighpassFilterType: ...
    @HighpassFilterType.setter
    def HighpassFilterType(self, value: MeasurementHighpassFilterType) -> MeasurementHighpassFilterType: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Level(self) -> XYGraph: ...
    @property
    def LowpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def LowpassFilterType(self) -> MeasurementLowpassFilterType: ...
    @LowpassFilterType.setter
    def LowpassFilterType(self, value: MeasurementLowpassFilterType) -> MeasurementLowpassFilterType: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NestedSweep(self) -> NestedSweepSettings: ...
    @property
    def NoiseWeighting(self) -> WeightingFilterType: ...
    @NoiseWeighting.setter
    def NoiseWeighting(self, value: WeightingFilterType) -> WeightingFilterType: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def PeakLevel(self) -> XYGraph: ...
    @property
    def Phase(self) -> XYGraph: ...
    @property
    def PhaseReferenceChannel(self) -> InputChannelIndex: ...
    @PhaseReferenceChannel.setter
    def PhaseReferenceChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def RelativeLevel(self) -> RelativeLevelXYGraph: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def Settling(self) -> JitterFrequencySweepSettlingParametersCollection: ...
    @property
    def Sinad(self) -> XYGraph: ...
    @property
    def ThdLevel(self) -> XYGraph: ...
    @property
    def ThdNLevel(self) -> XYGraph: ...
    @property
    def ThdNRatio(self) -> XYGraph: ...
    @property
    def ThdRatio(self) -> XYGraph: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class JitterFrequencySweepSettlingParametersCollection:
    @property
    def Level(self) -> SettlingParameters: ...
    @property
    def Phase(self) -> SettlingParameters: ...
    @property
    def ThdN(self) -> SettlingParameters: ...


class JitterGeneratorOutputSignal(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    JitterSec : JitterGeneratorOutputSignal # 0
    JitterUI : JitterGeneratorOutputSignal # 1


class JitterGeneratorSettings:
    @property
    def ApplyTo(self) -> JitterApplication: ...
    @ApplyTo.setter
    def ApplyTo(self, value: JitterApplication) -> JitterApplication: ...
    @property
    def DefineUIBy(self) -> RefSyncUI: ...
    @DefineUIBy.setter
    def DefineUIBy(self, value: RefSyncUI) -> RefSyncUI: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def OutputEq(self) -> EqSettings: ...
    @property
    def PeakLevelSec(self) -> DoubleSetting: ...
    @property
    def PeakLevelUi(self) -> DoubleSetting: ...
    @property
    def PeakLevelUnit(self) -> JitterGeneratorOutputSignal: ...
    @PeakLevelUnit.setter
    def PeakLevelUnit(self, value: JitterGeneratorOutputSignal) -> JitterGeneratorOutputSignal: ...
    @property
    def Waveform(self) -> JitterSource: ...
    @Waveform.setter
    def Waveform(self, value: JitterSource) -> JitterSource: ...
    def GetPeakLevelUI(self, refSync: RefSyncUI, unit: str) -> float: ...


class JitterLevelSweepGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def JitterGeneratorSettings(self) -> JitterGeneratorSettings: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def SineDual(self) -> SineDualGenerator: ...
    @property
    def SineVarPhase(self) -> SineVarPhaseGenerator: ...
    @property
    def StartPeakLevel(self) -> DoubleSetting: ...
    @property
    def StopPeakLevel(self) -> DoubleSetting: ...
    @property
    def SweepParameters(self) -> SweepParameters: ...
    @property
    def Type(self) -> SquarewaveGeneratorType: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class JitterLevelSweepMeasurement:
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def AvergeJitterLevel(self) -> XYGraph: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def DistortionProductLevel(self) -> HarmonicXYGraph: ...
    @property
    def DistortionProductRatio(self) -> HarmonicXYGraph: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Gain(self) -> XYGraph: ...
    @property
    def Generator(self) -> JitterLevelSweepGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def HighpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def HighpassFilterType(self) -> MeasurementHighpassFilterType: ...
    @HighpassFilterType.setter
    def HighpassFilterType(self, value: MeasurementHighpassFilterType) -> MeasurementHighpassFilterType: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Level(self) -> XYGraph: ...
    @property
    def Linearity(self) -> LinearityXYGraph: ...
    @property
    def LowpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def LowpassFilterType(self) -> MeasurementLowpassFilterType: ...
    @LowpassFilterType.setter
    def LowpassFilterType(self, value: MeasurementLowpassFilterType) -> MeasurementLowpassFilterType: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NestedSweep(self) -> NestedSweepSettings: ...
    @property
    def NoiseWeighting(self) -> WeightingFilterType: ...
    @NoiseWeighting.setter
    def NoiseWeighting(self, value: WeightingFilterType) -> WeightingFilterType: ...
    @property
    def NotchFilterFrequency(self) -> DoubleSetting: ...
    @property
    def NotchTuningMode(self) -> FilterTuningType: ...
    @NotchTuningMode.setter
    def NotchTuningMode(self, value: FilterTuningType) -> FilterTuningType: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def PeakLevel(self) -> XYGraph: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def Settling(self) -> JitterLevelSweepSettlingParametersCollection: ...
    @property
    def Sinad(self) -> XYGraph: ...
    @property
    def ThdLevel(self) -> XYGraph: ...
    @property
    def ThdNLevel(self) -> XYGraph: ...
    @property
    def ThdNRatio(self) -> XYGraph: ...
    @property
    def ThdRatio(self) -> XYGraph: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class JitterLevelSweepSettlingParametersCollection:
    @property
    def Level(self) -> SettlingParameters: ...
    @property
    def ThdN(self) -> SettlingParameters: ...


class JitterSource(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Sine : JitterSource # 0
    Square : JitterSource # 1
    Noise : JitterSource # 2


class JitterSweepParameter(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Frequency : JitterSweepParameter # 0
    Level : JitterSweepParameter # 1


class LastSoftwareEnum(Attribute):
    def __init__(self) -> None: ...
    @property
    def TypeId(self) -> typing.Any: ...


class LevelAndDistortionDataSelection(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    AllTracesOneChannel : LevelAndDistortionDataSelection # 0
    AllChannelsOneTrace : LevelAndDistortionDataSelection # 1


class LevelAndGainGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def SineDual(self) -> SineDualGenerator: ...
    @property
    def SineVarPhase(self) -> SineVarPhaseGenerator: ...
    @property
    def Type(self) -> SquarewaveGeneratorType: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class LevelAndGainMeasurement:
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def AverageJitterLevel(self) -> MeterGraph: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Gain(self) -> MeterGraph: ...
    @property
    def Generator(self) -> LevelAndGainGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Level(self) -> MeterGraph: ...
    @property
    def LowpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def LowpassFilterType(self) -> MeasurementLowpassFilterType: ...
    @LowpassFilterType.setter
    def LowpassFilterType(self, value: MeasurementLowpassFilterType) -> MeasurementLowpassFilterType: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def PeakLevel(self) -> MeterGraph: ...
    @property
    def RmsLevelAcPlusDc(self) -> MeterGraph: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def Settling(self) -> LevelAndGainSettlingParametersCollection: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class LevelAndGainSettlingParametersCollection:
    @property
    def Level(self) -> SettlingParameters: ...
    @property
    def RmsLevelAcPlusDc(self) -> SettlingParameters: ...


class LevelRatioGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def SineDual(self) -> SineDualGenerator: ...
    @property
    def SineVarPhase(self) -> SineVarPhaseGenerator: ...
    @property
    def Type(self) -> GeneratorType: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class LevelRatioMeasurement:
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> LevelRatioGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def Ratio(self) -> MeterGraph: ...
    @property
    def ReferenceChannel(self) -> InputChannelIndex: ...
    @ReferenceChannel.setter
    def ReferenceChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def Settling(self) -> LevelRatioSettlingParametersCollection: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class LevelRatioSettlingParametersCollection:
    @property
    def LevelRatio(self) -> SettlingParameters: ...


class Levels:
    @property
    def Count(self) -> int: ...
    @property
    def Offset(self) -> GeneratorChannelLevels: ...
    @property
    def Pilot(self) -> GeneratorChannelLevels: ...
    @property
    def Sweep(self) -> GeneratorChannelLevels: ...
    @property
    def TrackFirstChannel(self) -> bool: ...
    @TrackFirstChannel.setter
    def TrackFirstChannel(self, value: bool) -> bool: ...


class LevelSlopeType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Positive : LevelSlopeType # 0
    Negative : LevelSlopeType # 1


class LimitStatus(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Passed : LimitStatus # 0
    Warning : LimitStatus # 1
    Failed : LimitStatus # 2


class LimitType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Upper : LimitType # 0
    Lower : LimitType # 1


class LinearityXYGraph:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DataMode(self) -> RelativeDataMode: ...
    @DataMode.setter
    def DataMode(self, value: RelativeDataMode) -> RelativeDataMode: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def MaxLimit(self) -> DoubleSetting: ...
    @property
    def Message(self) -> str: ...
    @property
    def MinLimit(self) -> DoubleSetting: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def RelativeLevel(self) -> DoubleSetting: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def HasDataOnAxis(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> bool: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetData due to it being static, abstract and generic.

    GetData : GetData_MethodGroup
    class GetData_MethodGroup:
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> XYValues:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int) -> XYValues:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class LineRejectionType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    LineNone : LineRejectionType # 0
    Line50 : LineRejectionType # 1
    Line60 : LineRejectionType # 2


class LockStatusValue(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Locked : LockStatusValue # 0
    Unlocked : LockStatusValue # 1


class LogoAlignment(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    TopLeft : LogoAlignment # 0
    TopCenter : LogoAlignment # 1
    TopRight : LogoAlignment # 2


class LoudspeakerProductionTestMeasurement:
    @property
    def AcquiredWaveform(self) -> AcquiredWaveformGraph: ...
    @property
    def AdditionalAcquisitionTime(self) -> DoubleSetting: ...
    @property
    def AmplifierCorrectionCurve(self) -> str: ...
    @AmplifierCorrectionCurve.setter
    def AmplifierCorrectionCurve(self, value: str) -> str: ...
    @property
    def AmplifierCorrectionCurves(self) -> Array_1[str]: ...
    @property
    def AmplifierGain(self) -> DoubleSetting: ...
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def AutoDelayCompensation(self) -> bool: ...
    @AutoDelayCompensation.setter
    def AutoDelayCompensation(self, value: bool) -> bool: ...
    @property
    def CalculateTsParameters(self) -> bool: ...
    @CalculateTsParameters.setter
    def CalculateTsParameters(self, value: bool) -> bool: ...
    @property
    def Correlation(self) -> XYGraph: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def DiscardDistribution(self) -> TimingDistribution: ...
    @property
    def DistortionProductLevel(self) -> HarmonicXYGraph: ...
    @property
    def DistortionProductRatio(self) -> NormalizedHarmonicRatioXYGraph: ...
    @property
    def Drivers(self) -> DriverCollection: ...
    @property
    def ExternalSenseResistance(self) -> float: ...
    @ExternalSenseResistance.setter
    def ExternalSenseResistance(self, value: float) -> float: ...
    @property
    def FastSweepAutoDuration(self) -> bool: ...
    @FastSweepAutoDuration.setter
    def FastSweepAutoDuration(self, value: bool) -> bool: ...
    @property
    def FastSweepGeneratorSettings(self) -> FrequencySweepParameters: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def FitMaximumFrequency(self) -> DoubleSetting: ...
    @property
    def FitMinimumFrequency(self) -> DoubleSetting: ...
    @property
    def FitRangeType(self) -> CurveFitRangeType: ...
    @FitRangeType.setter
    def FitRangeType(self, value: CurveFitRangeType) -> CurveFitRangeType: ...
    @property
    def Generator(self) -> ContinuousSweepGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def HighpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def HighpassFilterType(self) -> MeasurementHighpassFilterType: ...
    @HighpassFilterType.setter
    def HighpassFilterType(self, value: MeasurementHighpassFilterType) -> MeasurementHighpassFilterType: ...
    @property
    def HOHD(self) -> HighOrderHarmonicDistortionXyGraph: ...
    @property
    def ImpedanceMagnitude(self) -> ImpedanceXYGraph: ...
    @property
    def ImpedancePhase(self) -> ImpedanceXYGraph: ...
    @property
    def ImpulseResponse(self) -> ImpulseResponseGraph: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Level(self) -> XYGraph: ...
    @property
    def LevelAndDistortion(self) -> XYDistortionGraph: ...
    @property
    def LowpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def LowpassFilterType(self) -> MeasurementLowpassFilterType: ...
    @LowpassFilterType.setter
    def LowpassFilterType(self, value: MeasurementLowpassFilterType) -> MeasurementLowpassFilterType: ...
    @property
    def Measure(self) -> LoudspeakerTestMeasurementType: ...
    @Measure.setter
    def Measure(self, value: LoudspeakerTestMeasurementType) -> LoudspeakerTestMeasurementType: ...
    @property
    def MeasureDistribution(self) -> TimingDistribution: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def MeasureThdN(self) -> bool: ...
    @MeasureThdN.setter
    def MeasureThdN(self, value: bool) -> bool: ...
    @property
    def ModelFit(self) -> ThieleSmallModelFit: ...
    @ModelFit.setter
    def ModelFit(self, value: ThieleSmallModelFit) -> ThieleSmallModelFit: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NoiseWeighting(self) -> WeightingFilterType: ...
    @NoiseWeighting.setter
    def NoiseWeighting(self, value: WeightingFilterType) -> WeightingFilterType: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def Phase(self) -> PhaseXYGraph: ...
    @property
    def ReferenceWaveform(self) -> XYGraph: ...
    @property
    def RelativeLevel(self) -> RelativeLevelXYGraph: ...
    @property
    def RubAndBuzz(self) -> RubAndBuzzGraph: ...
    @property
    def RubAndBuzzCrestFactor(self) -> RubAndBuzzGraph: ...
    @property
    def RubAndBuzzLoudness(self) -> XYGraph: ...
    @property
    def RubAndBuzzPeakRatio(self) -> RubAndBuzzGraph: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def SoneTracResidualWaveform(self) -> SoneTracResidualGraph: ...
    @property
    def SoneTracRubAndBuzz(self) -> SoneTracRubAndBuzzGraph: ...
    @property
    def SweepType(self) -> FastFrequencyResponseSweepType: ...
    @SweepType.setter
    def SweepType(self, value: FastFrequencyResponseSweepType) -> FastFrequencyResponseSweepType: ...
    @property
    def ThdLevel(self) -> XYGraph: ...
    @property
    def ThdNLevel(self) -> XYGraph: ...
    @property
    def ThdNRatio(self) -> ThdNRatioXyGraph: ...
    @property
    def ThdRatio(self) -> NormalizedDistortionRatioXYGraph: ...
    @property
    def ThieleSmall(self) -> ThieleSmallResult: ...
    @property
    def TimeWindow(self) -> DoubleSetting: ...
    @property
    def TransitionDistribution(self) -> TimingDistribution: ...
    @property
    def VdrvrChannel(self) -> InputChannelIndex: ...
    @VdrvrChannel.setter
    def VdrvrChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def VsenseChannel(self) -> InputChannelIndex: ...
    @VsenseChannel.setter
    def VsenseChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def ExportAmplifierCorrectionCurve(self, fileName: str, xUnit: str, gainUnit: str, phaseUnit: str) -> None: ...
    def GetChannelName(self, ch: InputChannelIndex) -> str: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def LoadAmplifierCorrectionCurveFromFile(self, fileName: str, replaceIfExists: bool) -> None: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class LoudspeakerTestConfiguration(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    External2Ch : LoudspeakerTestConfiguration # 0
    External1Ch : LoudspeakerTestConfiguration # 1


class LoudspeakerTestMeasurementType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    VdrvrAndVsense : LoudspeakerTestMeasurementType # 0
    VsenseOnly : LoudspeakerTestMeasurementType # 1


class LowpassFilterMeasurement:
    @property
    def LowpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def LowpassFilterType(self) -> MeasurementLowpassFilterType: ...
    @LowpassFilterType.setter
    def LowpassFilterType(self, value: MeasurementLowpassFilterType) -> MeasurementLowpassFilterType: ...


class LowpassFilterModeAnalog(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    AdcPassband : LowpassFilterModeAnalog # 0
    LpAes17_20k : LowpassFilterModeAnalog # 1
    LpAes17_40k : LowpassFilterModeAnalog # 2
    Butterworth : LowpassFilterModeAnalog # 3
    Elliptic : LowpassFilterModeAnalog # 4


class LowpassFilterModeDigital(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    LpFsOver2 : LowpassFilterModeDigital # 0
    Butterworth : LowpassFilterModeDigital # 1
    Elliptic : LowpassFilterModeDigital # 2


class MakeResultVisibleStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def ResultName(self) -> str: ...
    @ResultName.setter
    def ResultName(self, value: str) -> str: ...
    @property
    def ResultNames(self) -> Array_1[str]: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class MakeResultVisibleStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> MakeResultVisibleStep: ...
    def Add(self) -> MakeResultVisibleStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class MasterClockSource(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Internal : MasterClockSource # 0
    External : MasterClockSource # 1


class MaxOutputBase:
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def GeneratorLevel(self) -> MeterGraph: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Level(self) -> MeterGraph: ...
    @property
    def LowpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def LowpassFilterType(self) -> MeasurementLowpassFilterType: ...
    @LowpassFilterType.setter
    def LowpassFilterType(self, value: MeasurementLowpassFilterType) -> MeasurementLowpassFilterType: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NoiseWeighting(self) -> WeightingFilterType: ...
    @NoiseWeighting.setter
    def NoiseWeighting(self, value: WeightingFilterType) -> WeightingFilterType: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def RegulationSettings(self) -> TargetChannelRegulationSettings: ...
    @property
    def RmsLevelAcPlusDc(self) -> MeterGraph: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def ThdNLevel(self) -> MeterGraph: ...
    @property
    def ThdNRatio(self) -> MeterGraph: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class MaxOutputBurstMeasurement:
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> BurstGenerator: ...
    @property
    def GeneratorLevel(self) -> MeterGraph: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Level(self) -> MeterGraph: ...
    @property
    def LowpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def LowpassFilterType(self) -> MeasurementLowpassFilterType: ...
    @LowpassFilterType.setter
    def LowpassFilterType(self, value: MeasurementLowpassFilterType) -> MeasurementLowpassFilterType: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NoiseWeighting(self) -> WeightingFilterType: ...
    @NoiseWeighting.setter
    def NoiseWeighting(self, value: WeightingFilterType) -> WeightingFilterType: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def RegulationSettings(self) -> TargetChannelRegulationSettings: ...
    @property
    def RmsLevelAcPlusDc(self) -> MeterGraph: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def ThdNLevel(self) -> MeterGraph: ...
    @property
    def ThdNRatio(self) -> MeterGraph: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class MaxOutputGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def SineDual(self) -> SineDualGenerator: ...
    @property
    def SineVarPhase(self) -> SineVarPhaseGenerator: ...
    @property
    def Type(self) -> SplitSineGeneratorType: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class MaxOutputMeasurement:
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> MaxOutputGenerator: ...
    @property
    def GeneratorLevel(self) -> MeterGraph: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def HighpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def HighpassFilterType(self) -> MeasurementHighpassFilterType: ...
    @HighpassFilterType.setter
    def HighpassFilterType(self, value: MeasurementHighpassFilterType) -> MeasurementHighpassFilterType: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Level(self) -> MeterGraph: ...
    @property
    def LowpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def LowpassFilterType(self) -> MeasurementLowpassFilterType: ...
    @LowpassFilterType.setter
    def LowpassFilterType(self, value: MeasurementLowpassFilterType) -> MeasurementLowpassFilterType: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NoiseWeighting(self) -> WeightingFilterType: ...
    @NoiseWeighting.setter
    def NoiseWeighting(self, value: WeightingFilterType) -> WeightingFilterType: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def RegulationSettings(self) -> TargetChannelRegulationSettings: ...
    @property
    def RmsLevelAcPlusDc(self) -> MeterGraph: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def Settling(self) -> MaxOutputSettlingParametersCollection: ...
    @property
    def ThdNLevel(self) -> MeterGraph: ...
    @property
    def ThdNRatio(self) -> MeterGraph: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class MaxOutputSettlingParametersCollection:
    @property
    def Level(self) -> SettlingParameters: ...
    @property
    def RmsLevelAcPlusDc(self) -> SettlingParameters: ...
    @property
    def ThdN(self) -> SettlingParameters: ...


class MeasurandType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Auto : MeasurandType # 0
    Voltage : MeasurandType # 1
    Digital : MeasurandType # 2
    Acoustic : MeasurandType # 3
    Current : MeasurandType # 4
    Jitter : MeasurandType # 5


class MeasuredInputChannelIndex(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Ch1 : MeasuredInputChannelIndex # 0
    Ch2 : MeasuredInputChannelIndex # 1
    Ch3 : MeasuredInputChannelIndex # 2
    Ch4 : MeasuredInputChannelIndex # 3
    Ch5 : MeasuredInputChannelIndex # 4
    Ch6 : MeasuredInputChannelIndex # 5
    Ch7 : MeasuredInputChannelIndex # 6
    Ch8 : MeasuredInputChannelIndex # 7
    Ch9 : MeasuredInputChannelIndex # 8
    Ch10 : MeasuredInputChannelIndex # 9
    Ch11 : MeasuredInputChannelIndex # 10
    Ch12 : MeasuredInputChannelIndex # 11
    Ch13 : MeasuredInputChannelIndex # 12
    Ch14 : MeasuredInputChannelIndex # 13
    Ch15 : MeasuredInputChannelIndex # 14
    Ch16 : MeasuredInputChannelIndex # 15
    All : MeasuredInputChannelIndex # -1


class MeasureJitterInputSignal(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Audio : MeasureJitterInputSignal # 0
    JitterUI : MeasureJitterInputSignal # 1
    JitterSec : MeasureJitterInputSignal # 2


class Measurement:
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class MeasurementBase:
    @property
    def Graphs(self) -> GraphCollection: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class MeasurementExportSettings:
    @property
    def AppendIfExists(self) -> bool: ...
    @AppendIfExists.setter
    def AppendIfExists(self, value: bool) -> bool: ...
    @property
    def DataIndex(self) -> int: ...
    @DataIndex.setter
    def DataIndex(self, value: int) -> int: ...
    @property
    def DataType(self) -> SourceDataType: ...
    @DataType.setter
    def DataType(self, value: SourceDataType) -> SourceDataType: ...
    @property
    def ResultNames(self) -> Array_1[str]: ...
    def GetResultEnabled(self, resultName: str) -> bool: ...
    def SetResultEnabled(self, resultName: str, enabled: bool) -> None: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, enabled: bool) -> None:...



class MeasurementFailureBehavior(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    CancelSequence : MeasurementFailureBehavior # 0
    AllowRetry : MeasurementFailureBehavior # 1
    ContinueSequence : MeasurementFailureBehavior # 2
    AutoRetry : MeasurementFailureBehavior # 3


class MeasurementGroup(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : MeasurementGroup # 0
    Basic : MeasurementGroup # 1
    Meters : MeasurementGroup # 2
    Sweeps : MeasurementGroup # 4
    Distortion : MeasurementGroup # 8
    Crosstalk : MeasurementGroup # 16
    Perceptual : MeasurementGroup # 32
    Acoustic : MeasurementGroup # 64
    All : MeasurementGroup # 128


class MeasurementHighpassFilterType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    SignalPath : MeasurementHighpassFilterType # 0
    Butterworth : MeasurementHighpassFilterType # 1
    Elliptic : MeasurementHighpassFilterType # 2
    DC : MeasurementHighpassFilterType # 3
    AC : MeasurementHighpassFilterType # 4


class MeasurementLowpassFilterType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    SignalPath : MeasurementLowpassFilterType # 0
    Butterworth : MeasurementLowpassFilterType # 1
    Elliptic : MeasurementLowpassFilterType # 2


class MeasurementRecorderBitDepthType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    BitDepth16 : MeasurementRecorderBitDepthType # 0
    BitDepth24 : MeasurementRecorderBitDepthType # 1


class MeasurementRecorderGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def LoopWaveform(self) -> bool: ...
    @LoopWaveform.setter
    def LoopWaveform(self, value: bool) -> bool: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def RepeatWaveformCount(self) -> int: ...
    @RepeatWaveformCount.setter
    def RepeatWaveformCount(self, value: int) -> int: ...
    @property
    def SineDual(self) -> SineDualGenerator: ...
    @property
    def SineVarPhase(self) -> SineVarPhaseGenerator: ...
    @property
    def Type(self) -> SquarewaveGeneratorType: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class MeasurementRecorderMeasurement:
    @property
    def AnalogInputBandwidth(self) -> SignalAnalyzerBandwidthType: ...
    @AnalogInputBandwidth.setter
    def AnalogInputBandwidth(self, value: SignalAnalyzerBandwidthType) -> SignalAnalyzerBandwidthType: ...
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def AvergeJitterLevel(self) -> XYGraph: ...
    @property
    def BandpassFilterTuning(self) -> FilterTuningType: ...
    @BandpassFilterTuning.setter
    def BandpassFilterTuning(self, value: FilterTuningType) -> FilterTuningType: ...
    @property
    def BandpassFixedFilterFrequency(self) -> DoubleSetting: ...
    @property
    def BandpassLevelVsTime(self) -> XYGraph: ...
    @property
    def BandpassRectangularBandMaxFrequency(self) -> DoubleSetting: ...
    @property
    def BandpassRectangularBandMinFrequency(self) -> DoubleSetting: ...
    @property
    def BandpassSelectivity(self) -> BandpassSelectivityType: ...
    @BandpassSelectivity.setter
    def BandpassSelectivity(self, value: BandpassSelectivityType) -> BandpassSelectivityType: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def DcLevelVsTime(self) -> XYGraph: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def FrequencyVsTime(self) -> XYGraph: ...
    @property
    def GainVsTime(self) -> XYGraph: ...
    @property
    def Generator(self) -> MeasurementRecorderGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def HighpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def HighpassFilterType(self) -> MeasurementHighpassFilterType: ...
    @HighpassFilterType.setter
    def HighpassFilterType(self, value: MeasurementHighpassFilterType) -> MeasurementHighpassFilterType: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def LevelTriggerSlope(self) -> LevelSlopeType: ...
    @LevelTriggerSlope.setter
    def LevelTriggerSlope(self, value: LevelSlopeType) -> LevelSlopeType: ...
    @property
    def LevelVsTime(self) -> XYGraph: ...
    @property
    def LowpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def LowpassFilterType(self) -> MeasurementLowpassFilterType: ...
    @LowpassFilterType.setter
    def LowpassFilterType(self, value: MeasurementLowpassFilterType) -> MeasurementLowpassFilterType: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NoiseWeighting(self) -> WeightingFilterType: ...
    @NoiseWeighting.setter
    def NoiseWeighting(self, value: WeightingFilterType) -> WeightingFilterType: ...
    @property
    def NotchFilterFrequency(self) -> DoubleSetting: ...
    @property
    def NotchTuningMode(self) -> FilterTuningType: ...
    @NotchTuningMode.setter
    def NotchTuningMode(self, value: FilterTuningType) -> FilterTuningType: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def PeakLevel(self) -> XYGraph: ...
    @property
    def PhaseVsTime(self) -> XYGraph: ...
    @property
    def ReadingRate(self) -> MeasurementRecorderReadingRate: ...
    @ReadingRate.setter
    def ReadingRate(self, value: MeasurementRecorderReadingRate) -> MeasurementRecorderReadingRate: ...
    @property
    def ReplaceSavedFile(self) -> bool: ...
    @ReplaceSavedFile.setter
    def ReplaceSavedFile(self, value: bool) -> bool: ...
    @property
    def RmsLevelAcPlusDcVsTime(self) -> XYGraph: ...
    @property
    def SaveAcquisitionToFile(self) -> bool: ...
    @SaveAcquisitionToFile.setter
    def SaveAcquisitionToFile(self, value: bool) -> bool: ...
    @property
    def SavedAcquisitionAudioType(self) -> RecordedAudioType: ...
    @SavedAcquisitionAudioType.setter
    def SavedAcquisitionAudioType(self, value: RecordedAudioType) -> RecordedAudioType: ...
    @property
    def SavedAcquisitionBitDepth(self) -> SavedAcquisitionBitDepthType: ...
    @SavedAcquisitionBitDepth.setter
    def SavedAcquisitionBitDepth(self, value: SavedAcquisitionBitDepthType) -> SavedAcquisitionBitDepthType: ...
    @property
    def SavedAcquisitionFileName(self) -> str: ...
    @SavedAcquisitionFileName.setter
    def SavedAcquisitionFileName(self, value: str) -> str: ...
    @property
    def SavedAcquisitionFolderName(self) -> str: ...
    @SavedAcquisitionFolderName.setter
    def SavedAcquisitionFolderName(self, value: str) -> str: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def SinadRatioVsTime(self) -> XYGraph: ...
    @property
    def StopOnUnlock(self) -> bool: ...
    @StopOnUnlock.setter
    def StopOnUnlock(self, value: bool) -> bool: ...
    @property
    def SweepTime(self) -> DoubleSetting: ...
    @property
    def ThdLevelVsTime(self) -> XYGraph: ...
    @property
    def ThdNLevelVsTime(self) -> XYGraph: ...
    @property
    def ThdNRatioVsTime(self) -> XYGraph: ...
    @property
    def ThdRatioVsTime(self) -> XYGraph: ...
    @property
    def TriggerChannel(self) -> InputChannelIndex: ...
    @TriggerChannel.setter
    def TriggerChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def TriggerInput(self) -> APxInputSelection: ...
    @TriggerInput.setter
    def TriggerInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def TriggerLevel(self) -> DoubleSetting: ...
    @property
    def TriggerTimeout(self) -> float: ...
    @TriggerTimeout.setter
    def TriggerTimeout(self, value: float) -> float: ...
    @property
    def TriggerType(self) -> TriggerType: ...
    @TriggerType.setter
    def TriggerType(self, value: TriggerType) -> TriggerType: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def GetPhaseReferenceChannelForInput(self, input: APxInputSelection) -> InputChannelIndex: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def SetPhaseReferenceChannelForInput(self, input: APxInputSelection, ch: InputChannelIndex) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class MeasurementRecorderReadingRate(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    TwentyPerSec : MeasurementRecorderReadingRate # 0
    TenPerSec : MeasurementRecorderReadingRate # 1
    FivePerSec : MeasurementRecorderReadingRate # 2
    ThreePerSec : MeasurementRecorderReadingRate # 3
    TwoPerSec : MeasurementRecorderReadingRate # 4
    OnePerSec : MeasurementRecorderReadingRate # 5
    EveryTwoSec : MeasurementRecorderReadingRate # 6
    EveryFiveSec : MeasurementRecorderReadingRate # 7
    EveryTenSec : MeasurementRecorderReadingRate # 8


class MeasurementResultType(MarshalByRefObject):
    AcquiredCrosstalkWaveformOneChannelDriven : MeasurementResultType
    AcquiredCrosstalkWaveformOneChannelUndriven : MeasurementResultType
    AcquiredWaveform : MeasurementResultType
    AmplitudeSpectralDensity : MeasurementResultType
    AmplitudeSpectralDensityReference : MeasurementResultType
    AnsiS322FitLimitsXY : MeasurementResultType
    AverageDelayMeter : MeasurementResultType
    AverageErrorRate : MeasurementResultType
    AverageJitterLevelMeter : MeasurementResultType
    AverageJitterLevelVsDcxDcv1Level : MeasurementResultType
    AverageJitterLevelVsDcxDcv2Level : MeasurementResultType
    AverageJitterLevelVsFrequency : MeasurementResultType
    AverageJitterLevelVsGeneratorLevel : MeasurementResultType
    AverageJitterLevelVsGeneratorOffset : MeasurementResultType
    AverageJitterLevelVsJitterLevel : MeasurementResultType
    AverageJitterLevelVsJitterLevelSec : MeasurementResultType
    AverageJitterLevelVsJitterLevelUi : MeasurementResultType
    AverageJitterLevelVsOutputSampleRate : MeasurementResultType
    AverageJitterLevelVsPhase : MeasurementResultType
    AverageJitterLevelVsRefSyncOutputRate : MeasurementResultType
    AverageJitterLevelVsTime : MeasurementResultType
    AverageJitterLevelVsVBiasLevel : MeasurementResultType
    BandpassLevelMeter : MeasurementResultType
    BandpassLevelVsDcxDcv1Level : MeasurementResultType
    BandpassLevelVsDcxDcv2Level : MeasurementResultType
    BandpassLevelVsFrequency : MeasurementResultType
    BandpassLevelVsGeneratorLevel : MeasurementResultType
    BandpassLevelVsGeneratorOffset : MeasurementResultType
    BandpassLevelVsJitterLevelSec : MeasurementResultType
    BandpassLevelVsJitterLevelUi : MeasurementResultType
    BandpassLevelVsOutputSampleRate : MeasurementResultType
    BandpassLevelVsPhase : MeasurementResultType
    BandpassLevelVsRefSyncOutputRate : MeasurementResultType
    BandpassLevelVsTime : MeasurementResultType
    BandpassLevelVsVBiasLevel : MeasurementResultType
    BitsMeter : MeasurementResultType
    BitsVsDcxDcv1Level : MeasurementResultType
    BitsVsDcxDcv2Level : MeasurementResultType
    BitsVsFrequency : MeasurementResultType
    BitsVsGeneratorLevel : MeasurementResultType
    BitsVsGeneratorOffset : MeasurementResultType
    BitsVsJitterLevelSec : MeasurementResultType
    BitsVsJitterLevelUi : MeasurementResultType
    BitsVsOutputSampleRate : MeasurementResultType
    BitsVsPhase : MeasurementResultType
    BitsVsRefSyncOutputRate : MeasurementResultType
    BitsVsTime : MeasurementResultType
    BitsVsVBiasLevel : MeasurementResultType
    CmrrIecMeter : MeasurementResultType
    CmrrMeter : MeasurementResultType
    CmrrPin2Meter : MeasurementResultType
    CmrrPin3Meter : MeasurementResultType
    Coherence : MeasurementResultType
    CompareBitstream : MeasurementResultType
    CompareMeter : MeasurementResultType
    CompareXY : MeasurementResultType
    CorrelationVsTime : MeasurementResultType
    CrestFactorMeter : MeasurementResultType
    CrestFactorVsDcxDcv1Level : MeasurementResultType
    CrestFactorVsDcxDcv2Level : MeasurementResultType
    CrestFactorVsFrequency : MeasurementResultType
    CrestFactorVsGeneratorLevel : MeasurementResultType
    CrestFactorVsGeneratorOffset : MeasurementResultType
    CrestFactorVsJitterLevelSec : MeasurementResultType
    CrestFactorVsJitterLevelUi : MeasurementResultType
    CrestFactorVsMeasuredLevel : MeasurementResultType
    CrestFactorVsOutputSampleRate : MeasurementResultType
    CrestFactorVsPhase : MeasurementResultType
    CrestFactorVsRefSyncOutputRate : MeasurementResultType
    CrestFactorVsTime : MeasurementResultType
    CrestFactorVsVBiasLevel : MeasurementResultType
    CrosstalkMeter : MeasurementResultType
    CrosstalkOneChannelDriven : MeasurementResultType
    CrosstalkOneChannelUndriven : MeasurementResultType
    CrosstalkVsFrequency : MeasurementResultType
    CumulativeErrors : MeasurementResultType
    CustomMeterResult : MeasurementResultType
    CustomXYResult : MeasurementResultType
    DataAxis : AxisDataType
    DataDistribution : MeasurementResultType
    DcLevelMeter : MeasurementResultType
    DcLevelVsDcxDcv1Level : MeasurementResultType
    DcLevelVsDcxDcv2Level : MeasurementResultType
    DcLevelVsFrequency : MeasurementResultType
    DcLevelVsGeneratorLevel : MeasurementResultType
    DcLevelVsGeneratorOffset : MeasurementResultType
    DcLevelVsJitterLevelSec : MeasurementResultType
    DcLevelVsJitterLevelUi : MeasurementResultType
    DcLevelVsOutputSampleRate : MeasurementResultType
    DcLevelVsPhase : MeasurementResultType
    DcLevelVsRefSyncOutputRate : MeasurementResultType
    DcLevelVsTime : MeasurementResultType
    DcLevelVsVBiasLevel : MeasurementResultType
    DcxOhmsMeter : MeasurementResultType
    DcxOhmsVsDcxDcv1Level : MeasurementResultType
    DcxOhmsVsDcxDcv2Level : MeasurementResultType
    DcxOhmsVsFrequency : MeasurementResultType
    DcxOhmsVsGeneratorLevel : MeasurementResultType
    DcxOhmsVsGeneratorOffset : MeasurementResultType
    DcxOhmsVsJitterLevelSec : MeasurementResultType
    DcxOhmsVsJitterLevelUi : MeasurementResultType
    DcxOhmsVsOutputSampleRate : MeasurementResultType
    DcxOhmsVsPhase : MeasurementResultType
    DcxOhmsVsRefSyncOutputRate : MeasurementResultType
    DcxOhmsVsTime : MeasurementResultType
    DcxOhmsVsVBiasLevel : MeasurementResultType
    DcxVoltsMeter : MeasurementResultType
    DcxVoltsVsDcxDcv1Level : MeasurementResultType
    DcxVoltsVsDcxDcv2Level : MeasurementResultType
    DcxVoltsVsFrequency : MeasurementResultType
    DcxVoltsVsGeneratorLevel : MeasurementResultType
    DcxVoltsVsGeneratorOffset : MeasurementResultType
    DcxVoltsVsJitterLevelSec : MeasurementResultType
    DcxVoltsVsJitterLevelUi : MeasurementResultType
    DcxVoltsVsOutputSampleRate : MeasurementResultType
    DcxVoltsVsPhase : MeasurementResultType
    DcxVoltsVsRefSyncOutputRate : MeasurementResultType
    DcxVoltsVsTime : MeasurementResultType
    DcxVoltsVsVBiasLevel : MeasurementResultType
    DelayMeter : MeasurementResultType
    DelaySecondsMeter : MeasurementResultType
    DelayVsTime : MeasurementResultType
    DelayVsTimeResampled : MeasurementResultType
    DeviationMeter : MeasurementResultType
    DifferenceFrequencyDistortionAnsi : MeasurementResultType
    DifferenceFrequencyDistortionIec : MeasurementResultType
    DigitalInterfaceLevelMeter : MeasurementResultType
    DigitalInterfaceLevelVsDcxDcv1Level : MeasurementResultType
    DigitalInterfaceLevelVsDcxDcv2Level : MeasurementResultType
    DigitalInterfaceLevelVsFrequency : MeasurementResultType
    DigitalInterfaceLevelVsGeneratorLevel : MeasurementResultType
    DigitalInterfaceLevelVsGeneratorOffset : MeasurementResultType
    DigitalInterfaceLevelVsJitterLevelSec : MeasurementResultType
    DigitalInterfaceLevelVsJitterLevelUi : MeasurementResultType
    DigitalInterfaceLevelVsOutputSampleRate : MeasurementResultType
    DigitalInterfaceLevelVsPhase : MeasurementResultType
    DigitalInterfaceLevelVsRefSyncOutputRate : MeasurementResultType
    DigitalInterfaceLevelVsTime : MeasurementResultType
    DigitalInterfaceLevelVsVBiasLevel : MeasurementResultType
    DimDistortionProductRatio : MeasurementResultType
    DimRatioMeter : MeasurementResultType
    DimRatioVsLevel : MeasurementResultType
    DimRatioVsMeasuredLevel : MeasurementResultType
    DisplayType : ResultDisplayType
    DistortionProductLevelMeter : MeasurementResultType
    DistortionProductLevelVsFrequency : MeasurementResultType
    DistortionProductLevelVsGeneratorLevel : MeasurementResultType
    DistortionProductLevelVsJitterLevel : MeasurementResultType
    DistortionProductRatioMeter : MeasurementResultType
    DistortionProductRatioVsFrequency : MeasurementResultType
    DistortionProductRatioVsGeneratorLevel : MeasurementResultType
    DistortionProductRatioVsJitterLevel : MeasurementResultType
    DynamicRangeMeter : MeasurementResultType
    EnergyTimeCurve : MeasurementResultType
    EnobMeter : MeasurementResultType
    Eq : MeasurementResultType
    ErrorRateMeter : MeasurementResultType
    ErrorRateVsDcxDcv1Level : MeasurementResultType
    ErrorRateVsDcxDcv2Level : MeasurementResultType
    ErrorRateVsFrequency : MeasurementResultType
    ErrorRateVsGeneratorLevel : MeasurementResultType
    ErrorRateVsGeneratorOffset : MeasurementResultType
    ErrorRateVsJitterLevelSec : MeasurementResultType
    ErrorRateVsJitterLevelUi : MeasurementResultType
    ErrorRateVsOutputSampleRate : MeasurementResultType
    ErrorRateVsPhase : MeasurementResultType
    ErrorRateVsRefSyncOutputRate : MeasurementResultType
    ErrorRateVsTime : MeasurementResultType
    ErrorRateVsVBiasLevel : MeasurementResultType
    FFTSpectrum : MeasurementResultType
    FftSpectrumMonitor : MeasurementResultType
    FFTSpectrumReference : MeasurementResultType
    FileMos : MeasurementResultType
    FrequencyMeter : MeasurementResultType
    FrequencyShiftMeter : MeasurementResultType
    FrequencyVsDcxDcv1Level : MeasurementResultType
    FrequencyVsDcxDcv2Level : MeasurementResultType
    FrequencyVsFrequency : MeasurementResultType
    FrequencyVsGeneratorLevel : MeasurementResultType
    FrequencyVsGeneratorOffset : MeasurementResultType
    FrequencyVsJitterLevelSec : MeasurementResultType
    FrequencyVsJitterLevelUi : MeasurementResultType
    FrequencyVsOutputSampleRate : MeasurementResultType
    FrequencyVsPhase : MeasurementResultType
    FrequencyVsRefSyncOutputRate : MeasurementResultType
    FrequencyVsTime : MeasurementResultType
    FrequencyVsVBiasLevel : MeasurementResultType
    FrfImaginarySpectrum : MeasurementResultType
    FrfImpulseResponse : MeasurementResultType
    FrfMagnitudeSpectrum : MeasurementResultType
    FrfPhaseSpectrum : MeasurementResultType
    FrfRealSpectrum : MeasurementResultType
    GainMeter : MeasurementResultType
    GainVsDcxDcv1Level : MeasurementResultType
    GainVsDcxDcv2Level : MeasurementResultType
    GainVsFrequency : MeasurementResultType
    GainVsGeneratorLevel : MeasurementResultType
    GainVsGeneratorOffset : MeasurementResultType
    GainVsJitterLevel : MeasurementResultType
    GainVsJitterLevelSec : MeasurementResultType
    GainVsJitterLevelUi : MeasurementResultType
    GainVsOutputSampleRate : MeasurementResultType
    GainVsPhase : MeasurementResultType
    GainVsRefSyncOutputRate : MeasurementResultType
    GainVsTime : MeasurementResultType
    GainVsVBiasLevel : MeasurementResultType
    GeneratorLevelMeter : MeasurementResultType
    GeneratorLevelVsFrequency : MeasurementResultType
    GroupDelayMeter : MeasurementResultType
    GroupDelayVsFrequency : MeasurementResultType
    HarmonicSumLevelMeter : MeasurementResultType
    HarmonicSumRatioMeter : MeasurementResultType
    HOHD : MeasurementResultType
    Id : int
    ImdRatioMeter : MeasurementResultType
    ImdRatioVsDcxDcv1Level : MeasurementResultType
    ImdRatioVsDcxDcv2Level : MeasurementResultType
    ImdRatioVsFrequency : MeasurementResultType
    ImdRatioVsGeneratorLevel : MeasurementResultType
    ImdRatioVsGeneratorOffset : MeasurementResultType
    ImdRatioVsJitterLevelSec : MeasurementResultType
    ImdRatioVsJitterLevelUi : MeasurementResultType
    ImdRatioVsMeasuredLevel : MeasurementResultType
    ImdRatioVsOutputSampleRate : MeasurementResultType
    ImdRatioVsPhase : MeasurementResultType
    ImdRatioVsRefSyncOutputRate : MeasurementResultType
    ImdRatioVsTime : MeasurementResultType
    ImdRatioVsVBiasLevel : MeasurementResultType
    ImpedanceImaginary : MeasurementResultType
    ImpedanceMagnitude : MeasurementResultType
    ImpedancePhase : MeasurementResultType
    ImpedanceReal : MeasurementResultType
    ImpulseResponse : MeasurementResultType
    ImpulseResponseWindow : MeasurementResultType
    ImpulseResponseWithWindow : MeasurementResultType
    InputSampleRateMeter : MeasurementResultType
    InputSampleRateVsDcxDcv1Level : MeasurementResultType
    InputSampleRateVsDcxDcv2Level : MeasurementResultType
    InputSampleRateVsFrequency : MeasurementResultType
    InputSampleRateVsGeneratorLevel : MeasurementResultType
    InputSampleRateVsGeneratorOffset : MeasurementResultType
    InputSampleRateVsJitterLevelSec : MeasurementResultType
    InputSampleRateVsJitterLevelUi : MeasurementResultType
    InputSampleRateVsOutputSampleRate : MeasurementResultType
    InputSampleRateVsPhase : MeasurementResultType
    InputSampleRateVsRefSyncOutputRate : MeasurementResultType
    InputSampleRateVsTime : MeasurementResultType
    InputSampleRateVsVBiasLevel : MeasurementResultType
    InstantaneousErrorRate : MeasurementResultType
    IsDerived : bool
    LevelAndDistortion : MeasurementResultType
    LevelMeter : MeasurementResultType
    LevelRatioMeter : MeasurementResultType
    LevelRatioVsDcxDcv1Level : MeasurementResultType
    LevelRatioVsDcxDcv2Level : MeasurementResultType
    LevelRatioVsFrequency : MeasurementResultType
    LevelRatioVsGeneratorLevel : MeasurementResultType
    LevelRatioVsGeneratorOffset : MeasurementResultType
    LevelRatioVsJitterLevelSec : MeasurementResultType
    LevelRatioVsJitterLevelUi : MeasurementResultType
    LevelRatioVsOutputSampleRate : MeasurementResultType
    LevelRatioVsPhase : MeasurementResultType
    LevelRatioVsRefSyncOutputRate : MeasurementResultType
    LevelRatioVsTime : MeasurementResultType
    LevelRatioVsVBiasLevel : MeasurementResultType
    LevelVsDcxDcv1Level : MeasurementResultType
    LevelVsDcxDcv2Level : MeasurementResultType
    LevelVsFrequency : MeasurementResultType
    LevelVsGeneratorLevel : MeasurementResultType
    LevelVsGeneratorOffset : MeasurementResultType
    LevelVsJitterLevel : MeasurementResultType
    LevelVsJitterLevelSec : MeasurementResultType
    LevelVsJitterLevelUi : MeasurementResultType
    LevelVsOutputSampleRate : MeasurementResultType
    LevelVsPhase : MeasurementResultType
    LevelVsRefSyncOutputRate : MeasurementResultType
    LevelVsTime : MeasurementResultType
    LevelVsVBiasLevel : MeasurementResultType
    Linearity : MeasurementResultType
    LinearityVsJitterLevel : MeasurementResultType
    LinearityVsJitterLevelSec : MeasurementResultType
    LinearityVsJitterLevelUi : MeasurementResultType
    MaximumToneLevelMeter : MeasurementResultType
    Metadata : MeasurementResultType
    MeterStatistics : MeasurementResultType
    ModulatedNoiseRatioMeter : MeasurementResultType
    MosAverageMeter : MeasurementResultType
    MosMeter : MeasurementResultType
    MosVsTime : MeasurementResultType
    Name : str
    NoiseDensitySpectrum : MeasurementResultType
    NoiseLevelMeter : MeasurementResultType
    NoiseLevelVsFrequency : MeasurementResultType
    NoiseLevelVsGeneratorLevel : MeasurementResultType
    NoiseRatioMeter : MeasurementResultType
    NoiseRatioVsFrequency : MeasurementResultType
    NoiseRatioVsGeneratorLevel : MeasurementResultType
    NoiseRmsLevelMeter : MeasurementResultType
    None : MeasurementResultType
    Normalize : MeasurementResultType
    OffsetMeter : MeasurementResultType
    OffsetXY : MeasurementResultType
    PassFailResponse : MeasurementResultType
    PeakLevelMeter : MeasurementResultType
    PeakLevelVsDcxDcv1Level : MeasurementResultType
    PeakLevelVsDcxDcv2Level : MeasurementResultType
    PeakLevelVsFrequency : MeasurementResultType
    PeakLevelVsGeneratorLevel : MeasurementResultType
    PeakLevelVsGeneratorOffset : MeasurementResultType
    PeakLevelVsJitterLevel : MeasurementResultType
    PeakLevelVsJitterLevelSec : MeasurementResultType
    PeakLevelVsJitterLevelUi : MeasurementResultType
    PeakLevelVsOutputSampleRate : MeasurementResultType
    PeakLevelVsPhase : MeasurementResultType
    PeakLevelVsRefSyncOutputRate : MeasurementResultType
    PeakLevelVsTime : MeasurementResultType
    PeakLevelVsVBiasLevel : MeasurementResultType
    PesqMeter : MeasurementResultType
    PhaseMeter : MeasurementResultType
    PhaseVsDcxDcv1Level : MeasurementResultType
    PhaseVsDcxDcv2Level : MeasurementResultType
    PhaseVsFrequency : MeasurementResultType
    PhaseVsGeneratorLevel : MeasurementResultType
    PhaseVsGeneratorOffset : MeasurementResultType
    PhaseVsJitterLevelSec : MeasurementResultType
    PhaseVsJitterLevelUi : MeasurementResultType
    PhaseVsOutputSampleRate : MeasurementResultType
    PhaseVsPhase : MeasurementResultType
    PhaseVsRefSyncOutputRate : MeasurementResultType
    PhaseVsTime : MeasurementResultType
    PhaseVsVBiasLevel : MeasurementResultType
    PolqaDataTable : MeasurementResultType
    PolqaFileMos : MeasurementResultType
    PolqaMeter : MeasurementResultType
    PolqaMosAverageMeter : MeasurementResultType
    PolqaMosMeter : MeasurementResultType
    PowerSpectralDensity : MeasurementResultType
    PowerSpectralDensityReference : MeasurementResultType
    PsrMeter : MeasurementResultType
    PsrPlusNMeter : MeasurementResultType
    PsrPlusNVsFrequency : MeasurementResultType
    PsrrMeter : MeasurementResultType
    PsrrPlusNMeter : MeasurementResultType
    PsrrPlusNVsFrequency : MeasurementResultType
    PsrrVsFrequency : MeasurementResultType
    PsrVsFrequency : MeasurementResultType
    QpeakLevelMeter : MeasurementResultType
    ReferenceWaveform : MeasurementResultType
    RelativeLevelVsFrequency : MeasurementResultType
    RmsLevelAcPlusDcMeter : MeasurementResultType
    RmsLevelAcPlusDcVsFrequency : MeasurementResultType
    RmsLevelAcPlusDcVsGeneratorLevel : MeasurementResultType
    RmsLevelAcPlusDcVsTime : MeasurementResultType
    RubAndBuzz : MeasurementResultType
    RubAndBuzzCrestFactor : MeasurementResultType
    RubAndBuzzLoudness : MeasurementResultType
    RubAndBuzzPeakRatio : MeasurementResultType
    SampleRateMeter : MeasurementResultType
    Scope : MeasurementResultType
    ScopeMonitor : MeasurementResultType
    SensitivityMeter : MeasurementResultType
    SensitivityXY : MeasurementResultType
    SignalToNoiseRatioMeter : MeasurementResultType
    SinadRatioMeter : MeasurementResultType
    SinadRatioVsDcxDcv1Level : MeasurementResultType
    SinadRatioVsDcxDcv2Level : MeasurementResultType
    SinadRatioVsFrequency : MeasurementResultType
    SinadRatioVsGeneratorLevel : MeasurementResultType
    SinadRatioVsGeneratorOffset : MeasurementResultType
    SinadRatioVsJitterLevel : MeasurementResultType
    SinadRatioVsJitterLevelSec : MeasurementResultType
    SinadRatioVsJitterLevelUi : MeasurementResultType
    SinadRatioVsMeasuredLevel : MeasurementResultType
    SinadRatioVsOutputSampleRate : MeasurementResultType
    SinadRatioVsPhase : MeasurementResultType
    SinadRatioVsRefSyncOutputRate : MeasurementResultType
    SinadRatioVsTime : MeasurementResultType
    SinadRatioVsVBiasLevel : MeasurementResultType
    Smooth : MeasurementResultType
    SmoothTimeDomain : MeasurementResultType
    SoneTracResidualWaveform : MeasurementResultType
    SoneTracRubAndBuzz : MeasurementResultType
    SpecifyXYDataPoints : MeasurementResultType
    SpecifyXYSingleDataPoint : MeasurementResultType
    TdPlusNLevelMeter : MeasurementResultType
    TdPlusNRatioMeter : MeasurementResultType
    TdPlusNSpectrum : MeasurementResultType
    TedsDataTable : MeasurementResultType
    ThdLevelMeter : MeasurementResultType
    ThdLevelVsFrequency : MeasurementResultType
    ThdLevelVsGeneratorLevel : MeasurementResultType
    ThdLevelVsJitterLevel : MeasurementResultType
    ThdLevelVsMeasuredLevel : MeasurementResultType
    ThdLevelVsTime : MeasurementResultType
    ThdNLevelMeter : MeasurementResultType
    ThdNLevelVsDcxDcv1Level : MeasurementResultType
    ThdNLevelVsDcxDcv2Level : MeasurementResultType
    ThdNLevelVsFrequency : MeasurementResultType
    ThdNLevelVsGeneratorLevel : MeasurementResultType
    ThdNLevelVsGeneratorOffset : MeasurementResultType
    ThdNLevelVsJitterLevel : MeasurementResultType
    ThdNLevelVsJitterLevelSec : MeasurementResultType
    ThdNLevelVsJitterLevelUi : MeasurementResultType
    ThdNLevelVsMeasuredLevel : MeasurementResultType
    ThdNLevelVsOutputSampleRate : MeasurementResultType
    ThdNLevelVsPhase : MeasurementResultType
    ThdNLevelVsRefSyncOutputRate : MeasurementResultType
    ThdNLevelVsTime : MeasurementResultType
    ThdNLevelVsVBiasLevel : MeasurementResultType
    ThdNRatioMeter : MeasurementResultType
    ThdNRatioVsDcxDcv1Level : MeasurementResultType
    ThdNRatioVsDcxDcv2Level : MeasurementResultType
    ThdNRatioVsFrequency : MeasurementResultType
    ThdNRatioVsGeneratorLevel : MeasurementResultType
    ThdNRatioVsGeneratorOffset : MeasurementResultType
    ThdNRatioVsJitterLevel : MeasurementResultType
    ThdNRatioVsJitterLevelSec : MeasurementResultType
    ThdNRatioVsJitterLevelUi : MeasurementResultType
    ThdNRatioVsMeasuredLevel : MeasurementResultType
    ThdNRatioVsOutputSampleRate : MeasurementResultType
    ThdNRatioVsPhase : MeasurementResultType
    ThdNRatioVsRefSyncOutputRate : MeasurementResultType
    ThdNRatioVsTime : MeasurementResultType
    ThdNRatioVsVBiasLevel : MeasurementResultType
    ThdRatioMeter : MeasurementResultType
    ThdRatioVsFrequency : MeasurementResultType
    ThdRatioVsGeneratorLevel : MeasurementResultType
    ThdRatioVsJitterLevel : MeasurementResultType
    ThdRatioVsMeasuredLevel : MeasurementResultType
    ThdRatioVsTime : MeasurementResultType
    ThieleSmall : MeasurementResultType
    ToneCrosstalkMeter : MeasurementResultType
    ToneInterchannelPhaseMeter : MeasurementResultType
    ToneRmsLevelMeter : MeasurementResultType
    TotalDifferenceFrequencyDistortionAnsi : MeasurementResultType
    TotalDifferenceFrequencyDistortionIec : MeasurementResultType
    TotalErrors : MeasurementResultType
    TotalRmsLevelMeter : MeasurementResultType
    XAxis : AxisDataType
    XYStatistics : MeasurementResultType
    @classmethod
    @property
    def Elements(cls) -> IEnumerable_1[MeasurementResultType]: ...
    @classmethod
    @property
    def NextId(cls) -> int: ...
    @classmethod
    @NextId.setter
    def NextId(cls, value: int) -> int: ...
    @staticmethod
    def Create(name: str, displayName: str, xAxis: AxisDataType, dataAxis: AxisDataType, displayType: ResultDisplayType, isDerived: bool) -> MeasurementResultType: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, obj1: MeasurementResultType, obj2: typing.Any) -> bool: ...
    def __ne__(self, obj1: MeasurementResultType, obj2: typing.Any) -> bool: ...
    @staticmethod
    def ParseResultType(resultTypeName: str, throwException: bool = ...) -> MeasurementResultType: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: MeasurementResultType) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class MeasurementResultTypeEnum(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    DigitalInterfaceLevelMeter : MeasurementResultTypeEnum # 0
    DigitalInterfaceLevelVsTime : MeasurementResultTypeEnum # 1
    DigitalInterfaceLevelVsFrequency : MeasurementResultTypeEnum # 2
    DigitalInterfaceLevelVsPhase : MeasurementResultTypeEnum # 3
    DigitalInterfaceLevelVsGeneratorLevel : MeasurementResultTypeEnum # 4
    DigitalInterfaceLevelVsGeneratorOffset : MeasurementResultTypeEnum # 5
    DigitalInterfaceLevelVsOutputSampleRate : MeasurementResultTypeEnum # 6
    DigitalInterfaceLevelVsRefSyncOutputRate : MeasurementResultTypeEnum # 7
    DigitalInterfaceLevelVsJitterLevelUi : MeasurementResultTypeEnum # 8
    DigitalInterfaceLevelVsJitterLevelSec : MeasurementResultTypeEnum # 9
    DigitalInterfaceLevelVsDcxDcv1Level : MeasurementResultTypeEnum # 10
    DigitalInterfaceLevelVsDcxDcv2Level : MeasurementResultTypeEnum # 11
    DigitalInterfaceLevelVsVBiasLevel : MeasurementResultTypeEnum # 12
    AverageJitterLevelMeter : MeasurementResultTypeEnum # 13
    AverageJitterLevelVsTime : MeasurementResultTypeEnum # 14
    AverageJitterLevelVsFrequency : MeasurementResultTypeEnum # 15
    AverageJitterLevelVsPhase : MeasurementResultTypeEnum # 16
    AverageJitterLevelVsGeneratorLevel : MeasurementResultTypeEnum # 17
    AverageJitterLevelVsGeneratorOffset : MeasurementResultTypeEnum # 18
    AverageJitterLevelVsOutputSampleRate : MeasurementResultTypeEnum # 19
    AverageJitterLevelVsRefSyncOutputRate : MeasurementResultTypeEnum # 20
    AverageJitterLevelVsJitterLevelUi : MeasurementResultTypeEnum # 21
    AverageJitterLevelVsJitterLevelSec : MeasurementResultTypeEnum # 22
    AverageJitterLevelVsDcxDcv1Level : MeasurementResultTypeEnum # 23
    AverageJitterLevelVsDcxDcv2Level : MeasurementResultTypeEnum # 24
    AverageJitterLevelVsVBiasLevel : MeasurementResultTypeEnum # 25
    BandpassLevelMeter : MeasurementResultTypeEnum # 26
    BandpassLevelVsTime : MeasurementResultTypeEnum # 27
    BandpassLevelVsFrequency : MeasurementResultTypeEnum # 28
    BandpassLevelVsPhase : MeasurementResultTypeEnum # 29
    BandpassLevelVsGeneratorLevel : MeasurementResultTypeEnum # 30
    BandpassLevelVsGeneratorOffset : MeasurementResultTypeEnum # 31
    BandpassLevelVsOutputSampleRate : MeasurementResultTypeEnum # 32
    BandpassLevelVsRefSyncOutputRate : MeasurementResultTypeEnum # 33
    BandpassLevelVsJitterLevelUi : MeasurementResultTypeEnum # 34
    BandpassLevelVsJitterLevelSec : MeasurementResultTypeEnum # 35
    BandpassLevelVsDcxDcv1Level : MeasurementResultTypeEnum # 36
    BandpassLevelVsDcxDcv2Level : MeasurementResultTypeEnum # 37
    BandpassLevelVsVBiasLevel : MeasurementResultTypeEnum # 38
    ErrorRateMeter : MeasurementResultTypeEnum # 39
    ErrorRateVsTime : MeasurementResultTypeEnum # 40
    ErrorRateVsFrequency : MeasurementResultTypeEnum # 41
    ErrorRateVsPhase : MeasurementResultTypeEnum # 42
    ErrorRateVsGeneratorLevel : MeasurementResultTypeEnum # 43
    ErrorRateVsGeneratorOffset : MeasurementResultTypeEnum # 44
    ErrorRateVsOutputSampleRate : MeasurementResultTypeEnum # 45
    ErrorRateVsRefSyncOutputRate : MeasurementResultTypeEnum # 46
    ErrorRateVsJitterLevelUi : MeasurementResultTypeEnum # 47
    ErrorRateVsJitterLevelSec : MeasurementResultTypeEnum # 48
    ErrorRateVsDcxDcv1Level : MeasurementResultTypeEnum # 49
    ErrorRateVsDcxDcv2Level : MeasurementResultTypeEnum # 50
    ErrorRateVsVBiasLevel : MeasurementResultTypeEnum # 51
    CrestFactorMeter : MeasurementResultTypeEnum # 52
    CrestFactorVsTime : MeasurementResultTypeEnum # 53
    CrestFactorVsFrequency : MeasurementResultTypeEnum # 54
    CrestFactorVsPhase : MeasurementResultTypeEnum # 55
    CrestFactorVsGeneratorLevel : MeasurementResultTypeEnum # 56
    CrestFactorVsGeneratorOffset : MeasurementResultTypeEnum # 57
    CrestFactorVsOutputSampleRate : MeasurementResultTypeEnum # 58
    CrestFactorVsRefSyncOutputRate : MeasurementResultTypeEnum # 59
    CrestFactorVsJitterLevelUi : MeasurementResultTypeEnum # 60
    CrestFactorVsJitterLevelSec : MeasurementResultTypeEnum # 61
    CrestFactorVsDcxDcv1Level : MeasurementResultTypeEnum # 62
    CrestFactorVsDcxDcv2Level : MeasurementResultTypeEnum # 63
    CrestFactorVsVBiasLevel : MeasurementResultTypeEnum # 64
    DcLevelMeter : MeasurementResultTypeEnum # 65
    DcLevelVsTime : MeasurementResultTypeEnum # 66
    DcLevelVsFrequency : MeasurementResultTypeEnum # 67
    DcLevelVsPhase : MeasurementResultTypeEnum # 68
    DcLevelVsGeneratorLevel : MeasurementResultTypeEnum # 69
    DcLevelVsGeneratorOffset : MeasurementResultTypeEnum # 70
    DcLevelVsOutputSampleRate : MeasurementResultTypeEnum # 71
    DcLevelVsRefSyncOutputRate : MeasurementResultTypeEnum # 72
    DcLevelVsJitterLevelUi : MeasurementResultTypeEnum # 73
    DcLevelVsJitterLevelSec : MeasurementResultTypeEnum # 74
    DcLevelVsDcxDcv1Level : MeasurementResultTypeEnum # 75
    DcLevelVsDcxDcv2Level : MeasurementResultTypeEnum # 76
    DcLevelVsVBiasLevel : MeasurementResultTypeEnum # 77
    DcxOhmsMeter : MeasurementResultTypeEnum # 78
    DcxOhmsVsTime : MeasurementResultTypeEnum # 79
    DcxOhmsVsFrequency : MeasurementResultTypeEnum # 80
    DcxOhmsVsPhase : MeasurementResultTypeEnum # 81
    DcxOhmsVsGeneratorLevel : MeasurementResultTypeEnum # 82
    DcxOhmsVsGeneratorOffset : MeasurementResultTypeEnum # 83
    DcxOhmsVsOutputSampleRate : MeasurementResultTypeEnum # 84
    DcxOhmsVsRefSyncOutputRate : MeasurementResultTypeEnum # 85
    DcxOhmsVsJitterLevelUi : MeasurementResultTypeEnum # 86
    DcxOhmsVsJitterLevelSec : MeasurementResultTypeEnum # 87
    DcxOhmsVsDcxDcv1Level : MeasurementResultTypeEnum # 88
    DcxOhmsVsDcxDcv2Level : MeasurementResultTypeEnum # 89
    DcxOhmsVsVBiasLevel : MeasurementResultTypeEnum # 90
    DcxVoltsMeter : MeasurementResultTypeEnum # 91
    DcxVoltsVsTime : MeasurementResultTypeEnum # 92
    DcxVoltsVsFrequency : MeasurementResultTypeEnum # 93
    DcxVoltsVsPhase : MeasurementResultTypeEnum # 94
    DcxVoltsVsGeneratorLevel : MeasurementResultTypeEnum # 95
    DcxVoltsVsGeneratorOffset : MeasurementResultTypeEnum # 96
    DcxVoltsVsOutputSampleRate : MeasurementResultTypeEnum # 97
    DcxVoltsVsRefSyncOutputRate : MeasurementResultTypeEnum # 98
    DcxVoltsVsJitterLevelUi : MeasurementResultTypeEnum # 99
    DcxVoltsVsJitterLevelSec : MeasurementResultTypeEnum # 100
    DcxVoltsVsDcxDcv1Level : MeasurementResultTypeEnum # 101
    DcxVoltsVsDcxDcv2Level : MeasurementResultTypeEnum # 102
    DcxVoltsVsVBiasLevel : MeasurementResultTypeEnum # 103
    FrequencyMeter : MeasurementResultTypeEnum # 104
    FrequencyVsTime : MeasurementResultTypeEnum # 105
    FrequencyVsFrequency : MeasurementResultTypeEnum # 106
    FrequencyVsPhase : MeasurementResultTypeEnum # 107
    FrequencyVsGeneratorLevel : MeasurementResultTypeEnum # 108
    FrequencyVsGeneratorOffset : MeasurementResultTypeEnum # 109
    FrequencyVsOutputSampleRate : MeasurementResultTypeEnum # 110
    FrequencyVsRefSyncOutputRate : MeasurementResultTypeEnum # 111
    FrequencyVsJitterLevelUi : MeasurementResultTypeEnum # 112
    FrequencyVsJitterLevelSec : MeasurementResultTypeEnum # 113
    FrequencyVsDcxDcv1Level : MeasurementResultTypeEnum # 114
    FrequencyVsDcxDcv2Level : MeasurementResultTypeEnum # 115
    FrequencyVsVBiasLevel : MeasurementResultTypeEnum # 116
    GainMeter : MeasurementResultTypeEnum # 117
    GainVsTime : MeasurementResultTypeEnum # 118
    GainVsFrequency : MeasurementResultTypeEnum # 119
    GainVsPhase : MeasurementResultTypeEnum # 120
    GainVsGeneratorLevel : MeasurementResultTypeEnum # 121
    GainVsGeneratorOffset : MeasurementResultTypeEnum # 122
    GainVsOutputSampleRate : MeasurementResultTypeEnum # 123
    GainVsRefSyncOutputRate : MeasurementResultTypeEnum # 124
    GainVsJitterLevelUi : MeasurementResultTypeEnum # 125
    GainVsJitterLevelSec : MeasurementResultTypeEnum # 126
    GainVsDcxDcv1Level : MeasurementResultTypeEnum # 127
    GainVsDcxDcv2Level : MeasurementResultTypeEnum # 128
    GainVsVBiasLevel : MeasurementResultTypeEnum # 129
    ImdRatioMeter : MeasurementResultTypeEnum # 130
    ImdRatioVsTime : MeasurementResultTypeEnum # 131
    ImdRatioVsFrequency : MeasurementResultTypeEnum # 132
    ImdRatioVsPhase : MeasurementResultTypeEnum # 133
    ImdRatioVsGeneratorLevel : MeasurementResultTypeEnum # 134
    ImdRatioVsGeneratorOffset : MeasurementResultTypeEnum # 135
    ImdRatioVsOutputSampleRate : MeasurementResultTypeEnum # 136
    ImdRatioVsRefSyncOutputRate : MeasurementResultTypeEnum # 137
    ImdRatioVsJitterLevelUi : MeasurementResultTypeEnum # 138
    ImdRatioVsJitterLevelSec : MeasurementResultTypeEnum # 139
    ImdRatioVsDcxDcv1Level : MeasurementResultTypeEnum # 140
    ImdRatioVsDcxDcv2Level : MeasurementResultTypeEnum # 141
    ImdRatioVsVBiasLevel : MeasurementResultTypeEnum # 142
    LevelRatioMeter : MeasurementResultTypeEnum # 143
    LevelRatioVsTime : MeasurementResultTypeEnum # 144
    LevelRatioVsFrequency : MeasurementResultTypeEnum # 145
    LevelRatioVsPhase : MeasurementResultTypeEnum # 146
    LevelRatioVsGeneratorLevel : MeasurementResultTypeEnum # 147
    LevelRatioVsGeneratorOffset : MeasurementResultTypeEnum # 148
    LevelRatioVsOutputSampleRate : MeasurementResultTypeEnum # 149
    LevelRatioVsRefSyncOutputRate : MeasurementResultTypeEnum # 150
    LevelRatioVsJitterLevelUi : MeasurementResultTypeEnum # 151
    LevelRatioVsJitterLevelSec : MeasurementResultTypeEnum # 152
    LevelRatioVsDcxDcv1Level : MeasurementResultTypeEnum # 153
    LevelRatioVsDcxDcv2Level : MeasurementResultTypeEnum # 154
    LevelRatioVsVBiasLevel : MeasurementResultTypeEnum # 155
    PeakLevelMeter : MeasurementResultTypeEnum # 156
    PeakLevelVsTime : MeasurementResultTypeEnum # 157
    PeakLevelVsFrequency : MeasurementResultTypeEnum # 158
    PeakLevelVsPhase : MeasurementResultTypeEnum # 159
    PeakLevelVsGeneratorLevel : MeasurementResultTypeEnum # 160
    PeakLevelVsGeneratorOffset : MeasurementResultTypeEnum # 161
    PeakLevelVsOutputSampleRate : MeasurementResultTypeEnum # 162
    PeakLevelVsRefSyncOutputRate : MeasurementResultTypeEnum # 163
    PeakLevelVsJitterLevelUi : MeasurementResultTypeEnum # 164
    PeakLevelVsJitterLevelSec : MeasurementResultTypeEnum # 165
    PeakLevelVsDcxDcv1Level : MeasurementResultTypeEnum # 166
    PeakLevelVsDcxDcv2Level : MeasurementResultTypeEnum # 167
    PeakLevelVsVBiasLevel : MeasurementResultTypeEnum # 168
    PhaseMeter : MeasurementResultTypeEnum # 169
    PhaseVsTime : MeasurementResultTypeEnum # 170
    PhaseVsFrequency : MeasurementResultTypeEnum # 171
    PhaseVsPhase : MeasurementResultTypeEnum # 172
    PhaseVsGeneratorLevel : MeasurementResultTypeEnum # 173
    PhaseVsGeneratorOffset : MeasurementResultTypeEnum # 174
    PhaseVsOutputSampleRate : MeasurementResultTypeEnum # 175
    PhaseVsRefSyncOutputRate : MeasurementResultTypeEnum # 176
    PhaseVsJitterLevelUi : MeasurementResultTypeEnum # 177
    PhaseVsJitterLevelSec : MeasurementResultTypeEnum # 178
    PhaseVsDcxDcv1Level : MeasurementResultTypeEnum # 179
    PhaseVsDcxDcv2Level : MeasurementResultTypeEnum # 180
    PhaseVsVBiasLevel : MeasurementResultTypeEnum # 181
    LevelMeter : MeasurementResultTypeEnum # 182
    LevelVsTime : MeasurementResultTypeEnum # 183
    LevelVsFrequency : MeasurementResultTypeEnum # 184
    LevelVsPhase : MeasurementResultTypeEnum # 185
    LevelVsGeneratorLevel : MeasurementResultTypeEnum # 186
    LevelVsGeneratorOffset : MeasurementResultTypeEnum # 187
    LevelVsOutputSampleRate : MeasurementResultTypeEnum # 188
    LevelVsRefSyncOutputRate : MeasurementResultTypeEnum # 189
    LevelVsJitterLevelUi : MeasurementResultTypeEnum # 190
    LevelVsJitterLevelSec : MeasurementResultTypeEnum # 191
    LevelVsDcxDcv1Level : MeasurementResultTypeEnum # 192
    LevelVsDcxDcv2Level : MeasurementResultTypeEnum # 193
    LevelVsVBiasLevel : MeasurementResultTypeEnum # 194
    InputSampleRateMeter : MeasurementResultTypeEnum # 195
    InputSampleRateVsTime : MeasurementResultTypeEnum # 196
    InputSampleRateVsFrequency : MeasurementResultTypeEnum # 197
    InputSampleRateVsPhase : MeasurementResultTypeEnum # 198
    InputSampleRateVsGeneratorLevel : MeasurementResultTypeEnum # 199
    InputSampleRateVsGeneratorOffset : MeasurementResultTypeEnum # 200
    InputSampleRateVsOutputSampleRate : MeasurementResultTypeEnum # 201
    InputSampleRateVsRefSyncOutputRate : MeasurementResultTypeEnum # 202
    InputSampleRateVsJitterLevelUi : MeasurementResultTypeEnum # 203
    InputSampleRateVsJitterLevelSec : MeasurementResultTypeEnum # 204
    InputSampleRateVsDcxDcv1Level : MeasurementResultTypeEnum # 205
    InputSampleRateVsDcxDcv2Level : MeasurementResultTypeEnum # 206
    InputSampleRateVsVBiasLevel : MeasurementResultTypeEnum # 207
    SinadRatioMeter : MeasurementResultTypeEnum # 208
    SinadRatioVsTime : MeasurementResultTypeEnum # 209
    SinadRatioVsFrequency : MeasurementResultTypeEnum # 210
    SinadRatioVsPhase : MeasurementResultTypeEnum # 211
    SinadRatioVsGeneratorLevel : MeasurementResultTypeEnum # 212
    SinadRatioVsGeneratorOffset : MeasurementResultTypeEnum # 213
    SinadRatioVsOutputSampleRate : MeasurementResultTypeEnum # 214
    SinadRatioVsRefSyncOutputRate : MeasurementResultTypeEnum # 215
    SinadRatioVsJitterLevelUi : MeasurementResultTypeEnum # 216
    SinadRatioVsJitterLevelSec : MeasurementResultTypeEnum # 217
    SinadRatioVsDcxDcv1Level : MeasurementResultTypeEnum # 218
    SinadRatioVsDcxDcv2Level : MeasurementResultTypeEnum # 219
    SinadRatioVsVBiasLevel : MeasurementResultTypeEnum # 220
    ThdNLevelMeter : MeasurementResultTypeEnum # 221
    ThdNLevelVsTime : MeasurementResultTypeEnum # 222
    ThdNLevelVsFrequency : MeasurementResultTypeEnum # 223
    ThdNLevelVsPhase : MeasurementResultTypeEnum # 224
    ThdNLevelVsGeneratorLevel : MeasurementResultTypeEnum # 225
    ThdNLevelVsGeneratorOffset : MeasurementResultTypeEnum # 226
    ThdNLevelVsOutputSampleRate : MeasurementResultTypeEnum # 227
    ThdNLevelVsRefSyncOutputRate : MeasurementResultTypeEnum # 228
    ThdNLevelVsJitterLevelUi : MeasurementResultTypeEnum # 229
    ThdNLevelVsJitterLevelSec : MeasurementResultTypeEnum # 230
    ThdNLevelVsDcxDcv1Level : MeasurementResultTypeEnum # 231
    ThdNLevelVsDcxDcv2Level : MeasurementResultTypeEnum # 232
    ThdNLevelVsVBiasLevel : MeasurementResultTypeEnum # 233
    ThdNRatioMeter : MeasurementResultTypeEnum # 234
    ThdNRatioVsTime : MeasurementResultTypeEnum # 235
    ThdNRatioVsFrequency : MeasurementResultTypeEnum # 236
    ThdNRatioVsPhase : MeasurementResultTypeEnum # 237
    ThdNRatioVsGeneratorLevel : MeasurementResultTypeEnum # 238
    ThdNRatioVsGeneratorOffset : MeasurementResultTypeEnum # 239
    ThdNRatioVsOutputSampleRate : MeasurementResultTypeEnum # 240
    ThdNRatioVsRefSyncOutputRate : MeasurementResultTypeEnum # 241
    ThdNRatioVsJitterLevelUi : MeasurementResultTypeEnum # 242
    ThdNRatioVsJitterLevelSec : MeasurementResultTypeEnum # 243
    ThdNRatioVsDcxDcv1Level : MeasurementResultTypeEnum # 244
    ThdNRatioVsDcxDcv2Level : MeasurementResultTypeEnum # 245
    ThdNRatioVsVBiasLevel : MeasurementResultTypeEnum # 246
    BitsMeter : MeasurementResultTypeEnum # 247
    BitsVsTime : MeasurementResultTypeEnum # 248
    BitsVsFrequency : MeasurementResultTypeEnum # 249
    BitsVsPhase : MeasurementResultTypeEnum # 250
    BitsVsGeneratorLevel : MeasurementResultTypeEnum # 251
    BitsVsGeneratorOffset : MeasurementResultTypeEnum # 252
    BitsVsOutputSampleRate : MeasurementResultTypeEnum # 253
    BitsVsRefSyncOutputRate : MeasurementResultTypeEnum # 254
    BitsVsJitterLevelUi : MeasurementResultTypeEnum # 255
    BitsVsJitterLevelSec : MeasurementResultTypeEnum # 256
    BitsVsDcxDcv1Level : MeasurementResultTypeEnum # 257
    BitsVsDcxDcv2Level : MeasurementResultTypeEnum # 258
    BitsVsVBiasLevel : MeasurementResultTypeEnum # 259
    ThdLevelMeter : MeasurementResultTypeEnum # 260
    ThdLevelVsFrequency : MeasurementResultTypeEnum # 261
    ThdLevelVsTime : MeasurementResultTypeEnum # 262
    ThdLevelVsGeneratorLevel : MeasurementResultTypeEnum # 263
    ThdLevelVsJitterLevel : MeasurementResultTypeEnum # 264
    ThdLevelVsMeasuredLevel : MeasurementResultTypeEnum # 265
    ThdRatioMeter : MeasurementResultTypeEnum # 266
    ThdRatioVsFrequency : MeasurementResultTypeEnum # 267
    ThdRatioVsTime : MeasurementResultTypeEnum # 268
    ThdRatioVsGeneratorLevel : MeasurementResultTypeEnum # 269
    ThdRatioVsJitterLevel : MeasurementResultTypeEnum # 270
    ThdRatioVsMeasuredLevel : MeasurementResultTypeEnum # 271
    GainVsJitterLevel : MeasurementResultTypeEnum # 272
    SinadRatioVsJitterLevel : MeasurementResultTypeEnum # 273
    SinadRatioVsMeasuredLevel : MeasurementResultTypeEnum # 274
    LevelVsJitterLevel : MeasurementResultTypeEnum # 275
    RmsLevelAcPlusDcVsFrequency : MeasurementResultTypeEnum # 276
    RmsLevelAcPlusDcVsTime : MeasurementResultTypeEnum # 277
    RmsLevelAcPlusDcVsGeneratorLevel : MeasurementResultTypeEnum # 278
    PeakLevelVsJitterLevel : MeasurementResultTypeEnum # 279
    CrestFactorVsMeasuredLevel : MeasurementResultTypeEnum # 280
    ThdNLevelVsJitterLevel : MeasurementResultTypeEnum # 281
    ThdNLevelVsMeasuredLevel : MeasurementResultTypeEnum # 282
    ThdNRatioVsJitterLevel : MeasurementResultTypeEnum # 283
    ThdNRatioVsMeasuredLevel : MeasurementResultTypeEnum # 284
    CrosstalkMeter : MeasurementResultTypeEnum # 285
    CrosstalkVsFrequency : MeasurementResultTypeEnum # 286
    GroupDelayMeter : MeasurementResultTypeEnum # 287
    GroupDelayVsFrequency : MeasurementResultTypeEnum # 288
    DistortionProductLevelVsFrequency : MeasurementResultTypeEnum # 289
    DistortionProductLevelVsJitterLevel : MeasurementResultTypeEnum # 290
    DistortionProductRatioVsFrequency : MeasurementResultTypeEnum # 291
    DistortionProductRatioVsJitterLevel : MeasurementResultTypeEnum # 292
    GeneratorLevelMeter : MeasurementResultTypeEnum # 293
    GeneratorLevelVsFrequency : MeasurementResultTypeEnum # 294
    SignalToNoiseRatioMeter : MeasurementResultTypeEnum # 295
    ImdRatioVsMeasuredLevel : MeasurementResultTypeEnum # 296
    DeviationMeter : MeasurementResultTypeEnum # 297
    DynamicRangeMeter : MeasurementResultTypeEnum # 298
    DimRatioMeter : MeasurementResultTypeEnum # 299
    DimRatioVsMeasuredLevel : MeasurementResultTypeEnum # 300
    DelayVsTime : MeasurementResultTypeEnum # 301
    FrequencyShiftMeter : MeasurementResultTypeEnum # 302
    HarmonicSumRatioMeter : MeasurementResultTypeEnum # 303
    HarmonicSumLevelMeter : MeasurementResultTypeEnum # 304
    EnobMeter : MeasurementResultTypeEnum # 305
    QpeakLevelMeter : MeasurementResultTypeEnum # 306
    PsrMeter : MeasurementResultTypeEnum # 307
    PsrVsFrequency : MeasurementResultTypeEnum # 308
    PsrPlusNMeter : MeasurementResultTypeEnum # 309
    PsrPlusNVsFrequency : MeasurementResultTypeEnum # 310
    PsrrMeter : MeasurementResultTypeEnum # 311
    PsrrVsFrequency : MeasurementResultTypeEnum # 312
    PsrrPlusNMeter : MeasurementResultTypeEnum # 313
    PsrrPlusNVsFrequency : MeasurementResultTypeEnum # 314
    PesqMeter : MeasurementResultTypeEnum # 315
    PolqaMeter : MeasurementResultTypeEnum # 316
    MosMeter : MeasurementResultTypeEnum # 317
    MosVsTime : MeasurementResultTypeEnum # 318
    MosAverageMeter : MeasurementResultTypeEnum # 319
    ModulatedNoiseRatioMeter : MeasurementResultTypeEnum # 320
    NoiseLevelMeter : MeasurementResultTypeEnum # 321
    NoiseLevelVsGeneratorLevel : MeasurementResultTypeEnum # 322
    NoiseLevelVsFrequency : MeasurementResultTypeEnum # 323
    NoiseRatioMeter : MeasurementResultTypeEnum # 324
    NoiseRatioVsGeneratorLevel : MeasurementResultTypeEnum # 325
    NoiseRatioVsFrequency : MeasurementResultTypeEnum # 326
    SampleRateMeter : MeasurementResultTypeEnum # 327
    FftSpectrumMonitor : MeasurementResultTypeEnum # 328
    ScopeMonitor : MeasurementResultTypeEnum # 329
    LevelAndDistortion : MeasurementResultTypeEnum # 330
    EnergyTimeCurve : MeasurementResultTypeEnum # 331
    TdPlusNSpectrum : MeasurementResultTypeEnum # 332
    ImpulseResponse : MeasurementResultTypeEnum # 333
    ImpulseResponseWithWindow : MeasurementResultTypeEnum # 334
    ImpulseResponseWindow : MeasurementResultTypeEnum # 335
    AmplitudeSpectralDensity : MeasurementResultTypeEnum # 336
    PowerSpectralDensity : MeasurementResultTypeEnum # 337
    AmplitudeSpectralDensityReference : MeasurementResultTypeEnum # 338
    PowerSpectralDensityReference : MeasurementResultTypeEnum # 339
    FileMos : MeasurementResultTypeEnum # 340
    PolqaFileMos : MeasurementResultTypeEnum # 341
    PolqaMosAverageMeter : MeasurementResultTypeEnum # 342
    PolqaMosMeter : MeasurementResultTypeEnum # 343
    AcquiredWaveform : MeasurementResultTypeEnum # 344
    ReferenceWaveform : MeasurementResultTypeEnum # 345
    AcquiredCrosstalkWaveformOneChannelDriven : MeasurementResultTypeEnum # 346
    AcquiredCrosstalkWaveformOneChannelUndriven : MeasurementResultTypeEnum # 347
    Scope : MeasurementResultTypeEnum # 348
    FFTSpectrum : MeasurementResultTypeEnum # 349
    FFTSpectrumReference : MeasurementResultTypeEnum # 350
    InstantaneousErrorRate : MeasurementResultTypeEnum # 351
    CumulativeErrors : MeasurementResultTypeEnum # 352
    Linearity : MeasurementResultTypeEnum # 353
    RubAndBuzzCrestFactor : MeasurementResultTypeEnum # 354
    RubAndBuzzPeakRatio : MeasurementResultTypeEnum # 355
    RubAndBuzz : MeasurementResultTypeEnum # 356
    ImpedanceMagnitude : MeasurementResultTypeEnum # 357
    ImpedancePhase : MeasurementResultTypeEnum # 358
    ImpedanceReal : MeasurementResultTypeEnum # 359
    ImpedanceImaginary : MeasurementResultTypeEnum # 360
    NoiseDensitySpectrum : MeasurementResultTypeEnum # 361
    DelayVsTimeResampled : MeasurementResultTypeEnum # 362
    CustomXYResult : MeasurementResultTypeEnum # 363
    DimRatioVsLevel : MeasurementResultTypeEnum # 364
    CrosstalkOneChannelUndriven : MeasurementResultTypeEnum # 365
    CrosstalkOneChannelDriven : MeasurementResultTypeEnum # 366
    RelativeLevelVsFrequency : MeasurementResultTypeEnum # 367
    AverageJitterLevelVsJitterLevel : MeasurementResultTypeEnum # 368
    LinearityVsJitterLevel : MeasurementResultTypeEnum # 369
    LinearityVsJitterLevelUi : MeasurementResultTypeEnum # 370
    LinearityVsJitterLevelSec : MeasurementResultTypeEnum # 371
    FrfMagnitudeSpectrum : MeasurementResultTypeEnum # 372
    FrfPhaseSpectrum : MeasurementResultTypeEnum # 373
    FrfRealSpectrum : MeasurementResultTypeEnum # 374
    FrfImaginarySpectrum : MeasurementResultTypeEnum # 375
    Coherence : MeasurementResultTypeEnum # 376
    FrfImpulseResponse : MeasurementResultTypeEnum # 377
    TotalDifferenceFrequencyDistortionAnsi : MeasurementResultTypeEnum # 378
    TotalDifferenceFrequencyDistortionIec : MeasurementResultTypeEnum # 379
    DifferenceFrequencyDistortionAnsi : MeasurementResultTypeEnum # 380
    DifferenceFrequencyDistortionIec : MeasurementResultTypeEnum # 381
    HOHD : MeasurementResultTypeEnum # 382
    RubAndBuzzLoudness : MeasurementResultTypeEnum # 383
    SoneTracRubAndBuzz : MeasurementResultTypeEnum # 384
    SoneTracResidualWaveform : MeasurementResultTypeEnum # 385
    Smooth : MeasurementResultTypeEnum # 386
    SmoothTimeDomain : MeasurementResultTypeEnum # 387
    XYStatistics : MeasurementResultTypeEnum # 388
    Normalize : MeasurementResultTypeEnum # 389
    OffsetXY : MeasurementResultTypeEnum # 390
    CompareXY : MeasurementResultTypeEnum # 391
    SpecifyXYDataPoints : MeasurementResultTypeEnum # 392
    SensitivityXY : MeasurementResultTypeEnum # 393
    AnsiS322FitLimitsXY : MeasurementResultTypeEnum # 394
    Eq : MeasurementResultTypeEnum # 395
    AverageErrorRate : MeasurementResultTypeEnum # 396
    TotalErrors : MeasurementResultTypeEnum # 397
    TotalRmsLevelMeter : MeasurementResultTypeEnum # 398
    ToneRmsLevelMeter : MeasurementResultTypeEnum # 399
    MaximumToneLevelMeter : MeasurementResultTypeEnum # 400
    ToneInterchannelPhaseMeter : MeasurementResultTypeEnum # 401
    ToneCrosstalkMeter : MeasurementResultTypeEnum # 402
    Metadata : MeasurementResultTypeEnum # 403
    ThieleSmall : MeasurementResultTypeEnum # 404
    CompareBitstream : MeasurementResultTypeEnum # 405
    AverageDelayMeter : MeasurementResultTypeEnum # 406
    CustomMeterResult : MeasurementResultTypeEnum # 407
    NoiseRmsLevelMeter : MeasurementResultTypeEnum # 408
    CmrrMeter : MeasurementResultTypeEnum # 409
    CmrrIecMeter : MeasurementResultTypeEnum # 410
    CmrrPin2Meter : MeasurementResultTypeEnum # 411
    CmrrPin3Meter : MeasurementResultTypeEnum # 412
    TdPlusNLevelMeter : MeasurementResultTypeEnum # 413
    TdPlusNRatioMeter : MeasurementResultTypeEnum # 414
    DelayMeter : MeasurementResultTypeEnum # 415
    RmsLevelAcPlusDcMeter : MeasurementResultTypeEnum # 416
    MeterStatistics : MeasurementResultTypeEnum # 417
    OffsetMeter : MeasurementResultTypeEnum # 418
    CompareMeter : MeasurementResultTypeEnum # 419
    DataDistribution : MeasurementResultTypeEnum # 420
    SpecifyXYSingleDataPoint : MeasurementResultTypeEnum # 421
    SensitivityMeter : MeasurementResultTypeEnum # 422
    DimDistortionProductRatio : MeasurementResultTypeEnum # 423
    DistortionProductLevelMeter : MeasurementResultTypeEnum # 424
    DistortionProductRatioMeter : MeasurementResultTypeEnum # 425
    PassFailResponse : MeasurementResultTypeEnum # 426
    PolqaDataTable : MeasurementResultTypeEnum # 427
    TedsDataTable : MeasurementResultTypeEnum # 428
    DistortionProductLevelVsGeneratorLevel : MeasurementResultTypeEnum # 429
    DistortionProductRatioVsGeneratorLevel : MeasurementResultTypeEnum # 430
    CorrelationVsTime : MeasurementResultTypeEnum # 431
    DelaySecondsMeter : MeasurementResultTypeEnum # 432
    None_ : MeasurementResultTypeEnum # 433


class MeasurementStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def DataSetNoteCustomText(self) -> str: ...
    @DataSetNoteCustomText.setter
    def DataSetNoteCustomText(self, value: str) -> str: ...
    @property
    def DataSetNotePrompt(self) -> str: ...
    @DataSetNotePrompt.setter
    def DataSetNotePrompt(self, value: str) -> str: ...
    @property
    def DataSetNoteType(self) -> DataNoteType: ...
    @DataSetNoteType.setter
    def DataSetNoteType(self, value: DataNoteType) -> DataNoteType: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class MeasurementStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> MeasurementStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class MeasurementType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    SignalPathSetup : MeasurementType # 0
    ReferenceLevels : MeasurementType # 1
    LevelAndGain : MeasurementType # 2
    ThdN : MeasurementType # 3
    FrequencyResponse : MeasurementType # 4
    SignalToNoiseRatio : MeasurementType # 5
    CrosstalkOneChannelDriven : MeasurementType # 6
    CrosstalkOneChannelUndriven : MeasurementType # 7
    CrosstalkCustom : MeasurementType # 8
    InterchannelPhase : MeasurementType # 9
    DCLevel : MeasurementType # 10
    ContinuousSweep : MeasurementType # 11
    BandpassFrequencySweep : MeasurementType # 12
    SteppedFrequencySweep : MeasurementType # 13
    SteppedLevelSweep : MeasurementType # 14
    BandpassLevelSweep : MeasurementType # 15
    SignalAnalyzer : MeasurementType # 16
    MeasurementRecorder : MeasurementType # 17
    MetadataRecorder : MeasurementType # 18
    MultitoneAnalyzer : MeasurementType # 19
    RegulatedFrequencySweep : MeasurementType # 20
    MaxOutput : MeasurementType # 21
    MaxOutputBurst : MeasurementType # 22
    Cmrr : MeasurementType # 23
    CmrrIec : MeasurementType # 24
    Noise : MeasurementType # 25
    Frequency : MeasurementType # 26
    DigitalErrorRate : MeasurementType # 27
    DynamicRange : MeasurementType # 28
    AcousticResponse : MeasurementType # 29
    DimImd : MeasurementType # 30
    Imd : MeasurementType # 31
    ImdLevelSweep : MeasurementType # 32
    DimLevelSweep : MeasurementType # 33
    BandpassLevel : MeasurementType # 34
    PassFail : MeasurementType # 35
    Sinad : MeasurementType # 36
    QpeakNoise : MeasurementType # 37
    NoiseRecorder : MeasurementType # 38
    ImdFrequencySweep : MeasurementType # 39
    CrosstalkFrequencySweepOneChannelUndriven : MeasurementType # 40
    CrosstalkFrequencySweepOneChannelDriven : MeasurementType # 41
    CrosstalkFrequencySweepCustom : MeasurementType # 42
    Psr : MeasurementType # 43
    PsrSweep : MeasurementType # 44
    Pesq : MeasurementType # 45
    PesqAverage : MeasurementType # 46
    Polqa : MeasurementType # 47
    PolqaAverage : MeasurementType # 48
    CompareEncodedBitstream : MeasurementType # 49
    DcLevelSweep : MeasurementType # 50
    VddRamp : MeasurementType # 51
    ModulatedNoise : MeasurementType # 52
    ImpedanceThieleSmall : MeasurementType # 53
    LoudspeakerProductionTest : MeasurementType # 54
    DcLevelDcx : MeasurementType # 55
    ResistanceDcx : MeasurementType # 56
    JitterFrequencySweep : MeasurementType # 57
    JitterLevelSweep : MeasurementType # 58
    LevelRatio : MeasurementType # 59
    SampleRate : MeasurementType # 60
    TedsData : MeasurementType # 61
    SignalAcquisition : MeasurementType # 62
    DutDelay : MeasurementType # 63
    TransferFunction : MeasurementType # 64
    AnsiS322ImdFrequencySweep : MeasurementType # 65
    Iec60118ImdFrequencySweep : MeasurementType # 66
    DelayCalibration : MeasurementType # 10000
    DelayChirpCalibration : MeasurementType # 10001


class MessageBoxIcon(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : MessageBoxIcon # 0
    Asterisk : MessageBoxIcon # 1
    Error : MessageBoxIcon # 2
    Exclamation : MessageBoxIcon # 3
    Hand : MessageBoxIcon # 4
    Information : MessageBoxIcon # 5
    Question : MessageBoxIcon # 6
    Stop : MessageBoxIcon # 7
    Warning : MessageBoxIcon # 8


class MessageStepBase:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def RTF(self) -> str: ...
    @RTF.setter
    def RTF(self, value: str) -> str: ...
    @property
    def SelectedImage(self) -> str: ...
    @SelectedImage.setter
    def SelectedImage(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    @property
    def Text(self) -> str: ...
    @Text.setter
    def Text(self, value: str) -> str: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def LoadImageFile(self, fileName: str, replaceIfExists: bool) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class MetadataField(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    LockStatus : MetadataField # 0
    MeasuredSampleRate : MetadataField # 1
    Iec61937DataType : MetadataField # 2
    EncodedAudioMode : MetadataField # 3
    EncodedDialogNormalization : MetadataField # 4
    EncodedAudioBitRate : MetadataField # 5
    CsA_Application : MetadataField # 6
    CsA_AudioMode : MetadataField # 7
    CsA_Copyright : MetadataField # 8
    CsA_Emphasis : MetadataField # 9
    CsA_ChannelStatusMode : MetadataField # 10
    CsA_CategoryCode : MetadataField # 11
    CsA_SourceNumber : MetadataField # 12
    CsA_ChannelNumber : MetadataField # 13
    CsA_SamplingFrequency : MetadataField # 14
    CsA_ClockAccuracy : MetadataField # 15
    CsA_WordLength : MetadataField # 16
    CsA_SampleWordLength : MetadataField # 17
    CsA_OriginalSamplingFrequency : MetadataField # 18
    CsA_CGMSA : MetadataField # 19
    CsA_Lock : MetadataField # 20
    CsA_ChannelMode : MetadataField # 21
    CsA_UserBitsManagement : MetadataField # 22
    CsA_AuxBits : MetadataField # 23
    CsA_SourceWordlength : MetadataField # 24
    CsA_AlignmentLevel : MetadataField # 25
    CsA_MultichannelMode : MetadataField # 26
    CsA_SampleFrequencyScaling : MetadataField # 27
    CsA_DARS : MetadataField # 28
    CsA_ChannelOrigin : MetadataField # 29
    CsA_ChannelDest : MetadataField # 30
    CsA_LocalAddress : MetadataField # 31
    CsA_TimeOfDay : MetadataField # 32
    CsA_Reliability0_5 : MetadataField # 33
    CsA_Reliability6_13 : MetadataField # 34
    CsA_Reliability14_17 : MetadataField # 35
    CsA_Reliability18_21 : MetadataField # 36
    CsA_Validity : MetadataField # 37
    CsB_Application : MetadataField # 38
    CsB_AudioMode : MetadataField # 39
    CsB_Copyright : MetadataField # 40
    CsB_Emphasis : MetadataField # 41
    CsB_ChannelStatusMode : MetadataField # 42
    CsB_CategoryCode : MetadataField # 43
    CsB_SourceNumber : MetadataField # 44
    CsB_ChannelNumber : MetadataField # 45
    CsB_SamplingFrequency : MetadataField # 46
    CsB_ClockAccuracy : MetadataField # 47
    CsB_WordLength : MetadataField # 48
    CsB_SampleWordLength : MetadataField # 49
    CsB_OriginalSamplingFrequency : MetadataField # 50
    CsB_CGMSA : MetadataField # 51
    CsB_Lock : MetadataField # 52
    CsB_ChannelMode : MetadataField # 53
    CsB_UserBitsManagement : MetadataField # 54
    CsB_AuxBits : MetadataField # 55
    CsB_SourceWordlength : MetadataField # 56
    CsB_AlignmentLevel : MetadataField # 57
    CsB_MultichannelMode : MetadataField # 58
    CsB_SampleFrequencyScaling : MetadataField # 59
    CsB_DARS : MetadataField # 60
    CsB_ChannelOrigin : MetadataField # 61
    CsB_ChannelDest : MetadataField # 62
    CsB_LocalAddress : MetadataField # 63
    CsB_TimeOfDay : MetadataField # 64
    CsB_Reliability0_5 : MetadataField # 65
    CsB_Reliability6_13 : MetadataField # 66
    CsB_Reliability14_17 : MetadataField # 67
    CsB_Reliability18_21 : MetadataField # 68
    CsB_Validity : MetadataField # 69
    CRC : MetadataField # 70
    HdmiAifCodingType : MetadataField # 71
    HdmiAifChannelCount : MetadataField # 72
    HdmiAifSamplingFrequency : MetadataField # 73
    HdmiAifSampleSize : MetadataField # 74
    HdmiAifSpeakerAllocation : MetadataField # 75
    HdmiAifLevelShift : MetadataField # 76
    HdmiAifDownmix : MetadataField # 77
    HdmiN : MetadataField # 78
    HdmiCts : MetadataField # 79
    HdmiAvMute : MetadataField # 80
    HdmiHbr : MetadataField # 81
    HdmiAudioLayout : MetadataField # 82
    HdmiHdcpAuth : MetadataField # 83
    HdmiHdcpDecrypting : MetadataField # 84
    HdmiVideoResolution : MetadataField # 85
    HdmiVideoRefreshRate : MetadataField # 86
    DtsSyncword : MetadataField # 87
    DtsBitstream : MetadataField # 88
    DtsFsize : MetadataField # 89
    DtsSfreq : MetadataField # 90
    DtsLfe : MetadataField # 91
    Pa : MetadataField # 92
    Pb : MetadataField # 93
    Pc : MetadataField # 94
    Pd : MetadataField # 95
    NumActiveBits : MetadataField # 96
    DolbyBsid : MetadataField # 97
    DolbyLFE : MetadataField # 98
    DolbyCmixLev : MetadataField # 99
    DolbySurMixLev : MetadataField # 100
    DolbySurMode : MetadataField # 101
    DolbyMixMode : MetadataField # 102
    DolbyLtRtCmixLev : MetadataField # 103
    DolbyLoRoCmixLev : MetadataField # 104
    DolbyLtRtSurMixLev : MetadataField # 105
    DolbyLoRoSurMixLev : MetadataField # 106
    DolbyPgmScl : MetadataField # 107
    DolbyCompr : MetadataField # 108


class MetadataGraph:
    @property
    def AutoScale(self) -> bool: ...
    @AutoScale.setter
    def AutoScale(self, value: bool) -> bool: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def FieldTraceCount(self) -> int: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfReadings(self) -> int: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def Transitions(self) -> int: ...
    @Transitions.setter
    def Transitions(self, value: int) -> int: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    def ClearFieldTrace(self, traceIndex: int) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def Dock(self) -> None: ...
    def ExportData(self, fileName: str) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetFieldColor(self, fieldIndex: int) -> Color: ...
    def GetFieldTrace(self, traceIndex: int) -> MetadataField: ...
    def GetFieldTraceName(self, traceIndex: int) -> str: ...
    def GetTimestamp(self, readingIndex: int) -> float: ...
    def IsFieldTraceValid(self, traceIndex: int) -> bool: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetFieldColor(self, fieldIndex: int, color: Color) -> None: ...
    def SetFieldTrace(self, traceIndex: int, field: MetadataField) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped GetFieldTraceValue due to it being static, abstract and generic.

    GetFieldTraceValue : GetFieldTraceValue_MethodGroup
    class GetFieldTraceValue_MethodGroup:
        @typing.overload
        def __call__(self, readingIndex: int, fieldTraceIndex: int) -> str:...
        @typing.overload
        def __call__(self, readingIndex: int, field: MetadataField) -> str:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...



class MetadataRecorderGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def Type(self) -> GeneratorType: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class MetadataRecorderMeasurement:
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> MetadataRecorderGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def MetadataGraph(self) -> MetadataGraph: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def SweepTime(self) -> DoubleSetting: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class MeterDataFromXyTrace:
    @property
    def AllChannels(self) -> bool: ...
    @AllChannels.setter
    def AllChannels(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    def Delete(self) -> None: ...
    # Skipped IsChannelSelected due to it being static, abstract and generic.

    IsChannelSelected : IsChannelSelected_MethodGroup
    class IsChannelSelected_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped SelectChannel due to it being static, abstract and generic.

    SelectChannel : SelectChannel_MethodGroup
    class SelectChannel_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, selected: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, selected: bool) -> None:...



class MeterDataFromXyTraceCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> MeterDataFromXyTrace: ...
    def Add(self) -> MeterDataFromXyTrace: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Remove(self, index: int) -> None: ...


class MeterDataSetType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    MostRecent : MeterDataSetType # 0
    Specific : MeterDataSetType # 1


class MeterGraph:
    @property
    def Axis(self) -> GraphAxis: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Limits(self) -> MeterLimits: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    def CopyToClipboard(self) -> None: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetTraceColor(self, traceIndex: int) -> Color: ...
    def GetTraceName(self, traceIndex: int) -> str: ...
    def ResetTraceStyle(self, traceIndex: int) -> None: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetTraceColor(self, traceIndex: int, color: Color) -> None: ...
    def SetTraceName(self, traceIndex: int, name: str) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, unit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool]) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool], append: bool) -> None:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[str]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[str]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[float]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[float]:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...



class MeterLimit:
    @property
    def Count(self) -> int: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def PassedLimitCheck(self) -> bool: ...
    def Clear(self) -> None: ...
    def PassedLimitCheckOnChannel(self, ch: InputChannelIndex) -> bool: ...
    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[str]:...
        @typing.overload
        def __call__(self, unit: str) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str) -> str:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str) -> str:...

    # Skipped GetValue due to it being static, abstract and generic.

    GetValue : GetValue_MethodGroup
    class GetValue_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, unit: str) -> float:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str) -> float:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[float]:...
        @typing.overload
        def __call__(self, unit: str) -> Array_1[float]:...

    # Skipped SetValue due to it being static, abstract and generic.

    SetValue : SetValue_MethodGroup
    class SetValue_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, limit: float) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, limit: float) -> None:...
        @typing.overload
        def __call__(self, ch: int, limit: float, unit: str) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, limit: float, unit: str) -> None:...



class MeterLimits:
    @property
    def Lower(self) -> MeterLimit: ...
    @property
    def TrackFirstChannel(self) -> bool: ...
    @TrackFirstChannel.setter
    def TrackFirstChannel(self, value: bool) -> bool: ...
    @property
    def Upper(self) -> MeterLimit: ...
    def Clear(self) -> None: ...


class MeterSettlingConfiguration:
    @property
    def Count(self) -> int: ...
    def Add(self, input: APxInputSelection, meterType: SettlingMeterType) -> None: ...
    def Contains(self, input: APxInputSelection, meterType: SettlingMeterType) -> bool: ...
    def GetInput(self, index: int) -> APxInputSelection: ...
    def GetMeterType(self, index: int) -> SettlingMeterType: ...


class MeterStatisticsFunctionType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Min : MeterStatisticsFunctionType # 0
    Max : MeterStatisticsFunctionType # 1
    GeometricMean : MeterStatisticsFunctionType # 2
    ArithmeticMean : MeterStatisticsFunctionType # 3
    Rms : MeterStatisticsFunctionType # 4
    StdDev : MeterStatisticsFunctionType # 5
    MaxDiffFromGeometricMean : MeterStatisticsFunctionType # 6
    MaxDiffFromArithmeticMean : MeterStatisticsFunctionType # 7
    PowerAverage : MeterStatisticsFunctionType # 8


class MeterValues(IEnumerable):
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> float: ...
    @property
    def Item(self) -> float: ...
    @property
    def LowerLimitEnabled(self) -> bool: ...
    @property
    def LowerLimitValues(self) -> Array_1[float]: ...
    @property
    def Name(self) -> str: ...
    @property
    def PassedLowerLimitCheck(self) -> bool: ...
    @property
    def PassedUpperLimitCheck(self) -> bool: ...
    @property
    def Text(self) -> Array_1[str]: ...
    @property
    def TextWithReferenceValue(self) -> Array_1[str]: ...
    @property
    def Type(self) -> MeasurementResultType: ...
    @property
    def Unit(self) -> str: ...
    @property
    def UnitList(self) -> Array_1[str]: ...
    @property
    def UpperLimitEnabled(self) -> bool: ...
    @property
    def UpperLimitValues(self) -> Array_1[float]: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetText(self, Unit: str) -> Array_1[str]: ...
    def GetValues(self, Unit: str) -> Array_1[float]: ...
    # Skipped GetAllUnitConvertedText due to it being static, abstract and generic.

    GetAllUnitConvertedText : GetAllUnitConvertedText_MethodGroup
    class GetAllUnitConvertedText_MethodGroup:
        @typing.overload
        def __call__(self, channel: int) -> Array_1[str]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex) -> Array_1[str]:...



class MeterValuesChangedEventArgs(EventArgs):
    def __init__(self, values: IMeterValues) -> None: ...
    @property
    def Values(self) -> IMeterValues: ...


class MeterValuesChangedEventHandler(MulticastDelegate):
    def __init__(self, object: typing.Any, method: int) -> None: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> typing.Any: ...
    def BeginInvoke(self, sender: typing.Any, e: MeterValuesChangedEventArgs, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> None: ...
    def Invoke(self, sender: typing.Any, e: MeterValuesChangedEventArgs) -> None: ...


class MicCcpLevel(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Ccp4mA : MicCcpLevel # 0
    Ccp10mA : MicCcpLevel # 1


class MicInputConnectorType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Unbalanced : MicInputConnectorType # 0
    Balanced : MicInputConnectorType # 1
    CcpSelfTest : MicInputConnectorType # 2


class MicInputFaultStatus(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Okay : MicInputFaultStatus # 0
    MicInputCh1Fault : MicInputFaultStatus # 1
    MicInputCh2Fault : MicInputFaultStatus # 2


class MicInputSettings:
    @property
    def ChannelCount(self) -> int: ...
    @ChannelCount.setter
    def ChannelCount(self, value: int) -> int: ...
    @property
    def GetMicInputFaultStatus(self) -> MicInputFaultStatus: ...
    @property
    def SingleInputChannel(self) -> SingleInputChannelIndex: ...
    @SingleInputChannel.setter
    def SingleInputChannel(self, value: SingleInputChannelIndex) -> SingleInputChannelIndex: ...
    @property
    def TedsCalibration(self) -> TedsCalibration: ...
    @property
    def TedsSysCheck(self) -> TedsSysCheck: ...
    @property
    def TestMode(self) -> bool: ...
    @TestMode.setter
    def TestMode(self, value: bool) -> bool: ...
    def GetBalancedMicPower(self, ch: int) -> MicPowerBalanced: ...
    def GetCcpLevel(self, ch: int) -> MicCcpLevel: ...
    def GetConnector(self, ch: int) -> MicInputConnectorType: ...
    def GetDcvLevel(self, ch: int) -> float: ...
    def GetMicPowerOn(self, ch: int) -> bool: ...
    def GetUnbalancedMicPower(self, ch: int) -> MicPowerUnbalanced: ...
    def SetBalancedMicPower(self, ch: int, micPower: MicPowerBalanced) -> None: ...
    def SetCcpLevel(self, ch: int, level: MicCcpLevel) -> None: ...
    def SetConnector(self, ch: int, connector: MicInputConnectorType) -> None: ...
    def SetDcvLevel(self, ch: int, dcLevel: float) -> None: ...
    def SetMicPowerOn(self, ch: int, powerOn: bool) -> None: ...
    def SetUnbalancedMicPower(self, ch: int, micPower: MicPowerUnbalanced) -> None: ...
    # Skipped GetDcCoupled due to it being static, abstract and generic.

    GetDcCoupled : GetDcCoupled_MethodGroup
    class GetDcCoupled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped SetDcCoupled due to it being static, abstract and generic.

    SetDcCoupled : SetDcCoupled_MethodGroup
    class SetDcCoupled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, dcCoupled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, dcCoupled: bool) -> None:...



class MicPowerBalanced(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : MicPowerBalanced # 0
    Phantom : MicPowerBalanced # 1


class MicPowerUnbalanced(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : MicPowerUnbalanced # 0
    Ccp : MicPowerUnbalanced # 1
    Dcv : MicPowerUnbalanced # 2


class MicrophonePowerModuleInfo:
    @property
    def ChannelCount(self) -> int: ...
    @property
    def SerialNumber(self) -> str: ...
    def GetId(self, channel: int) -> int: ...
    def Identify(self) -> None: ...


class ModGeneratorLevelRatio(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    OneToOne : ModGeneratorLevelRatio # 0
    FourToOne : ModGeneratorLevelRatio # 1
    TenToOne : ModGeneratorLevelRatio # 2


class ModulatedNoiseGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class ModulatedNoiseMeasurement:
    @property
    def AcquisitionTime(self) -> DoubleSetting: ...
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> ModulatedNoiseGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def HighpassFilter(self) -> DoubleSetting: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def LineRejection(self) -> LineRejectionType: ...
    @LineRejection.setter
    def LineRejection(self, value: LineRejectionType) -> LineRejectionType: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def ModulatedNoiseRatio(self) -> MeterGraph: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class MultiChPdmModulatorOsr(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    OsrAuto : MultiChPdmModulatorOsr # 0
    Osr1 : MultiChPdmModulatorOsr # 1
    Osr2 : MultiChPdmModulatorOsr # 2
    Osr4 : MultiChPdmModulatorOsr # 3
    Osr8 : MultiChPdmModulatorOsr # 4
    Osr16 : MultiChPdmModulatorOsr # 5
    Osr32 : MultiChPdmModulatorOsr # 6
    Osr64 : MultiChPdmModulatorOsr # 7
    Osr128 : MultiChPdmModulatorOsr # 8
    Osr256 : MultiChPdmModulatorOsr # 9
    Osr512 : MultiChPdmModulatorOsr # 10


class MultitoneAnalyzerMeasurement:
    @property
    def AcquiredWaveform(self) -> AcquiredWaveformGraph: ...
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def Averages(self) -> int: ...
    @Averages.setter
    def Averages(self, value: int) -> int: ...
    @property
    def CrosstalkVsFrequency(self) -> XYGraph: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def DCLevel(self) -> MeterGraph: ...
    @property
    def Deviation(self) -> DeviationMeterGraph: ...
    @property
    def FFTSpectrum(self) -> XYGraph: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def FrequencyCorrectionEnabled(self) -> bool: ...
    @FrequencyCorrectionEnabled.setter
    def FrequencyCorrectionEnabled(self, value: bool) -> bool: ...
    @property
    def FrequencyShift(self) -> MeterGraph: ...
    @property
    def Gain(self) -> XYGraph: ...
    @property
    def Generator(self) -> MultitoneGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def HighpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def HighpassFilterType(self) -> MeasurementHighpassFilterType: ...
    @HighpassFilterType.setter
    def HighpassFilterType(self, value: MeasurementHighpassFilterType) -> MeasurementHighpassFilterType: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Level(self) -> XYGraph: ...
    @property
    def LowpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def LowpassFilterType(self) -> MeasurementLowpassFilterType: ...
    @LowpassFilterType.setter
    def LowpassFilterType(self, value: MeasurementLowpassFilterType) -> MeasurementLowpassFilterType: ...
    @property
    def MaxFrequencyShift(self) -> DoubleSetting: ...
    @property
    def MaximumToneLevel(self) -> ToneMeterGraph: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def MultitoneSignal(self) -> str: ...
    @MultitoneSignal.setter
    def MultitoneSignal(self, value: str) -> str: ...
    @property
    def MultitoneSignalDefinition(self) -> MultitoneSignalDefinition: ...
    @property
    def MultitoneSignalNames(self) -> Array_1[str]: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NoiseDensity(self) -> XYGraph: ...
    @property
    def NoiseLevel(self) -> MeterGraph: ...
    @property
    def NoiseWeighting(self) -> WeightingFilterType: ...
    @NoiseWeighting.setter
    def NoiseWeighting(self, value: WeightingFilterType) -> WeightingFilterType: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def Phase(self) -> XYGraph: ...
    @property
    def PhaseReferenceChannel(self) -> InputChannelIndex: ...
    @PhaseReferenceChannel.setter
    def PhaseReferenceChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def RelativeLevel(self) -> RelativeLevelXYGraph: ...
    @property
    def ReplaceSavedFile(self) -> bool: ...
    @ReplaceSavedFile.setter
    def ReplaceSavedFile(self, value: bool) -> bool: ...
    @property
    def SaveAcquisitionToFile(self) -> bool: ...
    @SaveAcquisitionToFile.setter
    def SaveAcquisitionToFile(self, value: bool) -> bool: ...
    @property
    def SavedAcquisitionAudioType(self) -> RecordedAudioType: ...
    @SavedAcquisitionAudioType.setter
    def SavedAcquisitionAudioType(self, value: RecordedAudioType) -> RecordedAudioType: ...
    @property
    def SavedAcquisitionBitDepth(self) -> SavedAcquisitionBitDepthType: ...
    @SavedAcquisitionBitDepth.setter
    def SavedAcquisitionBitDepth(self, value: SavedAcquisitionBitDepthType) -> SavedAcquisitionBitDepthType: ...
    @property
    def SavedAcquisitionFileName(self) -> str: ...
    @SavedAcquisitionFileName.setter
    def SavedAcquisitionFileName(self, value: str) -> str: ...
    @property
    def SavedAcquisitionFolderName(self) -> str: ...
    @SavedAcquisitionFolderName.setter
    def SavedAcquisitionFolderName(self, value: str) -> str: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def SignalToNoiseRatio(self) -> RatioToneMeterGraph: ...
    @property
    def SignalTrigger(self) -> MultitoneSignalTrigger: ...
    @property
    def SkirtWidth(self) -> DoubleSetting: ...
    @property
    def TdPlusNSpectrum(self) -> XYGraph: ...
    @property
    def ToneCrosstalk(self) -> ToneCrosstalkMeterGraph: ...
    @property
    def ToneInterchannelPhase(self) -> ToneMeterGraph: ...
    @property
    def ToneRmsLevel(self) -> ToneMeterGraph: ...
    @property
    def TotalDistortionPlusNoiseLevel(self) -> MeterGraph: ...
    @property
    def TotalDistortionPlusNoiseRatio(self) -> RatioToneMeterGraph: ...
    @property
    def TotalRmsLevel(self) -> MeterGraph: ...
    @property
    def TriggerChannel(self) -> InputChannelIndex: ...
    @TriggerChannel.setter
    def TriggerChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def TriggerDelay(self) -> DoubleSetting: ...
    @property
    def TriggerLevel(self) -> DoubleSetting: ...
    @property
    def TriggerTimeout(self) -> float: ...
    @TriggerTimeout.setter
    def TriggerTimeout(self, value: float) -> float: ...
    @property
    def TriggerTimeoutEnabled(self) -> bool: ...
    @TriggerTimeoutEnabled.setter
    def TriggerTimeoutEnabled(self, value: bool) -> bool: ...
    @property
    def TriggerType(self) -> MultitoneTriggerType: ...
    @TriggerType.setter
    def TriggerType(self, value: MultitoneTriggerType) -> MultitoneTriggerType: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def LoadMultitoneSignalFile(self, fileName: str, replaceIfExists: bool) -> None: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class MultitoneGenerator:
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def MultitoneSignal(self) -> str: ...
    @MultitoneSignal.setter
    def MultitoneSignal(self, value: str) -> str: ...
    @property
    def MultitoneSignalDefinition(self) -> MultitoneSignalDefinition: ...
    @property
    def MultitoneSignalNames(self) -> Array_1[str]: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def Type(self) -> MultitoneGeneratorType: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    def GetOutputChannelAssignment(self, ch: OutputChannelIndex) -> OutputChannelAssignment: ...
    def LoadMultitoneSignalFile(self, fileName: str, replaceIfExists: bool) -> None: ...
    def ResetChannelAssignments(self, setting: OutputChannelAssignments) -> None: ...
    def SetOutputChannelAssignment(self, ch: OutputChannelIndex, assignment: OutputChannelAssignment) -> None: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class MultitoneGeneratorType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Multitone_32 : MultitoneGeneratorType # 0
    File : MultitoneGeneratorType # 1


class MultitoneLevelRatioType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    RmsLevel : MultitoneLevelRatioType # 0
    MaxLevel : MultitoneLevelRatioType # 1


class MultitoneSignalDefinition:
    @property
    def HasCrosstalkTones(self) -> bool: ...
    @property
    def Length(self) -> int: ...
    @property
    def MaxFrequency(self) -> float: ...
    @property
    def MinFrequency(self) -> float: ...
    @property
    def Name(self) -> str: ...
    @property
    def NumberOfTones(self) -> int: ...
    @property
    def SampleRate(self) -> float: ...
    @property
    def StepSize(self) -> float: ...
    @property
    def StepType(self) -> SweepStepType: ...
    def Export(self, fileName: str) -> None: ...
    def ExportWav(self, fileName: str, bitDepth: WavExportBitDepth, durationInSeconds: float) -> None: ...
    def GetCrestFactor(self, ch: int) -> float: ...
    def GetFrequency(self, ch: int) -> Array_1[float]: ...
    def GetPhase(self, ch: int) -> Array_1[float]: ...
    def GetToneBins(self, ch: int) -> Array_1[int]: ...
    # Skipped GetAmplitude due to it being static, abstract and generic.

    GetAmplitude : GetAmplitude_MethodGroup
    class GetAmplitude_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str) -> Array_1[float]:...



class MultitoneSignalTrigger:
    @property
    def ToneMatchPercent(self) -> int: ...
    @ToneMatchPercent.setter
    def ToneMatchPercent(self, value: int) -> int: ...
    @property
    def ToneSignalToNoiseRatio(self) -> float: ...
    @ToneSignalToNoiseRatio.setter
    def ToneSignalToNoiseRatio(self, value: float) -> float: ...


class MultitoneSignalType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Multitone_32 : MultitoneSignalType # 0
    DolbyDigital_BassManagement : MultitoneSignalType # 1
    Multitone_1 : MultitoneSignalType # 2
    Multitone_2 : MultitoneSignalType # 3
    Multitone_3 : MultitoneSignalType # 4
    Multitone_4 : MultitoneSignalType # 5
    Multitone_5 : MultitoneSignalType # 6
    Multitone_6 : MultitoneSignalType # 7
    Multitone_7 : MultitoneSignalType # 8
    Multitone_8 : MultitoneSignalType # 9
    Multitone_9 : MultitoneSignalType # 10
    Multitone_10 : MultitoneSignalType # 11
    Multitone_11 : MultitoneSignalType # 12
    Multitone_12 : MultitoneSignalType # 13
    Multitone_13 : MultitoneSignalType # 14
    Multitone_14 : MultitoneSignalType # 15
    Multitone_15 : MultitoneSignalType # 16
    Multitone_16 : MultitoneSignalType # 17
    Multitone_17 : MultitoneSignalType # 18
    Multitone_18 : MultitoneSignalType # 19
    Unknown : MultitoneSignalType # 20
    UserDefined : MultitoneSignalType # 21


class MultitoneTriggerType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Signal : MultitoneTriggerType # 0
    Generator : MultitoneTriggerType # 1
    Level : MultitoneTriggerType # 2
    FreeRun : MultitoneTriggerType # 3


class NestedSweepParameterType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : NestedSweepParameterType # 0
    GeneratorFrequency : NestedSweepParameterType # 1
    DualSineFrequencyA : NestedSweepParameterType # 2
    DualSineFrequencyB : NestedSweepParameterType # 3
    ImdFrequency1 : NestedSweepParameterType # 4
    ImdFrequency2 : NestedSweepParameterType # 5
    DfdMeanFrequency : NestedSweepParameterType # 6
    DfdDiffFrequency : NestedSweepParameterType # 7
    GeneratorPhase : NestedSweepParameterType # 8
    GeneratorLevel : NestedSweepParameterType # 9
    GeneratorOffset : NestedSweepParameterType # 10
    OutputSampleRate : NestedSweepParameterType # 11
    RefSyncOutputRate : NestedSweepParameterType # 12
    Switcher : NestedSweepParameterType # 13
    DcxDcv1 : NestedSweepParameterType # 14
    DcxDcv2 : NestedSweepParameterType # 15
    Dcx : NestedSweepParameterType # 16
    JitterFrequency : NestedSweepParameterType # 17
    JitterLevelUi : NestedSweepParameterType # 18
    JitterLevelSec : NestedSweepParameterType # 19
    BluetoothAbsoluteVolume : NestedSweepParameterType # 20
    VBias : NestedSweepParameterType # 21


class NestedSweepSettings:
    @property
    def DcxSweep(self) -> DcxSweepSettings: ...
    @property
    def Source(self) -> NestedSweepParameterType: ...
    @Source.setter
    def Source(self, value: NestedSweepParameterType) -> NestedSweepParameterType: ...
    @property
    def SourceParameters(self) -> StartStopSweepParameters: ...
    @property
    def Sources(self) -> Array_1[NestedSweepParameterType]: ...
    @property
    def SwitcherSweep(self) -> SwitcherSweepSettings: ...


class NoiseGenerator:
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def NoiseShape(self) -> NoiseShape: ...
    @NoiseShape.setter
    def NoiseShape(self, value: NoiseShape) -> NoiseShape: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class NoiseMeasurement:
    @property
    def AcquisitionTime(self) -> DoubleSetting: ...
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def DelayTime(self) -> DoubleSetting: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> NoiseGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def HighpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def HighpassFilterType(self) -> MeasurementHighpassFilterType: ...
    @HighpassFilterType.setter
    def HighpassFilterType(self, value: MeasurementHighpassFilterType) -> MeasurementHighpassFilterType: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Level(self) -> MeterGraph: ...
    @property
    def LowpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def LowpassFilterType(self) -> MeasurementLowpassFilterType: ...
    @LowpassFilterType.setter
    def LowpassFilterType(self, value: MeasurementLowpassFilterType) -> MeasurementLowpassFilterType: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NoiseWeighting(self) -> WeightingFilterType: ...
    @NoiseWeighting.setter
    def NoiseWeighting(self, value: WeightingFilterType) -> WeightingFilterType: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def RmsLevelAcPlusDc(self) -> MeterGraph: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class NoiseRecorderGenerator:
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def NoiseShape(self) -> NoiseShape: ...
    @NoiseShape.setter
    def NoiseShape(self, value: NoiseShape) -> NoiseShape: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class NoiseRecorderMeasurement:
    @property
    def AnalogInputBandwidth(self) -> SignalAnalyzerBandwidthType: ...
    @AnalogInputBandwidth.setter
    def AnalogInputBandwidth(self, value: SignalAnalyzerBandwidthType) -> SignalAnalyzerBandwidthType: ...
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> NoiseRecorderGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def HighpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def HighpassFilterType(self) -> MeasurementHighpassFilterType: ...
    @HighpassFilterType.setter
    def HighpassFilterType(self, value: MeasurementHighpassFilterType) -> MeasurementHighpassFilterType: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def LowpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def LowpassFilterType(self) -> MeasurementLowpassFilterType: ...
    @LowpassFilterType.setter
    def LowpassFilterType(self, value: MeasurementLowpassFilterType) -> MeasurementLowpassFilterType: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NoiseWeighting(self) -> WeightingFilterType: ...
    @NoiseWeighting.setter
    def NoiseWeighting(self, value: WeightingFilterType) -> WeightingFilterType: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def ReadingRate(self) -> MeasurementRecorderReadingRate: ...
    @ReadingRate.setter
    def ReadingRate(self, value: MeasurementRecorderReadingRate) -> MeasurementRecorderReadingRate: ...
    @property
    def ReplaceSavedFile(self) -> bool: ...
    @ReplaceSavedFile.setter
    def ReplaceSavedFile(self, value: bool) -> bool: ...
    @property
    def RmsLevelAcPlusDcVsTime(self) -> XYGraph: ...
    @property
    def RmsLevelVsTime(self) -> XYGraph: ...
    @property
    def SaveAcquisitionToFile(self) -> bool: ...
    @SaveAcquisitionToFile.setter
    def SaveAcquisitionToFile(self, value: bool) -> bool: ...
    @property
    def SavedAcquisitionAudioType(self) -> RecordedAudioType: ...
    @SavedAcquisitionAudioType.setter
    def SavedAcquisitionAudioType(self, value: RecordedAudioType) -> RecordedAudioType: ...
    @property
    def SavedAcquisitionBitDepth(self) -> SavedAcquisitionBitDepthType: ...
    @SavedAcquisitionBitDepth.setter
    def SavedAcquisitionBitDepth(self, value: SavedAcquisitionBitDepthType) -> SavedAcquisitionBitDepthType: ...
    @property
    def SavedAcquisitionFileName(self) -> str: ...
    @SavedAcquisitionFileName.setter
    def SavedAcquisitionFileName(self, value: str) -> str: ...
    @property
    def SavedAcquisitionFolderName(self) -> str: ...
    @SavedAcquisitionFolderName.setter
    def SavedAcquisitionFolderName(self, value: str) -> str: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def SweepTime(self) -> DoubleSetting: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class NoiseShape(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    White : NoiseShape # 0
    Pink : NoiseShape # 1
    Iec : NoiseShape # 2
    Bs : NoiseShape # 3


class NoiseWeightingMeasurement:
    @property
    def NoiseWeighting(self) -> WeightingFilterType: ...
    @NoiseWeighting.setter
    def NoiseWeighting(self, value: WeightingFilterType) -> WeightingFilterType: ...


class NormalizationMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Normalize : NormalizationMode # 0
    Invert : NormalizationMode # 1


class NormalizedDistortionRatioXYGraph:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def Calculation(self) -> DistortionRatioCalculation: ...
    @Calculation.setter
    def Calculation(self, value: DistortionRatioCalculation) -> DistortionRatioCalculation: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Normalized(self) -> bool: ...
    @Normalized.setter
    def Normalized(self, value: bool) -> bool: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def HasDataOnAxis(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> bool: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetData due to it being static, abstract and generic.

    GetData : GetData_MethodGroup
    class GetData_MethodGroup:
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> XYValues:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int) -> XYValues:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class NormalizedHarmonicRatioXYGraph:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def AllHarmonics(self) -> bool: ...
    @AllHarmonics.setter
    def AllHarmonics(self, value: bool) -> bool: ...
    @property
    def Calculation(self) -> DistortionRatioCalculation: ...
    @Calculation.setter
    def Calculation(self, value: DistortionRatioCalculation) -> DistortionRatioCalculation: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def HarmonicNumber(self) -> int: ...
    @HarmonicNumber.setter
    def HarmonicNumber(self, value: int) -> int: ...
    @property
    def HarmonicSelectionType(self) -> DistortionProductSelection: ...
    @HarmonicSelectionType.setter
    def HarmonicSelectionType(self, value: DistortionProductSelection) -> DistortionProductSelection: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def MaxHarmonicNumber(self) -> int: ...
    @property
    def Message(self) -> str: ...
    @property
    def MinHarmonicNumber(self) -> int: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Normalized(self) -> bool: ...
    @Normalized.setter
    def Normalized(self, value: bool) -> bool: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetHarmonicSelected(self, harmonicIndex: int) -> bool: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def HasDataOnAxis(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> bool: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetHarmonicSelected(self, harmonicIndex: int, selected: bool) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetData due to it being static, abstract and generic.

    GetData : GetData_MethodGroup
    class GetData_MethodGroup:
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> XYValues:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int) -> XYValues:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class NormalizeInvertResult:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def Message(self) -> str: ...
    @property
    def Mode(self) -> NormalizationMode: ...
    @Mode.setter
    def Mode(self, value: NormalizationMode) -> NormalizationMode: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Reference(self) -> DoubleSetting: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def Source(self) -> Graph: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def HasDataOnAxis(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> bool: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetData due to it being static, abstract and generic.

    GetData : GetData_MethodGroup
    class GetData_MethodGroup:
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> XYValues:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int) -> XYValues:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class NthOctave(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Octave1 : NthOctave # 1
    Octave3 : NthOctave # 3
    Octave6 : NthOctave # 6
    Octave9 : NthOctave # 9
    Octave12 : NthOctave # 12
    Octave24 : NthOctave # 24


class NumberOfGraphPoints(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    GraphPointsAllPoints : NumberOfGraphPoints # 0
    NumberOfPoints : NumberOfGraphPoints # 1
    GraphPointsSameAsGraph : NumberOfGraphPoints # 2
    GraphPoints10 : NumberOfGraphPoints # 3
    GraphPoints20 : NumberOfGraphPoints # 4
    GraphPoints30 : NumberOfGraphPoints # 5
    GraphPoints40 : NumberOfGraphPoints # 6
    GraphPoints50 : NumberOfGraphPoints # 7
    GraphPoints100 : NumberOfGraphPoints # 8
    GraphPoints200 : NumberOfGraphPoints # 9
    GraphPoints500 : NumberOfGraphPoints # 10


class OctaveSmoothingType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : OctaveSmoothingType # 0
    Octave24 : OctaveSmoothingType # 1
    Octave12 : OctaveSmoothingType # 2
    Octave9 : OctaveSmoothingType # 3
    Octave6 : OctaveSmoothingType # 4
    Octave3 : OctaveSmoothingType # 5
    Octave1 : OctaveSmoothingType # 6


class OffsetMeterResult:
    @property
    def Axis(self) -> GraphAxis: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Limits(self) -> MeterLimits: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Offset(self) -> DoubleSetting: ...
    @property
    def OffsetType(self) -> OffsetResultType: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def Source(self) -> Graph: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    def CopyToClipboard(self) -> None: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetTraceColor(self, traceIndex: int) -> Color: ...
    def GetTraceName(self, traceIndex: int) -> str: ...
    def ResetTraceStyle(self, traceIndex: int) -> None: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetTraceColor(self, traceIndex: int, color: Color) -> None: ...
    def SetTraceName(self, traceIndex: int, name: str) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, unit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool]) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool], append: bool) -> None:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[str]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[str]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[float]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[float]:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...



class OffsetResultType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Scale : OffsetResultType # 0
    Offset : OffsetResultType # 1


class OffsetXYResult:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def Offset(self) -> DoubleSetting: ...
    @property
    def OffsetType(self) -> OffsetResultType: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def Source(self) -> Graph: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def HasDataOnAxis(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> bool: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetData due to it being static, abstract and generic.

    GetData : GetData_MethodGroup
    class GetData_MethodGroup:
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> XYValues:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int) -> XYValues:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class OutputChannelAssignment(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Left : OutputChannelAssignment # 0
    Right : OutputChannelAssignment # 1


class OutputChannelAssignments(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Default : OutputChannelAssignments # 0
    InverseDefault : OutputChannelAssignments # 1
    AllChA : OutputChannelAssignments # 2
    AllChB : OutputChannelAssignments # 3


class OutputChannelIndex(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Ch1 : OutputChannelIndex # 0
    Ch2 : OutputChannelIndex # 1
    Ch3 : OutputChannelIndex # 2
    Ch4 : OutputChannelIndex # 3
    Ch5 : OutputChannelIndex # 4
    Ch6 : OutputChannelIndex # 5
    Ch7 : OutputChannelIndex # 6
    Ch8 : OutputChannelIndex # 7
    Ch9 : OutputChannelIndex # 8
    Ch10 : OutputChannelIndex # 9
    Ch11 : OutputChannelIndex # 10
    Ch12 : OutputChannelIndex # 11
    Ch13 : OutputChannelIndex # 12
    Ch14 : OutputChannelIndex # 13
    Ch15 : OutputChannelIndex # 14
    Ch16 : OutputChannelIndex # 15


class OutputConnector:
    @property
    def IsAnalog(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Type(self) -> OutputConnectorType: ...
    @Type.setter
    def Type(self, value: OutputConnectorType) -> OutputConnectorType: ...


class OutputConnectorType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    AnalogUnbalanced : OutputConnectorType # 0
    AnalogBalanced : OutputConnectorType # 1
    AnalogBalancedAdcTest : OutputConnectorType # 2
    DigitalUnbalanced : OutputConnectorType # 3
    DigitalBalanced : OutputConnectorType # 4
    DigitalOptical : OutputConnectorType # 5
    DigitalHdmi : OutputConnectorType # 6
    DigitalHdmi2 : OutputConnectorType # 7
    HdmiArc : OutputConnectorType # 8
    Hdmi2EArc : OutputConnectorType # 9
    Hdmi2Arc : OutputConnectorType # 10
    Bluetooth : OutputConnectorType # 11
    DigitalSerial : OutputConnectorType # 12
    PDM : OutputConnectorType # 13
    ASIO : OutputConnectorType # 14
    TransducerInterface : OutputConnectorType # 15
    Speaker : OutputConnectorType # 16
    Telecoil : OutputConnectorType # 17
    None_ : OutputConnectorType # 18
    PowerAmp : OutputConnectorType # 19
    HeadphoneAmp : OutputConnectorType # 20


class OutputLevelType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Fixed : OutputLevelType # 0
    Custom : OutputLevelType # 1


class OutputSwitcherChannelBSelection(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : OutputSwitcherChannelBSelection # 0
    Ch1 : OutputSwitcherChannelBSelection # 1
    Ch2 : OutputSwitcherChannelBSelection # 2
    Ch3 : OutputSwitcherChannelBSelection # 3
    Ch4 : OutputSwitcherChannelBSelection # 4
    Ch5 : OutputSwitcherChannelBSelection # 5
    Ch6 : OutputSwitcherChannelBSelection # 6
    Ch7 : OutputSwitcherChannelBSelection # 7
    Ch8 : OutputSwitcherChannelBSelection # 8
    Ch9 : OutputSwitcherChannelBSelection # 9
    Ch10 : OutputSwitcherChannelBSelection # 10
    Ch11 : OutputSwitcherChannelBSelection # 11
    Ch12 : OutputSwitcherChannelBSelection # 12
    AllButChA : OutputSwitcherChannelBSelection # 13


class OutputSwitcherConfigurationBaseCollection:
    def GetChannelA(self, address: SwitcherAddress) -> SwitcherChannelSelection: ...
    def GetChannelB(self, address: SwitcherAddress) -> OutputSwitcherChannelBSelection: ...
    def Open(self, fileName: str) -> None: ...
    def Save(self, fileName: str) -> None: ...
    def SetChannelA(self, address: SwitcherAddress, channelSelection: SwitcherChannelSelection) -> None: ...
    def SetChannelB(self, address: SwitcherAddress, channelSelection: OutputSwitcherChannelBSelection) -> None: ...


class OutputSwitcherConfigurationCollection:
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    def GetChannelA(self, address: SwitcherAddress) -> SwitcherChannelSelection: ...
    def GetChannelB(self, address: SwitcherAddress) -> OutputSwitcherChannelBSelection: ...
    def Open(self, fileName: str) -> None: ...
    def Save(self, fileName: str) -> None: ...
    def SetChannelA(self, address: SwitcherAddress, channelSelection: SwitcherChannelSelection) -> None: ...
    def SetChannelB(self, address: SwitcherAddress, channelSelection: OutputSwitcherChannelBSelection) -> None: ...


class PassFailMeasurement:
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FailButtonLabel(self) -> str: ...
    @FailButtonLabel.setter
    def FailButtonLabel(self, value: str) -> str: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassButtonLabel(self) -> str: ...
    @PassButtonLabel.setter
    def PassButtonLabel(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def PlayAlertSound(self) -> bool: ...
    @PlayAlertSound.setter
    def PlayAlertSound(self, value: bool) -> bool: ...
    @property
    def ProgramSettings(self) -> PassFailProgramSettings: ...
    @property
    def RTF(self) -> str: ...
    @RTF.setter
    def RTF(self, value: str) -> str: ...
    @property
    def RunMode(self) -> PassFailRunMode: ...
    @RunMode.setter
    def RunMode(self, value: PassFailRunMode) -> PassFailRunMode: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def ShowCancel(self) -> bool: ...
    @ShowCancel.setter
    def ShowCancel(self, value: bool) -> bool: ...
    @property
    def Text(self) -> str: ...
    @Text.setter
    def Text(self, value: str) -> str: ...
    @property
    def TextFileSettings(self) -> PassFailTextFileSettings: ...
    @property
    def TimeoutEnabled(self) -> bool: ...
    @TimeoutEnabled.setter
    def TimeoutEnabled(self, value: bool) -> bool: ...
    @property
    def TimeoutInSeconds(self) -> float: ...
    @TimeoutInSeconds.setter
    def TimeoutInSeconds(self, value: float) -> float: ...
    def AnalyzeFiles(self) -> bool: ...
    def ClearImage(self) -> None: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def LoadImage(self, fileName: str, replaceIfExists: bool) -> None: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class PassFailProgramSettings:
    @property
    def ActualOutput(self) -> str: ...
    @property
    def Arguments(self) -> str: ...
    @Arguments.setter
    def Arguments(self, value: str) -> str: ...
    @property
    def Command(self) -> str: ...
    @Command.setter
    def Command(self, value: str) -> str: ...
    @property
    def ExpectedOutput(self) -> str: ...
    @ExpectedOutput.setter
    def ExpectedOutput(self, value: str) -> str: ...
    @property
    def RanToCompletion(self) -> bool: ...
    @property
    def WorkingDirectory(self) -> str: ...
    @WorkingDirectory.setter
    def WorkingDirectory(self, value: str) -> str: ...


class PassFailRunMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ShowPrompt : PassFailRunMode # 0
    RunProgram : PassFailRunMode # 1
    ReadFile : PassFailRunMode # 2


class PassFailTextFileSettings:
    @property
    def ActualFileContents(self) -> str: ...
    @property
    def ExpectedFileContents(self) -> str: ...
    @ExpectedFileContents.setter
    def ExpectedFileContents(self, value: str) -> str: ...
    @property
    def FilePath(self) -> str: ...
    @FilePath.setter
    def FilePath(self, value: str) -> str: ...


class Pdm16DecimationRatio(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    X32 : Pdm16DecimationRatio # 0
    X64 : Pdm16DecimationRatio # 1
    X128 : Pdm16DecimationRatio # 2
    X256 : Pdm16DecimationRatio # 3
    X512 : Pdm16DecimationRatio # 4


class PDM16InputSettings:
    @property
    def BitClkDir(self) -> ClockDirection: ...
    @BitClkDir.setter
    def BitClkDir(self, value: ClockDirection) -> ClockDirection: ...
    @property
    def BitClockRate(self) -> float: ...
    @property
    def DecimatedRate(self) -> DoubleSetting: ...
    @property
    def Decimation(self) -> Pdm16DecimationRatio: ...
    @Decimation.setter
    def Decimation(self, value: Pdm16DecimationRatio) -> Pdm16DecimationRatio: ...
    @property
    def EnableClkOutputs(self) -> bool: ...
    @EnableClkOutputs.setter
    def EnableClkOutputs(self, value: bool) -> bool: ...
    @property
    def FixedInputSampleRate(self) -> float: ...
    @FixedInputSampleRate.setter
    def FixedInputSampleRate(self, value: float) -> float: ...
    @property
    def IsPodPresent(self) -> bool: ...
    @property
    def LimitLogicLevel(self) -> bool: ...
    @LimitLogicLevel.setter
    def LimitLogicLevel(self, value: bool) -> bool: ...
    @property
    def LogicLevel(self) -> DoubleSetting: ...
    @property
    def NumChannels(self) -> int: ...
    @NumChannels.setter
    def NumChannels(self, value: int) -> int: ...
    @property
    def ScaleFreqBy(self) -> InputFrequencyScalingType: ...
    @ScaleFreqBy.setter
    def ScaleFreqBy(self, value: InputFrequencyScalingType) -> InputFrequencyScalingType: ...
    @property
    def VddLevel(self) -> DoubleSetting: ...
    @property
    def VddOn(self) -> bool: ...
    @VddOn.setter
    def VddOn(self, value: bool) -> bool: ...


class Pdm16Monitor:
    @property
    def BitClockFrequency(self) -> DoubleSetting: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def ReceiverBitClockOn(self) -> bool: ...
    @ReceiverBitClockOn.setter
    def ReceiverBitClockOn(self, value: bool) -> bool: ...
    @property
    def UndockedHeight(self) -> int: ...
    @UndockedHeight.setter
    def UndockedHeight(self, value: int) -> int: ...
    @property
    def UndockedLeft(self) -> int: ...
    @UndockedLeft.setter
    def UndockedLeft(self, value: int) -> int: ...
    @property
    def UndockedTop(self) -> int: ...
    @UndockedTop.setter
    def UndockedTop(self, value: int) -> int: ...
    @property
    def UndockedWidth(self) -> int: ...
    @UndockedWidth.setter
    def UndockedWidth(self, value: int) -> int: ...
    @property
    def VddLevel(self) -> DoubleSetting: ...
    @property
    def VddOn(self) -> bool: ...
    @VddOn.setter
    def VddOn(self, value: bool) -> bool: ...
    def Dock(self) -> None: ...
    def Maximize(self) -> None: ...
    def Minimize(self) -> None: ...
    def Restore(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...


class PdmControlCodeEdge(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Both : PdmControlCodeEdge # 0
    Rising : PdmControlCodeEdge # 1
    Falling : PdmControlCodeEdge # 2


class PdmControlCodeSendType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Series : PdmControlCodeSendType # 0
    SingleCodeIndefinitely : PdmControlCodeSendType # 1


class PdmDataEdge(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    BothLR : PdmDataEdge # 0
    BothRL : PdmDataEdge # 1
    Rising : PdmDataEdge # 2
    Falling : PdmDataEdge # 3


class PdmDecimationRatio(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    X1 : PdmDecimationRatio # 0
    X3 : PdmDecimationRatio # 1
    X4 : PdmDecimationRatio # 2
    X6 : PdmDecimationRatio # 3
    X8 : PdmDecimationRatio # 4
    X8p33 : PdmDecimationRatio # 5
    X10 : PdmDecimationRatio # 6
    X12 : PdmDecimationRatio # 7
    X15 : PdmDecimationRatio # 8
    X16 : PdmDecimationRatio # 9
    X17 : PdmDecimationRatio # 10
    X19 : PdmDecimationRatio # 11
    X21 : PdmDecimationRatio # 12
    X24 : PdmDecimationRatio # 13
    X25 : PdmDecimationRatio # 14
    X31 : PdmDecimationRatio # 15
    X32 : PdmDecimationRatio # 16
    X33 : PdmDecimationRatio # 17
    X37 : PdmDecimationRatio # 18
    X42 : PdmDecimationRatio # 19
    X46 : PdmDecimationRatio # 20
    X48 : PdmDecimationRatio # 21
    X50 : PdmDecimationRatio # 22
    X62 : PdmDecimationRatio # 23
    X64 : PdmDecimationRatio # 24
    X66 : PdmDecimationRatio # 25
    X75 : PdmDecimationRatio # 26
    X85 : PdmDecimationRatio # 27
    X96 : PdmDecimationRatio # 28
    X100 : PdmDecimationRatio # 29
    X125 : PdmDecimationRatio # 30
    X128 : PdmDecimationRatio # 31
    X150 : PdmDecimationRatio # 32
    X192 : PdmDecimationRatio # 33
    X200 : PdmDecimationRatio # 34
    X250 : PdmDecimationRatio # 35
    X256 : PdmDecimationRatio # 36
    X300 : PdmDecimationRatio # 37
    X384 : PdmDecimationRatio # 38
    X400 : PdmDecimationRatio # 39
    X500 : PdmDecimationRatio # 40
    X512 : PdmDecimationRatio # 41
    X600 : PdmDecimationRatio # 42
    X768 : PdmDecimationRatio # 43
    X800 : PdmDecimationRatio # 44


class PdmInputSettings:
    @property
    def BitClkDir(self) -> ClockDirection: ...
    @BitClkDir.setter
    def BitClkDir(self, value: ClockDirection) -> ClockDirection: ...
    @property
    def BitClockRate(self) -> float: ...
    @property
    def DataEdge(self) -> PdmDataEdge: ...
    @DataEdge.setter
    def DataEdge(self, value: PdmDataEdge) -> PdmDataEdge: ...
    @property
    def DecimatedRate(self) -> DoubleSetting: ...
    @property
    def Decimation(self) -> PdmDecimationRatio: ...
    @Decimation.setter
    def Decimation(self, value: PdmDecimationRatio) -> PdmDecimationRatio: ...
    @property
    def EnableOutputs(self) -> bool: ...
    @EnableOutputs.setter
    def EnableOutputs(self, value: bool) -> bool: ...
    @property
    def FixedInputSampleRate(self) -> float: ...
    @FixedInputSampleRate.setter
    def FixedInputSampleRate(self, value: float) -> float: ...
    @property
    def LimitLogicLevel(self) -> bool: ...
    @LimitLogicLevel.setter
    def LimitLogicLevel(self, value: bool) -> bool: ...
    @property
    def LogicLevel(self) -> DoubleSetting: ...
    @property
    def MeasureInputSignalType(self) -> MeasureJitterInputSignal: ...
    @MeasureInputSignalType.setter
    def MeasureInputSignalType(self, value: MeasureJitterInputSignal) -> MeasureJitterInputSignal: ...
    @property
    def ScaleFreqBy(self) -> InputFrequencyScalingType: ...
    @ScaleFreqBy.setter
    def ScaleFreqBy(self, value: InputFrequencyScalingType) -> InputFrequencyScalingType: ...
    @property
    def VddLevel(self) -> DoubleSetting: ...
    @property
    def VddOn(self) -> bool: ...
    @VddOn.setter
    def VddOn(self, value: bool) -> bool: ...


class PdmInterpolationRatio(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    X16 : PdmInterpolationRatio # 0
    X17 : PdmInterpolationRatio # 1
    X21 : PdmInterpolationRatio # 2
    X24 : PdmInterpolationRatio # 3
    X25 : PdmInterpolationRatio # 4
    X32 : PdmInterpolationRatio # 5
    X33 : PdmInterpolationRatio # 6
    X37 : PdmInterpolationRatio # 7
    X42 : PdmInterpolationRatio # 8
    X48 : PdmInterpolationRatio # 9
    X50 : PdmInterpolationRatio # 10
    X62 : PdmInterpolationRatio # 11
    X64 : PdmInterpolationRatio # 12
    X66 : PdmInterpolationRatio # 13
    X75 : PdmInterpolationRatio # 14
    X85 : PdmInterpolationRatio # 15
    X96 : PdmInterpolationRatio # 16
    X100 : PdmInterpolationRatio # 17
    X125 : PdmInterpolationRatio # 18
    X128 : PdmInterpolationRatio # 19
    X150 : PdmInterpolationRatio # 20
    X192 : PdmInterpolationRatio # 21
    X200 : PdmInterpolationRatio # 22
    X250 : PdmInterpolationRatio # 23
    X256 : PdmInterpolationRatio # 24
    X300 : PdmInterpolationRatio # 25
    X384 : PdmInterpolationRatio # 26
    X400 : PdmInterpolationRatio # 27
    X500 : PdmInterpolationRatio # 28
    X512 : PdmInterpolationRatio # 29
    X600 : PdmInterpolationRatio # 30
    X768 : PdmInterpolationRatio # 31
    X800 : PdmInterpolationRatio # 32


class PdmModulatorOrder(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Order4 : PdmModulatorOrder # 0
    Order5 : PdmModulatorOrder # 1


class PdmModulatorOsr(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    OsrAuto : PdmModulatorOsr # 0
    Osr64 : PdmModulatorOsr # 1
    Osr128 : PdmModulatorOsr # 2
    Osr256 : PdmModulatorOsr # 3
    Osr512 : PdmModulatorOsr # 4


class PdmMonitor:
    @property
    def BitClockFrequency(self) -> DoubleSetting: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def MonitorCode(self) -> PdmMonitorControlCodes: ...
    @property
    def Name(self) -> str: ...
    @property
    def ReceiverBitClockOn(self) -> bool: ...
    @ReceiverBitClockOn.setter
    def ReceiverBitClockOn(self, value: bool) -> bool: ...
    @property
    def SendCodes(self) -> PdmOutputControlCodes: ...
    @property
    def UndockedHeight(self) -> int: ...
    @UndockedHeight.setter
    def UndockedHeight(self, value: int) -> int: ...
    @property
    def UndockedLeft(self) -> int: ...
    @UndockedLeft.setter
    def UndockedLeft(self, value: int) -> int: ...
    @property
    def UndockedTop(self) -> int: ...
    @UndockedTop.setter
    def UndockedTop(self, value: int) -> int: ...
    @property
    def UndockedWidth(self) -> int: ...
    @UndockedWidth.setter
    def UndockedWidth(self, value: int) -> int: ...
    @property
    def VddLevel(self) -> DoubleSetting: ...
    @property
    def VddOn(self) -> bool: ...
    @VddOn.setter
    def VddOn(self, value: bool) -> bool: ...
    def Dock(self) -> None: ...
    def Maximize(self) -> None: ...
    def Minimize(self) -> None: ...
    def Restore(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...


class PdmMonitorControlCodes:
    @property
    def ControlCodeCount(self) -> int: ...
    @ControlCodeCount.setter
    def ControlCodeCount(self, value: int) -> int: ...
    @property
    def ControlCodeValue(self) -> int: ...
    @ControlCodeValue.setter
    def ControlCodeValue(self, value: int) -> int: ...
    @property
    def MsbFirst(self) -> bool: ...
    @MsbFirst.setter
    def MsbFirst(self, value: bool) -> bool: ...
    @property
    def Observed(self) -> bool: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def ReceiveEdge(self) -> PdmControlCodeEdge: ...
    @ReceiveEdge.setter
    def ReceiveEdge(self, value: PdmControlCodeEdge) -> PdmControlCodeEdge: ...


class PdmOutputControlCodes:
    @property
    def Count(self) -> int: ...
    @property
    def IsSendingContinuousCode(self) -> bool: ...
    @property
    def MsbFirst(self) -> bool: ...
    @MsbFirst.setter
    def MsbFirst(self, value: bool) -> bool: ...
    @property
    def SendEdge(self) -> PdmControlCodeEdge: ...
    @SendEdge.setter
    def SendEdge(self, value: PdmControlCodeEdge) -> PdmControlCodeEdge: ...
    @property
    def SendType(self) -> PdmControlCodeSendType: ...
    @SendType.setter
    def SendType(self, value: PdmControlCodeSendType) -> PdmControlCodeSendType: ...
    def Add(self, code: int, repetitions: int) -> None: ...
    def Delete(self, index: int) -> None: ...
    def GetCode(self, index: int) -> int: ...
    def GetRepetitions(self, index: int) -> int: ...
    def Send(self) -> None: ...
    def SetCode(self, index: int, code: int) -> None: ...
    def SetRepetitions(self, index: int, count: int) -> None: ...
    def StopSending(self) -> None: ...


class PdmOutputSettings:
    @property
    def BitClkDir(self) -> ClockDirection: ...
    @BitClkDir.setter
    def BitClkDir(self, value: ClockDirection) -> ClockDirection: ...
    @property
    def BitClockRate(self) -> float: ...
    @property
    def DataEdge(self) -> PdmDataEdge: ...
    @DataEdge.setter
    def DataEdge(self, value: PdmDataEdge) -> PdmDataEdge: ...
    @property
    def DecimatedRate(self) -> DoubleSetting: ...
    @property
    def EnableOutputs(self) -> bool: ...
    @EnableOutputs.setter
    def EnableOutputs(self, value: bool) -> bool: ...
    @property
    def FixedRate(self) -> DoubleSetting: ...
    @property
    def Interpolation(self) -> PdmInterpolationRatio: ...
    @Interpolation.setter
    def Interpolation(self, value: PdmInterpolationRatio) -> PdmInterpolationRatio: ...
    @property
    def LimitLogicLevel(self) -> bool: ...
    @LimitLogicLevel.setter
    def LimitLogicLevel(self, value: bool) -> bool: ...
    @property
    def LogicLevel(self) -> DoubleSetting: ...
    @property
    def ModulatorOrder(self) -> PdmModulatorOrder: ...
    @ModulatorOrder.setter
    def ModulatorOrder(self, value: PdmModulatorOrder) -> PdmModulatorOrder: ...
    @property
    def ModulatorOsr(self) -> PdmModulatorOsr: ...
    @ModulatorOsr.setter
    def ModulatorOsr(self, value: PdmModulatorOsr) -> PdmModulatorOsr: ...
    @property
    def ScaleFreqBy(self) -> ScalePdmOutputFreqBy: ...
    @ScaleFreqBy.setter
    def ScaleFreqBy(self, value: ScalePdmOutputFreqBy) -> ScalePdmOutputFreqBy: ...
    @property
    def VddLevel(self) -> DoubleSetting: ...
    @property
    def VddOn(self) -> bool: ...
    @VddOn.setter
    def VddOn(self, value: bool) -> bool: ...


class PdmSignalSource(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    DecimatedAudio : PdmSignalSource # 0
    PdmBitstream : PdmSignalSource # 1


class PdmVddSelection(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    PDM : PdmVddSelection # 0
    PDM16 : PdmVddSelection # 1


class PerInputSignalMonitor:
    @property
    def Input(self) -> APxInputSelection: ...


class PesqAcquiredWaveformGraph:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowDropouts(self) -> bool: ...
    @ShowDropouts.setter
    def ShowDropouts(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def ExportWav(self, fileName: str, audioFileType: FileAudioType, bitDepth: SavedAcquisitionBitDepthType, dataType: SourceDataType, dataIndex: int, replaceFileIfExists: bool) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def HasDataOnAxis(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> bool: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetData due to it being static, abstract and generic.

    GetData : GetData_MethodGroup
    class GetData_MethodGroup:
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> XYValues:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int) -> XYValues:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class PesqAnalysisMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Narrowband : PesqAnalysisMode # 0
    Wideband : PesqAnalysisMode # 1


class PesqAnalysisRegion(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    All : PesqAnalysisRegion # 0
    ActiveSpeech : PesqAnalysisRegion # 1
    Silence : PesqAnalysisRegion # 2


class PesqAverageGenerator:
    @property
    def Levels(self) -> GeneratorLevels: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class PesqAverageMeasurement:
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def ConformanceAdjustment(self) -> bool: ...
    @ConformanceAdjustment.setter
    def ConformanceAdjustment(self, value: bool) -> bool: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def ExtendAcquisition(self) -> DoubleSetting: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def FileMos(self) -> PesqAverageXYGraph: ...
    @property
    def Generator(self) -> PesqAverageGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Mode(self) -> PesqAnalysisMode: ...
    @Mode.setter
    def Mode(self, value: PesqAnalysisMode) -> PesqAnalysisMode: ...
    @property
    def MosAverage(self) -> PesqMeterGraph: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def ReferenceFileNames(self) -> Array_1[str]: ...
    @ReferenceFileNames.setter
    def ReferenceFileNames(self, value: Array_1[str]) -> Array_1[str]: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def LoadReferenceFile(self, fileName: str, replaceIfExists: bool) -> None: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class PesqAverageXYGraph:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def AnalysisRegion(self) -> PesqAnalysisRegion: ...
    @AnalysisRegion.setter
    def AnalysisRegion(self, value: PesqAnalysisRegion) -> PesqAnalysisRegion: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def HasDataOnAxis(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> bool: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetData due to it being static, abstract and generic.

    GetData : GetData_MethodGroup
    class GetData_MethodGroup:
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> XYValues:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int) -> XYValues:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class PesqGenerator:
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class PesqMeasurement:
    @property
    def AcquiredWaveform(self) -> PesqAcquiredWaveformGraph: ...
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def AverageDelay(self) -> MeterGraph: ...
    @property
    def ConformanceAdjustment(self) -> bool: ...
    @ConformanceAdjustment.setter
    def ConformanceAdjustment(self, value: bool) -> bool: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def DelayVsTime(self) -> XYGraph: ...
    @property
    def ExtendAcquisition(self) -> DoubleSetting: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> PesqGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Mode(self) -> PesqAnalysisMode: ...
    @Mode.setter
    def Mode(self, value: PesqAnalysisMode) -> PesqAnalysisMode: ...
    @property
    def Mos(self) -> PesqMeterGraph: ...
    @property
    def MosVsTime(self) -> XYGraph: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def Pesq(self) -> PesqMeterGraph: ...
    @property
    def ReferenceFile(self) -> str: ...
    @ReferenceFile.setter
    def ReferenceFile(self, value: str) -> str: ...
    @property
    def ReferenceFileNames(self) -> Array_1[str]: ...
    @property
    def ReferenceWaveform(self) -> XYGraph: ...
    @property
    def ReplaceSavedFile(self) -> bool: ...
    @ReplaceSavedFile.setter
    def ReplaceSavedFile(self, value: bool) -> bool: ...
    @property
    def SaveAcquisitionToFile(self) -> bool: ...
    @SaveAcquisitionToFile.setter
    def SaveAcquisitionToFile(self, value: bool) -> bool: ...
    @property
    def SavedAcquisitionAudioType(self) -> RecordedAudioType: ...
    @SavedAcquisitionAudioType.setter
    def SavedAcquisitionAudioType(self, value: RecordedAudioType) -> RecordedAudioType: ...
    @property
    def SavedAcquisitionBitDepth(self) -> SavedAcquisitionBitDepthType: ...
    @SavedAcquisitionBitDepth.setter
    def SavedAcquisitionBitDepth(self, value: SavedAcquisitionBitDepthType) -> SavedAcquisitionBitDepthType: ...
    @property
    def SavedAcquisitionFileName(self) -> str: ...
    @SavedAcquisitionFileName.setter
    def SavedAcquisitionFileName(self, value: str) -> str: ...
    @property
    def SavedAcquisitionFolderName(self) -> str: ...
    @SavedAcquisitionFolderName.setter
    def SavedAcquisitionFolderName(self, value: str) -> str: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def LoadReferenceFile(self, fileName: str, replaceIfExists: bool) -> None: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class PesqMeterGraph:
    @property
    def AnalysisRegion(self) -> PesqAnalysisRegion: ...
    @AnalysisRegion.setter
    def AnalysisRegion(self, value: PesqAnalysisRegion) -> PesqAnalysisRegion: ...
    @property
    def Axis(self) -> GraphAxis: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Limits(self) -> MeterLimits: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    def CopyToClipboard(self) -> None: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetTraceColor(self, traceIndex: int) -> Color: ...
    def GetTraceName(self, traceIndex: int) -> str: ...
    def ResetTraceStyle(self, traceIndex: int) -> None: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetTraceColor(self, traceIndex: int, color: Color) -> None: ...
    def SetTraceName(self, traceIndex: int, name: str) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, unit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool]) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool], append: bool) -> None:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[str]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[str]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[float]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[float]:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...



class PhaseMeterRange(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ZeroTo360 : PhaseMeterRange # 0
    Minus90To270 : PhaseMeterRange # 1
    Minus180To180 : PhaseMeterRange # 2


class PhaseMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Difference : PhaseMode # 0
    Absolute : PhaseMode # 1
    AbsWrapped : PhaseMode # 2
    Excess : PhaseMode # 3


class PhaseXYGraph:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DelayMaxFrequency(self) -> DoubleSetting: ...
    @property
    def DelayMinFrequency(self) -> DoubleSetting: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def Message(self) -> str: ...
    @property
    def Mode(self) -> PhaseMode: ...
    @Mode.setter
    def Mode(self, value: PhaseMode) -> PhaseMode: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def HasDataOnAxis(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> bool: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetData due to it being static, abstract and generic.

    GetData : GetData_MethodGroup
    class GetData_MethodGroup:
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> XYValues:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int) -> XYValues:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class PolqaAcquiredWaveformGraph:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowVAD(self) -> bool: ...
    @ShowVAD.setter
    def ShowVAD(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def ExportWav(self, fileName: str, audioFileType: FileAudioType, bitDepth: SavedAcquisitionBitDepthType, dataType: SourceDataType, dataIndex: int, replaceFileIfExists: bool) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def HasDataOnAxis(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> bool: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetData due to it being static, abstract and generic.

    GetData : GetData_MethodGroup
    class GetData_MethodGroup:
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> XYValues:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int) -> XYValues:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class PolqaAnalysisMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Narrowband : PolqaAnalysisMode # 0
    Wideband : PolqaAnalysisMode # 1
    SuperWideband : PolqaAnalysisMode # 2


class PolqaAverageGenerator:
    @property
    def Levels(self) -> GeneratorLevels: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class PolqaAverageMeasurement:
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def AutoLevelAlignmentAdjustment(self) -> bool: ...
    @AutoLevelAlignmentAdjustment.setter
    def AutoLevelAlignmentAdjustment(self, value: bool) -> bool: ...
    @property
    def AutoResamplingAdjustment(self) -> bool: ...
    @AutoResamplingAdjustment.setter
    def AutoResamplingAdjustment(self, value: bool) -> bool: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def ExtendAcquisition(self) -> DoubleSetting: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def FileMos(self) -> PolqaAverageXYGraph: ...
    @property
    def Generator(self) -> PolqaAverageGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def HighAccuracyMode(self) -> bool: ...
    @HighAccuracyMode.setter
    def HighAccuracyMode(self, value: bool) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def ItuVersion(self) -> PolqaItuVersion: ...
    @ItuVersion.setter
    def ItuVersion(self, value: PolqaItuVersion) -> PolqaItuVersion: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Mode(self) -> PolqaAnalysisMode: ...
    @Mode.setter
    def Mode(self, value: PolqaAnalysisMode) -> PolqaAnalysisMode: ...
    @property
    def MosAverage(self) -> PolqaMeterGraph: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OverloadReference(self) -> DoubleSetting: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def ReferenceFileNames(self) -> Array_1[str]: ...
    @ReferenceFileNames.setter
    def ReferenceFileNames(self, value: Array_1[str]) -> Array_1[str]: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def LoadReferenceFile(self, fileName: str, replaceIfExists: bool) -> None: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class PolqaAverageXYGraph:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def HasDataOnAxis(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> bool: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetData due to it being static, abstract and generic.

    GetData : GetData_MethodGroup
    class GetData_MethodGroup:
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> XYValues:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int) -> XYValues:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class PolqaGenerator:
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class PolqaItuVersion(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Polqa_1_1 : PolqaItuVersion # 0
    Polqa_2_4 : PolqaItuVersion # 1


class PolqaMeasurement:
    @property
    def AcquiredWaveform(self) -> PolqaAcquiredWaveformGraph: ...
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def AutoLevelAlignmentAdjustment(self) -> bool: ...
    @AutoLevelAlignmentAdjustment.setter
    def AutoLevelAlignmentAdjustment(self, value: bool) -> bool: ...
    @property
    def AutoResamplingAdjustment(self) -> bool: ...
    @AutoResamplingAdjustment.setter
    def AutoResamplingAdjustment(self, value: bool) -> bool: ...
    @property
    def AverageDelay(self) -> MeterGraph: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def DelayVsTime(self) -> XYGraph: ...
    @property
    def DelayVsTimeResampled(self) -> XYGraph: ...
    @property
    def ExtendAcquisition(self) -> DoubleSetting: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def G107(self) -> PolqaMeterGraph: ...
    @property
    def Generator(self) -> PolqaGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def HighAccuracyMode(self) -> bool: ...
    @HighAccuracyMode.setter
    def HighAccuracyMode(self, value: bool) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def ItuVersion(self) -> PolqaItuVersion: ...
    @ItuVersion.setter
    def ItuVersion(self, value: PolqaItuVersion) -> PolqaItuVersion: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Mode(self) -> PolqaAnalysisMode: ...
    @Mode.setter
    def Mode(self, value: PolqaAnalysisMode) -> PolqaAnalysisMode: ...
    @property
    def Mos(self) -> PolqaMeterGraph: ...
    @property
    def MosVsTime(self) -> XYGraph: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfLicensedChannels(self) -> int: ...
    @property
    def OverloadReference(self) -> DoubleSetting: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def PolqaResultData(self) -> TabularResult: ...
    @property
    def ReferenceFile(self) -> str: ...
    @ReferenceFile.setter
    def ReferenceFile(self, value: str) -> str: ...
    @property
    def ReferenceFileNames(self) -> Array_1[str]: ...
    @property
    def ReferenceWaveform(self) -> XYGraph: ...
    @property
    def ReplaceSavedFile(self) -> bool: ...
    @ReplaceSavedFile.setter
    def ReplaceSavedFile(self, value: bool) -> bool: ...
    @property
    def SaveAcquisitionToFile(self) -> bool: ...
    @SaveAcquisitionToFile.setter
    def SaveAcquisitionToFile(self, value: bool) -> bool: ...
    @property
    def SavedAcquisitionAudioType(self) -> RecordedAudioType: ...
    @SavedAcquisitionAudioType.setter
    def SavedAcquisitionAudioType(self, value: RecordedAudioType) -> RecordedAudioType: ...
    @property
    def SavedAcquisitionBitDepth(self) -> SavedAcquisitionBitDepthType: ...
    @SavedAcquisitionBitDepth.setter
    def SavedAcquisitionBitDepth(self, value: SavedAcquisitionBitDepthType) -> SavedAcquisitionBitDepthType: ...
    @property
    def SavedAcquisitionFileName(self) -> str: ...
    @SavedAcquisitionFileName.setter
    def SavedAcquisitionFileName(self, value: str) -> str: ...
    @property
    def SavedAcquisitionFolderName(self) -> str: ...
    @SavedAcquisitionFolderName.setter
    def SavedAcquisitionFolderName(self, value: str) -> str: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def LoadReferenceFile(self, fileName: str, replaceIfExists: bool) -> None: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class PolqaMeterGraph:
    @property
    def Axis(self) -> GraphAxis: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Limits(self) -> MeterLimits: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    def CopyToClipboard(self) -> None: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetTraceColor(self, traceIndex: int) -> Color: ...
    def GetTraceName(self, traceIndex: int) -> str: ...
    def ResetTraceStyle(self, traceIndex: int) -> None: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetTraceColor(self, traceIndex: int, color: Color) -> None: ...
    def SetTraceName(self, traceIndex: int, name: str) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, unit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool]) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool], append: bool) -> None:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[str]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[str]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[float]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[float]:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...



class PowerAmpFaultStatus(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Okay : PowerAmpFaultStatus # 0
    DriverProtect : PowerAmpFaultStatus # 1
    DriverOvl : PowerAmpFaultStatus # 2
    DriverTemp : PowerAmpFaultStatus # 3


class PowerAmplifierOutput(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    SpeakOnA : PowerAmplifierOutput # 0
    SpeakOnB : PowerAmplifierOutput # 1


class PowerAmplifierSettings:
    @property
    def GetDriverFaultStatus(self) -> PowerAmpFaultStatus: ...
    @property
    def Output(self) -> PowerAmplifierOutput: ...
    @Output.setter
    def Output(self, value: PowerAmplifierOutput) -> PowerAmplifierOutput: ...


class ProductionTestSettings:
    @property
    def MessageRTF(self) -> str: ...
    @MessageRTF.setter
    def MessageRTF(self, value: str) -> str: ...
    @property
    def MessageText(self) -> str: ...
    @MessageText.setter
    def MessageText(self, value: str) -> str: ...
    @property
    def SelectedBannerImage(self) -> str: ...
    @SelectedBannerImage.setter
    def SelectedBannerImage(self, value: str) -> str: ...
    def LoadBannerImageFile(self, fileName: str, replaceIfExists: bool) -> None: ...


class ProfessionalStatusBitsSettings:
    @property
    def AlignmentLevel(self) -> StatusBitsAlignmentLevel: ...
    @AlignmentLevel.setter
    def AlignmentLevel(self, value: StatusBitsAlignmentLevel) -> StatusBitsAlignmentLevel: ...
    @property
    def AudioMode(self) -> StatusBitsAudioMode: ...
    @AudioMode.setter
    def AudioMode(self, value: StatusBitsAudioMode) -> StatusBitsAudioMode: ...
    @property
    def AuxBits(self) -> StatusBitsAuxSampleBit: ...
    @AuxBits.setter
    def AuxBits(self, value: StatusBitsAuxSampleBit) -> StatusBitsAuxSampleBit: ...
    @property
    def ChannelDest(self) -> str: ...
    @ChannelDest.setter
    def ChannelDest(self, value: str) -> str: ...
    @property
    def ChannelMode(self) -> StatusBitsChannelMode: ...
    @ChannelMode.setter
    def ChannelMode(self, value: StatusBitsChannelMode) -> StatusBitsChannelMode: ...
    @property
    def ChannelNumber(self) -> int: ...
    @ChannelNumber.setter
    def ChannelNumber(self, value: int) -> int: ...
    @property
    def ChannelOrigin(self) -> str: ...
    @ChannelOrigin.setter
    def ChannelOrigin(self, value: str) -> str: ...
    @property
    def DARS(self) -> StatusBitsDars: ...
    @DARS.setter
    def DARS(self, value: StatusBitsDars) -> StatusBitsDars: ...
    @property
    def Emphasis(self) -> StatusBitsEmphasisProfessional: ...
    @Emphasis.setter
    def Emphasis(self, value: StatusBitsEmphasisProfessional) -> StatusBitsEmphasisProfessional: ...
    @property
    def LocalAddress(self) -> int: ...
    @LocalAddress.setter
    def LocalAddress(self, value: int) -> int: ...
    @property
    def Lock(self) -> StatusBitsLock: ...
    @Lock.setter
    def Lock(self, value: StatusBitsLock) -> StatusBitsLock: ...
    @property
    def MultichannelMode(self) -> StatusBitsMultichannelMode: ...
    @MultichannelMode.setter
    def MultichannelMode(self, value: StatusBitsMultichannelMode) -> StatusBitsMultichannelMode: ...
    @property
    def Reliability0_5(self) -> StatusBitsReliability: ...
    @Reliability0_5.setter
    def Reliability0_5(self, value: StatusBitsReliability) -> StatusBitsReliability: ...
    @property
    def Reliability14_17(self) -> StatusBitsReliability: ...
    @Reliability14_17.setter
    def Reliability14_17(self, value: StatusBitsReliability) -> StatusBitsReliability: ...
    @property
    def Reliability18_21(self) -> StatusBitsReliability: ...
    @Reliability18_21.setter
    def Reliability18_21(self, value: StatusBitsReliability) -> StatusBitsReliability: ...
    @property
    def Reliability6_13(self) -> StatusBitsReliability: ...
    @Reliability6_13.setter
    def Reliability6_13(self, value: StatusBitsReliability) -> StatusBitsReliability: ...
    @property
    def SamplingFrequency(self) -> StatusBitsSamplingFrequencyProfessional: ...
    @SamplingFrequency.setter
    def SamplingFrequency(self, value: StatusBitsSamplingFrequencyProfessional) -> StatusBitsSamplingFrequencyProfessional: ...
    @property
    def SamplingFrequencyScaling(self) -> StatusBitsSampleFrequencyScaling: ...
    @SamplingFrequencyScaling.setter
    def SamplingFrequencyScaling(self, value: StatusBitsSampleFrequencyScaling) -> StatusBitsSampleFrequencyScaling: ...
    @property
    def SourceWordLength20Bits(self) -> StatusBitsWordLength20Bits: ...
    @SourceWordLength20Bits.setter
    def SourceWordLength20Bits(self, value: StatusBitsWordLength20Bits) -> StatusBitsWordLength20Bits: ...
    @property
    def SourceWordLength24Bits(self) -> StatusBitsWordLength24Bits: ...
    @SourceWordLength24Bits.setter
    def SourceWordLength24Bits(self, value: StatusBitsWordLength24Bits) -> StatusBitsWordLength24Bits: ...
    @property
    def TimeOfDay(self) -> int: ...
    @TimeOfDay.setter
    def TimeOfDay(self, value: int) -> int: ...
    @property
    def UserBitsManagement(self) -> StatusBitsUserBitsManagement: ...
    @UserBitsManagement.setter
    def UserBitsManagement(self, value: StatusBitsUserBitsManagement) -> StatusBitsUserBitsManagement: ...


class ProfessionalStatusBitsValues:
    @property
    def AlignmentLevel(self) -> StatusBitsAlignmentLevel: ...
    @property
    def AudioMode(self) -> StatusBitsAudioMode: ...
    @property
    def AuxBits(self) -> StatusBitsAuxSampleBit: ...
    @property
    def ChannelDest(self) -> str: ...
    @property
    def ChannelMode(self) -> StatusBitsChannelMode: ...
    @property
    def ChannelNumber(self) -> int: ...
    @property
    def ChannelOrigin(self) -> str: ...
    @property
    def DARS(self) -> StatusBitsDars: ...
    @property
    def Emphasis(self) -> StatusBitsEmphasisProfessional: ...
    @property
    def LocalAddress(self) -> int: ...
    @property
    def Lock(self) -> StatusBitsLock: ...
    @property
    def MultichannelMode(self) -> StatusBitsMultichannelMode: ...
    @property
    def Reliability0_5(self) -> StatusBitsReliability: ...
    @property
    def Reliability14_17(self) -> StatusBitsReliability: ...
    @property
    def Reliability18_21(self) -> StatusBitsReliability: ...
    @property
    def Reliability6_13(self) -> StatusBitsReliability: ...
    @property
    def SamplingFrequency(self) -> StatusBitsSamplingFrequencyProfessional: ...
    @property
    def SamplingFrequencyScaling(self) -> StatusBitsSampleFrequencyScaling: ...
    @property
    def SourceWordLength20Bits(self) -> StatusBitsWordLength20Bits: ...
    @property
    def SourceWordLength24Bits(self) -> StatusBitsWordLength24Bits: ...
    @property
    def TimeOfDay(self) -> int: ...
    @property
    def UserBitsManagement(self) -> StatusBitsUserBitsManagement: ...


class ProgramStep:
    @property
    def ActualOutput(self) -> str: ...
    @property
    def Arguments(self) -> str: ...
    @Arguments.setter
    def Arguments(self, value: str) -> str: ...
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Command(self) -> str: ...
    @Command.setter
    def Command(self, value: str) -> str: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def ExpectedOutput(self) -> str: ...
    @ExpectedOutput.setter
    def ExpectedOutput(self, value: str) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def ProgramOutputVariable(self) -> str: ...
    @ProgramOutputVariable.setter
    def ProgramOutputVariable(self, value: str) -> str: ...
    @property
    def RanToCompletion(self) -> bool: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    @property
    def Timeout(self) -> float: ...
    @Timeout.setter
    def Timeout(self, value: float) -> float: ...
    @property
    def WaitForExitBehavior(self) -> ProgramStepWaitBehavior: ...
    @WaitForExitBehavior.setter
    def WaitForExitBehavior(self, value: ProgramStepWaitBehavior) -> ProgramStepWaitBehavior: ...
    @property
    def WorkingDirectory(self) -> str: ...
    @WorkingDirectory.setter
    def WorkingDirectory(self, value: str) -> str: ...
    def CopyToClipboard(self) -> bool: ...
    def CreateArgumentsChange(self, arguments: str) -> StateChange: ...
    def CreateCommandChange(self, command: str) -> StateChange: ...
    def CreateWorkingDirectoryChange(self, workingDirectory: str) -> StateChange: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class ProgramStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ProgramStep: ...
    def Add(self) -> ProgramStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class ProgramStepWaitBehavior(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    DoNotWait : ProgramStepWaitBehavior # 0
    WaitForExitIgnoreResponse : ProgramStepWaitBehavior # 1
    WaitForExitValidateResponse : ProgramStepWaitBehavior # 2
    WaitForExitStoreOutputInVariable : ProgramStepWaitBehavior # 3


class ProjectItem:
    @property
    def IsUsedInProject(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def SizeInBytes(self) -> int: ...
    @property
    def Type(self) -> ProjectItemType: ...
    def Delete(self) -> None: ...
    def Export(self, fileName: str) -> None: ...
    def Replace(self, fileName: str) -> None: ...


class ProjectItemCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> ProjectItem: ...
    @property
    def Item(self) -> ProjectItem: ...
    def DeleteAllUnusedItems(self) -> None: ...
    def GetEnumerator(self) -> IEnumerator: ...


class ProjectItemType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Image : ProjectItemType # 0
    Waveform : ProjectItemType # 1
    CustomReportLayout : ProjectItemType # 2
    MultitoneSignalDefinition : ProjectItemType # 3
    FrequencySweepDefinition : ProjectItemType # 4
    OutputEqDefinition : ProjectItemType # 5
    AmplifierCorrectionCurve : ProjectItemType # 6
    ExportDataSpecification : ProjectItemType # 7
    LimitOffsetCurve : ProjectItemType # 8
    CapabilityDataStructure : ProjectItemType # 9
    Edid : ProjectItemType # 10


class ProjectSettings:
    @property
    def GlobalVmax(self) -> GlobalVMaxSettings: ...
    @property
    def SaveGraphData(self) -> bool: ...
    @SaveGraphData.setter
    def SaveGraphData(self, value: bool) -> bool: ...
    @property
    def ShowGraphSelector(self) -> bool: ...
    @ShowGraphSelector.setter
    def ShowGraphSelector(self, value: bool) -> bool: ...
    @property
    def ShowMeasuredTime(self) -> bool: ...
    @ShowMeasuredTime.setter
    def ShowMeasuredTime(self, value: bool) -> bool: ...
    @property
    def TraceStyleCycleCount(self) -> int: ...
    @property
    def TransducerCurrentLimitFault(self) -> TransducerFault: ...
    @TransducerCurrentLimitFault.setter
    def TransducerCurrentLimitFault(self, value: TransducerFault) -> TransducerFault: ...
    def ExportTraceCycleStyles(self, fileName: str) -> None: ...
    def GetLineStyle(self, cycleIndex: int, styleIndex: int) -> DashStyle: ...
    def GetLineWidth(self, cycleIndex: int, styleIndex: int) -> int: ...
    def GetTraceColor(self, cycleIndex: int, styleIndex: int) -> Color: ...
    def ImportTraceCycleStyles(self, fileName: str) -> None: ...
    def ResetStyles(self, cycleIndex: int) -> None: ...
    def SetLineStyle(self, cycleIndex: int, styleIndex: int, lineStyle: DashStyle) -> None: ...
    def SetLineWidth(self, cycleIndex: int, styleIndex: int, lineWidth: int) -> None: ...
    def SetTraceColor(self, cycleIndex: int, styleIndex: int, color: Color) -> None: ...


class PromptInput:
    @property
    def DefaultResponse(self) -> str: ...
    @DefaultResponse.setter
    def DefaultResponse(self, value: str) -> str: ...
    @property
    def Label(self) -> str: ...
    @Label.setter
    def Label(self, value: str) -> str: ...
    @property
    def Persist(self) -> bool: ...
    @Persist.setter
    def Persist(self, value: bool) -> bool: ...
    @property
    def Required(self) -> bool: ...
    @Required.setter
    def Required(self, value: bool) -> bool: ...
    @property
    def VariableName(self) -> str: ...
    @VariableName.setter
    def VariableName(self, value: str) -> str: ...


class PromptInputCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> PromptInput: ...
    @property
    def VariableNames(self) -> Array_1[str]: ...
    def Add(self, label: str, persist: bool, required: bool, variableName: str) -> PromptInput: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Move(self, fromIndex: int, toIndex: int) -> None: ...
    # Skipped Remove due to it being static, abstract and generic.

    Remove : Remove_MethodGroup
    class Remove_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, input: PromptInput) -> None:...



class PromptStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def dBrAChannel(self) -> InputChannelIndex: ...
    @dBrAChannel.setter
    def dBrAChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def dBrBChannel(self) -> InputChannelIndex: ...
    @dBrBChannel.setter
    def dBrBChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def dBrGChannel(self) -> OutputChannelIndex: ...
    @dBrGChannel.setter
    def dBrGChannel(self, value: OutputChannelIndex) -> OutputChannelIndex: ...
    @property
    def dBSpl1Channel(self) -> InputChannelIndex: ...
    @dBSpl1Channel.setter
    def dBSpl1Channel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def dBSpl2Channel(self) -> InputChannelIndex: ...
    @dBSpl2Channel.setter
    def dBSpl2Channel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def EditGeneratorSettingsEnabled(self) -> bool: ...
    @EditGeneratorSettingsEnabled.setter
    def EditGeneratorSettingsEnabled(self, value: bool) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Icon(self) -> MessageBoxIcon: ...
    @Icon.setter
    def Icon(self, value: MessageBoxIcon) -> MessageBoxIcon: ...
    @property
    def Inputs(self) -> PromptInputCollection: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PlayAlertSound(self) -> bool: ...
    @PlayAlertSound.setter
    def PlayAlertSound(self, value: bool) -> bool: ...
    @property
    def ReferenceInput(self) -> APxInputSelection: ...
    @ReferenceInput.setter
    def ReferenceInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def RTF(self) -> str: ...
    @RTF.setter
    def RTF(self, value: str) -> str: ...
    @property
    def SelectedImage(self) -> str: ...
    @SelectedImage.setter
    def SelectedImage(self, value: str) -> str: ...
    @property
    def SetdBrA(self) -> bool: ...
    @SetdBrA.setter
    def SetdBrA(self, value: bool) -> bool: ...
    @property
    def SetdBrB(self) -> bool: ...
    @SetdBrB.setter
    def SetdBrB(self, value: bool) -> bool: ...
    @property
    def SetdBrG(self) -> bool: ...
    @SetdBrG.setter
    def SetdBrG(self, value: bool) -> bool: ...
    @property
    def SetdBSpl1(self) -> bool: ...
    @SetdBSpl1.setter
    def SetdBSpl1(self, value: bool) -> bool: ...
    @property
    def SetdBSpl2(self) -> bool: ...
    @SetdBSpl2.setter
    def SetdBSpl2(self, value: bool) -> bool: ...
    @property
    def ShowCancel(self) -> bool: ...
    @ShowCancel.setter
    def ShowCancel(self, value: bool) -> bool: ...
    @property
    def ShowOK(self) -> bool: ...
    @ShowOK.setter
    def ShowOK(self, value: bool) -> bool: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    @property
    def Text(self) -> str: ...
    @Text.setter
    def Text(self, value: str) -> str: ...
    @property
    def TimeoutEnabled(self) -> bool: ...
    @TimeoutEnabled.setter
    def TimeoutEnabled(self, value: bool) -> bool: ...
    @property
    def TimeoutInSeconds(self) -> float: ...
    @TimeoutInSeconds.setter
    def TimeoutInSeconds(self, value: float) -> float: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def LoadImageFile(self, fileName: str, replaceIfExists: bool) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class PromptStepBase:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Icon(self) -> MessageBoxIcon: ...
    @Icon.setter
    def Icon(self, value: MessageBoxIcon) -> MessageBoxIcon: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PlayAlertSound(self) -> bool: ...
    @PlayAlertSound.setter
    def PlayAlertSound(self, value: bool) -> bool: ...
    @property
    def RTF(self) -> str: ...
    @RTF.setter
    def RTF(self, value: str) -> str: ...
    @property
    def SelectedImage(self) -> str: ...
    @SelectedImage.setter
    def SelectedImage(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    @property
    def Text(self) -> str: ...
    @Text.setter
    def Text(self, value: str) -> str: ...
    @property
    def TimeoutEnabled(self) -> bool: ...
    @TimeoutEnabled.setter
    def TimeoutEnabled(self, value: bool) -> bool: ...
    @property
    def TimeoutInSeconds(self) -> float: ...
    @TimeoutInSeconds.setter
    def TimeoutInSeconds(self, value: float) -> float: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def LoadImageFile(self, fileName: str, replaceIfExists: bool) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class PromptStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> PromptStep: ...
    def Add(self) -> PromptStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class PSIOMasterClockSource(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Internal : PSIOMasterClockSource # 0
    External : PSIOMasterClockSource # 1


class PsrGenerator:
    @property
    def AcLevel(self) -> DoubleSetting: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def GeneratorType(self) -> PsrGeneratorType: ...
    @GeneratorType.setter
    def GeneratorType(self, value: PsrGeneratorType) -> PsrGeneratorType: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def VddLevel(self) -> DoubleSetting: ...


class PsrGeneratorType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Sine : PsrGeneratorType # 0
    Square : PsrGeneratorType # 1
    Pulse125 : PsrGeneratorType # 2
    Pulse250 : PsrGeneratorType # 3
    Pulse375 : PsrGeneratorType # 4
    Pulse625 : PsrGeneratorType # 5
    Pulse750 : PsrGeneratorType # 6
    Pulse875 : PsrGeneratorType # 7
    Noise : PsrGeneratorType # 8


class PsrMeasurement:
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> PsrGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NoiseWeighting(self) -> WeightingFilterType: ...
    @NoiseWeighting.setter
    def NoiseWeighting(self, value: WeightingFilterType) -> WeightingFilterType: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def Psr(self) -> MeterGraph: ...
    @property
    def PsrPlusN(self) -> MeterGraph: ...
    @property
    def Psrr(self) -> MeterGraph: ...
    @property
    def PsrrPlusN(self) -> MeterGraph: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def Settling(self) -> PsrSettlingParametersCollection: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class PsrSettlingParametersCollection:
    @property
    def Psr(self) -> SettlingParameters: ...


class PsrSweepGenerator:
    @property
    def AcLevel(self) -> DoubleSetting: ...
    @property
    def StartFrequency(self) -> DoubleSetting: ...
    @property
    def StopFrequency(self) -> DoubleSetting: ...
    @property
    def SweepParameters(self) -> SweepParameters: ...
    @property
    def VddLevel(self) -> DoubleSetting: ...


class PsrSweepMeasurement:
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> PsrSweepGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NoiseWeighting(self) -> WeightingFilterType: ...
    @NoiseWeighting.setter
    def NoiseWeighting(self, value: WeightingFilterType) -> WeightingFilterType: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def Psr(self) -> XYGraph: ...
    @property
    def PsrPlusN(self) -> XYGraph: ...
    @property
    def Psrr(self) -> XYGraph: ...
    @property
    def PsrrPlusN(self) -> XYGraph: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def Settling(self) -> PsrSettlingParametersCollection: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class QpeakNoiseGenerator:
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def NoiseShape(self) -> NoiseShape: ...
    @NoiseShape.setter
    def NoiseShape(self, value: NoiseShape) -> NoiseShape: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class QpeakNoiseMeasurement:
    @property
    def AcquisitionTime(self) -> DoubleSetting: ...
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def DelayTime(self) -> DoubleSetting: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> QpeakNoiseGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Level(self) -> MeterGraph: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class RatioToneMeterGraph:
    @property
    def Axis(self) -> GraphAxis: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsSelectedToneCrosstalk(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Limits(self) -> MeterLimits: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def RatioType(self) -> MultitoneLevelRatioType: ...
    @RatioType.setter
    def RatioType(self, value: MultitoneLevelRatioType) -> MultitoneLevelRatioType: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def SelectedToneIndex(self) -> int: ...
    @SelectedToneIndex.setter
    def SelectedToneIndex(self, value: int) -> int: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def ToneCount(self) -> int: ...
    @property
    def Tones(self) -> Array_1[str]: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    def CopyToClipboard(self) -> None: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetTraceColor(self, traceIndex: int) -> Color: ...
    def GetTraceName(self, traceIndex: int) -> str: ...
    def ResetTraceStyle(self, traceIndex: int) -> None: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetTraceColor(self, traceIndex: int, color: Color) -> None: ...
    def SetTraceName(self, traceIndex: int, name: str) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, unit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool]) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool], append: bool) -> None:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[str]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[str]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[float]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[float]:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...



class ReadOnlySetting:
    @property
    def Active(self) -> bool: ...
    @property
    def IsEnabled(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def Values(self) -> Array_1[str]: ...


class ReadOnlySettingUnit:
    @property
    def Active(self) -> bool: ...
    @property
    def IsEnabled(self) -> bool: ...
    @property
    def IsLogUnit(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @property
    def TextWithoutUnit(self) -> str: ...
    @property
    def TextWithReferenceValue(self) -> str: ...
    @property
    def Unit(self) -> str: ...
    @Unit.setter
    def Unit(self, value: str) -> str: ...
    @property
    def UnitList(self) -> Array_1[str]: ...
    @property
    def Values(self) -> Array_1[str]: ...


class RecordedAudioType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    LinearPcmMono : RecordedAudioType # 0
    LinearPcm : RecordedAudioType # 1
    LinearPcmMulti : RecordedAudioType # 2
    DolbyDigital : RecordedAudioType # 3
    DolbyDigitalPlus : RecordedAudioType # 4
    DtsCompact : RecordedAudioType # 5
    Dts : RecordedAudioType # 6
    DtsHD : RecordedAudioType # 7
    Mlp : RecordedAudioType # 8
    AutoEncoded : RecordedAudioType # 9
    RawEncodedBitStream : RecordedAudioType # 10


class RecorderReadingRate(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ReadingRate_1 : RecorderReadingRate # 0
    ReadingRate_2 : RecorderReadingRate # 1
    ReadingRate_4 : RecorderReadingRate # 2
    ReadingRate_8 : RecorderReadingRate # 3
    ReadingRate_16 : RecorderReadingRate # 4
    ReadingRate_32 : RecorderReadingRate # 5
    ReadingRate_64 : RecorderReadingRate # 6
    ReadingRate_125 : RecorderReadingRate # 7
    ReadingRate_250 : RecorderReadingRate # 8


class RecorderSettings:
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def FixedTime(self) -> float: ...
    @FixedTime.setter
    def FixedTime(self, value: float) -> float: ...
    @property
    def Function(self) -> BenchTestFunction: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def HasError(self) -> bool: ...
    @property
    def IsStarted(self) -> bool: ...
    @property
    def LastErrorCode(self) -> APError: ...
    @property
    def LastErrorMessage(self) -> str: ...
    @property
    def LevelTriggerSlope(self) -> LevelSlopeType: ...
    @LevelTriggerSlope.setter
    def LevelTriggerSlope(self, value: LevelSlopeType) -> LevelSlopeType: ...
    @property
    def MakeSettledReadings(self) -> bool: ...
    @MakeSettledReadings.setter
    def MakeSettledReadings(self, value: bool) -> bool: ...
    @property
    def Mode(self) -> TimeSweepRunMode: ...
    @Mode.setter
    def Mode(self, value: TimeSweepRunMode) -> TimeSweepRunMode: ...
    @property
    def NestedSweep(self) -> NestedSweepSettings: ...
    @property
    def PreSweepDelay(self) -> float: ...
    @PreSweepDelay.setter
    def PreSweepDelay(self, value: float) -> float: ...
    @property
    def ReadingRate(self) -> RecorderReadingRate: ...
    @ReadingRate.setter
    def ReadingRate(self, value: RecorderReadingRate) -> RecorderReadingRate: ...
    @property
    def Repeat(self) -> bool: ...
    @Repeat.setter
    def Repeat(self, value: bool) -> bool: ...
    @property
    def ReplaceSavedFile(self) -> bool: ...
    @ReplaceSavedFile.setter
    def ReplaceSavedFile(self, value: bool) -> bool: ...
    @property
    def SaveAcquisitionToFile(self) -> bool: ...
    @SaveAcquisitionToFile.setter
    def SaveAcquisitionToFile(self, value: bool) -> bool: ...
    @property
    def SavedAcquisitionAudioType(self) -> RecordedAudioType: ...
    @SavedAcquisitionAudioType.setter
    def SavedAcquisitionAudioType(self, value: RecordedAudioType) -> RecordedAudioType: ...
    @property
    def SavedAcquisitionBitDepth(self) -> SavedAcquisitionBitDepthType: ...
    @SavedAcquisitionBitDepth.setter
    def SavedAcquisitionBitDepth(self, value: SavedAcquisitionBitDepthType) -> SavedAcquisitionBitDepthType: ...
    @property
    def SavedAcquisitionFileName(self) -> str: ...
    @SavedAcquisitionFileName.setter
    def SavedAcquisitionFileName(self, value: str) -> str: ...
    @property
    def SavedAcquisitionFolderName(self) -> str: ...
    @SavedAcquisitionFolderName.setter
    def SavedAcquisitionFolderName(self, value: str) -> str: ...
    @property
    def Trigger(self) -> TriggerType: ...
    @Trigger.setter
    def Trigger(self, value: TriggerType) -> TriggerType: ...
    @property
    def TriggerChannel(self) -> InputChannelIndex: ...
    @TriggerChannel.setter
    def TriggerChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def TriggerInput(self) -> APxInputSelection: ...
    @TriggerInput.setter
    def TriggerInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def TriggerLevel(self) -> DoubleSetting: ...
    @property
    def TriggerTimeout(self) -> float: ...
    @TriggerTimeout.setter
    def TriggerTimeout(self, value: float) -> float: ...
    def Analyze(self) -> None: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Show(self) -> None: ...
    def Start(self) -> None: ...
    def Stop(self) -> None: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class ReferenceLevelsAutoGeneratorLevelSetter:
    @property
    def AdjustSource(self) -> RegulationSource: ...
    @AdjustSource.setter
    def AdjustSource(self, value: RegulationSource) -> RegulationSource: ...
    @property
    def InitialSteps(self) -> int: ...
    @InitialSteps.setter
    def InitialSteps(self, value: int) -> int: ...
    @property
    def RegulationInput(self) -> APxInputSelection: ...
    @RegulationInput.setter
    def RegulationInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def StartValue(self) -> DoubleSetting: ...
    @property
    def StopValue(self) -> DoubleSetting: ...
    @property
    def TargetChannel(self) -> InputChannelIndex: ...
    @TargetChannel.setter
    def TargetChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def TargetChannelType(self) -> RegulationTargetChannel: ...
    @TargetChannelType.setter
    def TargetChannelType(self, value: RegulationTargetChannel) -> RegulationTargetChannel: ...
    @property
    def TargetType(self) -> RegulationTarget: ...
    @TargetType.setter
    def TargetType(self, value: RegulationTarget) -> RegulationTarget: ...
    @property
    def TargetValue(self) -> DoubleSetting: ...
    @property
    def TargetValueType(self) -> RegulationTargetValueType: ...
    @TargetValueType.setter
    def TargetValueType(self, value: RegulationTargetValueType) -> RegulationTargetValueType: ...
    def SetGeneratorLevel(self) -> bool: ...


class ReferenceLevelsSequenceSettings:
    @property
    def AutoSetGeneratorLevel(self) -> bool: ...
    @AutoSetGeneratorLevel.setter
    def AutoSetGeneratorLevel(self, value: bool) -> bool: ...
    @property
    def CopyReferencesFromSignalPath(self) -> str: ...
    @CopyReferencesFromSignalPath.setter
    def CopyReferencesFromSignalPath(self, value: str) -> str: ...
    @property
    def SignalPaths(self) -> Array_1[str]: ...


class ReferenceLevelsThdNMeterGraph:
    @property
    def Axis(self) -> GraphAxis: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Limits(self) -> MeterLimits: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def TargetDistortion(self) -> DoubleSetting: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    def CopyToClipboard(self) -> None: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetTraceColor(self, traceIndex: int) -> Color: ...
    def GetTraceName(self, traceIndex: int) -> str: ...
    def ResetTraceStyle(self, traceIndex: int) -> None: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetTraceColor(self, traceIndex: int, color: Color) -> None: ...
    def SetTraceName(self, traceIndex: int, name: str) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, unit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool]) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool], append: bool) -> None:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[str]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[str]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[float]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[float]:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...



class References:
    @property
    def AcousticOutputLevelRegulation(self) -> AcousticRegulationSettings: ...
    @property
    def AcousticOutputReferences(self) -> AcousticOutputReferences: ...
    @property
    def AnalogInputReferences(self) -> AnalogInputReferences: ...
    @property
    def AnalogOutputReferences(self) -> AnalogOutputReferences: ...
    @property
    def AutoGeneratorLevel(self) -> ReferenceLevelsAutoGeneratorLevelSetter: ...
    @property
    def CurrentOutputReferences(self) -> CurrentOutputReferences: ...
    @property
    def DigitalInputReferences(self) -> DigitalInputReferences: ...
    @property
    def DigitalOutputReferences(self) -> DigitalOutputReferences: ...
    @property
    def Frequency(self) -> DoubleSetting: ...


class RefreshDefinedResultsStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class RefreshDefinedResultsStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> RefreshDefinedResultsStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class RefSyncOutputRate(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    TrackOutputSampleRate : RefSyncOutputRate # 0
    Custom : RefSyncOutputRate # 1


class RefSyncUI(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    RefOut : RefSyncUI # 0
    SyncOut : RefSyncUI # 1


class RegulatedFrequencySweepGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def OffsetUnit(self) -> str: ...
    @OffsetUnit.setter
    def OffsetUnit(self, value: str) -> str: ...
    @property
    def OffsetUnitList(self) -> Array_1[str]: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def StartFrequency(self) -> DoubleSetting: ...
    @property
    def StopFrequency(self) -> DoubleSetting: ...
    @property
    def SweepParameters(self) -> FrequencySweepParameters: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped GetOffsetText due to it being static, abstract and generic.

    GetOffsetText : GetOffsetText_MethodGroup
    class GetOffsetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> str:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, unit: str) -> str:...

    # Skipped GetOffsetValue due to it being static, abstract and generic.

    GetOffsetValue : GetOffsetValue_MethodGroup
    class GetOffsetValue_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> float:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, unit: str) -> float:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...

    # Skipped SetOffsetValue due to it being static, abstract and generic.

    SetOffsetValue : SetOffsetValue_MethodGroup
    class SetOffsetValue_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, offset: float) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, offset: str) -> None:...



class RegulatedFrequencySweepMeasurement:
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> RegulatedFrequencySweepGenerator: ...
    @property
    def GeneratorLevel(self) -> XYGraph: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def HighpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def HighpassFilterType(self) -> MeasurementHighpassFilterType: ...
    @HighpassFilterType.setter
    def HighpassFilterType(self, value: MeasurementHighpassFilterType) -> MeasurementHighpassFilterType: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Level(self) -> XYGraph: ...
    @property
    def LowpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def LowpassFilterType(self) -> MeasurementLowpassFilterType: ...
    @LowpassFilterType.setter
    def LowpassFilterType(self, value: MeasurementLowpassFilterType) -> MeasurementLowpassFilterType: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NoiseWeighting(self) -> WeightingFilterType: ...
    @NoiseWeighting.setter
    def NoiseWeighting(self, value: WeightingFilterType) -> WeightingFilterType: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def RegulationSettings(self) -> RegulatedFrequencySweepRegulationSettings: ...
    @property
    def RmsLevelAcPlusDc(self) -> XYGraph: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def Settling(self) -> RegulatedFrequencySweepSettlingParametersCollection: ...
    @property
    def ThdNLevel(self) -> XYGraph: ...
    @property
    def ThdNRatio(self) -> XYGraph: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class RegulatedFrequencySweepMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    RegulateDistortion : RegulatedFrequencySweepMode # 0
    RegulateLevel : RegulatedFrequencySweepMode # 1


class RegulatedFrequencySweepRegulationSettings:
    @property
    def AdjustSource(self) -> RegulationSource: ...
    @AdjustSource.setter
    def AdjustSource(self, value: RegulationSource) -> RegulationSource: ...
    @property
    def InitialSteps(self) -> int: ...
    @InitialSteps.setter
    def InitialSteps(self, value: int) -> int: ...
    @property
    def MeasureAllChannels(self) -> bool: ...
    @MeasureAllChannels.setter
    def MeasureAllChannels(self, value: bool) -> bool: ...
    @property
    def RegulationInput(self) -> APxInputSelection: ...
    @RegulationInput.setter
    def RegulationInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def StartValue(self) -> DoubleSetting: ...
    @property
    def StopValue(self) -> DoubleSetting: ...
    @property
    def TargetChannel(self) -> InputChannelIndex: ...
    @TargetChannel.setter
    def TargetChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def TargetType(self) -> RegulationTarget: ...
    @TargetType.setter
    def TargetType(self, value: RegulationTarget) -> RegulationTarget: ...
    @property
    def TargetValue(self) -> DoubleSetting: ...


class RegulatedFrequencySweepSettlingParametersCollection:
    @property
    def Level(self) -> SettlingParameters: ...
    @property
    def RmsLevelAcPlusDc(self) -> SettlingParameters: ...
    @property
    def ThdN(self) -> SettlingParameters: ...


class RegulationSettings:
    @property
    def AdjustSource(self) -> RegulationSource: ...
    @AdjustSource.setter
    def AdjustSource(self, value: RegulationSource) -> RegulationSource: ...
    @property
    def InitialSteps(self) -> int: ...
    @InitialSteps.setter
    def InitialSteps(self, value: int) -> int: ...
    @property
    def RegulationInput(self) -> APxInputSelection: ...
    @RegulationInput.setter
    def RegulationInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def StartValue(self) -> DoubleSetting: ...
    @property
    def StopValue(self) -> DoubleSetting: ...
    @property
    def TargetChannel(self) -> InputChannelIndex: ...
    @TargetChannel.setter
    def TargetChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def TargetChannelType(self) -> RegulationTargetChannel: ...
    @TargetChannelType.setter
    def TargetChannelType(self, value: RegulationTargetChannel) -> RegulationTargetChannel: ...
    @property
    def TargetType(self) -> RegulationTarget: ...
    @TargetType.setter
    def TargetType(self, value: RegulationTarget) -> RegulationTarget: ...
    @property
    def TargetValue(self) -> DoubleSetting: ...
    @property
    def TargetValueType(self) -> RegulationTargetValueType: ...
    @TargetValueType.setter
    def TargetValueType(self, value: RegulationTargetValueType) -> RegulationTargetValueType: ...


class RegulationSource(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    GeneratorFrequency : RegulationSource # 0
    DualSineFrequencyA : RegulationSource # 1
    DualSineFrequencyB : RegulationSource # 2
    ImdFrequency1 : RegulationSource # 3
    ImdFrequency2 : RegulationSource # 4
    DfdMeanFrequency : RegulationSource # 5
    DfdDiffFrequency : RegulationSource # 6
    GeneratorPhase : RegulationSource # 7
    GeneratorLevel : RegulationSource # 8
    GeneratorOffset : RegulationSource # 9
    OutputSampleRate : RegulationSource # 10
    RefSyncOutputRate : RegulationSource # 11
    JitterFrequency : RegulationSource # 12
    JitterLevelUi : RegulationSource # 13
    JitterLevelSec : RegulationSource # 14
    DcxDcv1Level : RegulationSource # 15
    DcxDcv2Level : RegulationSource # 16
    VBias : RegulationSource # 17


class RegulationTarget(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    AverageJitterLevel : RegulationTarget # 0
    BandpassLevel : RegulationTarget # 1
    CrestFactor : RegulationTarget # 2
    DcLevel : RegulationTarget # 3
    DcxVolts : RegulationTarget # 4
    DigitalInterfaceLevel : RegulationTarget # 5
    BitError : RegulationTarget # 6
    Frequency : RegulationTarget # 7
    Gain : RegulationTarget # 8
    ImdRatio : RegulationTarget # 9
    SampleRate : RegulationTarget # 10
    PeakLevel : RegulationTarget # 11
    Phase : RegulationTarget # 12
    DcxOhms : RegulationTarget # 13
    RmsLevel : RegulationTarget # 14
    LevelRatio : RegulationTarget # 15
    SinadRatio : RegulationTarget # 16
    ThdNLevel : RegulationTarget # 17
    ThdNRatio : RegulationTarget # 18


class RegulationTargetChannel(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    HighestMeasuredValue : RegulationTargetChannel # 0
    LowestMeasuredValue : RegulationTargetChannel # 1
    SpecificChannel : RegulationTargetChannel # 2


class RegulationTargetValueType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Target : RegulationTargetValueType # 0
    Maximum : RegulationTargetValueType # 1
    Minimum : RegulationTargetValueType # 2


class RegulationToleranceType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Auto : RegulationToleranceType # 0
    Custom : RegulationToleranceType # 1


class RelativeDataMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Normalized : RelativeDataMode # 0
    CenterLimits : RelativeDataMode # 1


class RelativeLevelXYGraph:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DataMode(self) -> RelativeDataMode: ...
    @DataMode.setter
    def DataMode(self, value: RelativeDataMode) -> RelativeDataMode: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def MaxLimitFrequency(self) -> DoubleSetting: ...
    @property
    def Message(self) -> str: ...
    @property
    def MinLimitFrequency(self) -> DoubleSetting: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def ReferenceFrequency(self) -> DoubleSetting: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def HasDataOnAxis(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> bool: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetData due to it being static, abstract and generic.

    GetData : GetData_MethodGroup
    class GetData_MethodGroup:
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> XYValues:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int) -> XYValues:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class ReportDefinition:
    @property
    def GraphHeight(self) -> float: ...
    @GraphHeight.setter
    def GraphHeight(self, value: float) -> float: ...
    @property
    def GraphWidth(self) -> float: ...
    @GraphWidth.setter
    def GraphWidth(self, value: float) -> float: ...
    @property
    def LogoAlignment(self) -> LogoAlignment: ...
    @LogoAlignment.setter
    def LogoAlignment(self, value: LogoAlignment) -> LogoAlignment: ...
    @property
    def LogoImageScalePercent(self) -> int: ...
    @LogoImageScalePercent.setter
    def LogoImageScalePercent(self, value: int) -> int: ...
    @property
    def Margins(self) -> ReportMargins: ...
    @property
    def Notes(self) -> str: ...
    @Notes.setter
    def Notes(self, value: str) -> str: ...
    @property
    def ShowDateAndTime(self) -> bool: ...
    @ShowDateAndTime.setter
    def ShowDateAndTime(self, value: bool) -> bool: ...
    @property
    def ShowDetails(self) -> bool: ...
    @ShowDetails.setter
    def ShowDetails(self, value: bool) -> bool: ...
    @property
    def ShowPageNumbers(self) -> bool: ...
    @ShowPageNumbers.setter
    def ShowPageNumbers(self, value: bool) -> bool: ...
    @property
    def ShowSummary(self) -> bool: ...
    @ShowSummary.setter
    def ShowSummary(self, value: bool) -> bool: ...
    @property
    def Title(self) -> str: ...
    @Title.setter
    def Title(self, value: str) -> str: ...
    def ClearLogoImage(self) -> None: ...
    # Skipped LoadLogoImage due to it being static, abstract and generic.

    LoadLogoImage : LoadLogoImage_MethodGroup
    class LoadLogoImage_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...



class ReportExportFormat(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Pdf : ReportExportFormat # 0
    Html : ReportExportFormat # 1
    Rtf : ReportExportFormat # 2
    Xlsx : ReportExportFormat # 3
    Xls : ReportExportFormat # 4
    Text : ReportExportFormat # 5
    Matlab : ReportExportFormat # 6


class ReportMargins:
    @property
    def Bottom(self) -> float: ...
    @Bottom.setter
    def Bottom(self, value: float) -> float: ...
    @property
    def Left(self) -> float: ...
    @Left.setter
    def Left(self, value: float) -> float: ...
    @property
    def Right(self) -> float: ...
    @Right.setter
    def Right(self, value: float) -> float: ...
    @property
    def Top(self) -> float: ...
    @Top.setter
    def Top(self, value: float) -> float: ...


class ReportType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    APxDefault : ReportType # 0
    MsWord : ReportType # 1


class ReportUpdateBehavior(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    MakeNew : ReportUpdateBehavior # 0
    Replace : ReportUpdateBehavior # 1
    Append : ReportUpdateBehavior # 2
    Update : ReportUpdateBehavior # 3


class ResidualDisplay(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : ResidualDisplay # 0
    x1 : ResidualDisplay # 1
    x10 : ResidualDisplay # 2
    x100 : ResidualDisplay # 3
    x1K : ResidualDisplay # 4
    x10K : ResidualDisplay # 5
    x100K : ResidualDisplay # 6


class ResistanceDcxMeasurement:
    @property
    def AveragingTime(self) -> DoubleSetting: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def DelayTime(self) -> DoubleSetting: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Ohms(self) -> MeterGraph: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def Range(self) -> DcxOhmRange: ...
    @Range.setter
    def Range(self, value: DcxOhmRange) -> DcxOhmRange: ...
    @property
    def Rate(self) -> DcxDmmRate: ...
    @Rate.setter
    def Rate(self, value: DcxDmmRate) -> DcxDmmRate: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class ResultDisplayType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Xy : ResultDisplayType # 0
    Meter : ResultDisplayType # 1
    VerticalBar : ResultDisplayType # 2
    DataTable : ResultDisplayType # 3


class ResultSortType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Default : ResultSortType # 0
    Alphabetical : ResultSortType # 1
    InputThenAlphabetical : ResultSortType # 2


class RiseTimeType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Minimum : RiseTimeType # 0
    CableSim : RiseTimeType # 1
    Custom : RiseTimeType # 2


class RubAndBuzzGraph:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def HPFactor(self) -> int: ...
    @HPFactor.setter
    def HPFactor(self, value: int) -> int: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def HasDataOnAxis(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> bool: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetData due to it being static, abstract and generic.

    GetData : GetData_MethodGroup
    class GetData_MethodGroup:
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> XYValues:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int) -> XYValues:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class SampleRateGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def Type(self) -> GeneratorType: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class SampleRateMeasurement:
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> SampleRateGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SampleRate(self) -> MeterGraph: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def Settling(self) -> SampleRateSettlingParametersCollection: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class SampleRateSettlingParametersCollection:
    @property
    def SampleRate(self) -> SettlingParameters: ...


class SaveAcquisitionToFileSettings:
    @property
    def ReplaceSavedFile(self) -> bool: ...
    @ReplaceSavedFile.setter
    def ReplaceSavedFile(self, value: bool) -> bool: ...
    @property
    def SaveAcquisitionToFile(self) -> bool: ...
    @SaveAcquisitionToFile.setter
    def SaveAcquisitionToFile(self, value: bool) -> bool: ...
    @property
    def SavedAcquisitionAudioType(self) -> RecordedAudioType: ...
    @SavedAcquisitionAudioType.setter
    def SavedAcquisitionAudioType(self, value: RecordedAudioType) -> RecordedAudioType: ...
    @property
    def SavedAcquisitionBitDepth(self) -> SavedAcquisitionBitDepthType: ...
    @SavedAcquisitionBitDepth.setter
    def SavedAcquisitionBitDepth(self, value: SavedAcquisitionBitDepthType) -> SavedAcquisitionBitDepthType: ...
    @property
    def SavedAcquisitionFileName(self) -> str: ...
    @SavedAcquisitionFileName.setter
    def SavedAcquisitionFileName(self, value: str) -> str: ...
    @property
    def SavedAcquisitionFolderName(self) -> str: ...
    @SavedAcquisitionFolderName.setter
    def SavedAcquisitionFolderName(self, value: str) -> str: ...


class SavedAcquisitionBitDepthType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    BitDepth16 : SavedAcquisitionBitDepthType # 0
    BitDepth24 : SavedAcquisitionBitDepthType # 1
    BitDepthAuto : SavedAcquisitionBitDepthType # 2


class SaveDataToWavFileSettings:
    @property
    def ReplaceSavedFile(self) -> bool: ...
    @ReplaceSavedFile.setter
    def ReplaceSavedFile(self, value: bool) -> bool: ...
    @property
    def SavedAcquisitionBitDepth(self) -> SavedAcquisitionBitDepthType: ...
    @SavedAcquisitionBitDepth.setter
    def SavedAcquisitionBitDepth(self, value: SavedAcquisitionBitDepthType) -> SavedAcquisitionBitDepthType: ...
    @property
    def SavedAcquisitionFileName(self) -> str: ...
    @SavedAcquisitionFileName.setter
    def SavedAcquisitionFileName(self, value: str) -> str: ...
    @property
    def SavedAcquisitionFolderName(self) -> str: ...
    @SavedAcquisitionFolderName.setter
    def SavedAcquisitionFolderName(self, value: str) -> str: ...


class SaveGeneratorFileSettings:
    @property
    def AudioType(self) -> FileAudioType: ...
    @AudioType.setter
    def AudioType(self, value: FileAudioType) -> FileAudioType: ...
    @property
    def BitDepth(self) -> WavExportBitDepth: ...
    @BitDepth.setter
    def BitDepth(self, value: WavExportBitDepth) -> WavExportBitDepth: ...
    @property
    def FileName(self) -> str: ...
    @FileName.setter
    def FileName(self, value: str) -> str: ...
    @property
    def FolderName(self) -> str: ...
    @FolderName.setter
    def FolderName(self, value: str) -> str: ...
    @property
    def ReplaceSavedFile(self) -> bool: ...
    @ReplaceSavedFile.setter
    def ReplaceSavedFile(self, value: bool) -> bool: ...


class SaveGeneratorWaveformStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    @property
    def WaveformSettings(self) -> SaveGeneratorFileSettings: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class SaveGeneratorWaveformStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> SaveGeneratorWaveformStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class ScaleDigitalOutputFreqBy(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    OutputRate : ScaleDigitalOutputFreqBy # 0
    FixedRate : ScaleDigitalOutputFreqBy # 1


class ScalePdmOutputFreqBy(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    FixedRate : ScalePdmOutputFreqBy # 0
    DecimatedRate : ScalePdmOutputFreqBy # 1


class ScaleSerialOutputFreqBy(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    FixedRate : ScaleSerialOutputFreqBy # 0
    MeasuredRate : ScaleSerialOutputFreqBy # 1


class ScopeSignalMonitorSettings:
    @property
    def Cycles(self) -> int: ...
    @Cycles.setter
    def Cycles(self, value: int) -> int: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def InterpolationOn(self) -> bool: ...
    @InterpolationOn.setter
    def InterpolationOn(self, value: bool) -> bool: ...
    @property
    def Residual(self) -> ResidualDisplay: ...
    @Residual.setter
    def Residual(self, value: ResidualDisplay) -> ResidualDisplay: ...
    @property
    def Scope(self) -> BaseXYGraph: ...


class ScopeSignalMonitorWindow:
    @property
    def Cycles(self) -> int: ...
    @Cycles.setter
    def Cycles(self, value: int) -> int: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def InterpolationOn(self) -> bool: ...
    @InterpolationOn.setter
    def InterpolationOn(self, value: bool) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Residual(self) -> ResidualDisplay: ...
    @Residual.setter
    def Residual(self, value: ResidualDisplay) -> ResidualDisplay: ...
    @property
    def Scope(self) -> BaseXYGraph: ...
    @property
    def UndockedHeight(self) -> int: ...
    @UndockedHeight.setter
    def UndockedHeight(self, value: int) -> int: ...
    @property
    def UndockedLeft(self) -> int: ...
    @UndockedLeft.setter
    def UndockedLeft(self, value: int) -> int: ...
    @property
    def UndockedTop(self) -> int: ...
    @UndockedTop.setter
    def UndockedTop(self, value: int) -> int: ...
    @property
    def UndockedWidth(self) -> int: ...
    @UndockedWidth.setter
    def UndockedWidth(self, value: int) -> int: ...
    def Dock(self) -> None: ...
    def Maximize(self) -> None: ...
    def Minimize(self) -> None: ...
    def Restore(self) -> None: ...
    def Settings(self, input: APxInputSelection) -> ScopeSignalMonitorSettings: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...


class SelectBluetoothDeviceType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    UseConnectedDevice : SelectBluetoothDeviceType # 0
    AlwaysChooseNewDevice : SelectBluetoothDeviceType # 1
    AutoConnect : SelectBluetoothDeviceType # 2


class SelectInputEqCurveStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Channel(self) -> MeasuredInputChannelIndex: ...
    @Channel.setter
    def Channel(self, value: MeasuredInputChannelIndex) -> MeasuredInputChannelIndex: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def EqNames(self) -> Array_1[str]: ...
    @property
    def Filename(self) -> str: ...
    @Filename.setter
    def Filename(self, value: str) -> str: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @Input.setter
    def Input(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def Invert(self) -> bool: ...
    @Invert.setter
    def Invert(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def ProjectItemName(self) -> str: ...
    @ProjectItemName.setter
    def ProjectItemName(self, value: str) -> str: ...
    @property
    def Selection(self) -> EqStepSelection: ...
    @Selection.setter
    def Selection(self, value: EqStepSelection) -> EqStepSelection: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...
    # Skipped LoadEqFromFile due to it being static, abstract and generic.

    LoadEqFromFile : LoadEqFromFile_MethodGroup
    class LoadEqFromFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, invertData: bool, replaceIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, invertData: bool, replaceIfExists: bool, renameIfInverted: bool) -> None:...



class SelectInputEqCurveStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> SelectInputEqCurveStep: ...
    def Add(self) -> SelectInputEqCurveStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class SendHdmiCecMessageStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def MessageFollower(self) -> CecDeviceType: ...
    @MessageFollower.setter
    def MessageFollower(self, value: CecDeviceType) -> CecDeviceType: ...
    @property
    def MessageOpcode(self) -> int: ...
    @MessageOpcode.setter
    def MessageOpcode(self, value: int) -> int: ...
    @property
    def MessageOperands(self) -> Array_1[int]: ...
    @MessageOperands.setter
    def MessageOperands(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def MessageType(self) -> CecMessageSendType: ...
    @MessageType.setter
    def MessageType(self, value: CecMessageSendType) -> CecMessageSendType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def SendFrom(self) -> CecMessageSendFrom: ...
    @SendFrom.setter
    def SendFrom(self, value: CecMessageSendFrom) -> CecMessageSendFrom: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class SendHdmiCecMessageStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> SendHdmiCecMessageStep: ...
    def Add(self) -> SendHdmiCecMessageStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class SendPdmControlCodeIndefinitelyStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def CodeValue(self) -> int: ...
    @CodeValue.setter
    def CodeValue(self, value: int) -> int: ...
    @property
    def Edge(self) -> PdmControlCodeEdge: ...
    @Edge.setter
    def Edge(self, value: PdmControlCodeEdge) -> PdmControlCodeEdge: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def MsbFirst(self) -> bool: ...
    @MsbFirst.setter
    def MsbFirst(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class SendPdmControlCodeIndefinitelyStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> SendPdmControlCodeIndefinitelyStep: ...
    def Add(self) -> SendPdmControlCodeIndefinitelyStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class SendPdmControlCodesStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def Edge(self) -> PdmControlCodeEdge: ...
    @Edge.setter
    def Edge(self, value: PdmControlCodeEdge) -> PdmControlCodeEdge: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def MsbFirst(self) -> bool: ...
    @MsbFirst.setter
    def MsbFirst(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def Add(self, code: int, repetitions: int) -> None: ...
    def CopyToClipboard(self) -> bool: ...
    def GetCode(self, index: int) -> int: ...
    def GetRepetitions(self, index: int) -> int: ...
    def MoveTo(self, index: int) -> None: ...
    def SetCode(self, index: int, code: int) -> None: ...
    def SetRepetitions(self, index: int, count: int) -> None: ...
    # Skipped Delete due to it being static, abstract and generic.

    Delete : Delete_MethodGroup
    class Delete_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, index: int) -> None:...



class SendPdmControlCodesStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> SendPdmControlCodesStep: ...
    def Add(self) -> SendPdmControlCodesStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class SensitivityMeterDataTrace:
    @property
    def ComparisonChannel(self) -> InputChannelIndex: ...
    @ComparisonChannel.setter
    def ComparisonChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def ReferenceChannel(self) -> InputChannelIndex: ...
    @ReferenceChannel.setter
    def ReferenceChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    def Delete(self) -> None: ...


class SensitivityMeterDataTraceCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> SensitivityMeterDataTrace: ...
    def Add(self) -> SensitivityMeterDataTrace: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Remove(self, index: int) -> None: ...


class SensitivityMeterResult:
    @property
    def Axis(self) -> GraphAxis: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Limits(self) -> MeterLimits: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def Source(self) -> Graph: ...
    @property
    def TargetResultName(self) -> str: ...
    @TargetResultName.setter
    def TargetResultName(self, value: str) -> str: ...
    @property
    def TargetResultNames(self) -> Array_1[str]: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def Traces(self) -> SensitivityMeterDataTraceCollection: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    def CopyToClipboard(self) -> None: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetTraceColor(self, traceIndex: int) -> Color: ...
    def GetTraceName(self, traceIndex: int) -> str: ...
    def ResetTraceStyle(self, traceIndex: int) -> None: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetTraceColor(self, traceIndex: int, color: Color) -> None: ...
    def SetTraceName(self, traceIndex: int, name: str) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, unit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool]) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool], append: bool) -> None:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[str]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[str]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[float]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[float]:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...



class SensitivityXYResult:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def Source(self) -> Graph: ...
    @property
    def TargetResultName(self) -> str: ...
    @TargetResultName.setter
    def TargetResultName(self, value: str) -> str: ...
    @property
    def TargetResultNames(self) -> Array_1[str]: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def Traces(self) -> CompareXYDataTraceCollection: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class Sequence(IEnumerable):
    @property
    def AuxControlInForDialogButtons(self) -> SequenceAuxControlInputSettings: ...
    @property
    def CloseScoDelay(self) -> DoubleSetting: ...
    @property
    def Count(self) -> int: ...
    @property
    def DataOutput(self) -> SequenceDataOutput: ...
    @property
    def DigitalInterfaceSyncDelay(self) -> DoubleSetting: ...
    @property
    def ExecutionTime(self) -> TimeSpan: ...
    @property
    def FailedResults(self) -> FailedSequenceResultCollection: ...
    @property
    def FailMessage(self) -> str: ...
    @FailMessage.setter
    def FailMessage(self, value: str) -> str: ...
    @property
    def Item(self) -> SignalPath: ...
    @property
    def Item(self) -> SignalPath: ...
    @property
    def LastStartTime(self) -> DateTime: ...
    @property
    def OpenScoDelay(self) -> DoubleSetting: ...
    @property
    def Passed(self) -> bool: ...
    @property
    def PassMessage(self) -> str: ...
    @PassMessage.setter
    def PassMessage(self, value: str) -> str: ...
    @property
    def PostSequenceSteps(self) -> SequenceStepCollectionBase: ...
    @property
    def PreSequenceSteps(self) -> SequenceStepCollectionBase: ...
    @property
    def ProductionTest(self) -> bool: ...
    @ProductionTest.setter
    def ProductionTest(self, value: bool) -> bool: ...
    @property
    def ProductionTestSettings(self) -> ProductionTestSettings: ...
    @property
    def Report(self) -> SequenceReport: ...
    @property
    def Results(self) -> SequenceSignalPathResultCollection: ...
    @property
    def SampleRateChangeDelay(self) -> DoubleSetting: ...
    @property
    def Sequences(self) -> SequenceCollection: ...
    @property
    def ShowApplicationWindow(self) -> bool: ...
    @ShowApplicationWindow.setter
    def ShowApplicationWindow(self, value: bool) -> bool: ...
    @property
    def ShowPassFailMessage(self) -> bool: ...
    @ShowPassFailMessage.setter
    def ShowPassFailMessage(self, value: bool) -> bool: ...
    @property
    def Status(self) -> SequenceCompletedStatus: ...
    @property
    def StatusMessage(self) -> str: ...
    def ApplyCheckedState(self, checkedState: SequenceCheckedState) -> None: ...
    def ClearFailImage(self) -> None: ...
    def ClearPassImage(self) -> None: ...
    def GetCheckedState(self) -> SequenceCheckedState: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def LoadFailImage(self, fileName: str, replaceIfExists: bool) -> None: ...
    def LoadPassImage(self, fileName: str, replaceIfExists: bool) -> None: ...
    def RunProductionTestSequence(self, sequenceName: str, password: str) -> None: ...
    def StartFromMeasurement(self, signalPathName: str, measurementName: str) -> None: ...
    # Skipped GetMeasurement due to it being static, abstract and generic.

    GetMeasurement : GetMeasurement_MethodGroup
    class GetMeasurement_MethodGroup:
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementIndex: int) -> SequenceMeasurement:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementName: str) -> SequenceMeasurement:...

    # Skipped GetSignalPath due to it being static, abstract and generic.

    GetSignalPath : GetSignalPath_MethodGroup
    class GetSignalPath_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> SignalPath:...
        @typing.overload
        def __call__(self, signalPathName: str) -> SignalPath:...

    # Skipped Run due to it being static, abstract and generic.

    Run : Run_MethodGroup
    class Run_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, deviceId: str) -> None:...



class SequenceAuxControlInputSettings:
    @property
    def AuxControlInForCancelAbortButton(self) -> AuxControl: ...
    @property
    def AuxControlInForCancelAbortEnabled(self) -> bool: ...
    @AuxControlInForCancelAbortEnabled.setter
    def AuxControlInForCancelAbortEnabled(self, value: bool) -> bool: ...
    @property
    def AuxControlInForFailIgnoreButton(self) -> AuxControl: ...
    @property
    def AuxControlInForFailIgnoreEnabled(self) -> bool: ...
    @AuxControlInForFailIgnoreEnabled.setter
    def AuxControlInForFailIgnoreEnabled(self, value: bool) -> bool: ...
    @property
    def AuxControlInForOkPassButton(self) -> AuxControl: ...
    @property
    def AuxControlInForOkPassEnabled(self) -> bool: ...
    @AuxControlInForOkPassEnabled.setter
    def AuxControlInForOkPassEnabled(self, value: bool) -> bool: ...
    @property
    def AuxControlInForRetryButton(self) -> AuxControl: ...
    @property
    def AuxControlInForRetryEnabled(self) -> bool: ...
    @AuxControlInForRetryEnabled.setter
    def AuxControlInForRetryEnabled(self, value: bool) -> bool: ...


class SequenceCheckedState:
    # Skipped GetCheckedState due to it being static, abstract and generic.

    GetCheckedState : GetCheckedState_MethodGroup
    class GetCheckedState_MethodGroup:
        @typing.overload
        def __call__(self, signalPathIndex: int) -> bool:...
        @typing.overload
        def __call__(self, signalPathName: str) -> bool:...
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementIndex: int) -> bool:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementName: str) -> bool:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementName: str, stepName: str) -> bool:...

    # Skipped SetCheckedState due to it being static, abstract and generic.

    SetCheckedState : SetCheckedState_MethodGroup
    class SetCheckedState_MethodGroup:
        @typing.overload
        def __call__(self, signalPathIndex: int, checkedState: bool) -> None:...
        @typing.overload
        def __call__(self, signalPathName: str, checkedState: bool) -> None:...
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementIndex: int, checkedState: bool) -> None:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementName: str, checkedState: bool) -> None:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementName: str, stepName: str, checkedState: bool) -> None:...



class SequenceCollection(IEnumerable):
    @property
    def ActiveSequence(self) -> SequenceSettings: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> SequenceSettings: ...
    @property
    def Item(self) -> SequenceSettings: ...
    def Activate(self, sequenceName: str) -> None: ...
    def Add(self, name: str) -> SequenceSettings: ...
    def GetEnumerator(self) -> IEnumerator: ...
    # Skipped Delete due to it being static, abstract and generic.

    Delete : Delete_MethodGroup
    class Delete_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, sequenceName: str) -> None:...



class SequenceCompletedStatus(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    SequenceNotStarted : SequenceCompletedStatus # 0
    SequenceCompleted : SequenceCompletedStatus # 1
    SequenceCancelledByUser : SequenceCompletedStatus # 2
    SequenceAbortedByLimitFailure : SequenceCompletedStatus # 3
    SequenceAbortedByError : SequenceCompletedStatus # 4
    SequenceCompletedWithErrors : SequenceCompletedStatus # 5
    SequenceAbortedByRegulationFailure : SequenceCompletedStatus # 6
    SequenceFailedByUser : SequenceCompletedStatus # 7
    SequenceFailedToSetReferences : SequenceCompletedStatus # 8


class SequenceDataOutput:
    @property
    def MeterReadingsFileName(self) -> str: ...
    @MeterReadingsFileName.setter
    def MeterReadingsFileName(self, value: str) -> str: ...
    @property
    def WriteMeterReadingsToCsvFile(self) -> bool: ...
    @WriteMeterReadingsToCsvFile.setter
    def WriteMeterReadingsToCsvFile(self, value: bool) -> bool: ...


class SequenceEndAuxControlSettings:
    @property
    def AuxControlOutSettingsForAllMeasurementsPassed(self) -> AuxControl: ...
    @property
    def AuxControlOutSettingsForAnyMeasurementFailed(self) -> AuxControl: ...
    @property
    def AuxControlOutSettingsForSequenceCancelled(self) -> AuxControl: ...


class SequenceEndSettings:
    pass


class SequenceFailBehavior(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    EndSequence : SequenceFailBehavior # 0
    AllowRetry : SequenceFailBehavior # 1


class SequenceMeasurement:
    @property
    def AutoRetryFailureBehavior(self) -> AutoRetryMeasurementFailureBehavior: ...
    @AutoRetryFailureBehavior.setter
    def AutoRetryFailureBehavior(self, value: AutoRetryMeasurementFailureBehavior) -> AutoRetryMeasurementFailureBehavior: ...
    @property
    def AutoRetryMaxAttempts(self) -> int: ...
    @AutoRetryMaxAttempts.setter
    def AutoRetryMaxAttempts(self, value: int) -> int: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def FailureBehavior(self) -> MeasurementFailureBehavior: ...
    @FailureBehavior.setter
    def FailureBehavior(self, value: MeasurementFailureBehavior) -> MeasurementFailureBehavior: ...
    @property
    def HasSequenceResults(self) -> bool: ...
    @property
    def Index(self) -> int: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def ResultGraphs(self) -> SequenceResultGraphCollection: ...
    @property
    def SequenceResults(self) -> SequenceResultCollection: ...
    @property
    def SequenceSteps(self) -> SequenceStepCollection: ...
    def Run(self) -> None: ...
    def Show(self) -> None: ...


class SequencePassBehavior(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    EndSequence : SequencePassBehavior # 0
    WaitForNextDevice : SequencePassBehavior # 1
    AutomaticallyRestartSequence : SequencePassBehavior # 2


class SequenceProgram:
    @property
    def ActualOutput(self) -> str: ...
    @property
    def Arguments(self) -> str: ...
    @property
    def Command(self) -> str: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def ExpectedOutput(self) -> str: ...
    @property
    def RanToCompletion(self) -> bool: ...
    @property
    def WaitForExitBehavior(self) -> ProgramStepWaitBehavior: ...
    @property
    def WorkingDirectory(self) -> str: ...


class SequenceReport:
    @property
    def AutoSaveReport(self) -> bool: ...
    @AutoSaveReport.setter
    def AutoSaveReport(self, value: bool) -> bool: ...
    @property
    def AutoSaveReportFileFormat(self) -> ReportExportFormat: ...
    @AutoSaveReportFileFormat.setter
    def AutoSaveReportFileFormat(self, value: ReportExportFormat) -> ReportExportFormat: ...
    @property
    def AutoSaveReportFileLocation(self) -> str: ...
    @AutoSaveReportFileLocation.setter
    def AutoSaveReportFileLocation(self, value: str) -> str: ...
    @property
    def AutoSaveReportFileNamePrefix(self) -> str: ...
    @AutoSaveReportFileNamePrefix.setter
    def AutoSaveReportFileNamePrefix(self, value: str) -> str: ...
    @property
    def AutoSaveReportFileNameType(self) -> AutoSaveReportFileNameType: ...
    @AutoSaveReportFileNameType.setter
    def AutoSaveReportFileNameType(self, value: AutoSaveReportFileNameType) -> AutoSaveReportFileNameType: ...
    @property
    def AutoSaveUpdateBehavior(self) -> ReportUpdateBehavior: ...
    @AutoSaveUpdateBehavior.setter
    def AutoSaveUpdateBehavior(self, value: ReportUpdateBehavior) -> ReportUpdateBehavior: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def CustomReportLayout(self) -> str: ...
    @CustomReportLayout.setter
    def CustomReportLayout(self, value: str) -> str: ...
    @property
    def CustomReportLayouts(self) -> Array_1[str]: ...
    @property
    def Definition(self) -> ReportDefinition: ...
    @property
    def IncludeApxInstrumentInfo(self) -> bool: ...
    @IncludeApxInstrumentInfo.setter
    def IncludeApxInstrumentInfo(self, value: bool) -> bool: ...
    @property
    def ReportType(self) -> ReportType: ...
    @ReportType.setter
    def ReportType(self, value: ReportType) -> ReportType: ...
    @property
    def ShowAutoSavedReport(self) -> bool: ...
    @ShowAutoSavedReport.setter
    def ShowAutoSavedReport(self, value: bool) -> bool: ...
    @property
    def ShowFailedMeasurementResultsOnly(self) -> bool: ...
    @ShowFailedMeasurementResultsOnly.setter
    def ShowFailedMeasurementResultsOnly(self, value: bool) -> bool: ...
    def ExportHtml(self, fileName: str) -> None: ...
    def ExportMat(self, fileName: str) -> None: ...
    def ExportPdf(self, fileName: str) -> None: ...
    def ExportRtf(self, fileName: str) -> None: ...
    def ExportXls(self, fileName: str) -> None: ...
    def LoadCustomReportLayout(self, layoutFileName: str) -> None: ...
    def Reset(self) -> None: ...
    # Skipped ExportCustom due to it being static, abstract and generic.

    ExportCustom : ExportCustom_MethodGroup
    class ExportCustom_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, updateBehavior: ReportUpdateBehavior) -> None:...
        @typing.overload
        def __call__(self, fileName: str, append: bool) -> None:...

    # Skipped ExportText due to it being static, abstract and generic.

    ExportText : ExportText_MethodGroup
    class ExportText_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, append: bool) -> None:...



class SequenceResult:
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def ErrorMessage(self) -> str: ...
    @property
    def HasErrorMessage(self) -> bool: ...
    @property
    def HasMeterValues(self) -> bool: ...
    @property
    def HasRawTextResults(self) -> bool: ...
    @property
    def HasThieleSmallValues(self) -> bool: ...
    @property
    def HasXYValues(self) -> bool: ...
    @property
    def HasXYYValues(self) -> bool: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def LeftUnit(self) -> str: ...
    @property
    def LowerLimitCheckEnabled(self) -> bool: ...
    @property
    def MeasurementName(self) -> str: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def MeterUnit(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def PassedLowerLimitCheck(self) -> bool: ...
    @property
    def PassedResult(self) -> bool: ...
    @property
    def PassedUpperLimitCheck(self) -> bool: ...
    @property
    def ResultType(self) -> MeasurementResultType: ...
    @property
    def RightUnit(self) -> str: ...
    @property
    def SignalPathName(self) -> str: ...
    @property
    def UpperLimitCheckEnabled(self) -> bool: ...
    @property
    def UserActive(self) -> bool: ...
    @property
    def UserPassed(self) -> bool: ...
    @property
    def XUnit(self) -> str: ...
    @property
    def YUnit(self) -> str: ...
    def ExportData(self, fileName: str) -> None: ...
    def GetMeterLowerLimitText(self) -> Array_1[str]: ...
    def GetMeterLowerLimitValues(self) -> Array_1[float]: ...
    def GetMeterReadingNames(self) -> Array_1[str]: ...
    def GetMeterText(self) -> Array_1[str]: ...
    def GetMeterUpperLimitText(self) -> Array_1[str]: ...
    def GetMeterUpperLimitValues(self) -> Array_1[float]: ...
    def GetRawTextResults(self) -> Array_1[str]: ...
    def GetThieleSmallLowerLimitValue(self, parameter: ThieleSmallParameter) -> float: ...
    def GetThieleSmallUpperLimitValue(self, parameter: ThieleSmallParameter) -> float: ...
    def GetThieleSmallValues(self, parameter: ThieleSmallParameter) -> Array_1[float]: ...
    def GetThieleSmallValuesText(self, parameter: ThieleSmallParameter) -> Array_1[str]: ...
    def GetXYChannelCount(self, axis: VerticalAxis) -> int: ...
    def GetXYChannelNames(self, axis: VerticalAxis) -> Array_1[str]: ...
    def GetXYLowerLimit(self, axis: VerticalAxis) -> SequenceResultXyGraphLimit: ...
    def GetXYUpperLimit(self, axis: VerticalAxis) -> SequenceResultXyGraphLimit: ...
    def HasData(self, dataType: SourceDataType, index: int) -> bool: ...
    def LimitCheckEnabled(self, limit: LimitType, axis: VerticalAxis) -> bool: ...
    def PassedLimitCheck(self, limit: LimitType, axis: VerticalAxis) -> bool: ...
    # Skipped GetMeterValues due to it being static, abstract and generic.

    GetMeterValues : GetMeterValues_MethodGroup
    class GetMeterValues_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[float]:...
        @typing.overload
        def __call__(self, readingName: str) -> Array_1[float]:...

    # Skipped GetThieleSmallValue due to it being static, abstract and generic.

    GetThieleSmallValue : GetThieleSmallValue_MethodGroup
    class GetThieleSmallValue_MethodGroup:
        @typing.overload
        def __call__(self, parameter: ThieleSmallParameter) -> float:...
        @typing.overload
        def __call__(self, driverIndex: int, parameter: ThieleSmallParameter) -> float:...

    # Skipped GetThieleSmallValueText due to it being static, abstract and generic.

    GetThieleSmallValueText : GetThieleSmallValueText_MethodGroup
    class GetThieleSmallValueText_MethodGroup:
        @typing.overload
        def __call__(self, parameter: ThieleSmallParameter) -> str:...
        @typing.overload
        def __call__(self, driverIndex: int, parameter: ThieleSmallParameter) -> str:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis, dataType: SourceDataType, dataIndex: int) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis, dataType: SourceDataType, dataIndex: int) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis, dataType: SourceDataType, dataIndex: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis, dataType: SourceDataType, dataIndex: int) -> Array_1[float]:...

    # Skipped GetXYText due to it being static, abstract and generic.

    GetXYText : GetXYText_MethodGroup
    class GetXYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis, dataType: SourceDataType, dataIndex: int) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis, dataType: SourceDataType, dataIndex: int) -> Array_1[GraphStringPoint]:...

    # Skipped GetXYValues due to it being static, abstract and generic.

    GetXYValues : GetXYValues_MethodGroup
    class GetXYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis, dataType: SourceDataType, dataIndex: int) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis, dataType: SourceDataType, dataIndex: int) -> Array_1[GraphPoint]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis, dataType: SourceDataType, dataIndex: int) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis, dataType: SourceDataType, dataIndex: int) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis, dataType: SourceDataType, dataIndex: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis, dataType: SourceDataType, dataIndex: int) -> Array_1[float]:...

    # Skipped PassedLimitCheckOnChannel due to it being static, abstract and generic.

    PassedLimitCheckOnChannel : PassedLimitCheckOnChannel_MethodGroup
    class PassedLimitCheckOnChannel_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, limit: LimitType, axis: VerticalAxis) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, limit: LimitType, axis: VerticalAxis) -> bool:...

    # Skipped PassedLowerLimitCheckOnChannel due to it being static, abstract and generic.

    PassedLowerLimitCheckOnChannel : PassedLowerLimitCheckOnChannel_MethodGroup
    class PassedLowerLimitCheckOnChannel_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped PassedThieleSmallLowerLimit due to it being static, abstract and generic.

    PassedThieleSmallLowerLimit : PassedThieleSmallLowerLimit_MethodGroup
    class PassedThieleSmallLowerLimit_MethodGroup:
        @typing.overload
        def __call__(self, parameter: ThieleSmallParameter) -> bool:...
        @typing.overload
        def __call__(self, driverIndex: int, parameter: ThieleSmallParameter) -> bool:...

    # Skipped PassedThieleSmallUpperLimit due to it being static, abstract and generic.

    PassedThieleSmallUpperLimit : PassedThieleSmallUpperLimit_MethodGroup
    class PassedThieleSmallUpperLimit_MethodGroup:
        @typing.overload
        def __call__(self, parameter: ThieleSmallParameter) -> bool:...
        @typing.overload
        def __call__(self, driverIndex: int, parameter: ThieleSmallParameter) -> bool:...

    # Skipped PassedUpperLimitCheckOnChannel due to it being static, abstract and generic.

    PassedUpperLimitCheckOnChannel : PassedUpperLimitCheckOnChannel_MethodGroup
    class PassedUpperLimitCheckOnChannel_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...



class SequenceResultCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def ErrorMessage(self) -> str: ...
    @property
    def HasErrors(self) -> bool: ...
    @property
    def Item(self) -> SequenceResult: ...
    @property
    def Item(self) -> SequenceResult: ...
    @property
    def Item(self) -> SequenceResult: ...
    @property
    def MeasurementName(self) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SignalPathName(self) -> str: ...
    def GetEnumerator(self) -> IEnumerator: ...
    # Skipped ContainsResult due to it being static, abstract and generic.

    ContainsResult : ContainsResult_MethodGroup
    class ContainsResult_MethodGroup:
        @typing.overload
        def __call__(self, resultName: str) -> bool:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> bool:...



class SequenceResultGraph:
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...


class SequenceResultGraphCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> SequenceResultGraph: ...
    def GetEnumerator(self) -> IEnumerator: ...


class SequenceResultXyGraphLimit:
    @property
    def ChannelCount(self) -> int: ...
    @property
    def PassedLimitCheck(self) -> bool: ...
    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> Array_1[float]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> Array_1[float]:...

    # Skipped HasLimitOnChannel due to it being static, abstract and generic.

    HasLimitOnChannel : HasLimitOnChannel_MethodGroup
    class HasLimitOnChannel_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped PassedLimitCheckOnChannel due to it being static, abstract and generic.

    PassedLimitCheckOnChannel : PassedLimitCheckOnChannel_MethodGroup
    class PassedLimitCheckOnChannel_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...



class SequenceSettings:
    @property
    def AllMeasurementsPassedBehavior(self) -> SequencePassBehavior: ...
    @AllMeasurementsPassedBehavior.setter
    def AllMeasurementsPassedBehavior(self, value: SequencePassBehavior) -> SequencePassBehavior: ...
    @property
    def AnyMeasurementFailedBehavior(self) -> SequenceFailBehavior: ...
    @AnyMeasurementFailedBehavior.setter
    def AnyMeasurementFailedBehavior(self, value: SequenceFailBehavior) -> SequenceFailBehavior: ...
    @property
    def ClearOperatorResponseVariablesOnRetry(self) -> bool: ...
    @ClearOperatorResponseVariablesOnRetry.setter
    def ClearOperatorResponseVariablesOnRetry(self, value: bool) -> bool: ...
    @property
    def EndAuxControlSettings(self) -> SequenceEndAuxControlSettings: ...
    @property
    def MaxRetries(self) -> int: ...
    @MaxRetries.setter
    def MaxRetries(self, value: int) -> int: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def RequiresPassword(self) -> bool: ...
    @RequiresPassword.setter
    def RequiresPassword(self, value: bool) -> bool: ...
    @property
    def SequenceLogFileName(self) -> str: ...
    @SequenceLogFileName.setter
    def SequenceLogFileName(self, value: str) -> str: ...
    @property
    def StartAuxControlSettings(self) -> SequenceStartAuxControlSettings: ...
    @property
    def Statistics(self) -> SequenceStatisticsCollection: ...
    @property
    def Variables(self) -> SequenceVariablesCollection: ...
    @property
    def WriteSequenceLogFile(self) -> bool: ...
    @WriteSequenceLogFile.setter
    def WriteSequenceLogFile(self, value: bool) -> bool: ...
    def Activate(self) -> None: ...
    def MoveDown(self) -> None: ...
    def MoveUp(self) -> None: ...


class SequenceSignalPathResultCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> SequenceResult: ...
    def GetEnumerator(self) -> IEnumerator: ...
    # Skipped GetResults due to it being static, abstract and generic.

    GetResults : GetResults_MethodGroup
    class GetResults_MethodGroup:
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementIndex: int) -> SequenceResultCollection:...
        @typing.overload
        def __call__(self, signalPathIndex: int, measurementName: str) -> SequenceResultCollection:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementIndex: int) -> SequenceResultCollection:...
        @typing.overload
        def __call__(self, signalPathName: str, measurementName: str) -> SequenceResultCollection:...



class SequenceStartAuxControlSettings:
    @property
    def AuxControlInSettingsForSequenceStart(self) -> AuxControl: ...
    @property
    def AuxControlOutSettingsForSequenceStart(self) -> AuxControl: ...
    @property
    def StartSequenceOnAuxControlIn(self) -> bool: ...
    @StartSequenceOnAuxControlIn.setter
    def StartSequenceOnAuxControlIn(self, value: bool) -> bool: ...


class SequenceStartSettings:
    pass


class SequenceStatistic:
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Id(self) -> SequenceStatisticType: ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> str: ...


class SequenceStatisticsCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> SequenceStatistic: ...
    @property
    def Item(self) -> SequenceStatistic: ...
    def GetEnumerator(self) -> IEnumerator: ...


class SequenceStatisticType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    CycleCount : SequenceStatisticType # 0
    PassedCount : SequenceStatisticType # 1
    FailedCount : SequenceStatisticType # 2
    FailedDeviceCount : SequenceStatisticType # 3
    PassedOnFirstCycleCount : SequenceStatisticType # 4
    DevicesTested : SequenceStatisticType # 5
    FirstPassYield : SequenceStatisticType # 6
    Yield : SequenceStatisticType # 7
    DeviceRetryCount : SequenceStatisticType # 8
    TotalRetryCount : SequenceStatisticType # 9
    ErrorCount : SequenceStatisticType # 10
    TotalRunTime : SequenceStatisticType # 11
    MinRunTime : SequenceStatisticType # 12
    MaxRunTime : SequenceStatisticType # 13
    AvgRunTime : SequenceStatisticType # 14


class SequenceStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class SequenceStepCheckedState:
    # Skipped GetCheckedState due to it being static, abstract and generic.

    GetCheckedState : GetCheckedState_MethodGroup
    class GetCheckedState_MethodGroup:
        @typing.overload
        def __call__(self, stepIndex: int) -> bool:...
        @typing.overload
        def __call__(self, stepName: str) -> bool:...

    # Skipped SetCheckedState due to it being static, abstract and generic.

    SetCheckedState : SetCheckedState_MethodGroup
    class SetCheckedState_MethodGroup:
        @typing.overload
        def __call__(self, stepIndex: int, checkedState: bool) -> None:...
        @typing.overload
        def __call__(self, stepName: str, checkedState: bool) -> None:...



class SequenceStepCollection(IEnumerable):
    @property
    def A2dpSinkSteps(self) -> A2dpSinkStepCollection: ...
    @property
    def A2dpSourceSteps(self) -> A2dpSourceStepCollection: ...
    @property
    def AppendedMeasurementSteps(self) -> AppendedMeasurementStepCollection: ...
    @property
    def AvrcpSetAbsoluteVolumeSteps(self) -> AvrcpSetAbsoluteVolumeStepCollection: ...
    @property
    def CalibrateFromTedsAcousticSteps(self) -> CalibrateFromTedsAcousticStepCollection: ...
    @property
    def CalibrateFromTedsSteps(self) -> CalibrateFromTedsStepCollection: ...
    @property
    def ClearBluetoothDeviceListSteps(self) -> ClearBluetoothDeviceListStepCollection: ...
    @property
    def ClearVariableValueSteps(self) -> ClearVariableValueStepCollection: ...
    @property
    def ConnectBluetoothDeviceSteps(self) -> ConnectBluetoothDeviceStepCollection: ...
    @property
    def Count(self) -> int: ...
    @property
    def DelaySteps(self) -> DelayStepCollection: ...
    @property
    def DigitalSyncDelaySteps(self) -> DigitalSyncDelayStepCollection: ...
    @property
    def DisconnectBluetoothDeviceSteps(self) -> DisconnectBluetoothDeviceStepCollection: ...
    @property
    def EnableGeneratorSteps(self) -> EnableGeneratorStepCollection: ...
    @property
    def EnableVBiasSteps(self) -> EnableVBiasStepCollection: ...
    @property
    def EnableWidebandSpeechSteps(self) -> EnableWidebandSpeechStepCollection: ...
    @property
    def ExportResultDataSteps(self) -> ExportResultDataStepCollection: ...
    @property
    def ExportWavFileSteps(self) -> ExportWavFileStepCollection: ...
    @property
    def HfpAudioGatewayATCommandSteps(self) -> HfpAudioGatewayATCommandStepCollection: ...
    @property
    def HfpAudioGatewaySteps(self) -> HfpAudioGatewayStepCollection: ...
    @property
    def HfpHandsFreeCommandSteps(self) -> HfpHandsFreeCommandStepCollection: ...
    @property
    def HfpHandsFreeSteps(self) -> HfpHandsFreeStepCollection: ...
    @property
    def HspAudioGatewayATCommandSteps(self) -> HspAudioGatewayATCommandStepCollection: ...
    @property
    def HspAudioGatewaySteps(self) -> HspAudioGatewayStepCollection: ...
    @property
    def HspHeadsetATCommandSteps(self) -> HspHeadsetATCommandStepCollection: ...
    @property
    def HspHeadsetSteps(self) -> HspHeadsetStepCollection: ...
    @property
    def ImportAmplifierCorrectionCurveSteps(self) -> ImportAmplifierCorrectionCurveStepCollection: ...
    @property
    def ImportGeneratorEqCurveSteps(self) -> ImportGeneratorEqCurveStepCollection: ...
    @property
    def ImportLimitsDataSteps(self) -> ImportLimitsDataStepCollection: ...
    @property
    def ImportOutputEqCurveSteps(self) -> ImportOutputEqCurveStepCollection: ...
    @property
    def ImportResultDataSteps(self) -> ImportResultDataStepCollection: ...
    @property
    def InputSteps(self) -> InputStepCollection: ...
    @property
    def Item(self) -> SequenceStep: ...
    @property
    def MakeResultVisibleSteps(self) -> MakeResultVisibleStepCollection: ...
    @property
    def MeasurementSteps(self) -> MeasurementStepCollection: ...
    @property
    def ProgramSteps(self) -> ProgramStepCollection: ...
    @property
    def PromptSteps(self) -> PromptStepCollection: ...
    @property
    def RefreshDefinedResultsSteps(self) -> RefreshDefinedResultsStepCollection: ...
    @property
    def SaveGeneratorWaveformSteps(self) -> SaveGeneratorWaveformStepCollection: ...
    @property
    def SelectInputEqCurveSteps(self) -> SelectInputEqCurveStepCollection: ...
    @property
    def SendHdmiCecMessageSteps(self) -> SendHdmiCecMessageStepCollection: ...
    @property
    def SendPdmControlCodeIndefinitelySteps(self) -> SendPdmControlCodeIndefinitelyStepCollection: ...
    @property
    def SendPdmControlCodesSteps(self) -> SendPdmControlCodesStepCollection: ...
    @property
    def SetAuxControlOutputSteps(self) -> SetAuxControlOutputStepCollection: ...
    @property
    def SetBluetoothTransmitPowerSteps(self) -> SetBluetoothTransmitPowerStepCollection: ...
    @property
    def SetDcxControlOutputSteps(self) -> SetDcxControlOutputStepCollection: ...
    @property
    def SetDcxDcvOutputSteps(self) -> SetDcxDcvOutputStepCollection: ...
    @property
    def SetDeviceDelaySteps(self) -> SetDeviceDelayStepCollection: ...
    @property
    def SetHeadphoneAmpOutputSteps(self) -> SetHeadphoneAmpOutputStepCollection: ...
    @property
    def SetPowerAmpOutputSteps(self) -> SetPowerAmpOutputStepCollection: ...
    @property
    def SetSwitcherConfigurationSteps(self) -> SetSwitcherConfigurationStepCollection: ...
    @property
    def SetTransducerInputSteps(self) -> SetTransducerInputStepCollection: ...
    @property
    def SetTransducerOutputSteps(self) -> SetTransducerOutputStepCollection: ...
    @property
    def SetVddOutputSteps(self) -> SetVddOutputStepCollection: ...
    @property
    def StartAnalogSineWaveGeneratorSteps(self) -> StartAnalogSineWaveGeneratorStepCollection: ...
    @property
    def StopAnalogSineWaveGeneratorSteps(self) -> StopAnalogSineWaveGeneratorStepCollection: ...
    @property
    def StopSendingPdmControlCodeSteps(self) -> StopSendingPdmControlCodeStepCollection: ...
    @property
    def UserEvaluationOfResultSteps(self) -> UserEvaluationOfResultStepCollection: ...
    def ApplyCheckedState(self, checkedState: SequenceStepCheckedState) -> None: ...
    def CanAddStep(self, stepType: SequenceStepType) -> bool: ...
    def CopyCheckedStepsToClipboard(self) -> None: ...
    def GetCheckedState(self) -> SequenceStepCheckedState: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def PasteStepsFromClipboard(self, insertIndex: int) -> None: ...


class SequenceStepCollectionBase(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def DelaySteps(self) -> DelayStepCollection: ...
    @property
    def Item(self) -> SequenceStep: ...
    @property
    def ProgramSteps(self) -> ProgramStepCollection: ...
    @property
    def PromptSteps(self) -> PromptStepCollection: ...
    @property
    def SetAuxControlOutputSteps(self) -> SetAuxControlOutputStepCollection: ...
    def ApplyCheckedState(self, checkedState: SequenceStepCheckedState) -> None: ...
    def CanAddStep(self, stepType: SequenceStepType) -> bool: ...
    def CopyCheckedStepsToClipboard(self) -> None: ...
    def GetCheckedState(self) -> SequenceStepCheckedState: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def PasteStepsFromClipboard(self, insertIndex: int) -> None: ...


class SequenceStepType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Prompt : SequenceStepType # 0
    Input : SequenceStepType # 1
    Program : SequenceStepType # 2
    Measurement : SequenceStepType # 3
    AppendedMeasurement : SequenceStepType # 4
    Delay : SequenceStepType # 5
    SetAuxControlOutput : SequenceStepType # 6
    EnableGenerator : SequenceStepType # 7
    ConnectBluetoothDevice : SequenceStepType # 8
    DisconnectBluetoothDevice : SequenceStepType # 9
    A2dpSource : SequenceStepType # 10
    HfpAudioGateway : SequenceStepType # 11
    HspAudioGateway : SequenceStepType # 12
    A2dpSink : SequenceStepType # 13
    HfpHandsFree : SequenceStepType # 14
    HfpHandsFreeCommand : SequenceStepType # 15
    HspHeadset : SequenceStepType # 16
    HspHsAtCommand : SequenceStepType # 17
    HfpAgAtCommand : SequenceStepType # 18
    HspAgAtCommand : SequenceStepType # 19
    ExportResultData : SequenceStepType # 20
    ImportResultData : SequenceStepType # 21
    SendPdmControlCodes : SequenceStepType # 22
    SendPdmControlCodeIndefinitely : SequenceStepType # 23
    StopSendingPdmControlCode : SequenceStepType # 24
    SetSwitcherConfiguration : SequenceStepType # 25
    BluetoothEnableWidebandSpeech : SequenceStepType # 26
    LoadCustomData : SequenceStepType # 27
    HdmiSendCecCommand : SequenceStepType # 28
    ImportOutputEqCurve : SequenceStepType # 29
    SetVddOutput : SequenceStepType # 30
    ImportAmplifierCorrectionCurve : SequenceStepType # 31
    SetDcxControlOutput : SequenceStepType # 32
    SetDcxDcvOutput : SequenceStepType # 33
    UserEvaluationOfResultStep : SequenceStepType # 34
    DigitalSyncDelay : SequenceStepType # 35
    StartAnalogSineWaveGenerator : SequenceStepType # 36
    StopAnalogSineWaveGenerator : SequenceStepType # 37
    MakeResultVisible : SequenceStepType # 38
    ImportLimitsData : SequenceStepType # 39
    SetTransducerInput : SequenceStepType # 40
    SetTransducerOutput : SequenceStepType # 41
    CalibrateFromTeds : SequenceStepType # 42
    CalibrateFromTedsAcoustic : SequenceStepType # 43
    SetBluetoothTransmitPower : SequenceStepType # 44
    AvrcpSetAbsoluteVolume : SequenceStepType # 45
    SetDeviceDelay : SequenceStepType # 46
    ClearVariableValue : SequenceStepType # 47
    EnableVBias : SequenceStepType # 48
    SelectInputEqCurve : SequenceStepType # 49
    ImportGeneratorEqCurve : SequenceStepType # 50
    SaveGeneratorWaveform : SequenceStepType # 51
    SetPowerAmpOutput : SequenceStepType # 52
    SetHeadphoneAmpOutput : SequenceStepType # 53
    ExportWavFile : SequenceStepType # 54
    ClearBluetoothDeviceList : SequenceStepType # 55


class SequenceVariable:
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def Value(self) -> str: ...


class SequenceVariablesCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> SequenceVariable: ...
    @property
    def Item(self) -> SequenceVariable: ...
    def GetEnumerator(self) -> IEnumerator: ...


class SerialChannels(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    One : SerialChannels # 1
    Two : SerialChannels # 2
    Four : SerialChannels # 4
    Six : SerialChannels # 6
    Eight : SerialChannels # 8
    Sixteen : SerialChannels # 16


class SerialCustomDataJustification(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    LeftJustified : SerialCustomDataJustification # 0
    RightJustified : SerialCustomDataJustification # 1


class SerialDataLine(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    DataLine1 : SerialDataLine # 0
    DataLine2 : SerialDataLine # 1
    DataLine3 : SerialDataLine # 2
    DataLine4 : SerialDataLine # 3


class SerialDigitalReceiverSettings:
    @property
    def BitClkReceiveEdgeSync(self) -> EdgeSync: ...
    @BitClkReceiveEdgeSync.setter
    def BitClkReceiveEdgeSync(self, value: EdgeSync) -> EdgeSync: ...
    @property
    def BitClkSendEdgeSync(self) -> EdgeSync: ...
    @BitClkSendEdgeSync.setter
    def BitClkSendEdgeSync(self, value: EdgeSync) -> EdgeSync: ...
    @property
    def BitDepth(self) -> int: ...
    @BitDepth.setter
    def BitDepth(self, value: int) -> int: ...
    @property
    def BitFrameClockDirection(self) -> ClockDirection: ...
    @BitFrameClockDirection.setter
    def BitFrameClockDirection(self, value: ClockDirection) -> ClockDirection: ...
    @property
    def Channels(self) -> SerialChannels: ...
    @Channels.setter
    def Channels(self, value: SerialChannels) -> SerialChannels: ...
    @property
    def DataJustification(self) -> SerialCustomDataJustification: ...
    @DataJustification.setter
    def DataJustification(self, value: SerialCustomDataJustification) -> SerialCustomDataJustification: ...
    @property
    def EnableOutputs(self) -> bool: ...
    @EnableOutputs.setter
    def EnableOutputs(self, value: bool) -> bool: ...
    @property
    def FixedInputSampleRate(self) -> float: ...
    @FixedInputSampleRate.setter
    def FixedInputSampleRate(self, value: float) -> float: ...
    @property
    def Format(self) -> SerialFormat: ...
    @Format.setter
    def Format(self, value: SerialFormat) -> SerialFormat: ...
    @property
    def FrameClockInvert(self) -> bool: ...
    @FrameClockInvert.setter
    def FrameClockInvert(self, value: bool) -> bool: ...
    @property
    def FrameClockLeftOneBit(self) -> bool: ...
    @FrameClockLeftOneBit.setter
    def FrameClockLeftOneBit(self, value: bool) -> bool: ...
    @property
    def FrameClockPulseWidth(self) -> FrameClockPulseWidth: ...
    @FrameClockPulseWidth.setter
    def FrameClockPulseWidth(self, value: FrameClockPulseWidth) -> FrameClockPulseWidth: ...
    @property
    def InvertMasterClock(self) -> bool: ...
    @InvertMasterClock.setter
    def InvertMasterClock(self, value: bool) -> bool: ...
    @property
    def LogicLevel(self) -> SerialLogicLevel: ...
    @LogicLevel.setter
    def LogicLevel(self, value: SerialLogicLevel) -> SerialLogicLevel: ...
    @property
    def MasterClockMultiplier(self) -> int: ...
    @MasterClockMultiplier.setter
    def MasterClockMultiplier(self, value: int) -> int: ...
    @property
    def MasterClockOff(self) -> bool: ...
    @MasterClockOff.setter
    def MasterClockOff(self, value: bool) -> bool: ...
    @property
    def MasterClockRate(self) -> DoubleSetting: ...
    @property
    def MasterClockSource(self) -> MasterClockSource: ...
    @MasterClockSource.setter
    def MasterClockSource(self, value: MasterClockSource) -> MasterClockSource: ...
    @property
    def MeasureInputSignalType(self) -> MeasureJitterInputSignal: ...
    @MeasureInputSignalType.setter
    def MeasureInputSignalType(self, value: MeasureJitterInputSignal) -> MeasureJitterInputSignal: ...
    @property
    def MsbFirst(self) -> bool: ...
    @MsbFirst.setter
    def MsbFirst(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def SampleRate(self) -> DoubleSetting: ...
    @property
    def ScaleFreqBy(self) -> InputFrequencyScalingType: ...
    @ScaleFreqBy.setter
    def ScaleFreqBy(self, value: InputFrequencyScalingType) -> InputFrequencyScalingType: ...
    @property
    def SelectedDataLine(self) -> SerialDataLine: ...
    @SelectedDataLine.setter
    def SelectedDataLine(self, value: SerialDataLine) -> SerialDataLine: ...
    @property
    def SingleDataLine(self) -> bool: ...
    @SingleDataLine.setter
    def SingleDataLine(self, value: bool) -> bool: ...
    @property
    def WordWidth(self) -> int: ...
    @WordWidth.setter
    def WordWidth(self, value: int) -> int: ...
    def Open(self, fileName: str) -> None: ...
    def Save(self, fileName: str) -> None: ...


class SerialDigitalTransmitterSettings:
    @property
    def BitClkReceiveEdgeSync(self) -> EdgeSync: ...
    @BitClkReceiveEdgeSync.setter
    def BitClkReceiveEdgeSync(self, value: EdgeSync) -> EdgeSync: ...
    @property
    def BitClkSendEdgeSync(self) -> EdgeSync: ...
    @BitClkSendEdgeSync.setter
    def BitClkSendEdgeSync(self, value: EdgeSync) -> EdgeSync: ...
    @property
    def BitDepth(self) -> int: ...
    @BitDepth.setter
    def BitDepth(self, value: int) -> int: ...
    @property
    def BitFrameClockDirection(self) -> ClockDirection: ...
    @BitFrameClockDirection.setter
    def BitFrameClockDirection(self, value: ClockDirection) -> ClockDirection: ...
    @property
    def Channels(self) -> SerialChannels: ...
    @Channels.setter
    def Channels(self, value: SerialChannels) -> SerialChannels: ...
    @property
    def DataJustification(self) -> SerialCustomDataJustification: ...
    @DataJustification.setter
    def DataJustification(self, value: SerialCustomDataJustification) -> SerialCustomDataJustification: ...
    @property
    def Dither(self) -> bool: ...
    @Dither.setter
    def Dither(self, value: bool) -> bool: ...
    @property
    def EnableOutputs(self) -> bool: ...
    @EnableOutputs.setter
    def EnableOutputs(self, value: bool) -> bool: ...
    @property
    def Format(self) -> SerialFormat: ...
    @Format.setter
    def Format(self, value: SerialFormat) -> SerialFormat: ...
    @property
    def FrameClockInvert(self) -> bool: ...
    @FrameClockInvert.setter
    def FrameClockInvert(self, value: bool) -> bool: ...
    @property
    def FrameClockLeftOneBit(self) -> bool: ...
    @FrameClockLeftOneBit.setter
    def FrameClockLeftOneBit(self, value: bool) -> bool: ...
    @property
    def FrameClockPulseWidth(self) -> FrameClockPulseWidth: ...
    @FrameClockPulseWidth.setter
    def FrameClockPulseWidth(self, value: FrameClockPulseWidth) -> FrameClockPulseWidth: ...
    @property
    def InvertMasterClock(self) -> bool: ...
    @InvertMasterClock.setter
    def InvertMasterClock(self, value: bool) -> bool: ...
    @property
    def LogicLevel(self) -> SerialLogicLevel: ...
    @LogicLevel.setter
    def LogicLevel(self, value: SerialLogicLevel) -> SerialLogicLevel: ...
    @property
    def MasterClockMultiplier(self) -> int: ...
    @MasterClockMultiplier.setter
    def MasterClockMultiplier(self, value: int) -> int: ...
    @property
    def MasterClockOff(self) -> bool: ...
    @MasterClockOff.setter
    def MasterClockOff(self, value: bool) -> bool: ...
    @property
    def MasterClockRate(self) -> DoubleSetting: ...
    @property
    def MasterClockSource(self) -> MasterClockSource: ...
    @MasterClockSource.setter
    def MasterClockSource(self, value: MasterClockSource) -> MasterClockSource: ...
    @property
    def MsbFirst(self) -> bool: ...
    @MsbFirst.setter
    def MsbFirst(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def SampleRate(self) -> DoubleSetting: ...
    @property
    def ScaleFreqBy(self) -> ScaleDigitalOutputFreqBy: ...
    @ScaleFreqBy.setter
    def ScaleFreqBy(self, value: ScaleDigitalOutputFreqBy) -> ScaleDigitalOutputFreqBy: ...
    @property
    def ScaleFreqByFixedRate(self) -> float: ...
    @ScaleFreqByFixedRate.setter
    def ScaleFreqByFixedRate(self, value: float) -> float: ...
    @property
    def SingleDataLine(self) -> bool: ...
    @SingleDataLine.setter
    def SingleDataLine(self, value: bool) -> bool: ...
    @property
    def WordWidth(self) -> int: ...
    @WordWidth.setter
    def WordWidth(self, value: int) -> int: ...
    def GetDataLineEnabled(self, dataLine: SerialDataLine) -> bool: ...
    def Open(self, fileName: str) -> None: ...
    def Save(self, fileName: str) -> None: ...
    def SetDataLineEnabled(self, dataLine: SerialDataLine, enabled: bool) -> None: ...


class SerialFormat(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    I2S : SerialFormat # 0
    DSP : SerialFormat # 1
    Custom : SerialFormat # 2


class SerialLogicLevel(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    V1p8 : SerialLogicLevel # 0
    V2p5 : SerialLogicLevel # 1
    V3p3 : SerialLogicLevel # 2


class SetAuxControlOutputStep:
    @property
    def ByteValue(self) -> int: ...
    @ByteValue.setter
    def ByteValue(self, value: int) -> int: ...
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Delay(self) -> float: ...
    @Delay.setter
    def Delay(self, value: float) -> float: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Message(self) -> str: ...
    @Message.setter
    def Message(self, value: str) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def GetPinState(self, pin: int) -> AuxControlState: ...
    def MoveTo(self, index: int) -> None: ...
    def SetPinState(self, pin: int, pinState: AuxControlState) -> None: ...


class SetAuxControlOutputStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> SetAuxControlOutputStep: ...
    def Add(self) -> SetAuxControlOutputStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class SetBluetoothTransmitPowerStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Power(self) -> BluetoothTransmitPower: ...
    @Power.setter
    def Power(self, value: BluetoothTransmitPower) -> BluetoothTransmitPower: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class SetBluetoothTransmitPowerStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> SetBluetoothTransmitPowerStep: ...
    def Add(self) -> SetBluetoothTransmitPowerStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class SetDcxControlOutputStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Delay(self) -> float: ...
    @Delay.setter
    def Delay(self, value: float) -> float: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Message(self) -> str: ...
    @Message.setter
    def Message(self, value: str) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Port(self) -> DcxPort: ...
    @Port.setter
    def Port(self, value: DcxPort) -> DcxPort: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def GetPinState(self, pin: int) -> AuxControlState: ...
    def MoveTo(self, index: int) -> None: ...
    def SetPinState(self, pin: int, pinState: AuxControlState) -> None: ...


class SetDcxControlOutputStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> SetDcxControlOutputStep: ...
    def Add(self) -> SetDcxControlOutputStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class SetDcxDcvOutputStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Delay(self) -> float: ...
    @Delay.setter
    def Delay(self, value: float) -> float: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Level(self) -> float: ...
    @Level.setter
    def Level(self, value: float) -> float: ...
    @property
    def Message(self) -> str: ...
    @Message.setter
    def Message(self, value: str) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Port(self) -> DcxDcvChannel: ...
    @Port.setter
    def Port(self, value: DcxDcvChannel) -> DcxDcvChannel: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    @property
    def VoltState(self) -> bool: ...
    @VoltState.setter
    def VoltState(self, value: bool) -> bool: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class SetDcxDcvOutputStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> SetDcxDcvOutputStep: ...
    def Add(self) -> SetDcxDcvOutputStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class SetDeviceDelayStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Generator(self) -> DelayGenerator: ...
    @property
    def MeasuredChannel(self) -> InputChannelIndex: ...
    @MeasuredChannel.setter
    def MeasuredChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Settings(self) -> DutDelaySettings: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class SetDeviceDelayStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> SetDeviceDelayStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class SetHeadphoneAmpOutputStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def ImpedanceSenseChannel(self) -> AmplifierSenseChannel: ...
    @ImpedanceSenseChannel.setter
    def ImpedanceSenseChannel(self, value: AmplifierSenseChannel) -> AmplifierSenseChannel: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Output(self) -> HeadphoneAmplifierOutput: ...
    @Output.setter
    def Output(self, value: HeadphoneAmplifierOutput) -> HeadphoneAmplifierOutput: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class SetHeadphoneAmpOutputStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> SetHeadphoneAmpOutputStep: ...
    def Add(self) -> SetHeadphoneAmpOutputStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class SetPowerAmpOutputStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Output(self) -> PowerAmplifierOutput: ...
    @Output.setter
    def Output(self, value: PowerAmplifierOutput) -> PowerAmplifierOutput: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class SetPowerAmpOutputStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> SetPowerAmpOutputStep: ...
    def Add(self) -> SetPowerAmpOutputStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class SetSwitcherConfigurationStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def InputSwitcherConfiguration(self) -> InputSwitcherConfigurationBaseCollection: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OutputSwitcherConfiguration(self) -> OutputSwitcherConfigurationBaseCollection: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class SetSwitcherConfigurationStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> SetSwitcherConfigurationStep: ...
    def Add(self) -> SetSwitcherConfigurationStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class Setting:
    @property
    def Active(self) -> bool: ...
    @property
    def IsEnabled(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @Text.setter
    def Text(self, value: str) -> str: ...
    @property
    def Values(self) -> Array_1[str]: ...


class SettingUnit:
    @property
    def Active(self) -> bool: ...
    @property
    def IsEnabled(self) -> bool: ...
    @property
    def IsLogUnit(self) -> bool: ...
    @property
    def Text(self) -> str: ...
    @Text.setter
    def Text(self, value: str) -> str: ...
    @property
    def TextWithoutUnit(self) -> str: ...
    @property
    def TextWithReferenceValue(self) -> str: ...
    @property
    def Unit(self) -> str: ...
    @Unit.setter
    def Unit(self, value: str) -> str: ...
    @property
    def UnitList(self) -> Array_1[str]: ...
    @property
    def Values(self) -> Array_1[str]: ...


class SettledResult:
    @property
    def AnyTimedOut(self) -> bool: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def MeterType(self) -> SettlingMeterType: ...
    def GetValues(self, unit: str) -> Array_1[float]: ...
    def TimedOutOnChannel(self, ch: int) -> bool: ...


class SettledResultCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> SettledResult: ...
    @property
    def Item(self) -> SettledResult: ...
    def GetEnumerator(self) -> IEnumerator: ...


class SettlerState(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NotSettled : SettlerState # 0
    Settled : SettlerState # 1
    Timeout : SettlerState # 2
    NotMeasured : SettlerState # 3


class SettlingAlgorithm(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Flat : SettlingAlgorithm # 0
    Average : SettlingAlgorithm # 1


class SettlingAlgorithmEx(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : SettlingAlgorithmEx # 0
    Flat : SettlingAlgorithmEx # 1
    Average : SettlingAlgorithmEx # 2


class SettlingMeterType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    DigitalInterfaceLevel : SettlingMeterType # 0
    AverageJitterLevel : SettlingMeterType # 1
    BandpassLevel : SettlingMeterType # 2
    BitError : SettlingMeterType # 3
    CrestFactor : SettlingMeterType # 4
    DcLevel : SettlingMeterType # 5
    DcxOhms : SettlingMeterType # 6
    DcxVolts : SettlingMeterType # 7
    Frequency : SettlingMeterType # 8
    Gain : SettlingMeterType # 9
    ImdRatio : SettlingMeterType # 10
    LevelRatio : SettlingMeterType # 11
    PeakLevel : SettlingMeterType # 12
    Phase : SettlingMeterType # 13
    RmsLevel : SettlingMeterType # 14
    SampleRate : SettlingMeterType # 15
    SinadRatio : SettlingMeterType # 16
    ThdNLevel : SettlingMeterType # 17
    ThdNRatio : SettlingMeterType # 18


class SettlingMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    AC : SettlingMode # 0
    DC : SettlingMode # 1
    Phase : SettlingMode # 2


class SettlingParameters:
    @property
    def Algorithm(self) -> SettlingAlgorithm: ...
    @Algorithm.setter
    def Algorithm(self, value: SettlingAlgorithm) -> SettlingAlgorithm: ...
    @property
    def AveragingTime(self) -> DoubleSetting: ...
    @property
    def DelayCycles(self) -> DoubleSetting: ...
    @property
    def DelayTime(self) -> DoubleSetting: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Mode(self) -> SettlingMode: ...
    @property
    def Name(self) -> str: ...
    @property
    def SettlingCycles(self) -> DoubleSetting: ...
    @property
    def SettlingTime(self) -> DoubleSetting: ...
    @property
    def Tolerance(self) -> DoubleSetting: ...
    def Reset(self) -> None: ...


class SettlingParametersEx:
    @property
    def Algorithm(self) -> SettlingAlgorithmEx: ...
    @Algorithm.setter
    def Algorithm(self, value: SettlingAlgorithmEx) -> SettlingAlgorithmEx: ...
    @property
    def DelayCycles(self) -> float: ...
    @DelayCycles.setter
    def DelayCycles(self, value: float) -> float: ...
    @property
    def DelayTime(self) -> float: ...
    @DelayTime.setter
    def DelayTime(self, value: float) -> float: ...
    @property
    def Floor(self) -> float: ...
    @Floor.setter
    def Floor(self, value: float) -> float: ...
    @property
    def FloorUnit(self) -> str: ...
    @FloorUnit.setter
    def FloorUnit(self, value: str) -> str: ...
    @property
    def FloorUnits(self) -> Array_1[str]: ...
    @property
    def MeterType(self) -> SettlingMeterType: ...
    @property
    def Points(self) -> int: ...
    @Points.setter
    def Points(self, value: int) -> int: ...
    @property
    def SettlingCycles(self) -> float: ...
    @SettlingCycles.setter
    def SettlingCycles(self, value: float) -> float: ...
    @property
    def SettlingTime(self) -> float: ...
    @SettlingTime.setter
    def SettlingTime(self, value: float) -> float: ...
    @property
    def Tolerance(self) -> float: ...
    @Tolerance.setter
    def Tolerance(self, value: float) -> float: ...


class SettlingParametersExChannelCollection:
    @property
    def Count(self) -> int: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def Item(self) -> SettlingParametersEx: ...
    @property
    def Item(self) -> SettlingParametersEx: ...
    @property
    def MeterType(self) -> SettlingMeterType: ...
    def ResetToDefaults(self) -> None: ...


class SettlingParametersExCollection:
    @property
    def Count(self) -> int: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def Item(self) -> SettlingParametersExChannelCollection: ...
    @property
    def Item(self) -> SettlingParametersExChannelCollection: ...
    @property
    def ReadingTimeout(self) -> float: ...
    @ReadingTimeout.setter
    def ReadingTimeout(self, value: float) -> float: ...
    @property
    def TrackFirst(self) -> bool: ...
    @TrackFirst.setter
    def TrackFirst(self, value: bool) -> bool: ...
    def ResetToDefaults(self) -> None: ...


class SetTransducerInputStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def CcpPower(self) -> bool: ...
    @CcpPower.setter
    def CcpPower(self, value: bool) -> bool: ...
    @property
    def CurrentSense(self) -> CurrentSense: ...
    @CurrentSense.setter
    def CurrentSense(self, value: CurrentSense) -> CurrentSense: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Mic1(self) -> TransducerMic1: ...
    @Mic1.setter
    def Mic1(self, value: TransducerMic1) -> TransducerMic1: ...
    @property
    def Mic2(self) -> TransducerMic2: ...
    @Mic2.setter
    def Mic2(self, value: TransducerMic2) -> TransducerMic2: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PhantomPower(self) -> bool: ...
    @PhantomPower.setter
    def PhantomPower(self, value: bool) -> bool: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class SetTransducerInputStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> SetTransducerInputStep: ...
    def Add(self) -> SetTransducerInputStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class SetTransducerOutputStep:
    @property
    def Amplifier1(self) -> bool: ...
    @Amplifier1.setter
    def Amplifier1(self, value: bool) -> bool: ...
    @property
    def Amplifier2(self) -> bool: ...
    @Amplifier2.setter
    def Amplifier2(self, value: bool) -> bool: ...
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class SetTransducerOutputStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> SetTransducerOutputStep: ...
    def Add(self) -> SetTransducerOutputStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class SetVddOutputStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Module(self) -> PdmVddSelection: ...
    @Module.setter
    def Module(self, value: PdmVddSelection) -> PdmVddSelection: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    @property
    def VddLevel(self) -> float: ...
    @VddLevel.setter
    def VddLevel(self, value: float) -> float: ...
    @property
    def VddOn(self) -> bool: ...
    @VddOn.setter
    def VddOn(self, value: bool) -> bool: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class SetVddOutputStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> SetVddOutputStep: ...
    def Add(self) -> SetVddOutputStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class ShowIndicatorsType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Never : ShowIndicatorsType # 0
    Top : ShowIndicatorsType # 1
    OnTraces : ShowIndicatorsType # 2
    Bottom : ShowIndicatorsType # 3


class SignalAcquisitionMeasurement:
    @property
    def AcquiredWaveform(self) -> AcquiredWaveformGraph: ...
    @property
    def AcquisitionSamples(self) -> int: ...
    @AcquisitionSamples.setter
    def AcquisitionSamples(self, value: int) -> int: ...
    @property
    def AcquisitionSeconds(self) -> float: ...
    @AcquisitionSeconds.setter
    def AcquisitionSeconds(self, value: float) -> float: ...
    @property
    def AcquisitionType(self) -> AcqLengthType: ...
    @AcquisitionType.setter
    def AcquisitionType(self, value: AcqLengthType) -> AcqLengthType: ...
    @property
    def AnalogInputBandwidth(self) -> SignalAnalyzerBandwidthType: ...
    @AnalogInputBandwidth.setter
    def AnalogInputBandwidth(self, value: SignalAnalyzerBandwidthType) -> SignalAnalyzerBandwidthType: ...
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def Averages(self) -> int: ...
    @Averages.setter
    def Averages(self, value: int) -> int: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def DelayTimeInSamples(self) -> float: ...
    @DelayTimeInSamples.setter
    def DelayTimeInSamples(self, value: float) -> float: ...
    @property
    def DelayTimeInSeconds(self) -> float: ...
    @DelayTimeInSeconds.setter
    def DelayTimeInSeconds(self, value: float) -> float: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> SignalAnalyzerGenerator: ...
    @property
    def GeneratorProperties(self) -> CustomProcessingProperties: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def LevelTriggerSlope(self) -> LevelSlopeType: ...
    @LevelTriggerSlope.setter
    def LevelTriggerSlope(self, value: LevelSlopeType) -> LevelSlopeType: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NestedSweep(self) -> NestedSweepSettings: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def PdmSignalSource(self) -> PdmSignalSource: ...
    @PdmSignalSource.setter
    def PdmSignalSource(self, value: PdmSignalSource) -> PdmSignalSource: ...
    @property
    def Properties(self) -> CustomProcessingProperties: ...
    @property
    def SaveToFileSettings(self) -> SaveAcquisitionToFileSettings: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def TriggerChannel(self) -> InputChannelIndex: ...
    @TriggerChannel.setter
    def TriggerChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def TriggerInput(self) -> APxInputSelection: ...
    @TriggerInput.setter
    def TriggerInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def TriggerLevel(self) -> DoubleSetting: ...
    @property
    def TriggerTimeout(self) -> float: ...
    @TriggerTimeout.setter
    def TriggerTimeout(self, value: float) -> float: ...
    @property
    def TriggerType(self) -> TriggerType: ...
    @TriggerType.setter
    def TriggerType(self, value: TriggerType) -> TriggerType: ...
    @property
    def UseDelayTimeInSeconds(self) -> bool: ...
    @UseDelayTimeInSeconds.setter
    def UseDelayTimeInSeconds(self, value: bool) -> bool: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class SignalAnalyzerBandwidthType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Bw3k : SignalAnalyzerBandwidthType # 0
    Bw3p5k : SignalAnalyzerBandwidthType # 1
    Bw5k : SignalAnalyzerBandwidthType # 2
    Bw7k : SignalAnalyzerBandwidthType # 3
    Bw10k : SignalAnalyzerBandwidthType # 4
    Bw20k44kHz : SignalAnalyzerBandwidthType # 5
    Bw20k : SignalAnalyzerBandwidthType # 6
    Bw40k88kHz : SignalAnalyzerBandwidthType # 7
    Bw40k : SignalAnalyzerBandwidthType # 8
    Bw80k176kHz : SignalAnalyzerBandwidthType # 9
    Bw80k : SignalAnalyzerBandwidthType # 10
    Bw250k : SignalAnalyzerBandwidthType # 11
    Bw500k : SignalAnalyzerBandwidthType # 12
    Bw1M : SignalAnalyzerBandwidthType # 13
    TrackSetup : SignalAnalyzerBandwidthType # 14


class SignalAnalyzerGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def LoopWaveform(self) -> bool: ...
    @LoopWaveform.setter
    def LoopWaveform(self, value: bool) -> bool: ...
    @property
    def NoiseShape(self) -> NoiseShape: ...
    @NoiseShape.setter
    def NoiseShape(self, value: NoiseShape) -> NoiseShape: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def RepeatWaveformCount(self) -> int: ...
    @RepeatWaveformCount.setter
    def RepeatWaveformCount(self, value: int) -> int: ...
    @property
    def SineBurst(self) -> SineBurstGeneratorSettings: ...
    @property
    def SineDual(self) -> SineDualGenerator: ...
    @property
    def SineVarPhase(self) -> SineVarPhaseGenerator: ...
    @property
    def Type(self) -> SquarewaveGeneratorType: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class SignalAnalyzerMeasurement:
    @property
    def AcquisitionSamples(self) -> int: ...
    @AcquisitionSamples.setter
    def AcquisitionSamples(self, value: int) -> int: ...
    @property
    def AcquisitionSeconds(self) -> float: ...
    @AcquisitionSeconds.setter
    def AcquisitionSeconds(self, value: float) -> float: ...
    @property
    def AcquisitionType(self) -> AcqLengthType: ...
    @AcquisitionType.setter
    def AcquisitionType(self, value: AcqLengthType) -> AcqLengthType: ...
    @property
    def AmplitudeSpectralDensity(self) -> XYGraph: ...
    @property
    def AnalogInputBandwidth(self) -> SignalAnalyzerBandwidthType: ...
    @AnalogInputBandwidth.setter
    def AnalogInputBandwidth(self, value: SignalAnalyzerBandwidthType) -> SignalAnalyzerBandwidthType: ...
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def Averages(self) -> int: ...
    @Averages.setter
    def Averages(self, value: int) -> int: ...
    @property
    def AveragingType(self) -> AveragingType: ...
    @AveragingType.setter
    def AveragingType(self, value: AveragingType) -> AveragingType: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def DelayTimeInSamples(self) -> float: ...
    @DelayTimeInSamples.setter
    def DelayTimeInSamples(self, value: float) -> float: ...
    @property
    def DelayTimeInSeconds(self) -> float: ...
    @DelayTimeInSeconds.setter
    def DelayTimeInSeconds(self, value: float) -> float: ...
    @property
    def FFTLength(self) -> FFTLength: ...
    @FFTLength.setter
    def FFTLength(self, value: FFTLength) -> FFTLength: ...
    @property
    def FFTLengthSamples(self) -> int: ...
    @FFTLengthSamples.setter
    def FFTLengthSamples(self, value: int) -> int: ...
    @property
    def FFTSpectrum(self) -> XYGraph: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> SignalAnalyzerGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def LevelTriggerSlope(self) -> LevelSlopeType: ...
    @LevelTriggerSlope.setter
    def LevelTriggerSlope(self, value: LevelSlopeType) -> LevelSlopeType: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NestedSweep(self) -> NestedSweepSettings: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def PdmSignalSource(self) -> PdmSignalSource: ...
    @PdmSignalSource.setter
    def PdmSignalSource(self, value: PdmSignalSource) -> PdmSignalSource: ...
    @property
    def PowerSpectralDensity(self) -> XYGraph: ...
    @property
    def SaveToFileSettings(self) -> SaveAcquisitionToFileSettings: ...
    @property
    def Scope(self) -> TimeDomainXYGraph: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def TriggerChannel(self) -> InputChannelIndex: ...
    @TriggerChannel.setter
    def TriggerChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def TriggerInput(self) -> APxInputSelection: ...
    @TriggerInput.setter
    def TriggerInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def TriggerLevel(self) -> DoubleSetting: ...
    @property
    def TriggerTimeout(self) -> float: ...
    @TriggerTimeout.setter
    def TriggerTimeout(self, value: float) -> float: ...
    @property
    def TriggerType(self) -> TriggerType: ...
    @TriggerType.setter
    def TriggerType(self, value: TriggerType) -> TriggerType: ...
    @property
    def UseDelayTimeInSeconds(self) -> bool: ...
    @UseDelayTimeInSeconds.setter
    def UseDelayTimeInSeconds(self, value: bool) -> bool: ...
    @property
    def WindowType(self) -> WindowType: ...
    @WindowType.setter
    def WindowType(self, value: WindowType) -> WindowType: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class SignalMeters:
    @property
    def FrequencyMeter(self) -> MeterValues: ...
    @property
    def FrequencyMeterUnit(self) -> str: ...
    @FrequencyMeterUnit.setter
    def FrequencyMeterUnit(self, value: str) -> str: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def LevelMeter(self) -> MeterValues: ...
    @property
    def LevelMeterUnit(self) -> str: ...
    @LevelMeterUnit.setter
    def LevelMeterUnit(self, value: str) -> str: ...
    @property
    def ThdNMeter(self) -> MeterValues: ...
    @property
    def ThdNMeterUnit(self) -> str: ...
    @ThdNMeterUnit.setter
    def ThdNMeterUnit(self, value: str) -> str: ...
    def Activate(self) -> None: ...


class SignalMetersWindow:
    @property
    def FrequencyMeter(self) -> MeterValues: ...
    @property
    def FrequencyMeterUnit(self) -> str: ...
    @FrequencyMeterUnit.setter
    def FrequencyMeterUnit(self, value: str) -> str: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LevelMeter(self) -> MeterValues: ...
    @property
    def LevelMeterUnit(self) -> str: ...
    @LevelMeterUnit.setter
    def LevelMeterUnit(self, value: str) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def ThdNMeter(self) -> MeterValues: ...
    @property
    def ThdNMeterUnit(self) -> str: ...
    @ThdNMeterUnit.setter
    def ThdNMeterUnit(self, value: str) -> str: ...
    @property
    def UndockedHeight(self) -> int: ...
    @UndockedHeight.setter
    def UndockedHeight(self, value: int) -> int: ...
    @property
    def UndockedLeft(self) -> int: ...
    @UndockedLeft.setter
    def UndockedLeft(self, value: int) -> int: ...
    @property
    def UndockedTop(self) -> int: ...
    @UndockedTop.setter
    def UndockedTop(self, value: int) -> int: ...
    @property
    def UndockedWidth(self) -> int: ...
    @UndockedWidth.setter
    def UndockedWidth(self, value: int) -> int: ...
    def Activate(self) -> None: ...
    def Dock(self) -> None: ...
    def Maximize(self) -> None: ...
    def Meters(self, input: APxInputSelection) -> SignalMeters: ...
    def Minimize(self) -> None: ...
    def Restore(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...


class SignalMonitorWindow:
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def UndockedHeight(self) -> int: ...
    @UndockedHeight.setter
    def UndockedHeight(self, value: int) -> int: ...
    @property
    def UndockedLeft(self) -> int: ...
    @UndockedLeft.setter
    def UndockedLeft(self, value: int) -> int: ...
    @property
    def UndockedTop(self) -> int: ...
    @UndockedTop.setter
    def UndockedTop(self, value: int) -> int: ...
    @property
    def UndockedWidth(self) -> int: ...
    @UndockedWidth.setter
    def UndockedWidth(self, value: int) -> int: ...
    def Dock(self) -> None: ...
    def Maximize(self) -> None: ...
    def Minimize(self) -> None: ...
    def Restore(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...


class SignalPath(IEnumerable):
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def Count(self) -> int: ...
    @property
    def Index(self) -> int: ...
    @property
    def Item(self) -> SequenceMeasurement: ...
    @property
    def Item(self) -> SequenceMeasurement: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Run(self) -> None: ...
    # Skipped Contains due to it being static, abstract and generic.

    Contains : Contains_MethodGroup
    class Contains_MethodGroup:
        @typing.overload
        def __call__(self, measurementType: MeasurementType) -> bool:...
        @typing.overload
        def __call__(self, measurement: str) -> bool:...

    # Skipped GetMeasurement due to it being static, abstract and generic.

    GetMeasurement : GetMeasurement_MethodGroup
    class GetMeasurement_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> SequenceMeasurement:...
        @typing.overload
        def __call__(self, measurementName: str) -> SequenceMeasurement:...



class SignalPathInputCalibrationSettings:
    @property
    def CalibratorFrequency(self) -> float: ...
    @CalibratorFrequency.setter
    def CalibratorFrequency(self, value: float) -> float: ...
    @property
    def CalibratorFrequencyTolerance(self) -> float: ...
    @CalibratorFrequencyTolerance.setter
    def CalibratorFrequencyTolerance(self, value: float) -> float: ...
    @property
    def CalibratorLevel(self) -> DoubleSetting: ...


class SignalPathInputSettings:
    @property
    def AutoChannels(self) -> bool: ...
    @AutoChannels.setter
    def AutoChannels(self, value: bool) -> bool: ...
    @property
    def Channels(self) -> SignalPathMeasurandChannelCollection: ...
    @property
    def HighpassFilter(self) -> HighpassFilterMode: ...
    @HighpassFilter.setter
    def HighpassFilter(self, value: HighpassFilterMode) -> HighpassFilterMode: ...
    @property
    def HighpassFilterFrequency(self) -> float: ...
    @HighpassFilterFrequency.setter
    def HighpassFilterFrequency(self, value: float) -> float: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def InputChannelCount(self) -> int: ...
    @property
    def InputConnector(self) -> InputConnector: ...
    @property
    def InputEqChannels(self) -> InputEqSettingsCollection: ...
    @property
    def IsApplicable(self) -> bool: ...
    @property
    def LowpassFilterAnalog(self) -> LowpassFilterModeAnalog: ...
    @LowpassFilterAnalog.setter
    def LowpassFilterAnalog(self, value: LowpassFilterModeAnalog) -> LowpassFilterModeAnalog: ...
    @property
    def LowpassFilterAnalogBandwidth(self) -> AdcBandwidth: ...
    @LowpassFilterAnalogBandwidth.setter
    def LowpassFilterAnalogBandwidth(self, value: AdcBandwidth) -> AdcBandwidth: ...
    @property
    def LowpassFilterDigital(self) -> LowpassFilterModeDigital: ...
    @LowpassFilterDigital.setter
    def LowpassFilterDigital(self, value: LowpassFilterModeDigital) -> LowpassFilterModeDigital: ...
    @property
    def LowpassFilterFrequencyAnalog(self) -> float: ...
    @LowpassFilterFrequencyAnalog.setter
    def LowpassFilterFrequencyAnalog(self, value: float) -> float: ...
    @property
    def LowpassFilterFrequencyDigital(self) -> float: ...
    @LowpassFilterFrequencyDigital.setter
    def LowpassFilterFrequencyDigital(self, value: float) -> float: ...
    @property
    def Measure(self) -> MeasurandType: ...
    @Measure.setter
    def Measure(self, value: MeasurandType) -> MeasurandType: ...
    @property
    def TedsCalibration(self) -> TedsCalibration: ...
    @property
    def WeightingFilter(self) -> SignalPathWeightingFilterType: ...
    @WeightingFilter.setter
    def WeightingFilter(self, value: SignalPathWeightingFilterType) -> SignalPathWeightingFilterType: ...


class SignalPathMeasurandChannel:
    @property
    def Channel(self) -> InputChannelIndex: ...
    @property
    def ExpectedSensitivity(self) -> DoubleSetting: ...
    @property
    def Gain(self) -> DoubleSetting: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Sensitivity(self) -> DoubleSetting: ...
    @property
    def SensitivityTolerance(self) -> DoubleSetting: ...
    @property
    def SerialNumber(self) -> str: ...
    @SerialNumber.setter
    def SerialNumber(self, value: str) -> str: ...
    @property
    def Source(self) -> InputChannelIndex: ...
    @Source.setter
    def Source(self, value: InputChannelIndex) -> InputChannelIndex: ...
    def Calibrate(self) -> None: ...


class SignalPathMeasurandChannelCollection:
    @property
    def CalibratorFrequency(self) -> float: ...
    @CalibratorFrequency.setter
    def CalibratorFrequency(self, value: float) -> float: ...
    @property
    def CalibratorFrequencyTolerance(self) -> float: ...
    @CalibratorFrequencyTolerance.setter
    def CalibratorFrequencyTolerance(self, value: float) -> float: ...
    @property
    def CalibratorLevel(self) -> DoubleSetting: ...
    @property
    def Count(self) -> int: ...
    @Count.setter
    def Count(self, value: int) -> int: ...
    @property
    def Item(self) -> SignalPathMeasurandChannel: ...
    def ResetCalibrationValues(self) -> None: ...


class SignalPathMeasurandSettings:
    @property
    def AutoChannels(self) -> bool: ...
    @AutoChannels.setter
    def AutoChannels(self, value: bool) -> bool: ...
    @property
    def Channels(self) -> SignalPathMeasurandChannelCollection: ...
    @property
    def Measure(self) -> MeasurandType: ...
    @Measure.setter
    def Measure(self, value: MeasurandType) -> MeasurandType: ...
    @property
    def TedsCalibration(self) -> TedsCalibration: ...


class SignalPathSettings:
    @property
    def AcousticOutput(self) -> bool: ...
    @AcousticOutput.setter
    def AcousticOutput(self, value: bool) -> bool: ...
    @property
    def AdcTest(self) -> AdcTestSettings: ...
    @property
    def AdvancedDigitalOutput(self) -> AdvancedDigitalOutputSettings: ...
    @property
    def AnalogFileInputFullScaleVoltageRatio(self) -> float: ...
    @AnalogFileInputFullScaleVoltageRatio.setter
    def AnalogFileInputFullScaleVoltageRatio(self, value: float) -> float: ...
    @property
    def AnalogInput(self) -> AnalogInputSettings: ...
    @property
    def AnalogOutput(self) -> AnalogOutputSettings: ...
    @property
    def Asio(self) -> AsioSettings: ...
    @property
    def AutoChannels(self) -> bool: ...
    @AutoChannels.setter
    def AutoChannels(self, value: bool) -> bool: ...
    @property
    def AutoGeneratorLevel(self) -> ReferenceLevelsAutoGeneratorLevelSetter: ...
    @property
    def BatteryCurrentInput(self) -> BatteryCurrentInputSettings: ...
    @property
    def BatteryPowerOn(self) -> bool: ...
    @BatteryPowerOn.setter
    def BatteryPowerOn(self, value: bool) -> bool: ...
    @property
    def BatteryVoltage(self) -> DoubleSetting: ...
    @property
    def Bluetooth(self) -> BluetoothSignalPathSettings: ...
    @property
    def Channels(self) -> SignalPathMeasurandChannelCollection: ...
    @property
    def Clocks(self) -> ClockSyncSettings: ...
    @property
    def DeviceDelay(self) -> DoubleSetting: ...
    @property
    def DigitalInput(self) -> DigitalInputSettings: ...
    @property
    def DigitalOutput(self) -> SpdifDigitalOutputSettings: ...
    @property
    def Hdmi2ArcInput(self) -> Hdmi2ArcInputSettings: ...
    @property
    def Hdmi2ArcOutput(self) -> Hdmi2ArcOutputSettings: ...
    @property
    def Hdmi2EArcInput(self) -> Hdmi2eArcInputSettings: ...
    @property
    def Hdmi2EArcOutput(self) -> Hdmi2EArcOutputSettings: ...
    @property
    def Hdmi2Input(self) -> Hdmi2InputSettings: ...
    @property
    def Hdmi2Output(self) -> Hdmi2OutputSettings: ...
    @property
    def HdmiArcInput(self) -> HdmiArcInputSettings: ...
    @property
    def HdmiArcOutput(self) -> HdmiArcOutputSettings: ...
    @property
    def HdmiInput(self) -> HdmiInputSettings: ...
    @property
    def HdmiOutput(self) -> HdmiOutputSettings: ...
    @property
    def HeadphoneAmplifier(self) -> HeadphoneAmplifierSettings: ...
    @property
    def HighpassFilter(self) -> HighpassFilterMode: ...
    @HighpassFilter.setter
    def HighpassFilter(self, value: HighpassFilterMode) -> HighpassFilterMode: ...
    @property
    def HighpassFilterFrequency(self) -> float: ...
    @HighpassFilterFrequency.setter
    def HighpassFilterFrequency(self, value: float) -> float: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def InputChannelCount(self) -> int: ...
    @property
    def InputConnector(self) -> InputConnector: ...
    @property
    def InputEqChannels(self) -> InputEqSettingsCollection: ...
    @property
    def InputSwitcherConfiguration(self) -> InputSwitcherConfigurationCollection: ...
    @property
    def IsAnalogLoopbackSupported(self) -> bool: ...
    @property
    def IsApplicable(self) -> bool: ...
    @property
    def Loopback(self) -> bool: ...
    @Loopback.setter
    def Loopback(self, value: bool) -> bool: ...
    @property
    def LowpassFilterAnalog(self) -> LowpassFilterModeAnalog: ...
    @LowpassFilterAnalog.setter
    def LowpassFilterAnalog(self, value: LowpassFilterModeAnalog) -> LowpassFilterModeAnalog: ...
    @property
    def LowpassFilterAnalogBandwidth(self) -> AdcBandwidth: ...
    @LowpassFilterAnalogBandwidth.setter
    def LowpassFilterAnalogBandwidth(self, value: AdcBandwidth) -> AdcBandwidth: ...
    @property
    def LowpassFilterDigital(self) -> LowpassFilterModeDigital: ...
    @LowpassFilterDigital.setter
    def LowpassFilterDigital(self, value: LowpassFilterModeDigital) -> LowpassFilterModeDigital: ...
    @property
    def LowpassFilterFrequencyAnalog(self) -> float: ...
    @LowpassFilterFrequencyAnalog.setter
    def LowpassFilterFrequencyAnalog(self, value: float) -> float: ...
    @property
    def LowpassFilterFrequencyDigital(self) -> float: ...
    @LowpassFilterFrequencyDigital.setter
    def LowpassFilterFrequencyDigital(self, value: float) -> float: ...
    @property
    def Measure(self) -> MeasurandType: ...
    @Measure.setter
    def Measure(self, value: MeasurandType) -> MeasurandType: ...
    @property
    def MicBiasVoltageOn(self) -> bool: ...
    @MicBiasVoltageOn.setter
    def MicBiasVoltageOn(self, value: bool) -> bool: ...
    @property
    def MicInput(self) -> MicInputSettings: ...
    @property
    def OutputChannelCount(self) -> int: ...
    @property
    def OutputConnector(self) -> OutputConnector: ...
    @property
    def OutputEq(self) -> EqSettings: ...
    @property
    def OutputSwitcherConfiguration(self) -> OutputSwitcherConfigurationCollection: ...
    @property
    def PDM16Input(self) -> PDM16InputSettings: ...
    @property
    def PdmInput(self) -> PdmInputSettings: ...
    @property
    def PdmOutput(self) -> PdmOutputSettings: ...
    @property
    def PowerAmplifier(self) -> PowerAmplifierSettings: ...
    @property
    def References(self) -> References: ...
    @property
    def SerialDigitalReceiver(self) -> SerialDigitalReceiverSettings: ...
    @property
    def SerialDigitalTransmitter(self) -> SerialDigitalTransmitterSettings: ...
    @property
    def TedsCalibration(self) -> TedsCalibration: ...
    @property
    def TransducerInput(self) -> TransducerInputSetting: ...
    @property
    def TransducerOutput(self) -> TransducerOutputSetting: ...
    @property
    def Triggers(self) -> ExternalTriggerSettings: ...
    @property
    def UseInputSwitcher(self) -> bool: ...
    @UseInputSwitcher.setter
    def UseInputSwitcher(self, value: bool) -> bool: ...
    @property
    def UseOutputSwitcher(self) -> bool: ...
    @UseOutputSwitcher.setter
    def UseOutputSwitcher(self, value: bool) -> bool: ...
    @property
    def WeightingFilter(self) -> SignalPathWeightingFilterType: ...
    @WeightingFilter.setter
    def WeightingFilter(self, value: SignalPathWeightingFilterType) -> SignalPathWeightingFilterType: ...
    def InputSettings(self, input: APxInputSelection) -> SignalPathInputSettings: ...
    def ScanMicrophonePowerModules(self) -> Array_1[IMicrophonePowerModuleInfo]: ...


class SignalPathSetup:
    @property
    def AcousticOutput(self) -> bool: ...
    @AcousticOutput.setter
    def AcousticOutput(self, value: bool) -> bool: ...
    @property
    def AdcTest(self) -> AdcTestSettings: ...
    @property
    def AdvancedDigitalOutput(self) -> AdvancedDigitalOutputSettings: ...
    @property
    def AnalogFileInputFullScaleVoltageRatio(self) -> float: ...
    @AnalogFileInputFullScaleVoltageRatio.setter
    def AnalogFileInputFullScaleVoltageRatio(self, value: float) -> float: ...
    @property
    def AnalogInput(self) -> AnalogInputSettings: ...
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def AnalogOutput(self) -> AnalogOutputSettings: ...
    @property
    def Asio(self) -> AsioSettings: ...
    @property
    def AutoChannels(self) -> bool: ...
    @AutoChannels.setter
    def AutoChannels(self, value: bool) -> bool: ...
    @property
    def AutoGeneratorLevel(self) -> ReferenceLevelsAutoGeneratorLevelSetter: ...
    @property
    def BatteryCurrentInput(self) -> BatteryCurrentInputSettings: ...
    @property
    def BatteryPowerOn(self) -> bool: ...
    @BatteryPowerOn.setter
    def BatteryPowerOn(self, value: bool) -> bool: ...
    @property
    def BatteryVoltage(self) -> DoubleSetting: ...
    @property
    def Bits(self) -> BitsGraph: ...
    @property
    def Bluetooth(self) -> BluetoothSignalPathSettings: ...
    @property
    def Channels(self) -> SignalPathMeasurandChannelCollection: ...
    @property
    def Clocks(self) -> ClockSyncSettings: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def Dcx(self) -> DcxSettings: ...
    @property
    def DeviceDelay(self) -> DoubleSetting: ...
    @property
    def DigitalInput(self) -> DigitalInputSettings: ...
    @property
    def DigitalInterfaceLevel(self) -> float: ...
    @property
    def DigitalOutput(self) -> SpdifDigitalOutputSettings: ...
    @property
    def ErrorRate(self) -> MeterGraph: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Frequency(self) -> MeterGraph: ...
    @property
    def Gain(self) -> MeterGraph: ...
    @property
    def Generator(self) -> SignalPathSetupGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def Hdmi2ArcInput(self) -> Hdmi2ArcInputSettings: ...
    @property
    def Hdmi2ArcOutput(self) -> Hdmi2ArcOutputSettings: ...
    @property
    def Hdmi2EArcInput(self) -> Hdmi2eArcInputSettings: ...
    @property
    def Hdmi2EArcOutput(self) -> Hdmi2EArcOutputSettings: ...
    @property
    def Hdmi2Input(self) -> Hdmi2InputSettings: ...
    @property
    def Hdmi2Output(self) -> Hdmi2OutputSettings: ...
    @property
    def HdmiArcInput(self) -> HdmiArcInputSettings: ...
    @property
    def HdmiArcOutput(self) -> HdmiArcOutputSettings: ...
    @property
    def HdmiInput(self) -> HdmiInputSettings: ...
    @property
    def HdmiOutput(self) -> HdmiOutputSettings: ...
    @property
    def HeadphoneAmplifier(self) -> HeadphoneAmplifierSettings: ...
    @property
    def HighpassFilter(self) -> HighpassFilterMode: ...
    @HighpassFilter.setter
    def HighpassFilter(self, value: HighpassFilterMode) -> HighpassFilterMode: ...
    @property
    def HighpassFilterFrequency(self) -> float: ...
    @HighpassFilterFrequency.setter
    def HighpassFilterFrequency(self, value: float) -> float: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def InputChannelCount(self) -> int: ...
    @property
    def InputConnector(self) -> InputConnector: ...
    @property
    def InputEqChannels(self) -> InputEqSettingsCollection: ...
    @property
    def InputSwitcherConfiguration(self) -> InputSwitcherConfigurationCollection: ...
    @property
    def IsAnalogLoopbackSupported(self) -> bool: ...
    @property
    def IsApplicable(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Level(self) -> MeterGraph: ...
    @property
    def Loopback(self) -> bool: ...
    @Loopback.setter
    def Loopback(self, value: bool) -> bool: ...
    @property
    def LowpassFilterAnalog(self) -> LowpassFilterModeAnalog: ...
    @LowpassFilterAnalog.setter
    def LowpassFilterAnalog(self, value: LowpassFilterModeAnalog) -> LowpassFilterModeAnalog: ...
    @property
    def LowpassFilterAnalogBandwidth(self) -> AdcBandwidth: ...
    @LowpassFilterAnalogBandwidth.setter
    def LowpassFilterAnalogBandwidth(self, value: AdcBandwidth) -> AdcBandwidth: ...
    @property
    def LowpassFilterDigital(self) -> LowpassFilterModeDigital: ...
    @LowpassFilterDigital.setter
    def LowpassFilterDigital(self, value: LowpassFilterModeDigital) -> LowpassFilterModeDigital: ...
    @property
    def LowpassFilterFrequencyAnalog(self) -> float: ...
    @LowpassFilterFrequencyAnalog.setter
    def LowpassFilterFrequencyAnalog(self, value: float) -> float: ...
    @property
    def LowpassFilterFrequencyDigital(self) -> float: ...
    @LowpassFilterFrequencyDigital.setter
    def LowpassFilterFrequencyDigital(self, value: float) -> float: ...
    @property
    def Measure(self) -> MeasurandType: ...
    @Measure.setter
    def Measure(self, value: MeasurandType) -> MeasurandType: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def MicBiasVoltageOn(self) -> bool: ...
    @MicBiasVoltageOn.setter
    def MicBiasVoltageOn(self, value: bool) -> bool: ...
    @property
    def MicInput(self) -> MicInputSettings: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OutputChannelCount(self) -> int: ...
    @property
    def OutputConnector(self) -> OutputConnector: ...
    @property
    def OutputEq(self) -> EqSettings: ...
    @property
    def OutputSwitcherConfiguration(self) -> OutputSwitcherConfigurationCollection: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def PDM16Input(self) -> PDM16InputSettings: ...
    @property
    def PdmInput(self) -> PdmInputSettings: ...
    @property
    def PdmOutput(self) -> PdmOutputSettings: ...
    @property
    def PowerAmplifier(self) -> PowerAmplifierSettings: ...
    @property
    def References(self) -> References: ...
    @property
    def RmsLevelAcPlusDc(self) -> MeterGraph: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def SequenceSettings(self) -> ReferenceLevelsSequenceSettings: ...
    @property
    def SerialDigitalReceiver(self) -> SerialDigitalReceiverSettings: ...
    @property
    def SerialDigitalTransmitter(self) -> SerialDigitalTransmitterSettings: ...
    @property
    def Settling(self) -> SignalPathSetupSettlingParametersCollection: ...
    @property
    def TedsCalibration(self) -> TedsCalibration: ...
    @property
    def ThdNRatio(self) -> MeterGraph: ...
    @property
    def TransducerInput(self) -> TransducerInputSetting: ...
    @property
    def TransducerOutput(self) -> TransducerOutputSetting: ...
    @property
    def Triggers(self) -> ExternalTriggerSettings: ...
    @property
    def UseInputSwitcher(self) -> bool: ...
    @UseInputSwitcher.setter
    def UseInputSwitcher(self, value: bool) -> bool: ...
    @property
    def UseOutputSwitcher(self) -> bool: ...
    @UseOutputSwitcher.setter
    def UseOutputSwitcher(self, value: bool) -> bool: ...
    @property
    def VerifyConnectionsVisible(self) -> bool: ...
    @VerifyConnectionsVisible.setter
    def VerifyConnectionsVisible(self, value: bool) -> bool: ...
    @property
    def WeightingFilter(self) -> SignalPathWeightingFilterType: ...
    @WeightingFilter.setter
    def WeightingFilter(self, value: SignalPathWeightingFilterType) -> SignalPathWeightingFilterType: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def InputSettings(self, input: APxInputSelection) -> SignalPathInputSettings: ...
    def ScanMicrophonePowerModules(self) -> Array_1[IMicrophonePowerModuleInfo]: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class SignalPathSetupGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def AnalogType(self) -> GeneratorType: ...
    @property
    def ConstantValues(self) -> ConstantValues: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def NoiseShape(self) -> NoiseShape: ...
    @NoiseShape.setter
    def NoiseShape(self, value: NoiseShape) -> NoiseShape: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def SamplesPerStep(self) -> int: ...
    @SamplesPerStep.setter
    def SamplesPerStep(self, value: int) -> int: ...
    @property
    def SineBurst(self) -> SineBurstGeneratorSettings: ...
    @property
    def SineDual(self) -> SineDualGenerator: ...
    @property
    def SineVarPhase(self) -> SineVarPhaseGenerator: ...
    @property
    def Type(self) -> SplitSineWithFileGeneratorType: ...
    @property
    def VerificationChannel(self) -> SignalPathSetupOutputChannelIndex: ...
    @VerificationChannel.setter
    def VerificationChannel(self, value: SignalPathSetupOutputChannelIndex) -> SignalPathSetupOutputChannelIndex: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class SignalPathSetupOutputChannelIndex(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Ch1 : SignalPathSetupOutputChannelIndex # 0
    Ch2 : SignalPathSetupOutputChannelIndex # 1
    Ch3 : SignalPathSetupOutputChannelIndex # 2
    Ch4 : SignalPathSetupOutputChannelIndex # 3
    Ch5 : SignalPathSetupOutputChannelIndex # 4
    Ch6 : SignalPathSetupOutputChannelIndex # 5
    Ch7 : SignalPathSetupOutputChannelIndex # 6
    Ch8 : SignalPathSetupOutputChannelIndex # 7
    Ch9 : SignalPathSetupOutputChannelIndex # 8
    Ch10 : SignalPathSetupOutputChannelIndex # 9
    Ch11 : SignalPathSetupOutputChannelIndex # 10
    Ch12 : SignalPathSetupOutputChannelIndex # 11
    Ch13 : SignalPathSetupOutputChannelIndex # 12
    Ch14 : SignalPathSetupOutputChannelIndex # 13
    Ch15 : SignalPathSetupOutputChannelIndex # 14
    Ch16 : SignalPathSetupOutputChannelIndex # 15
    AllChannels : SignalPathSetupOutputChannelIndex # -1


class SignalPathSetupSettlingParametersCollection:
    @property
    def Frequency(self) -> SettlingParameters: ...
    @property
    def Level(self) -> SettlingParameters: ...
    @property
    def RmsLevelAcPlusDc(self) -> SettlingParameters: ...
    @property
    def ThdN(self) -> SettlingParameters: ...


class SignalPathWeightingFilterType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    wt_None : SignalPathWeightingFilterType # 0
    wt_A : SignalPathWeightingFilterType # 1
    wt_B : SignalPathWeightingFilterType # 2
    wt_C : SignalPathWeightingFilterType # 3
    wt_Ccir : SignalPathWeightingFilterType # 4
    wt_Dolby2k : SignalPathWeightingFilterType # 5
    wt_Ccitt : SignalPathWeightingFilterType # 6
    wt_CMessage : SignalPathWeightingFilterType # 7
    wt_Deemph50us : SignalPathWeightingFilterType # 8
    wt_Deemph75us : SignalPathWeightingFilterType # 9
    wt_Deemph50usA : SignalPathWeightingFilterType # 10
    wt_Deemph75usA : SignalPathWeightingFilterType # 11


class SignalProcessing:
    @property
    def ImpedanceThieleSmall(self) -> SignalProcessingImpedanceThieleSmall: ...


class SignalProcessingImpedanceThieleSmall:
    def ComputeFreeAir(self, reImf: Array_1[float], imImp: Array_1[float], frImp: Array_1[float], fFtMin: float, fFitMax: float, model: ThieleSmallModelFit, dcResistance: float) -> SignalProcessingImpedanceThieleSmallResults: ...


class SignalProcessingImpedanceThieleSmallResults:
    @property
    def Parameters(self) -> Array_1[ThieleSmallParameter]: ...
    def GetText(self, parameter: ThieleSmallParameter, withUnitString: bool) -> str: ...
    def GetValue(self, parameter: ThieleSmallParameter) -> float: ...


class SignalToNoiseRatioGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def SineDual(self) -> SineDualGenerator: ...
    @property
    def SineVarPhase(self) -> SineVarPhaseGenerator: ...
    @property
    def Type(self) -> SplitSineWithFileGeneratorType: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class SignalToNoiseRatioMeasurement:
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> SignalToNoiseRatioGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def HighpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def HighpassFilterType(self) -> MeasurementHighpassFilterType: ...
    @HighpassFilterType.setter
    def HighpassFilterType(self, value: MeasurementHighpassFilterType) -> MeasurementHighpassFilterType: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def LowpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def LowpassFilterType(self) -> MeasurementLowpassFilterType: ...
    @LowpassFilterType.setter
    def LowpassFilterType(self, value: MeasurementLowpassFilterType) -> MeasurementLowpassFilterType: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NoiseWeighting(self) -> WeightingFilterType: ...
    @NoiseWeighting.setter
    def NoiseWeighting(self, value: WeightingFilterType) -> WeightingFilterType: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def Settling(self) -> SignalToNoiseSettlingParametersCollection: ...
    @property
    def SignalToNoiseRatio(self) -> MeterGraph: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class SignalToNoiseSettlingParametersCollection:
    @property
    def Noise(self) -> SettlingParameters: ...
    @property
    def Signal(self) -> SettlingParameters: ...


class SinadGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def GeneratorType(self) -> SinadGeneratorType: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class SinadGeneratorType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Sinad400Hz : SinadGeneratorType # 0
    Sinad1Khz : SinadGeneratorType # 1
    File : SinadGeneratorType # 2


class SinadMeasurement:
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def Enob(self) -> MeterGraph: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> SinadGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def HighpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def HighpassFilterType(self) -> MeasurementHighpassFilterType: ...
    @HighpassFilterType.setter
    def HighpassFilterType(self, value: MeasurementHighpassFilterType) -> MeasurementHighpassFilterType: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def LowpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def LowpassFilterType(self) -> MeasurementLowpassFilterType: ...
    @LowpassFilterType.setter
    def LowpassFilterType(self, value: MeasurementLowpassFilterType) -> MeasurementLowpassFilterType: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NoiseWeighting(self) -> WeightingFilterType: ...
    @NoiseWeighting.setter
    def NoiseWeighting(self, value: WeightingFilterType) -> WeightingFilterType: ...
    @property
    def NotchFilterFrequency(self) -> DoubleSetting: ...
    @property
    def NotchTuningMode(self) -> FilterTuningType: ...
    @NotchTuningMode.setter
    def NotchTuningMode(self, value: FilterTuningType) -> FilterTuningType: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def Settling(self) -> SinadSettlingParametersCollection: ...
    @property
    def SinadRatio(self) -> MeterGraph: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class SinadSettlingParametersCollection:
    @property
    def Sinad(self) -> SettlingParameters: ...


class SineBurstGenerator:
    @property
    def SineBurst(self) -> SineBurstGeneratorSettings: ...


class SineBurstGeneratorSettings:
    @property
    def HighTimeCycles(self) -> int: ...
    @HighTimeCycles.setter
    def HighTimeCycles(self, value: int) -> int: ...
    @property
    def HighTimeSeconds(self) -> float: ...
    @HighTimeSeconds.setter
    def HighTimeSeconds(self, value: float) -> float: ...
    @property
    def IntervalCycles(self) -> int: ...
    @IntervalCycles.setter
    def IntervalCycles(self, value: int) -> int: ...
    @property
    def IntervalSeconds(self) -> float: ...
    @IntervalSeconds.setter
    def IntervalSeconds(self, value: float) -> float: ...
    @property
    def LengthType(self) -> SineBurstLengthType: ...
    @LengthType.setter
    def LengthType(self, value: SineBurstLengthType) -> SineBurstLengthType: ...
    @property
    def LowHighRatio(self) -> DoubleSetting: ...


class SineBurstLengthType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Cycles : SineBurstLengthType # 0
    Seconds : SineBurstLengthType # 1


class SineDualGenerator:
    @property
    def Frequency1ToFrequency2AmplitudeRatio(self) -> DoubleSetting: ...
    @property
    def FrequencyB(self) -> DoubleSetting: ...
    @property
    def Split(self) -> bool: ...
    @Split.setter
    def Split(self, value: bool) -> bool: ...
    def GetOutputChannelAssignment(self, ch: OutputChannelIndex) -> OutputChannelAssignment: ...
    def ResetChannelAssignments(self, setting: OutputChannelAssignments) -> None: ...
    def SetOutputChannelAssignment(self, ch: OutputChannelIndex, assignment: OutputChannelAssignment) -> None: ...


class SineGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class SineVarPhaseGenerator:
    @property
    def PhaseB(self) -> DoubleSetting: ...
    def GetOutputChannelAssignment(self, ch: OutputChannelIndex) -> OutputChannelAssignment: ...
    def ResetChannelAssignments(self, setting: OutputChannelAssignments) -> None: ...
    def SetOutputChannelAssignment(self, ch: OutputChannelIndex, assignment: OutputChannelAssignment) -> None: ...


class SineWithArbGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def Type(self) -> GeneratorType: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class SingleInputChannelIndex(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Ch1 : SingleInputChannelIndex # 0
    Ch2 : SingleInputChannelIndex # 1
    Ch3 : SingleInputChannelIndex # 2
    Ch4 : SingleInputChannelIndex # 3
    Ch5 : SingleInputChannelIndex # 4
    Ch6 : SingleInputChannelIndex # 5
    Ch7 : SingleInputChannelIndex # 6
    Ch8 : SingleInputChannelIndex # 7


class SmoothResult:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def OctaveSmoothing(self) -> OctaveSmoothingType: ...
    @OctaveSmoothing.setter
    def OctaveSmoothing(self, value: OctaveSmoothingType) -> OctaveSmoothingType: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def Source(self) -> Graph: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def HasDataOnAxis(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> bool: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetData due to it being static, abstract and generic.

    GetData : GetData_MethodGroup
    class GetData_MethodGroup:
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> XYValues:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int) -> XYValues:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class SmpteGeneratorLevelRatio(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    OneToOne : SmpteGeneratorLevelRatio # 0
    FourToOne : SmpteGeneratorLevelRatio # 1
    TenToOne : SmpteGeneratorLevelRatio # 2


class SoneTracDecimation(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : SoneTracDecimation # 0
    Octave24 : SoneTracDecimation # 1
    Octave12 : SoneTracDecimation # 2
    Octave6 : SoneTracDecimation # 3
    Octave3 : SoneTracDecimation # 4


class SoneTracResidualGraph:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def HpFactor(self) -> float: ...
    @HpFactor.setter
    def HpFactor(self, value: float) -> float: ...
    @property
    def HpFilterFrequency(self) -> DoubleSetting: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def LpFilterFrequency(self) -> DoubleSetting: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def ExportWav(self, fileName: str, audioFileType: FileAudioType, bitDepth: SavedAcquisitionBitDepthType, dataType: SourceDataType, dataIndex: int, replaceFileIfExists: bool) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def HasDataOnAxis(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> bool: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetData due to it being static, abstract and generic.

    GetData : GetData_MethodGroup
    class GetData_MethodGroup:
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> XYValues:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int) -> XYValues:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class SoneTracRubAndBuzzGraph:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def Decimation(self) -> SoneTracDecimation: ...
    @Decimation.setter
    def Decimation(self, value: SoneTracDecimation) -> SoneTracDecimation: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def Detector(self) -> DetectorType: ...
    @Detector.setter
    def Detector(self, value: DetectorType) -> DetectorType: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def HannFadeIn(self) -> float: ...
    @HannFadeIn.setter
    def HannFadeIn(self, value: float) -> float: ...
    @property
    def HpFactor(self) -> float: ...
    @HpFactor.setter
    def HpFactor(self, value: float) -> float: ...
    @property
    def HpFilterFrequency(self) -> DoubleSetting: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def LpFilterFrequency(self) -> DoubleSetting: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PostMask(self) -> float: ...
    @PostMask.setter
    def PostMask(self, value: float) -> float: ...
    @property
    def PreMask(self) -> float: ...
    @PreMask.setter
    def PreMask(self, value: float) -> float: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def TukeyFraction(self) -> float: ...
    @TukeyFraction.setter
    def TukeyFraction(self, value: float) -> float: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def WindowType(self) -> SoneTracWindowType: ...
    @WindowType.setter
    def WindowType(self, value: SoneTracWindowType) -> SoneTracWindowType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def HasDataOnAxis(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> bool: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetData due to it being static, abstract and generic.

    GetData : GetData_MethodGroup
    class GetData_MethodGroup:
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> XYValues:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int) -> XYValues:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class SoneTracWindowType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Hanning : SoneTracWindowType # 0
    Tukey : SoneTracWindowType # 1


class SourceDataType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Measured : SourceDataType # 0
    Imported : SourceDataType # 1
    CustomData : SourceDataType # 2


class SpdifDigitalOutputSettings:
    @property
    def BitDepth(self) -> int: ...
    @BitDepth.setter
    def BitDepth(self, value: int) -> int: ...
    @property
    def Dither(self) -> bool: ...
    @Dither.setter
    def Dither(self, value: bool) -> bool: ...
    @property
    def Metadata(self) -> SpdifOutputMetadata: ...
    @property
    def ProfessionalMode(self) -> bool: ...
    @ProfessionalMode.setter
    def ProfessionalMode(self, value: bool) -> bool: ...
    @property
    def SampleRate(self) -> DoubleSetting: ...
    @property
    def ScaleFreqBy(self) -> ScaleDigitalOutputFreqBy: ...
    @ScaleFreqBy.setter
    def ScaleFreqBy(self, value: ScaleDigitalOutputFreqBy) -> ScaleDigitalOutputFreqBy: ...
    @property
    def ScaleFreqByFixedRate(self) -> float: ...
    @ScaleFreqByFixedRate.setter
    def ScaleFreqByFixedRate(self, value: float) -> float: ...
    def GetValidityBit(self, side: ValidityBitSide) -> ValidityBitType: ...
    def SetValidityBit(self, side: ValidityBitSide, txValid: ValidityBitType) -> None: ...


class SpdifOutputMetadata:
    @property
    def AutoStatusBits(self) -> bool: ...
    @AutoStatusBits.setter
    def AutoStatusBits(self, value: bool) -> bool: ...
    @property
    def StatusBitsA(self) -> DigitalOutputStatusBitsSettings: ...
    @property
    def StatusBitsB(self) -> DigitalOutputStatusBitsSettings: ...
    @property
    def StatusBitsBSameAsSubframeA(self) -> bool: ...
    @StatusBitsBSameAsSubframeA.setter
    def StatusBitsBSameAsSubframeA(self, value: bool) -> bool: ...
    @property
    def UserBytes(self) -> Array_1[int]: ...
    @UserBytes.setter
    def UserBytes(self, value: Array_1[int]) -> Array_1[int]: ...


class SpecifyDataPointsResult:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DataPoints(self) -> Array_1[float]: ...
    @DataPoints.setter
    def DataPoints(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsoSpacing(self) -> IsoRSpacingType: ...
    @IsoSpacing.setter
    def IsoSpacing(self, value: IsoRSpacingType) -> IsoRSpacingType: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def NumberOfPoints(self) -> int: ...
    @NumberOfPoints.setter
    def NumberOfPoints(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def Source(self) -> Graph: ...
    @property
    def StepSize(self) -> DoubleSetting: ...
    @property
    def StepType(self) -> SweepStepType: ...
    @StepType.setter
    def StepType(self, value: SweepStepType) -> SweepStepType: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def ConfigureDataPoints(self, min: float, max: float, numPoints: int, isLog: bool) -> None: ...
    def ConfigureIsoDataPoints(self, min: float, max: float, isoSpacing: IsoRSpacingType) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def Export(self, fileName: str) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def HasDataOnAxis(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> bool: ...
    def Import(self, fileName: str) -> None: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetData due to it being static, abstract and generic.

    GetData : GetData_MethodGroup
    class GetData_MethodGroup:
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> XYValues:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int) -> XYValues:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class SpecifySingleDataPointFromLevelAndDistortionResult:
    @property
    def Axis(self) -> GraphAxis: ...
    @property
    def Channel(self) -> SignalPathSetupOutputChannelIndex: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DataSelection(self) -> LevelAndDistortionDataSelection: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def HarmonicIndex(self) -> DistortionHarmonicIndex: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Limits(self) -> MeterLimits: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def Source(self) -> Graph: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XValue(self) -> float: ...
    @XValue.setter
    def XValue(self, value: float) -> float: ...
    def CopyToClipboard(self) -> None: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetTraceColor(self, traceIndex: int) -> Color: ...
    def GetTraceName(self, traceIndex: int) -> str: ...
    def ResetTraceStyle(self, traceIndex: int) -> None: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SelectAllChannelsOneTrace(self, harmonicIndex: DistortionHarmonicIndex) -> None: ...
    def SelectAllTracesOneChannel(self, channelIndex: InputChannelIndex) -> None: ...
    def SetTraceColor(self, traceIndex: int, color: Color) -> None: ...
    def SetTraceName(self, traceIndex: int, name: str) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, unit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool]) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool], append: bool) -> None:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[str]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[str]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[float]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[float]:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...



class SpecifySingleDataPointResult:
    @property
    def Axis(self) -> GraphAxis: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DataSetType(self) -> MeterDataSetType: ...
    @DataSetType.setter
    def DataSetType(self, value: MeterDataSetType) -> MeterDataSetType: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Limits(self) -> MeterLimits: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def Source(self) -> Graph: ...
    @property
    def SourceDataSet(self) -> int: ...
    @SourceDataSet.setter
    def SourceDataSet(self, value: int) -> int: ...
    @property
    def SourceDataSetType(self) -> SourceDataType: ...
    @SourceDataSetType.setter
    def SourceDataSetType(self, value: SourceDataType) -> SourceDataType: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XValue(self) -> float: ...
    @XValue.setter
    def XValue(self, value: float) -> float: ...
    def CopyToClipboard(self) -> None: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetTraceColor(self, traceIndex: int) -> Color: ...
    def GetTraceName(self, traceIndex: int) -> str: ...
    def ResetTraceStyle(self, traceIndex: int) -> None: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetTraceColor(self, traceIndex: int, color: Color) -> None: ...
    def SetTraceName(self, traceIndex: int, name: str) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, unit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool]) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool], append: bool) -> None:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[str]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[str]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[float]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[float]:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...



class SplitSineGenerator:
    @property
    def SineDual(self) -> SineDualGenerator: ...
    @property
    def SineVarPhase(self) -> SineVarPhaseGenerator: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...


class SplitSineGeneratorType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Sine : SplitSineGeneratorType # 0
    SplitFrequency : SplitSineGeneratorType # 1
    SplitPhase : SplitSineGeneratorType # 2


class SplitSineWithArbGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def SineDual(self) -> SineDualGenerator: ...
    @property
    def SineVarPhase(self) -> SineVarPhaseGenerator: ...
    @property
    def Type(self) -> SplitSineWithFileGeneratorType: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class SplitSineWithFileGeneratorType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Sine : SplitSineWithFileGeneratorType # 0
    SplitFrequency : SplitSineWithFileGeneratorType # 1
    SplitPhase : SplitSineWithFileGeneratorType # 2
    File : SplitSineWithFileGeneratorType # 3


class SquarewaveGeneratorType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : SquarewaveGeneratorType # 0
    Sine : SquarewaveGeneratorType # 1
    Square : SquarewaveGeneratorType # 2
    SineDual : SquarewaveGeneratorType # 3
    SineDualImd : SquarewaveGeneratorType # 4
    SineVarPhase : SquarewaveGeneratorType # 5
    Sinad_400Hz : SquarewaveGeneratorType # 6
    Sinad_1kHz : SquarewaveGeneratorType # 7
    IMD : SquarewaveGeneratorType # 8
    WalkingZeros : SquarewaveGeneratorType # 9
    WalkingOnes : SquarewaveGeneratorType # 10
    ConstantValue : SquarewaveGeneratorType # 11
    BittestRandom : SquarewaveGeneratorType # 12
    Noise : SquarewaveGeneratorType # 13
    SineBurst : SquarewaveGeneratorType # 14
    Custom : SquarewaveGeneratorType # 15
    File : SquarewaveGeneratorType # 16


class SquareWithArbGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def SineDual(self) -> SineDualGenerator: ...
    @property
    def SineVarPhase(self) -> SineVarPhaseGenerator: ...
    @property
    def Type(self) -> SquarewaveGeneratorType: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class StartAnalogSineWaveGeneratorStep:
    @property
    def AdcTest(self) -> AdcTestSettings: ...
    @property
    def AdvancedAnalogOutput(self) -> AdvancedAnalogOutputSettings: ...
    @property
    def BalancedSourceImpedance(self) -> AnalogBalancedSourceImpedance: ...
    @BalancedSourceImpedance.setter
    def BalancedSourceImpedance(self, value: AnalogBalancedSourceImpedance) -> AnalogBalancedSourceImpedance: ...
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Ch1Enabled(self) -> bool: ...
    @Ch1Enabled.setter
    def Ch1Enabled(self, value: bool) -> bool: ...
    @property
    def Ch2Enabled(self) -> bool: ...
    @Ch2Enabled.setter
    def Ch2Enabled(self, value: bool) -> bool: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def Connector(self) -> OutputConnectorType: ...
    @Connector.setter
    def Connector(self, value: OutputConnectorType) -> OutputConnectorType: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    @property
    def TrackFirstChannel(self) -> bool: ...
    @TrackFirstChannel.setter
    def TrackFirstChannel(self, value: bool) -> bool: ...
    @property
    def UnbalancedSourceImpedance(self) -> AnalogUnbalancedSourceImpedance: ...
    @UnbalancedSourceImpedance.setter
    def UnbalancedSourceImpedance(self, value: AnalogUnbalancedSourceImpedance) -> AnalogUnbalancedSourceImpedance: ...
    @property
    def Unit(self) -> str: ...
    @Unit.setter
    def Unit(self, value: str) -> str: ...
    @property
    def UnitList(self) -> Array_1[str]: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...
    # Skipped GetLevel due to it being static, abstract and generic.

    GetLevel : GetLevel_MethodGroup
    class GetLevel_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> float:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, unit: str) -> float:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> str:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, unit: str) -> str:...

    # Skipped SetLevel due to it being static, abstract and generic.

    SetLevel : SetLevel_MethodGroup
    class SetLevel_MethodGroup:
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, level: float) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, level: str) -> None:...



class StartAnalogSineWaveGeneratorStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> StartAnalogSineWaveGeneratorStep: ...
    def Add(self) -> StartAnalogSineWaveGeneratorStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class StartStopSweepParameters:
    @property
    def NumberOfPoints(self) -> int: ...
    @NumberOfPoints.setter
    def NumberOfPoints(self, value: int) -> int: ...
    @property
    def Start(self) -> DoubleSetting: ...
    @property
    def StepSize(self) -> DoubleSetting: ...
    @property
    def StepType(self) -> SweepStepType: ...
    @StepType.setter
    def StepType(self, value: SweepStepType) -> SweepStepType: ...
    @property
    def Stop(self) -> DoubleSetting: ...
    @property
    def SweepPoints(self) -> Array_1[float]: ...
    @SweepPoints.setter
    def SweepPoints(self, value: Array_1[float]) -> Array_1[float]: ...
    def ExportSweepPoints(self, fileName: str) -> None: ...
    def ImportSweepPoints(self, fileName: str) -> None: ...


class StateChange:
    pass


class StateChangeCollection(IEnumerable):
    def AddChange(self, change: StateChange) -> None: ...
    def CommitChanges(self) -> None: ...
    def GetEnumerator(self) -> IEnumerator: ...


class StatisticsMeterDataTrace:
    @property
    def AllChannels(self) -> bool: ...
    @AllChannels.setter
    def AllChannels(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    def Delete(self) -> None: ...
    # Skipped IsChannelSelected due to it being static, abstract and generic.

    IsChannelSelected : IsChannelSelected_MethodGroup
    class IsChannelSelected_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped SelectChannel due to it being static, abstract and generic.

    SelectChannel : SelectChannel_MethodGroup
    class SelectChannel_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, selected: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, selected: bool) -> None:...



class StatisticsMeterDataTraceCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> StatisticsMeterDataTrace: ...
    def Add(self) -> StatisticsMeterDataTrace: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Remove(self, index: int) -> None: ...


class StatisticsMeterFromLevelAndDistortionResult:
    @property
    def Axis(self) -> GraphAxis: ...
    @property
    def Channel(self) -> SignalPathSetupOutputChannelIndex: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DataSelection(self) -> LevelAndDistortionDataSelection: ...
    @property
    def DataSetType(self) -> MeterDataSetType: ...
    @DataSetType.setter
    def DataSetType(self, value: MeterDataSetType) -> MeterDataSetType: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def Function(self) -> MeterStatisticsFunctionType: ...
    @Function.setter
    def Function(self, value: MeterStatisticsFunctionType) -> MeterStatisticsFunctionType: ...
    @property
    def HarmonicIndex(self) -> DistortionHarmonicIndex: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Limits(self) -> MeterLimits: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def Source(self) -> Graph: ...
    @property
    def SourceDataSet(self) -> int: ...
    @SourceDataSet.setter
    def SourceDataSet(self, value: int) -> int: ...
    @property
    def SourceDataSetType(self) -> SourceDataType: ...
    @SourceDataSetType.setter
    def SourceDataSetType(self, value: SourceDataType) -> SourceDataType: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    def CopyToClipboard(self) -> None: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetTraceColor(self, traceIndex: int) -> Color: ...
    def GetTraceName(self, traceIndex: int) -> str: ...
    def ResetTraceStyle(self, traceIndex: int) -> None: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SelectAllChannelsOneTrace(self, harmonicIndex: DistortionHarmonicIndex) -> None: ...
    def SelectAllTracesOneChannel(self, channelIndex: InputChannelIndex) -> None: ...
    def SetTraceColor(self, traceIndex: int, color: Color) -> None: ...
    def SetTraceName(self, traceIndex: int, name: str) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, unit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool]) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool], append: bool) -> None:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[str]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[str]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[float]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[float]:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...



class StatisticsMeterFromMeterResult:
    @property
    def Axis(self) -> GraphAxis: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def Function(self) -> MeterStatisticsFunctionType: ...
    @Function.setter
    def Function(self, value: MeterStatisticsFunctionType) -> MeterStatisticsFunctionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Limits(self) -> MeterLimits: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def Source(self) -> Graph: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def Traces(self) -> StatisticsMeterDataTraceCollection: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    def CopyToClipboard(self) -> None: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetTraceColor(self, traceIndex: int) -> Color: ...
    def GetTraceName(self, traceIndex: int) -> str: ...
    def ResetTraceStyle(self, traceIndex: int) -> None: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetTraceColor(self, traceIndex: int, color: Color) -> None: ...
    def SetTraceName(self, traceIndex: int, name: str) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, unit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool]) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool], append: bool) -> None:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[str]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[str]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[float]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[float]:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...



class StatisticsMeterFromXYResult:
    @property
    def Axis(self) -> GraphAxis: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DataSetType(self) -> MeterDataSetType: ...
    @DataSetType.setter
    def DataSetType(self, value: MeterDataSetType) -> MeterDataSetType: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def Function(self) -> MeterStatisticsFunctionType: ...
    @Function.setter
    def Function(self, value: MeterStatisticsFunctionType) -> MeterStatisticsFunctionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Limits(self) -> MeterLimits: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def Source(self) -> Graph: ...
    @property
    def SourceDataSet(self) -> int: ...
    @SourceDataSet.setter
    def SourceDataSet(self, value: int) -> int: ...
    @property
    def SourceDataSetType(self) -> SourceDataType: ...
    @SourceDataSetType.setter
    def SourceDataSetType(self, value: SourceDataType) -> SourceDataType: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    def CopyToClipboard(self) -> None: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetTraceColor(self, traceIndex: int) -> Color: ...
    def GetTraceName(self, traceIndex: int) -> str: ...
    def ResetTraceStyle(self, traceIndex: int) -> None: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetTraceColor(self, traceIndex: int, color: Color) -> None: ...
    def SetTraceName(self, traceIndex: int, name: str) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, unit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool]) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool], append: bool) -> None:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[str]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[str]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[float]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[float]:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...



class StatisticsXYLevelAndDistortionResult:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def Function(self) -> XYStatisticsFunctionType: ...
    @Function.setter
    def Function(self, value: XYStatisticsFunctionType) -> XYStatisticsFunctionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def Source(self) -> Graph: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def Traces(self) -> XYLevelAndDistortionDataTraceCollection: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class StatisticsXYResult:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def Function(self) -> XYStatisticsFunctionType: ...
    @Function.setter
    def Function(self, value: XYStatisticsFunctionType) -> XYStatisticsFunctionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def Source(self) -> Graph: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def Traces(self) -> XYDataTraceCollection: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class StatusBitsAlignmentLevel(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NotIndicated : StatusBitsAlignmentLevel # 0
    EbuR68 : StatusBitsAlignmentLevel # 1
    SmpteRP155 : StatusBitsAlignmentLevel # 2
    Reserved : StatusBitsAlignmentLevel # 3


class StatusBitsApplication(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Consumer : StatusBitsApplication # 0
    Professional : StatusBitsApplication # 1


class StatusBitsAudioMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Audio : StatusBitsAudioMode # 0
    NonAudio : StatusBitsAudioMode # 1


class StatusBitsAuxSampleBit(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NotDefined : StatusBitsAuxSampleBit # 0
    Reserved : StatusBitsAuxSampleBit # 1
    Coord : StatusBitsAuxSampleBit # 2
    MainAudio : StatusBitsAuxSampleBit # 4
    UserDefined : StatusBitsAuxSampleBit # 6


class StatusBitsCategoryCode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    General : StatusBitsCategoryCode # 0
    LaserOptical : StatusBitsCategoryCode # 1
    DDConverter : StatusBitsCategoryCode # 2
    Magnetic : StatusBitsCategoryCode # 3
    DigitalBroadcast : StatusBitsCategoryCode # 4
    MusicalInstrument : StatusBitsCategoryCode # 5
    DVD : StatusBitsCategoryCode # 6
    PresentADConverter : StatusBitsCategoryCode # 7
    FutureADConverter : StatusBitsCategoryCode # 8
    SolidStateMemory : StatusBitsCategoryCode # 9
    Experimental : StatusBitsCategoryCode # 10
    Unknown : StatusBitsCategoryCode # 11


class StatusBitsCgmsA(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    CopyPermitted : StatusBitsCgmsA # 0
    OneCopyPermitted : StatusBitsCgmsA # 1
    Unused : StatusBitsCgmsA # 2
    CopyNotPermitted : StatusBitsCgmsA # 3


class StatusBitsChannelMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NotIndicated : StatusBitsChannelMode # 0
    SCDSRLeft : StatusBitsChannelMode # 1
    Stereophonic : StatusBitsChannelMode # 2
    Reserved : StatusBitsChannelMode # 3
    SingleChannel : StatusBitsChannelMode # 4
    TwoChannel : StatusBitsChannelMode # 8
    SCDSRRight : StatusBitsChannelMode # 9
    UserReserved : StatusBitsChannelMode # 10
    PrimarySecondary : StatusBitsChannelMode # 12
    SCDSRByte3 : StatusBitsChannelMode # 14
    Multichannel : StatusBitsChannelMode # 15


class StatusBitsChannelNumber(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    DontCare : StatusBitsChannelNumber # 0
    Number1 : StatusBitsChannelNumber # 1
    Number2 : StatusBitsChannelNumber # 2
    Number3 : StatusBitsChannelNumber # 3
    Number4 : StatusBitsChannelNumber # 4
    Number5 : StatusBitsChannelNumber # 5
    Number6 : StatusBitsChannelNumber # 6
    Number7 : StatusBitsChannelNumber # 7
    Number8 : StatusBitsChannelNumber # 8
    Number9 : StatusBitsChannelNumber # 9
    Number10 : StatusBitsChannelNumber # 10
    Number11 : StatusBitsChannelNumber # 11
    Number12 : StatusBitsChannelNumber # 12
    Number13 : StatusBitsChannelNumber # 13
    Number14 : StatusBitsChannelNumber # 14
    Number15 : StatusBitsChannelNumber # 15


class StatusBitsChannelStatusMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Mode0 : StatusBitsChannelStatusMode # 0
    Reserved : StatusBitsChannelStatusMode # 1


class StatusBitsClockAccuracy(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Level2 : StatusBitsClockAccuracy # 0
    Level1 : StatusBitsClockAccuracy # 1
    Level3 : StatusBitsClockAccuracy # 2
    Reserved : StatusBitsClockAccuracy # 3


class StatusBitsCopyright(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Copyright : StatusBitsCopyright # 0
    NonCopyright : StatusBitsCopyright # 1


class StatusBitsDars(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NotReference : StatusBitsDars # 0
    Grade2 : StatusBitsDars # 1
    Grade1 : StatusBitsDars # 2
    Reserved : StatusBitsDars # 3


class StatusBitsEmphasisConsumerAudio(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NoPreEmphasis : StatusBitsEmphasisConsumerAudio # 0
    Pre_50_15us : StatusBitsEmphasisConsumerAudio # 4
    Reserved : StatusBitsEmphasisConsumerAudio # 7


class StatusBitsEmphasisConsumerNonAudio(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Default : StatusBitsEmphasisConsumerNonAudio # 0


class StatusBitsEmphasisProfessional(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NotIndicated : StatusBitsEmphasisProfessional # 0
    NoEmphasis : StatusBitsEmphasisProfessional # 1
    Pre_50_15us : StatusBitsEmphasisProfessional # 3
    Reserved : StatusBitsEmphasisProfessional # 5
    J17 : StatusBitsEmphasisProfessional # 7


class StatusBitsLock(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NotIndicated : StatusBitsLock # 0
    Unlocked : StatusBitsLock # 1


class StatusBitsMonitor:
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def StatusBitsA(self) -> StatusBitsValues: ...
    @property
    def StatusBitsB(self) -> StatusBitsValues: ...
    @property
    def UndockedHeight(self) -> int: ...
    @UndockedHeight.setter
    def UndockedHeight(self, value: int) -> int: ...
    @property
    def UndockedLeft(self) -> int: ...
    @UndockedLeft.setter
    def UndockedLeft(self, value: int) -> int: ...
    @property
    def UndockedTop(self) -> int: ...
    @UndockedTop.setter
    def UndockedTop(self, value: int) -> int: ...
    @property
    def UndockedWidth(self) -> int: ...
    @UndockedWidth.setter
    def UndockedWidth(self, value: int) -> int: ...
    @property
    def UserBytes(self) -> Array_1[int]: ...
    @property
    def ValidityA(self) -> ChannelStatusValidity: ...
    @property
    def ValidityB(self) -> ChannelStatusValidity: ...
    def Dock(self) -> None: ...
    def Maximize(self) -> None: ...
    def Minimize(self) -> None: ...
    def Restore(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...


class StatusBitsMultichannelMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Mode0 : StatusBitsMultichannelMode # 0
    Mode1 : StatusBitsMultichannelMode # 1
    Mode2 : StatusBitsMultichannelMode # 2
    Mode3 : StatusBitsMultichannelMode # 3
    UserDefined : StatusBitsMultichannelMode # 7
    Reserved : StatusBitsMultichannelMode # 15
    Undefined : StatusBitsMultichannelMode # -1


class StatusBitsOriginalSamplingFrequency(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NotIndicated : StatusBitsOriginalSamplingFrequency # 0
    Frequency192k : StatusBitsOriginalSamplingFrequency # 1
    Frequency12k : StatusBitsOriginalSamplingFrequency # 2
    Frequency176k : StatusBitsOriginalSamplingFrequency # 3
    Reserved4 : StatusBitsOriginalSamplingFrequency # 4
    Frequency96k : StatusBitsOriginalSamplingFrequency # 5
    Frequency8k : StatusBitsOriginalSamplingFrequency # 6
    Frequency88k : StatusBitsOriginalSamplingFrequency # 7
    Frequency16k : StatusBitsOriginalSamplingFrequency # 8
    Frequency24k : StatusBitsOriginalSamplingFrequency # 9
    Frequency11k : StatusBitsOriginalSamplingFrequency # 10
    Frequency22k : StatusBitsOriginalSamplingFrequency # 11
    Frequency32k : StatusBitsOriginalSamplingFrequency # 12
    Frequency48k : StatusBitsOriginalSamplingFrequency # 13
    Reserved15 : StatusBitsOriginalSamplingFrequency # 14
    Frequency44k : StatusBitsOriginalSamplingFrequency # 15


class StatusBitsReliability(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Reliable : StatusBitsReliability # 0
    Unreliable : StatusBitsReliability # 1


class StatusBitsSampleFrequencyScaling(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NoScaling : StatusBitsSampleFrequencyScaling # 0
    Scaling : StatusBitsSampleFrequencyScaling # 1


class StatusBitsSamplingFrequencyConsumer(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Frequency44k : StatusBitsSamplingFrequencyConsumer # 0
    NotIndicated : StatusBitsSamplingFrequencyConsumer # 1
    Frequency48k : StatusBitsSamplingFrequencyConsumer # 2
    Frequency32k : StatusBitsSamplingFrequencyConsumer # 3
    Frequency22k : StatusBitsSamplingFrequencyConsumer # 4
    Frequency384k : StatusBitsSamplingFrequencyConsumer # 5
    Frequency24k : StatusBitsSamplingFrequencyConsumer # 6
    Frequency88k : StatusBitsSamplingFrequencyConsumer # 8
    Frequency768k : StatusBitsSamplingFrequencyConsumer # 9
    Frequency96k : StatusBitsSamplingFrequencyConsumer # 10
    Frequency64k : StatusBitsSamplingFrequencyConsumer # 11
    Frequency176k : StatusBitsSamplingFrequencyConsumer # 12
    Frequency352k : StatusBitsSamplingFrequencyConsumer # 13
    Frequency192k : StatusBitsSamplingFrequencyConsumer # 14
    Reserved : StatusBitsSamplingFrequencyConsumer # 15
    Frequency1536k : StatusBitsSamplingFrequencyConsumer # 69
    Frequency256k : StatusBitsSamplingFrequencyConsumer # 75
    Frequency1411k : StatusBitsSamplingFrequencyConsumer # 77
    Frequency128k : StatusBitsSamplingFrequencyConsumer # 139
    Frequency705k : StatusBitsSamplingFrequencyConsumer # 141
    Frequency1024k : StatusBitsSamplingFrequencyConsumer # 197
    Frequency512k : StatusBitsSamplingFrequencyConsumer # 203


class StatusBitsSamplingFrequencyProfessional(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NotIndicated : StatusBitsSamplingFrequencyProfessional # 0
    Frequency44k : StatusBitsSamplingFrequencyProfessional # 1
    Frequency48k : StatusBitsSamplingFrequencyProfessional # 2
    Frequency32k : StatusBitsSamplingFrequencyProfessional # 3
    Frequency24k : StatusBitsSamplingFrequencyProfessional # 16
    Frequency96k : StatusBitsSamplingFrequencyProfessional # 32
    Frequency192k : StatusBitsSamplingFrequencyProfessional # 48
    Frequency384k : StatusBitsSamplingFrequencyProfessional # 64
    Reserved5 : StatusBitsSamplingFrequencyProfessional # 80
    Reserved6 : StatusBitsSamplingFrequencyProfessional # 96
    Reserved7 : StatusBitsSamplingFrequencyProfessional # 112
    ReservedForVectoring : StatusBitsSamplingFrequencyProfessional # 128
    Frequency22k : StatusBitsSamplingFrequencyProfessional # 144
    Frequency88k : StatusBitsSamplingFrequencyProfessional # 160
    Frequency176k : StatusBitsSamplingFrequencyProfessional # 176
    Frequency352k : StatusBitsSamplingFrequencyProfessional # 192
    ReservedD : StatusBitsSamplingFrequencyProfessional # 208
    ReservedE : StatusBitsSamplingFrequencyProfessional # 224
    UserDefined : StatusBitsSamplingFrequencyProfessional # 240


class StatusBitsSourceNumber(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    DontCare : StatusBitsSourceNumber # 0
    Number1 : StatusBitsSourceNumber # 1
    Number2 : StatusBitsSourceNumber # 2
    Number3 : StatusBitsSourceNumber # 3
    Number4 : StatusBitsSourceNumber # 4
    Number5 : StatusBitsSourceNumber # 5
    Number6 : StatusBitsSourceNumber # 6
    Number7 : StatusBitsSourceNumber # 7
    Number8 : StatusBitsSourceNumber # 8
    Number9 : StatusBitsSourceNumber # 9
    Number10 : StatusBitsSourceNumber # 10
    Number11 : StatusBitsSourceNumber # 11
    Number12 : StatusBitsSourceNumber # 12
    Number13 : StatusBitsSourceNumber # 13
    Number14 : StatusBitsSourceNumber # 14
    Number15 : StatusBitsSourceNumber # 15


class StatusBitsUserBitsManagement(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NotIndicated : StatusBitsUserBitsManagement # 0
    PerIec60958 : StatusBitsUserBitsManagement # 2
    ReservedAes18 : StatusBitsUserBitsManagement # 4
    Block192 : StatusBitsUserBitsManagement # 8
    ReservedMetadata : StatusBitsUserBitsManagement # 10
    UserDefined : StatusBitsUserBitsManagement # 12
    Reserved : StatusBitsUserBitsManagement # 15


class StatusBitsValues:
    @property
    def Application(self) -> StatusBitsApplication: ...
    @property
    def ConsumerValues(self) -> ConsumerStatusBitsValues: ...
    @property
    def ProfessionalValues(self) -> ProfessionalStatusBitsValues: ...
    @property
    def StatusBytes(self) -> Array_1[int]: ...


class StatusBitsWordLength(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Bits20 : StatusBitsWordLength # 0
    Bits24 : StatusBitsWordLength # 1


class StatusBitsWordLength20Bits(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NotIndicated : StatusBitsWordLength20Bits # 0
    Bits16 : StatusBitsWordLength20Bits # 1
    Bits18 : StatusBitsWordLength20Bits # 2
    Bits19 : StatusBitsWordLength20Bits # 4
    Bits20 : StatusBitsWordLength20Bits # 5
    Bits17 : StatusBitsWordLength20Bits # 6
    Reserved : StatusBitsWordLength20Bits # 255


class StatusBitsWordLength24Bits(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NotIndicated : StatusBitsWordLength24Bits # 0
    Bits20 : StatusBitsWordLength24Bits # 1
    Bits22 : StatusBitsWordLength24Bits # 2
    Bits23 : StatusBitsWordLength24Bits # 4
    Bits24 : StatusBitsWordLength24Bits # 5
    Bits21 : StatusBitsWordLength24Bits # 6
    Reserved : StatusBitsWordLength24Bits # 255


class SteppedDimSweepGenerator:
    @property
    def AmplitudeStart(self) -> DoubleSetting: ...
    @property
    def AmplitudeStop(self) -> DoubleSetting: ...
    @property
    def SineFrequency(self) -> float: ...
    @property
    def SquareFrequency(self) -> float: ...
    @property
    def SweepParameters(self) -> SweepParameters: ...
    @property
    def Waveform(self) -> DimWaveform: ...
    @Waveform.setter
    def Waveform(self, value: DimWaveform) -> DimWaveform: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class SteppedFrequencySweepDefinition:
    @property
    def IncludePilotTone(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NumberOfPoints(self) -> int: ...
    @property
    def PilotToneDuration(self) -> float: ...
    @property
    def PilotToneFrequency(self) -> float: ...
    @property
    def StepSize(self) -> float: ...
    @property
    def StepType(self) -> SweepStepType: ...
    @property
    def SweepPointDurations(self) -> Array_1[float]: ...
    @property
    def SweepPoints(self) -> Array_1[float]: ...
    def Export(self, fileName: str) -> None: ...
    def ExportWav(self, fileName: str, sampleRate: float, bitDepth: WavExportBitDepth) -> None: ...


class SteppedFrequencySweepGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def EQSettings(self) -> GenEqSettings: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def NoiseShape(self) -> NoiseShape: ...
    @NoiseShape.setter
    def NoiseShape(self, value: NoiseShape) -> NoiseShape: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def StartFrequency(self) -> DoubleSetting: ...
    @property
    def StopFrequency(self) -> DoubleSetting: ...
    @property
    def SweepParameters(self) -> FrequencySweepParameters: ...
    @property
    def SweepSignal(self) -> str: ...
    @SweepSignal.setter
    def SweepSignal(self, value: str) -> str: ...
    @property
    def SweepSignalDefinition(self) -> SteppedFrequencySweepDefinition: ...
    @property
    def SweepSignalNames(self) -> Array_1[str]: ...
    @property
    def Type(self) -> GeneratorType: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    def LoadSweepSignalFile(self, fileName: str, replaceIfExists: bool) -> None: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class SteppedFrequencySweepMeasurement:
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def AvergeJitterLevel(self) -> XYGraph: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def Deviation(self) -> DeviationMeterGraph: ...
    @property
    def DistortionProductLevel(self) -> HarmonicXYGraph: ...
    @property
    def DistortionProductRatio(self) -> HarmonicXYGraph: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Gain(self) -> XYGraph: ...
    @property
    def Generator(self) -> SteppedFrequencySweepGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def HighpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def HighpassFilterType(self) -> MeasurementHighpassFilterType: ...
    @HighpassFilterType.setter
    def HighpassFilterType(self, value: MeasurementHighpassFilterType) -> MeasurementHighpassFilterType: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Level(self) -> XYGraph: ...
    @property
    def LowpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def LowpassFilterType(self) -> MeasurementLowpassFilterType: ...
    @LowpassFilterType.setter
    def LowpassFilterType(self, value: MeasurementLowpassFilterType) -> MeasurementLowpassFilterType: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NoiseLevel(self) -> XYGraph: ...
    @property
    def NoiseRatio(self) -> XYGraph: ...
    @property
    def NoiseWeighting(self) -> WeightingFilterType: ...
    @NoiseWeighting.setter
    def NoiseWeighting(self, value: WeightingFilterType) -> WeightingFilterType: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def PeakLevel(self) -> XYGraph: ...
    @property
    def Phase(self) -> XYGraph: ...
    @property
    def PhaseReferenceChannel(self) -> InputChannelIndex: ...
    @PhaseReferenceChannel.setter
    def PhaseReferenceChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def RelativeLevel(self) -> RelativeLevelXYGraph: ...
    @property
    def RmsLevelAcPlusDc(self) -> XYGraph: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def Settling(self) -> SteppedFrequencySweepSettlingParametersCollection: ...
    @property
    def Sinad(self) -> XYGraph: ...
    @property
    def SweepSignal(self) -> str: ...
    @SweepSignal.setter
    def SweepSignal(self, value: str) -> str: ...
    @property
    def SweepSignalDefinition(self) -> SteppedFrequencySweepDefinition: ...
    @property
    def SweepSignalNames(self) -> Array_1[str]: ...
    @property
    def ThdLevel(self) -> XYGraph: ...
    @property
    def ThdNLevel(self) -> XYGraph: ...
    @property
    def ThdNRatio(self) -> XYGraph: ...
    @property
    def ThdRatio(self) -> XYGraph: ...
    @property
    def TrackChannel(self) -> TrackInputChannelIndex: ...
    @TrackChannel.setter
    def TrackChannel(self, value: TrackInputChannelIndex) -> TrackInputChannelIndex: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def LoadSweepSignalFile(self, fileName: str, replaceIfExists: bool) -> None: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class SteppedFrequencySweepMeasurementBase:
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> SteppedFrequencySweepGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def SweepSignal(self) -> str: ...
    @SweepSignal.setter
    def SweepSignal(self, value: str) -> str: ...
    @property
    def SweepSignalDefinition(self) -> SteppedFrequencySweepDefinition: ...
    @property
    def SweepSignalNames(self) -> Array_1[str]: ...
    @property
    def TrackChannel(self) -> TrackInputChannelIndex: ...
    @TrackChannel.setter
    def TrackChannel(self, value: TrackInputChannelIndex) -> TrackInputChannelIndex: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def LoadSweepSignalFile(self, fileName: str, replaceIfExists: bool) -> None: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class SteppedFrequencySweepSettlingParametersCollection:
    @property
    def Level(self) -> SettlingParameters: ...
    @property
    def Phase(self) -> SettlingParameters: ...
    @property
    def RmsLevelAcPlusDc(self) -> SettlingParameters: ...
    @property
    def ThdN(self) -> SettlingParameters: ...


class SteppedLevelSweepGenerator:
    @property
    def AmplitudeStart(self) -> DoubleSetting: ...
    @property
    def AmplitudeStop(self) -> DoubleSetting: ...
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def NoiseShape(self) -> NoiseShape: ...
    @NoiseShape.setter
    def NoiseShape(self, value: NoiseShape) -> NoiseShape: ...
    @property
    def Offset(self) -> DoubleSetting: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def SineDual(self) -> SineDualGenerator: ...
    @property
    def SineVarPhase(self) -> SineVarPhaseGenerator: ...
    @property
    def SweepParameters(self) -> SweepParameters: ...
    @property
    def Type(self) -> SplitSineGeneratorType: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class SteppedLevelSweepMeasurement:
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def AvergeJitterLevel(self) -> XYGraph: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def DistortionProductLevel(self) -> HarmonicXYGraph: ...
    @property
    def DistortionProductRatio(self) -> HarmonicXYGraph: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Gain(self) -> XYGraph: ...
    @property
    def Generator(self) -> SteppedLevelSweepGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def HighpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def HighpassFilterType(self) -> MeasurementHighpassFilterType: ...
    @HighpassFilterType.setter
    def HighpassFilterType(self, value: MeasurementHighpassFilterType) -> MeasurementHighpassFilterType: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def Level(self) -> XYGraph: ...
    @property
    def Linearity(self) -> LinearityXYGraph: ...
    @property
    def LowpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def LowpassFilterType(self) -> MeasurementLowpassFilterType: ...
    @LowpassFilterType.setter
    def LowpassFilterType(self, value: MeasurementLowpassFilterType) -> MeasurementLowpassFilterType: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NoiseLevel(self) -> XYGraph: ...
    @property
    def NoiseRatio(self) -> XYGraph: ...
    @property
    def NoiseWeighting(self) -> WeightingFilterType: ...
    @NoiseWeighting.setter
    def NoiseWeighting(self, value: WeightingFilterType) -> WeightingFilterType: ...
    @property
    def NotchFilterFrequency(self) -> DoubleSetting: ...
    @property
    def NotchTuningMode(self) -> FilterTuningType: ...
    @NotchTuningMode.setter
    def NotchTuningMode(self, value: FilterTuningType) -> FilterTuningType: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def PeakLevel(self) -> XYGraph: ...
    @property
    def RmsLevelAcPlusDc(self) -> XYGraph: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def Settling(self) -> SteppedLevelSweepSettlingParametersCollection: ...
    @property
    def Sinad(self) -> XYGraph: ...
    @property
    def SinadVsMeasuredLevel(self) -> XYGraph: ...
    @property
    def ThdLevel(self) -> XYGraph: ...
    @property
    def ThdLevelVsMeasuredLevel(self) -> XYGraph: ...
    @property
    def ThdNLevel(self) -> XYGraph: ...
    @property
    def ThdNLevelVsMeasuredLevel(self) -> XYGraph: ...
    @property
    def ThdNRatio(self) -> XYGraph: ...
    @property
    def ThdNRatioVsMeasuredLevel(self) -> XYGraph: ...
    @property
    def ThdRatio(self) -> XYGraph: ...
    @property
    def ThdRatioVsMeasuredLevel(self) -> XYGraph: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class SteppedLevelSweepSettlingParametersCollection:
    @property
    def Level(self) -> SettlingParameters: ...
    @property
    def RmsLevelAcPlusDc(self) -> SettlingParameters: ...
    @property
    def ThdN(self) -> SettlingParameters: ...


class SteppedSweep:
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def FrequencySweepInput(self) -> APxInputSelection: ...
    @FrequencySweepInput.setter
    def FrequencySweepInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def FrequencySweepSignal(self) -> str: ...
    @FrequencySweepSignal.setter
    def FrequencySweepSignal(self, value: str) -> str: ...
    @property
    def FrequencySweepSignalDefinition(self) -> SteppedFrequencySweepDefinition: ...
    @property
    def FrequencySweepSignalNames(self) -> Array_1[str]: ...
    @property
    def FrequencySweepTrackChannel(self) -> TrackInputChannelIndex: ...
    @FrequencySweepTrackChannel.setter
    def FrequencySweepTrackChannel(self, value: TrackInputChannelIndex) -> TrackInputChannelIndex: ...
    @property
    def Function(self) -> BenchTestFunction: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def HasError(self) -> bool: ...
    @property
    def IsStarted(self) -> bool: ...
    @property
    def LastErrorCode(self) -> APError: ...
    @property
    def LastErrorMessage(self) -> str: ...
    @property
    def NestedSweep(self) -> NestedSweepSettings: ...
    @property
    def PreSweepDelay(self) -> float: ...
    @PreSweepDelay.setter
    def PreSweepDelay(self, value: float) -> float: ...
    @property
    def ReadingRate(self) -> SweepReadingRate: ...
    @ReadingRate.setter
    def ReadingRate(self, value: SweepReadingRate) -> SweepReadingRate: ...
    @property
    def RegulateEachStep(self) -> bool: ...
    @RegulateEachStep.setter
    def RegulateEachStep(self, value: bool) -> bool: ...
    @property
    def Regulation(self) -> RegulationSettings: ...
    @property
    def Repeat(self) -> bool: ...
    @Repeat.setter
    def Repeat(self, value: bool) -> bool: ...
    @property
    def Source(self) -> SweepSourceParameterType: ...
    @Source.setter
    def Source(self, value: SweepSourceParameterType) -> SweepSourceParameterType: ...
    @property
    def SourceParameters(self) -> StartStopSweepParameters: ...
    @property
    def Sources(self) -> Array_1[SweepSourceParameterType]: ...
    def Analyze(self) -> None: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def LoadFrequencySweepSignalFile(self, fileName: str, replaceIfExists: bool) -> None: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Show(self) -> None: ...
    def Start(self) -> None: ...
    def Stop(self) -> None: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class SteppedSweepMeasurement:
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class StopAnalogSineWaveGeneratorStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class StopAnalogSineWaveGeneratorStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> StopAnalogSineWaveGeneratorStep: ...
    def Add(self) -> StopAnalogSineWaveGeneratorStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class StopSendingPdmControlCodeStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class StopSendingPdmControlCodeStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> StopSendingPdmControlCodeStep: ...
    def Add(self) -> StopSendingPdmControlCodeStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class SweepParameters:
    @property
    def NumberOfPoints(self) -> int: ...
    @NumberOfPoints.setter
    def NumberOfPoints(self, value: int) -> int: ...
    @property
    def StepSize(self) -> DoubleSetting: ...
    @property
    def StepType(self) -> SweepStepType: ...
    @StepType.setter
    def StepType(self, value: SweepStepType) -> SweepStepType: ...
    @property
    def SweepPoints(self) -> Array_1[float]: ...
    @SweepPoints.setter
    def SweepPoints(self, value: Array_1[float]) -> Array_1[float]: ...
    def ExportSweepPoints(self, fileName: str) -> None: ...
    def ImportSweepPoints(self, fileName: str) -> None: ...


class SweepReadingRate(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ReadingRate_Auto : SweepReadingRate # 0
    ReadingRate_1 : SweepReadingRate # 1
    ReadingRate_2 : SweepReadingRate # 2
    ReadingRate_4 : SweepReadingRate # 3
    ReadingRate_8 : SweepReadingRate # 4
    ReadingRate_16 : SweepReadingRate # 5
    ReadingRate_32 : SweepReadingRate # 6


class SweepSourceParameterType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ExternalFrequency : SweepSourceParameterType # 0
    GeneratorFrequency : SweepSourceParameterType # 1
    DualSineFrequencyA : SweepSourceParameterType # 2
    DualSineFrequencyB : SweepSourceParameterType # 3
    ImdFrequency1 : SweepSourceParameterType # 4
    ImdFrequency2 : SweepSourceParameterType # 5
    DfdMeanFrequency : SweepSourceParameterType # 6
    DfdDiffFrequency : SweepSourceParameterType # 7
    GeneratorPhase : SweepSourceParameterType # 8
    GeneratorLevel : SweepSourceParameterType # 9
    GeneratorOffset : SweepSourceParameterType # 10
    OutputSampleRate : SweepSourceParameterType # 11
    RefSyncOutputRate : SweepSourceParameterType # 12
    JitterFrequency : SweepSourceParameterType # 13
    JitterLevelUi : SweepSourceParameterType # 14
    JitterLevelSec : SweepSourceParameterType # 15
    DcxDcv1Level : SweepSourceParameterType # 16
    DcxDcv2Level : SweepSourceParameterType # 17
    VBias : SweepSourceParameterType # 18


class SweepStepType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Log : SweepStepType # 0
    Lin : SweepStepType # 1
    Custom : SweepStepType # 2
    ISO_R : SweepStepType # 3


class SwitcherAddress(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Switcher0 : SwitcherAddress # 0
    Switcher1 : SwitcherAddress # 1
    Switcher2 : SwitcherAddress # 2
    Switcher3 : SwitcherAddress # 3
    Switcher4 : SwitcherAddress # 4
    Switcher5 : SwitcherAddress # 5
    Switcher6 : SwitcherAddress # 6
    Switcher7 : SwitcherAddress # 7
    Switcher8 : SwitcherAddress # 8
    Switcher9 : SwitcherAddress # 9
    Switcher10 : SwitcherAddress # 10
    Switcher11 : SwitcherAddress # 11
    Switcher12 : SwitcherAddress # 12
    Switcher13 : SwitcherAddress # 13
    Switcher14 : SwitcherAddress # 14
    Switcher15 : SwitcherAddress # 15


class SwitcherChannelSelection(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : SwitcherChannelSelection # 0
    Ch1 : SwitcherChannelSelection # 1
    Ch2 : SwitcherChannelSelection # 2
    Ch3 : SwitcherChannelSelection # 3
    Ch4 : SwitcherChannelSelection # 4
    Ch5 : SwitcherChannelSelection # 5
    Ch6 : SwitcherChannelSelection # 6
    Ch7 : SwitcherChannelSelection # 7
    Ch8 : SwitcherChannelSelection # 8
    Ch9 : SwitcherChannelSelection # 9
    Ch10 : SwitcherChannelSelection # 10
    Ch11 : SwitcherChannelSelection # 11
    Ch12 : SwitcherChannelSelection # 12


class SwitcherSweepChannelType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    A : SwitcherSweepChannelType # 0
    B : SwitcherSweepChannelType # 1
    AB : SwitcherSweepChannelType # 2


class SwitcherSweepSettings:
    @property
    def Channel(self) -> SwitcherSweepChannelType: ...
    @Channel.setter
    def Channel(self, value: SwitcherSweepChannelType) -> SwitcherSweepChannelType: ...
    @property
    def ChannelOffset(self) -> int: ...
    @ChannelOffset.setter
    def ChannelOffset(self, value: int) -> int: ...
    @property
    def ResetState(self) -> bool: ...
    @ResetState.setter
    def ResetState(self, value: bool) -> bool: ...
    @property
    def StartAddress(self) -> int: ...
    @StartAddress.setter
    def StartAddress(self, value: int) -> int: ...
    @property
    def StepSize(self) -> int: ...
    @StepSize.setter
    def StepSize(self, value: int) -> int: ...
    @property
    def StopAddress(self) -> int: ...
    @StopAddress.setter
    def StopAddress(self, value: int) -> int: ...
    @property
    def SwitcherType(self) -> SwitcherSweepType: ...
    @SwitcherType.setter
    def SwitcherType(self, value: SwitcherSweepType) -> SwitcherSweepType: ...


class SwitcherSweepType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Output : SwitcherSweepType # 0
    Input : SwitcherSweepType # 1
    InputOutput : SwitcherSweepType # 2


class SyncEdge(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Rising : SyncEdge # 0
    Falling : SyncEdge # 1


class SyncOutPolarityMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Normal : SyncOutPolarityMode # 0
    Inverted : SyncOutPolarityMode # 1


class TabularResult:
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def ColumnCount(self) -> int: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RowCount(self) -> int: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    def CopyToClipboard(self) -> None: ...
    def Dock(self) -> None: ...
    def ExportData(self, fileName: str) -> None: ...
    def GetValue(self, row: int, col: int) -> str: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...



class TaperType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Equiripple : TaperType # 0
    BlackmanHarris : TaperType # 1
    BlackmanHarris4 : TaperType # 2
    Dolph150 : TaperType # 3
    Dolph200 : TaperType # 4
    Dolph250 : TaperType # 5
    FlatTop : TaperType # 6
    Hann : TaperType # 7
    None_ : TaperType # 8


class TargetChannelRegulationSettings:
    @property
    def AdjustSource(self) -> RegulationSource: ...
    @AdjustSource.setter
    def AdjustSource(self, value: RegulationSource) -> RegulationSource: ...
    @property
    def InitialSteps(self) -> int: ...
    @InitialSteps.setter
    def InitialSteps(self, value: int) -> int: ...
    @property
    def RegulationInput(self) -> APxInputSelection: ...
    @RegulationInput.setter
    def RegulationInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def StartValue(self) -> DoubleSetting: ...
    @property
    def StopValue(self) -> DoubleSetting: ...
    @property
    def TargetChannel(self) -> InputChannelIndex: ...
    @TargetChannel.setter
    def TargetChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def TargetType(self) -> RegulationTarget: ...
    @TargetType.setter
    def TargetType(self, value: RegulationTarget) -> RegulationTarget: ...
    @property
    def TargetValue(self) -> DoubleSetting: ...


class TedsCalibration:
    @property
    def Interface(self) -> TedsInterfaceType: ...
    @Interface.setter
    def Interface(self, value: TedsInterfaceType) -> TedsInterfaceType: ...
    @property
    def MicrophoneId(self) -> int: ...
    @MicrophoneId.setter
    def MicrophoneId(self, value: int) -> int: ...
    @property
    def Source(self) -> TransducerTedsChannel: ...
    @Source.setter
    def Source(self, value: TransducerTedsChannel) -> TransducerTedsChannel: ...
    def ApplyToDbsplReference(self, data: TedsData, dbSpl1: bool, dbSpl2: bool) -> None: ...
    def ApplyToSensitivity(self, data: TedsData, ch: InputChannelIndex) -> None: ...
    def Read(self) -> TedsData: ...


class TedsConnectionSettings:
    @property
    def Interface(self) -> TedsInterfaceType: ...
    @Interface.setter
    def Interface(self, value: TedsInterfaceType) -> TedsInterfaceType: ...
    @property
    def MicrophoneId(self) -> int: ...
    @MicrophoneId.setter
    def MicrophoneId(self, value: int) -> int: ...
    @property
    def Source(self) -> TransducerTedsChannel: ...
    @Source.setter
    def Source(self, value: TransducerTedsChannel) -> TransducerTedsChannel: ...


class TedsData:
    @property
    def Frequency(self) -> float: ...
    @property
    def PropertyCount(self) -> int: ...
    @property
    def PropertyNames(self) -> Array_1[str]: ...
    @property
    def PropertyValues(self) -> Array_1[str]: ...
    @property
    def Sensitivity(self) -> float: ...
    @property
    def SerialNumber(self) -> str: ...


class TedsDataMeasurement:
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def TedsInterface(self) -> TedsInterfaceType: ...
    @TedsInterface.setter
    def TedsInterface(self, value: TedsInterfaceType) -> TedsInterfaceType: ...
    @property
    def TedsMicrophoneId(self) -> int: ...
    @TedsMicrophoneId.setter
    def TedsMicrophoneId(self, value: int) -> int: ...
    @property
    def TedsSource(self) -> TransducerTedsChannel: ...
    @TedsSource.setter
    def TedsSource(self, value: TransducerTedsChannel) -> TransducerTedsChannel: ...
    @property
    def TedsTabularData(self) -> TedsTabularResult: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class TedsInterfaceType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Auto : TedsInterfaceType # 0
    APx517 : TedsInterfaceType # 1
    APx1701 : TedsInterfaceType # 2
    MicPowerModule : TedsInterfaceType # 3


class TedsSysCheck:
    @property
    def AcceptanceLevel(self) -> TedsSysCheckAcceptanceLevel: ...
    @AcceptanceLevel.setter
    def AcceptanceLevel(self, value: TedsSysCheckAcceptanceLevel) -> TedsSysCheckAcceptanceLevel: ...
    @property
    def Interface(self) -> TedsInterfaceType: ...
    @Interface.setter
    def Interface(self, value: TedsInterfaceType) -> TedsInterfaceType: ...
    @property
    def MeasuredChannel(self) -> InputChannelIndex: ...
    @MeasuredChannel.setter
    def MeasuredChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def MicrophoneId(self) -> int: ...
    @MicrophoneId.setter
    def MicrophoneId(self, value: int) -> int: ...
    @property
    def Source(self) -> TransducerTedsChannel: ...
    @Source.setter
    def Source(self, value: TransducerTedsChannel) -> TransducerTedsChannel: ...
    def GetReferenceValues(self) -> TedsSysCheckReferenceValues: ...
    def PerformSysCheck(self) -> TedsSysCheckResults: ...
    def SetReferenceValues(self) -> None: ...


class TedsSysCheckAcceptanceLevel(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Point3dB : TedsSysCheckAcceptanceLevel # 0
    Point5dB : TedsSysCheckAcceptanceLevel # 1
    Point8dB : TedsSysCheckAcceptanceLevel # 2
    OnedB : TedsSysCheckAcceptanceLevel # 3
    OnePoint5dB : TedsSysCheckAcceptanceLevel # 4


class TedsSysCheckReferenceValues:
    @property
    def FieldNames(self) -> Array_1[str]: ...
    def GetReferenceValue(self, fieldName: str) -> float: ...


class TedsSysCheckResults:
    @property
    def FieldNames(self) -> Array_1[str]: ...
    @property
    def Passed(self) -> bool: ...
    def GetMeasuredValue(self, fieldName: str) -> float: ...
    def GetReferenceValue(self, fieldName: str) -> float: ...


class TedsTabularResult:
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def ColumnCount(self) -> int: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def GetProperties(self) -> Array_1[str]: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RowCount(self) -> int: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    def CopyToClipboard(self) -> None: ...
    def Dock(self) -> None: ...
    def ExportData(self, fileName: str) -> None: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped GetValue due to it being static, abstract and generic.

    GetValue : GetValue_MethodGroup
    class GetValue_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> str:...
        @typing.overload
        def __call__(self, property: str) -> str:...
        @typing.overload
        def __call__(self, row: int, col: int) -> str:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...



class ThdNGenerator:
    @property
    def AnalogSineMode(self) -> AnalogSineGeneratorMode: ...
    @AnalogSineMode.setter
    def AnalogSineMode(self, value: AnalogSineGeneratorMode) -> AnalogSineGeneratorMode: ...
    @property
    def Frequency(self) -> DoubleSetting: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def On(self) -> bool: ...
    @On.setter
    def On(self, value: bool) -> bool: ...
    @property
    def PrecisionTune(self) -> bool: ...
    @PrecisionTune.setter
    def PrecisionTune(self, value: bool) -> bool: ...
    @property
    def SineDual(self) -> SineDualGenerator: ...
    @property
    def SineVarPhase(self) -> SineVarPhaseGenerator: ...
    @property
    def Type(self) -> SplitSineWithFileGeneratorType: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class ThdNMeasurement:
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def DistortionProductLevel(self) -> VerticalBarGraph: ...
    @property
    def DistortionProductRatio(self) -> VerticalBarGraph: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Generator(self) -> ThdNGenerator: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def HighpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def HighpassFilterType(self) -> MeasurementHighpassFilterType: ...
    @HighpassFilterType.setter
    def HighpassFilterType(self, value: MeasurementHighpassFilterType) -> MeasurementHighpassFilterType: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def LowpassFilterFrequency(self) -> DoubleSetting: ...
    @property
    def LowpassFilterType(self) -> MeasurementLowpassFilterType: ...
    @LowpassFilterType.setter
    def LowpassFilterType(self, value: MeasurementLowpassFilterType) -> MeasurementLowpassFilterType: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NoiseLevel(self) -> MeterGraph: ...
    @property
    def NoiseRatio(self) -> MeterGraph: ...
    @property
    def NoiseWeighting(self) -> WeightingFilterType: ...
    @NoiseWeighting.setter
    def NoiseWeighting(self, value: WeightingFilterType) -> WeightingFilterType: ...
    @property
    def NotchFilterFrequency(self) -> DoubleSetting: ...
    @property
    def NotchTuningMode(self) -> FilterTuningType: ...
    @NotchTuningMode.setter
    def NotchTuningMode(self, value: FilterTuningType) -> FilterTuningType: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def Settling(self) -> ThdNSettlingParametersCollection: ...
    @property
    def ThdLevel(self) -> MeterGraph: ...
    @property
    def ThdNLevel(self) -> MeterGraph: ...
    @property
    def ThdNRatio(self) -> MeterGraph: ...
    @property
    def ThdRatio(self) -> MeterGraph: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class ThdNRatioXyGraph:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def Calculation(self) -> DistortionRatioCalculation: ...
    @Calculation.setter
    def Calculation(self, value: DistortionRatioCalculation) -> DistortionRatioCalculation: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def HasDataOnAxis(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> bool: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetData due to it being static, abstract and generic.

    GetData : GetData_MethodGroup
    class GetData_MethodGroup:
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> XYValues:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int) -> XYValues:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class ThdNSettlingParametersCollection:
    @property
    def ThdN(self) -> SettlingParameters: ...


class ThieleSmallMeasurementMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    AddedMass : ThieleSmallMeasurementMode # 0
    KnownVolume : ThieleSmallMeasurementMode # 1
    KnownMmd : ThieleSmallMeasurementMode # 2


class ThieleSmallModelFit(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Standard : ThieleSmallModelFit # 0
    LR2 : ThieleSmallModelFit # 1
    Wright : ThieleSmallModelFit # 2


class ThieleSmallParameter(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Fs : ThieleSmallParameter # 0
    Qes : ThieleSmallParameter # 1
    Qms : ThieleSmallParameter # 2
    Qts : ThieleSmallParameter # 3
    Vas : ThieleSmallParameter # 4
    Cms : ThieleSmallParameter # 5
    Mms : ThieleSmallParameter # 6
    Rms : ThieleSmallParameter # 7
    Re : ThieleSmallParameter # 8
    Res : ThieleSmallParameter # 9
    Le : ThieleSmallParameter # 10
    R2 : ThieleSmallParameter # 11
    L2 : ThieleSmallParameter # 12
    Erm : ThieleSmallParameter # 13
    Krm : ThieleSmallParameter # 14
    Exm : ThieleSmallParameter # 15
    Kxm : ThieleSmallParameter # 16
    Sd : ThieleSmallParameter # 17
    Bl : ThieleSmallParameter # 18
    Eta0 : ThieleSmallParameter # 19


class ThieleSmallPlottedDataType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Processed : ThieleSmallPlottedDataType # 0
    Unprocessed : ThieleSmallPlottedDataType # 1


class ThieleSmallResult:
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    def CopyToClipboard(self) -> None: ...
    def Dock(self) -> None: ...
    def ExportData(self, fileName: str) -> None: ...
    def GetLowerLimit(self, parameter: ThieleSmallParameter) -> float: ...
    def GetTextValues(self, parameter: ThieleSmallParameter, withUnitString: bool) -> Array_1[str]: ...
    def GetUpperLimit(self, parameter: ThieleSmallParameter) -> float: ...
    def GetValues(self, parameter: ThieleSmallParameter) -> Array_1[float]: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetLowerLimit(self, parameter: ThieleSmallParameter, limit: float) -> None: ...
    def SetUpperLimit(self, parameter: ThieleSmallParameter, limit: float) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, parameter: ThieleSmallParameter, withUnitString: bool) -> str:...
        @typing.overload
        def __call__(self, driverIndex: int, parameter: ThieleSmallParameter, withUnitString: bool) -> str:...

    # Skipped GetValue due to it being static, abstract and generic.

    GetValue : GetValue_MethodGroup
    class GetValue_MethodGroup:
        @typing.overload
        def __call__(self, parameter: ThieleSmallParameter) -> float:...
        @typing.overload
        def __call__(self, driverIndex: int, parameter: ThieleSmallParameter) -> float:...

    # Skipped PassedLowerLimit due to it being static, abstract and generic.

    PassedLowerLimit : PassedLowerLimit_MethodGroup
    class PassedLowerLimit_MethodGroup:
        @typing.overload
        def __call__(self, parameter: ThieleSmallParameter) -> bool:...
        @typing.overload
        def __call__(self, driverIndex: int, parameter: ThieleSmallParameter) -> bool:...

    # Skipped PassedUpperLimit due to it being static, abstract and generic.

    PassedUpperLimit : PassedUpperLimit_MethodGroup
    class PassedUpperLimit_MethodGroup:
        @typing.overload
        def __call__(self, parameter: ThieleSmallParameter) -> bool:...
        @typing.overload
        def __call__(self, driverIndex: int, parameter: ThieleSmallParameter) -> bool:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...



class ThieleSmallReType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Auto : ThieleSmallReType # 0
    Fixed : ThieleSmallReType # 1


class TimebaseReferenceType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Internal : TimebaseReferenceType # 0
    XLR : TimebaseReferenceType # 1
    BNC : TimebaseReferenceType # 2


class TimeDomainDiagnosticGraph:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def InterpolationOn(self) -> bool: ...
    @InterpolationOn.setter
    def InterpolationOn(self, value: bool) -> bool: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class TimeDomainSmoothingType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Smooth1ms : TimeDomainSmoothingType # 0
    Smooth2ms : TimeDomainSmoothingType # 1
    Smooth5ms : TimeDomainSmoothingType # 2
    Smooth10ms : TimeDomainSmoothingType # 3
    Smooth20ms : TimeDomainSmoothingType # 4
    Smooth50ms : TimeDomainSmoothingType # 5
    Smooth100ms : TimeDomainSmoothingType # 6
    Smooth200ms : TimeDomainSmoothingType # 7
    Smooth500ms : TimeDomainSmoothingType # 8
    Smooth1000ms : TimeDomainSmoothingType # 9
    Smooth2000ms : TimeDomainSmoothingType # 10
    Smooth5000ms : TimeDomainSmoothingType # 11


class TimeDomainSmoothResult:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def Source(self) -> Graph: ...
    @property
    def TimeDomainSmoothing(self) -> TimeDomainSmoothingType: ...
    @TimeDomainSmoothing.setter
    def TimeDomainSmoothing(self, value: TimeDomainSmoothingType) -> TimeDomainSmoothingType: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def HasDataOnAxis(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> bool: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetData due to it being static, abstract and generic.

    GetData : GetData_MethodGroup
    class GetData_MethodGroup:
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> XYValues:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int) -> XYValues:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class TimeDomainWithSourceChannel:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def InterpolationOn(self) -> bool: ...
    @InterpolationOn.setter
    def InterpolationOn(self, value: bool) -> bool: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def SourceChannel(self) -> OutputChannelIndex: ...
    @SourceChannel.setter
    def SourceChannel(self, value: OutputChannelIndex) -> OutputChannelIndex: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def HasDataOnAxis(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> bool: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetData due to it being static, abstract and generic.

    GetData : GetData_MethodGroup
    class GetData_MethodGroup:
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> XYValues:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int) -> XYValues:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class TimeDomainWithWindowXYGraph:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def EndTaperWidth(self) -> DoubleSetting: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def InterpolationOn(self) -> bool: ...
    @InterpolationOn.setter
    def InterpolationOn(self, value: bool) -> bool: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def StartTaperWidth(self) -> DoubleSetting: ...
    @property
    def TaperType(self) -> TaperType: ...
    @TaperType.setter
    def TaperType(self, value: TaperType) -> TaperType: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def TimeWindowAutoStart(self) -> bool: ...
    @TimeWindowAutoStart.setter
    def TimeWindowAutoStart(self, value: bool) -> bool: ...
    @property
    def TimeWindowEnd(self) -> DoubleSetting: ...
    @property
    def TimeWindowStart(self) -> DoubleSetting: ...
    @property
    def TimeWindowType(self) -> TimeWindowType: ...
    @TimeWindowType.setter
    def TimeWindowType(self, value: TimeWindowType) -> TimeWindowType: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def HasDataOnAxis(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> bool: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetData due to it being static, abstract and generic.

    GetData : GetData_MethodGroup
    class GetData_MethodGroup:
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> XYValues:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int) -> XYValues:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class TimeDomainXYGraph:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def InterpolationOn(self) -> bool: ...
    @InterpolationOn.setter
    def InterpolationOn(self, value: bool) -> bool: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def HasDataOnAxis(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> bool: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetData due to it being static, abstract and generic.

    GetData : GetData_MethodGroup
    class GetData_MethodGroup:
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> XYValues:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int) -> XYValues:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class TimeoutData:
    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[str]:...
        @typing.overload
        def __call__(self, xUnit: str) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[float]:...
        @typing.overload
        def __call__(self, xUnit: str) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[str]:...
        @typing.overload
        def __call__(self, yUnit: str) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[float]:...
        @typing.overload
        def __call__(self, yUnit: str) -> Array_1[float]:...



class TimeSweepRunMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Fixed : TimeSweepRunMode # 0
    RunUntilStop : TimeSweepRunMode # 1


class TimeWindowType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    TrackPeak : TimeWindowType # 0
    Fixed : TimeWindowType # 1


class TimingDistribution:
    @property
    def CrossOverFreq(self) -> DoubleReadOnlySetting: ...
    @property
    def Cycles(self) -> DoubleSetting: ...
    @property
    def Time(self) -> DoubleSetting: ...


class TitleAlignment(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Left : TitleAlignment # 0
    Center : TitleAlignment # 1
    Right : TitleAlignment # 2


class ToneCrosstalkMeterGraph:
    @property
    def Axis(self) -> GraphAxis: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def CrosstalkToneCount(self) -> int: ...
    @property
    def CrosstalkToneIndex(self) -> int: ...
    @CrosstalkToneIndex.setter
    def CrosstalkToneIndex(self, value: int) -> int: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Limits(self) -> MeterLimits: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def Tones(self) -> Array_1[str]: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    def CopyToClipboard(self) -> None: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetTraceColor(self, traceIndex: int) -> Color: ...
    def GetTraceName(self, traceIndex: int) -> str: ...
    def ResetTraceStyle(self, traceIndex: int) -> None: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetTraceColor(self, traceIndex: int, color: Color) -> None: ...
    def SetTraceName(self, traceIndex: int, name: str) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, unit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool]) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool], append: bool) -> None:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[str]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[str]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[float]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[float]:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...



class ToneMeterGraph:
    @property
    def Axis(self) -> GraphAxis: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsSelectedToneCrosstalk(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Limits(self) -> MeterLimits: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def SelectedToneIndex(self) -> int: ...
    @SelectedToneIndex.setter
    def SelectedToneIndex(self, value: int) -> int: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def ToneCount(self) -> int: ...
    @property
    def Tones(self) -> Array_1[str]: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    def CopyToClipboard(self) -> None: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetTraceColor(self, traceIndex: int) -> Color: ...
    def GetTraceName(self, traceIndex: int) -> str: ...
    def ResetTraceStyle(self, traceIndex: int) -> None: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetTraceColor(self, traceIndex: int, color: Color) -> None: ...
    def SetTraceName(self, traceIndex: int, name: str) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, unit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool]) -> None:...
        @typing.overload
        def __call__(self, fileName: str, unit: str, selectedChannels: Array_1[bool], append: bool) -> None:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[str]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[str]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self) -> Array_1[float]:...
        @typing.overload
        def __call__(self, Unit: str) -> Array_1[float]:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...



class TraceInfo:
    @property
    def Channel(self) -> CursorChannelIndex: ...
    @property
    def DataIndex(self) -> int: ...
    @property
    def DataType(self) -> SourceDataType: ...


class TrackInputChannelIndex(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Ch1 : TrackInputChannelIndex # 0
    Ch2 : TrackInputChannelIndex # 1
    Ch3 : TrackInputChannelIndex # 2
    Ch4 : TrackInputChannelIndex # 3
    Ch5 : TrackInputChannelIndex # 4
    Ch6 : TrackInputChannelIndex # 5
    Ch7 : TrackInputChannelIndex # 6
    Ch8 : TrackInputChannelIndex # 7
    Ch9 : TrackInputChannelIndex # 8
    Ch10 : TrackInputChannelIndex # 9
    Ch11 : TrackInputChannelIndex # 10
    Ch12 : TrackInputChannelIndex # 11
    Ch13 : TrackInputChannelIndex # 12
    Ch14 : TrackInputChannelIndex # 13
    Ch15 : TrackInputChannelIndex # 14
    Ch16 : TrackInputChannelIndex # 15
    Auto : TrackInputChannelIndex # -1


class TransducerFault(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    AbortMeasurement : TransducerFault # 0
    ContinueMeasurement : TransducerFault # 1


class TransducerInputSetting:
    @property
    def CcpPower(self) -> bool: ...
    @CcpPower.setter
    def CcpPower(self, value: bool) -> bool: ...
    @property
    def CurrentSense(self) -> CurrentSense: ...
    @CurrentSense.setter
    def CurrentSense(self, value: CurrentSense) -> CurrentSense: ...
    @property
    def Mic1(self) -> TransducerMic1: ...
    @Mic1.setter
    def Mic1(self, value: TransducerMic1) -> TransducerMic1: ...
    @property
    def Mic2(self) -> TransducerMic2: ...
    @Mic2.setter
    def Mic2(self, value: TransducerMic2) -> TransducerMic2: ...
    @property
    def PhantomPower(self) -> bool: ...
    @PhantomPower.setter
    def PhantomPower(self, value: bool) -> bool: ...
    @property
    def TedsCalibration(self) -> TedsCalibration: ...
    @property
    def TedsSysCheck(self) -> TedsSysCheck: ...


class TransducerMic1(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Mic1Balanced : TransducerMic1 # 0
    Mic2Balanced : TransducerMic1 # 1
    Mic1Unbalanced : TransducerMic1 # 2
    Mic2Unbalanced : TransducerMic1 # 3
    Mic1UnabalancedCcpSelftest : TransducerMic1 # 4


class TransducerMic2(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Mic2Balanced : TransducerMic2 # 0
    Mic2Unbalanced : TransducerMic2 # 1
    Mic2UnabalancedCcpSelftest : TransducerMic2 # 2


class TransducerOutputSetting:
    @property
    def Amplifier1(self) -> bool: ...
    @Amplifier1.setter
    def Amplifier1(self, value: bool) -> bool: ...
    @property
    def Amplifier2(self) -> bool: ...
    @Amplifier2.setter
    def Amplifier2(self, value: bool) -> bool: ...
    @property
    def AnalogOutputRanges(self) -> AnalogOutputRanges: ...
    @property
    def Gain(self) -> float: ...
    @property
    def ParasiticResistance(self) -> float: ...
    @ParasiticResistance.setter
    def ParasiticResistance(self, value: float) -> float: ...


class TransducerTedsChannel(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Mic1Unbalanced : TransducerTedsChannel # 0
    Mic2Unbalanced : TransducerTedsChannel # 1


class TransferFunction:
    @property
    def AcquiredWaveform(self) -> AcquiredWaveformGraph: ...
    @property
    def AcquisitionLength(self) -> float: ...
    @property
    def AmplitudeSpectralDensity(self) -> XYGraph: ...
    @property
    def AmplitudeSpectralDensityReference(self) -> XYGraph: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def Averages(self) -> int: ...
    @Averages.setter
    def Averages(self, value: int) -> int: ...
    @property
    def CalculationMode(self) -> TransferFunctionCalculationMode: ...
    @CalculationMode.setter
    def CalculationMode(self, value: TransferFunctionCalculationMode) -> TransferFunctionCalculationMode: ...
    @property
    def Coherence(self) -> XYGraph: ...
    @property
    def Correlation(self) -> XYGraph: ...
    @property
    def Delay(self) -> MeterGraph: ...
    @property
    def FFTLength(self) -> FFTLength: ...
    @FFTLength.setter
    def FFTLength(self, value: FFTLength) -> FFTLength: ...
    @property
    def FFTSpectrum(self) -> XYGraph: ...
    @property
    def FFTSpectrumReference(self) -> XYGraph: ...
    @property
    def FrequencyResolution(self) -> float: ...
    @property
    def FrfImaginarySpectrum(self) -> XYGraph: ...
    @property
    def FrfMagnitudeSpectrum(self) -> XYGraph: ...
    @property
    def FrfPhaseSpectrum(self) -> FrfPhaseSpectrum: ...
    @property
    def FrfRealSpectrum(self) -> XYGraph: ...
    @property
    def Function(self) -> BenchTestFunction: ...
    @property
    def Generator(self) -> TransferFunctionGenerator: ...
    @property
    def GeneratorReferenceChannel(self) -> OutputChannelIndex: ...
    @GeneratorReferenceChannel.setter
    def GeneratorReferenceChannel(self, value: OutputChannelIndex) -> OutputChannelIndex: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def HasError(self) -> bool: ...
    @property
    def ImpulseResponse(self) -> WaveformDataGraph: ...
    @property
    def IsStarted(self) -> bool: ...
    @property
    def LastErrorCode(self) -> APError: ...
    @property
    def LastErrorMessage(self) -> str: ...
    @property
    def LevelTriggerSlope(self) -> LevelSlopeType: ...
    @LevelTriggerSlope.setter
    def LevelTriggerSlope(self, value: LevelSlopeType) -> LevelSlopeType: ...
    @property
    def Match(self) -> TransferFunctionSignalMatchConfidence: ...
    @Match.setter
    def Match(self, value: TransferFunctionSignalMatchConfidence) -> TransferFunctionSignalMatchConfidence: ...
    @property
    def MatchChannel(self) -> InputChannelIndex: ...
    @MatchChannel.setter
    def MatchChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def MatchInput(self) -> APxInputSelection: ...
    @MatchInput.setter
    def MatchInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def MatchTimeout(self) -> float: ...
    @MatchTimeout.setter
    def MatchTimeout(self, value: float) -> float: ...
    @property
    def NestedSweep(self) -> NestedSweepSettings: ...
    @property
    def OverlapPercent(self) -> TransferFunctionOverlapPercent: ...
    @OverlapPercent.setter
    def OverlapPercent(self, value: TransferFunctionOverlapPercent) -> TransferFunctionOverlapPercent: ...
    @property
    def PowerSpectralDensity(self) -> XYGraph: ...
    @property
    def PowerSpectralDensityReference(self) -> XYGraph: ...
    @property
    def ReferenceInput(self) -> APxInputSelection: ...
    @ReferenceInput.setter
    def ReferenceInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def ReferenceInputChannel(self) -> InputChannelIndex: ...
    @ReferenceInputChannel.setter
    def ReferenceInputChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def ReferenceType(self) -> str: ...
    @ReferenceType.setter
    def ReferenceType(self, value: str) -> str: ...
    @property
    def ReferenceTypes(self) -> Array_1[str]: ...
    @property
    def ReferenceWaveform(self) -> XYGraph: ...
    @property
    def ReferenceWaveforms(self) -> Array_1[str]: ...
    @property
    def Repeat(self) -> bool: ...
    @Repeat.setter
    def Repeat(self, value: bool) -> bool: ...
    @property
    def SaveImpulseResponseToFileSettings(self) -> SaveAcquisitionToFileSettings: ...
    @property
    def SaveToFileSettings(self) -> SaveAcquisitionToFileSettings: ...
    @property
    def TimeAlign(self) -> TransferFunctionTimeAlignType: ...
    @TimeAlign.setter
    def TimeAlign(self, value: TransferFunctionTimeAlignType) -> TransferFunctionTimeAlignType: ...
    @property
    def TimeAlignChannel(self) -> InputChannelIndex: ...
    @TimeAlignChannel.setter
    def TimeAlignChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def TimeAlignInput(self) -> APxInputSelection: ...
    @TimeAlignInput.setter
    def TimeAlignInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def Trigger(self) -> TransferFunctionTriggerType: ...
    @Trigger.setter
    def Trigger(self, value: TransferFunctionTriggerType) -> TransferFunctionTriggerType: ...
    @property
    def TriggerChannel(self) -> InputChannelIndex: ...
    @TriggerChannel.setter
    def TriggerChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def TriggerInput(self) -> APxInputSelection: ...
    @TriggerInput.setter
    def TriggerInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def TriggerLevel(self) -> DoubleSetting: ...
    @property
    def TriggerTimeout(self) -> float: ...
    @TriggerTimeout.setter
    def TriggerTimeout(self, value: float) -> float: ...
    @property
    def WindowType(self) -> WindowType: ...
    @WindowType.setter
    def WindowType(self, value: WindowType) -> WindowType: ...
    def Analyze(self) -> None: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def Generate(self) -> None: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def LoadReferenceWaveformFile(self, fileName: str, replaceIfExists: bool) -> None: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Show(self) -> None: ...
    def Start(self) -> None: ...
    def Stop(self) -> None: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class TransferFunctionCalculationMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    H1 : TransferFunctionCalculationMode # 0
    H2 : TransferFunctionCalculationMode # 1
    MagnitudeOnly : TransferFunctionCalculationMode # 2


class TransferFunctionGenerator:
    @property
    def AnalogOutputSampleRate(self) -> float: ...
    @AnalogOutputSampleRate.setter
    def AnalogOutputSampleRate(self, value: float) -> float: ...
    @property
    def Levels(self) -> GeneratorLevels: ...
    @property
    def NoiseShape(self) -> TransferFunctionNoiseShape: ...
    @NoiseShape.setter
    def NoiseShape(self, value: TransferFunctionNoiseShape) -> TransferFunctionNoiseShape: ...
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformFileSettings(self) -> WaveformFileSettings: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...
    # Skipped GetChannelEnabled due to it being static, abstract and generic.

    GetChannelEnabled : GetChannelEnabled_MethodGroup
    class GetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex) -> bool:...

    # Skipped LoadWaveformFile due to it being static, abstract and generic.

    LoadWaveformFile : LoadWaveformFile_MethodGroup
    class LoadWaveformFile_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, replaceIfExists: bool) -> None:...

    # Skipped SetChannelEnabled due to it being static, abstract and generic.

    SetChannelEnabled : SetChannelEnabled_MethodGroup
    class SetChannelEnabled_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, enabled: bool) -> None:...
        @typing.overload
        def __call__(self, ch: OutputChannelIndex, enabled: bool) -> None:...



class TransferFunctionMeasurement:
    @property
    def AcquiredWaveform(self) -> AcquiredWaveformGraph: ...
    @property
    def AcquisitionLength(self) -> float: ...
    @property
    def AmplitudeSpectralDensity(self) -> XYGraph: ...
    @property
    def AmplitudeSpectralDensityReference(self) -> XYGraph: ...
    @property
    def AnalogInputRanges(self) -> AnalogInputRanges: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def Averages(self) -> int: ...
    @Averages.setter
    def Averages(self, value: int) -> int: ...
    @property
    def CalculationMode(self) -> TransferFunctionCalculationMode: ...
    @CalculationMode.setter
    def CalculationMode(self, value: TransferFunctionCalculationMode) -> TransferFunctionCalculationMode: ...
    @property
    def Coherence(self) -> XYGraph: ...
    @property
    def Correlation(self) -> XYGraph: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def Delay(self) -> MeterGraph: ...
    @property
    def FFTLength(self) -> FFTLength: ...
    @FFTLength.setter
    def FFTLength(self, value: FFTLength) -> FFTLength: ...
    @property
    def FFTSpectrum(self) -> XYGraph: ...
    @property
    def FFTSpectrumReference(self) -> XYGraph: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def FrequencyResolution(self) -> float: ...
    @property
    def FrfImaginarySpectrum(self) -> XYGraph: ...
    @property
    def FrfMagnitudeSpectrum(self) -> XYGraph: ...
    @property
    def FrfPhaseSpectrum(self) -> FrfPhaseSpectrum: ...
    @property
    def FrfRealSpectrum(self) -> XYGraph: ...
    @property
    def Generator(self) -> TransferFunctionGenerator: ...
    @property
    def GeneratorReferenceChannel(self) -> OutputChannelIndex: ...
    @GeneratorReferenceChannel.setter
    def GeneratorReferenceChannel(self, value: OutputChannelIndex) -> OutputChannelIndex: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def ImpulseResponse(self) -> WaveformDataGraph: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def LevelTriggerSlope(self) -> LevelSlopeType: ...
    @LevelTriggerSlope.setter
    def LevelTriggerSlope(self, value: LevelSlopeType) -> LevelSlopeType: ...
    @property
    def Match(self) -> TransferFunctionSignalMatchConfidence: ...
    @Match.setter
    def Match(self, value: TransferFunctionSignalMatchConfidence) -> TransferFunctionSignalMatchConfidence: ...
    @property
    def MatchChannel(self) -> InputChannelIndex: ...
    @MatchChannel.setter
    def MatchChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def MatchInput(self) -> APxInputSelection: ...
    @MatchInput.setter
    def MatchInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def MatchTimeout(self) -> float: ...
    @MatchTimeout.setter
    def MatchTimeout(self, value: float) -> float: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NestedSweep(self) -> NestedSweepSettings: ...
    @property
    def OverlapPercent(self) -> TransferFunctionOverlapPercent: ...
    @OverlapPercent.setter
    def OverlapPercent(self, value: TransferFunctionOverlapPercent) -> TransferFunctionOverlapPercent: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def PowerSpectralDensity(self) -> XYGraph: ...
    @property
    def PowerSpectralDensityReference(self) -> XYGraph: ...
    @property
    def ReferenceInput(self) -> APxInputSelection: ...
    @ReferenceInput.setter
    def ReferenceInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def ReferenceInputChannel(self) -> InputChannelIndex: ...
    @ReferenceInputChannel.setter
    def ReferenceInputChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def ReferenceType(self) -> str: ...
    @ReferenceType.setter
    def ReferenceType(self, value: str) -> str: ...
    @property
    def ReferenceTypes(self) -> Array_1[str]: ...
    @property
    def ReferenceWaveform(self) -> XYGraph: ...
    @property
    def ReferenceWaveforms(self) -> Array_1[str]: ...
    @property
    def SaveImpulseResponseToFileSettings(self) -> SaveAcquisitionToFileSettings: ...
    @property
    def SaveToFileSettings(self) -> SaveAcquisitionToFileSettings: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def TimeAlign(self) -> TransferFunctionTimeAlignType: ...
    @TimeAlign.setter
    def TimeAlign(self, value: TransferFunctionTimeAlignType) -> TransferFunctionTimeAlignType: ...
    @property
    def TimeAlignChannel(self) -> InputChannelIndex: ...
    @TimeAlignChannel.setter
    def TimeAlignChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def TimeAlignInput(self) -> APxInputSelection: ...
    @TimeAlignInput.setter
    def TimeAlignInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def Trigger(self) -> TransferFunctionTriggerType: ...
    @Trigger.setter
    def Trigger(self, value: TransferFunctionTriggerType) -> TransferFunctionTriggerType: ...
    @property
    def TriggerChannel(self) -> InputChannelIndex: ...
    @TriggerChannel.setter
    def TriggerChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def TriggerInput(self) -> APxInputSelection: ...
    @TriggerInput.setter
    def TriggerInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def TriggerLevel(self) -> DoubleSetting: ...
    @property
    def TriggerTimeout(self) -> float: ...
    @TriggerTimeout.setter
    def TriggerTimeout(self, value: float) -> float: ...
    @property
    def WindowType(self) -> WindowType: ...
    @WindowType.setter
    def WindowType(self, value: WindowType) -> WindowType: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def Generate(self) -> None: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def LoadReferenceWaveformFile(self, fileName: str, replaceIfExists: bool) -> None: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class TransferFunctionNoiseShape(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    White : TransferFunctionNoiseShape # 0
    Pink : TransferFunctionNoiseShape # 1


class TransferFunctionOverlapPercent(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Overlap0 : TransferFunctionOverlapPercent # 0
    Overlap25 : TransferFunctionOverlapPercent # 1
    Overlap33 : TransferFunctionOverlapPercent # 2
    Overlap50 : TransferFunctionOverlapPercent # 3
    Overlap67 : TransferFunctionOverlapPercent # 4
    Overlap75 : TransferFunctionOverlapPercent # 5


class TransferFunctionReferenceType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Generator : TransferFunctionReferenceType # 0
    InputChannel : TransferFunctionReferenceType # 1
    File : TransferFunctionReferenceType # 2


class TransferFunctionResults:
    @property
    def AcquiredWaveform(self) -> AcquiredWaveformGraph: ...
    @property
    def AmplitudeSpectralDensity(self) -> XYGraph: ...
    @property
    def AmplitudeSpectralDensityReference(self) -> XYGraph: ...
    @property
    def Coherence(self) -> XYGraph: ...
    @property
    def Correlation(self) -> XYGraph: ...
    @property
    def Delay(self) -> MeterGraph: ...
    @property
    def FFTSpectrum(self) -> XYGraph: ...
    @property
    def FFTSpectrumReference(self) -> XYGraph: ...
    @property
    def FrfImaginarySpectrum(self) -> XYGraph: ...
    @property
    def FrfMagnitudeSpectrum(self) -> XYGraph: ...
    @property
    def FrfPhaseSpectrum(self) -> FrfPhaseSpectrum: ...
    @property
    def FrfRealSpectrum(self) -> XYGraph: ...
    @property
    def ImpulseResponse(self) -> WaveformDataGraph: ...
    @property
    def PowerSpectralDensity(self) -> XYGraph: ...
    @property
    def PowerSpectralDensityReference(self) -> XYGraph: ...
    @property
    def ReferenceWaveform(self) -> XYGraph: ...


class TransferFunctionSettings:
    @property
    def AcquisitionLength(self) -> float: ...
    @property
    def Averages(self) -> int: ...
    @Averages.setter
    def Averages(self, value: int) -> int: ...
    @property
    def CalculationMode(self) -> TransferFunctionCalculationMode: ...
    @CalculationMode.setter
    def CalculationMode(self, value: TransferFunctionCalculationMode) -> TransferFunctionCalculationMode: ...
    @property
    def FFTLength(self) -> FFTLength: ...
    @FFTLength.setter
    def FFTLength(self, value: FFTLength) -> FFTLength: ...
    @property
    def FrequencyResolution(self) -> float: ...
    @property
    def GeneratorReferenceChannel(self) -> OutputChannelIndex: ...
    @GeneratorReferenceChannel.setter
    def GeneratorReferenceChannel(self, value: OutputChannelIndex) -> OutputChannelIndex: ...
    @property
    def LevelTriggerSlope(self) -> LevelSlopeType: ...
    @LevelTriggerSlope.setter
    def LevelTriggerSlope(self, value: LevelSlopeType) -> LevelSlopeType: ...
    @property
    def Match(self) -> TransferFunctionSignalMatchConfidence: ...
    @Match.setter
    def Match(self, value: TransferFunctionSignalMatchConfidence) -> TransferFunctionSignalMatchConfidence: ...
    @property
    def MatchChannel(self) -> InputChannelIndex: ...
    @MatchChannel.setter
    def MatchChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def MatchInput(self) -> APxInputSelection: ...
    @MatchInput.setter
    def MatchInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def MatchTimeout(self) -> float: ...
    @MatchTimeout.setter
    def MatchTimeout(self, value: float) -> float: ...
    @property
    def OverlapPercent(self) -> TransferFunctionOverlapPercent: ...
    @OverlapPercent.setter
    def OverlapPercent(self, value: TransferFunctionOverlapPercent) -> TransferFunctionOverlapPercent: ...
    @property
    def ReferenceInput(self) -> APxInputSelection: ...
    @ReferenceInput.setter
    def ReferenceInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def ReferenceInputChannel(self) -> InputChannelIndex: ...
    @ReferenceInputChannel.setter
    def ReferenceInputChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def ReferenceType(self) -> str: ...
    @ReferenceType.setter
    def ReferenceType(self, value: str) -> str: ...
    @property
    def ReferenceTypes(self) -> Array_1[str]: ...
    @property
    def ReferenceWaveforms(self) -> Array_1[str]: ...
    @property
    def SaveImpulseResponseToFileSettings(self) -> SaveAcquisitionToFileSettings: ...
    @property
    def SaveToFileSettings(self) -> SaveAcquisitionToFileSettings: ...
    @property
    def TimeAlign(self) -> TransferFunctionTimeAlignType: ...
    @TimeAlign.setter
    def TimeAlign(self, value: TransferFunctionTimeAlignType) -> TransferFunctionTimeAlignType: ...
    @property
    def TimeAlignChannel(self) -> InputChannelIndex: ...
    @TimeAlignChannel.setter
    def TimeAlignChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def TimeAlignInput(self) -> APxInputSelection: ...
    @TimeAlignInput.setter
    def TimeAlignInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def Trigger(self) -> TransferFunctionTriggerType: ...
    @Trigger.setter
    def Trigger(self, value: TransferFunctionTriggerType) -> TransferFunctionTriggerType: ...
    @property
    def TriggerChannel(self) -> InputChannelIndex: ...
    @TriggerChannel.setter
    def TriggerChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def TriggerInput(self) -> APxInputSelection: ...
    @TriggerInput.setter
    def TriggerInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def TriggerLevel(self) -> DoubleSetting: ...
    @property
    def TriggerTimeout(self) -> float: ...
    @TriggerTimeout.setter
    def TriggerTimeout(self, value: float) -> float: ...
    @property
    def WindowType(self) -> WindowType: ...
    @WindowType.setter
    def WindowType(self, value: WindowType) -> WindowType: ...
    def LoadReferenceWaveformFile(self, fileName: str, replaceIfExists: bool) -> None: ...


class TransferFunctionSignalMatchConfidence(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    MatchHigh : TransferFunctionSignalMatchConfidence # 0
    MatchMedium : TransferFunctionSignalMatchConfidence # 1
    MatchLow : TransferFunctionSignalMatchConfidence # 2
    MatchNone : TransferFunctionSignalMatchConfidence # 3


class TransferFunctionTimeAlignType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    RelativeToReference : TransferFunctionTimeAlignType # 0
    RelativeToChannel : TransferFunctionTimeAlignType # 1
    None_ : TransferFunctionTimeAlignType # 2


class TransferFunctionTriggerType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Match : TransferFunctionTriggerType # 0
    Level : TransferFunctionTriggerType # 1
    None_ : TransferFunctionTriggerType # 2


class TransferFunctionWaveformType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Noise : TransferFunctionWaveformType # 0
    File : TransferFunctionWaveformType # 1


class TriggeredAcquisitionSettings:
    @property
    def AcquisitionSamples(self) -> int: ...
    @AcquisitionSamples.setter
    def AcquisitionSamples(self, value: int) -> int: ...
    @property
    def AcquisitionSeconds(self) -> float: ...
    @AcquisitionSeconds.setter
    def AcquisitionSeconds(self, value: float) -> float: ...
    @property
    def AcquisitionType(self) -> AcqLengthType: ...
    @AcquisitionType.setter
    def AcquisitionType(self, value: AcqLengthType) -> AcqLengthType: ...
    @property
    def AnalogInputBandwidth(self) -> SignalAnalyzerBandwidthType: ...
    @AnalogInputBandwidth.setter
    def AnalogInputBandwidth(self, value: SignalAnalyzerBandwidthType) -> SignalAnalyzerBandwidthType: ...
    @property
    def DelayTimeInSamples(self) -> float: ...
    @DelayTimeInSamples.setter
    def DelayTimeInSamples(self, value: float) -> float: ...
    @property
    def DelayTimeInSeconds(self) -> float: ...
    @DelayTimeInSeconds.setter
    def DelayTimeInSeconds(self, value: float) -> float: ...
    @property
    def LevelTriggerSlope(self) -> LevelSlopeType: ...
    @LevelTriggerSlope.setter
    def LevelTriggerSlope(self, value: LevelSlopeType) -> LevelSlopeType: ...
    @property
    def NestedSweep(self) -> NestedSweepSettings: ...
    @property
    def PdmSignalSource(self) -> PdmSignalSource: ...
    @PdmSignalSource.setter
    def PdmSignalSource(self, value: PdmSignalSource) -> PdmSignalSource: ...
    @property
    def SaveToFileSettings(self) -> SaveAcquisitionToFileSettings: ...
    @property
    def TriggerChannel(self) -> InputChannelIndex: ...
    @TriggerChannel.setter
    def TriggerChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def TriggerInput(self) -> APxInputSelection: ...
    @TriggerInput.setter
    def TriggerInput(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def TriggerLevel(self) -> DoubleSetting: ...
    @property
    def TriggerTimeout(self) -> float: ...
    @TriggerTimeout.setter
    def TriggerTimeout(self, value: float) -> float: ...
    @property
    def TriggerType(self) -> TriggerType: ...
    @TriggerType.setter
    def TriggerType(self, value: TriggerType) -> TriggerType: ...
    @property
    def UseDelayTimeInSeconds(self) -> bool: ...
    @UseDelayTimeInSeconds.setter
    def UseDelayTimeInSeconds(self, value: bool) -> bool: ...


class TriggerEdge(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Rising : TriggerEdge # 0
    Falling : TriggerEdge # 1


class TriggerSettings:
    @property
    def Channel(self) -> InputChannelIndex: ...
    @Channel.setter
    def Channel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @Input.setter
    def Input(self, value: APxInputSelection) -> APxInputSelection: ...
    @property
    def LevelThreshold(self) -> DoubleSetting: ...
    @property
    def Timeout(self) -> DoubleSetting: ...


class TriggerSource(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Off : TriggerSource # 0
    AudioGenerator : TriggerSource # 1
    AnalogSinGenerator : TriggerSource # 2
    JitterGenerator : TriggerSource # 3


class TriggerType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    FreeRun : TriggerType # 0
    PositiveZeroCrossing : TriggerType # 1
    Generator : TriggerType # 2
    External : TriggerType # 3
    Level : TriggerType # 4


class UnitSettings:
    @property
    def IsLogUnit(self) -> bool: ...
    @property
    def TextWithoutUnit(self) -> str: ...
    @property
    def TextWithReferenceValue(self) -> str: ...
    @property
    def Unit(self) -> str: ...
    @Unit.setter
    def Unit(self, value: str) -> str: ...
    @property
    def UnitList(self) -> Array_1[str]: ...


class UserEvaluationOfResultStep:
    @property
    def CanDelete(self) -> bool: ...
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def Icon(self) -> MessageBoxIcon: ...
    @Icon.setter
    def Icon(self, value: MessageBoxIcon) -> MessageBoxIcon: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PlayAlertSound(self) -> bool: ...
    @PlayAlertSound.setter
    def PlayAlertSound(self, value: bool) -> bool: ...
    @property
    def ResultName(self) -> str: ...
    @ResultName.setter
    def ResultName(self, value: str) -> str: ...
    @property
    def ResultNames(self) -> Array_1[str]: ...
    @property
    def RTF(self) -> str: ...
    @RTF.setter
    def RTF(self, value: str) -> str: ...
    @property
    def SelectedImage(self) -> str: ...
    @SelectedImage.setter
    def SelectedImage(self, value: str) -> str: ...
    @property
    def StepIndex(self) -> int: ...
    @property
    def StepType(self) -> SequenceStepType: ...
    @property
    def Text(self) -> str: ...
    @Text.setter
    def Text(self, value: str) -> str: ...
    @property
    def TimeoutEnabled(self) -> bool: ...
    @TimeoutEnabled.setter
    def TimeoutEnabled(self, value: bool) -> bool: ...
    @property
    def TimeoutInSeconds(self) -> float: ...
    @TimeoutInSeconds.setter
    def TimeoutInSeconds(self, value: float) -> float: ...
    @property
    def UserPassed(self) -> bool: ...
    def CopyToClipboard(self) -> bool: ...
    def Delete(self) -> None: ...
    def LoadImageFile(self, fileName: str, replaceIfExists: bool) -> None: ...
    def MoveTo(self, index: int) -> None: ...


class UserEvaluationOfResultStepCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> UserEvaluationOfResultStep: ...
    def Add(self) -> UserEvaluationOfResultStep: ...
    def GetEnumerator(self) -> IEnumerator: ...


class ValidityBitSide(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    A : ValidityBitSide # 0
    B : ValidityBitSide # 1


class ValidityBitType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Auto : ValidityBitType # 0
    Valid : ValidityBitType # 1
    Invalid : ValidityBitType # 2


class Variables:
    def DeleteUserDefinedVariable(self, varName: str) -> None: ...
    def ExpandVariableString(self, input: str) -> str: ...
    def GetAPxMeasurementVariable(self, varName: str) -> str: ...
    def GetAPxMeasurementVariables(self) -> Array_1[str]: ...
    def GetAPxSystemVariable(self, varName: str) -> str: ...
    def GetAPxSystemVariables(self) -> Array_1[str]: ...
    def GetEnvironmentVariable(self, varName: str) -> str: ...
    def GetEnvironmentVariables(self) -> Array_1[str]: ...
    def GetSystemFolder(self, folder: Environment.SpecialFolder) -> str: ...
    def GetUserDefinedVariable(self, varName: str) -> str: ...
    def GetUserDefinedVariables(self) -> Array_1[str]: ...
    def SetUserDefinedVariable(self, varName: str, value: str) -> None: ...


class VddRampMeasurement:
    @property
    def Acquisition(self) -> TimeDomainXYGraph: ...
    @property
    def Append(self) -> bool: ...
    @Append.setter
    def Append(self, value: bool) -> bool: ...
    @property
    def DataSetsGridVisible(self) -> bool: ...
    @DataSetsGridVisible.setter
    def DataSetsGridVisible(self, value: bool) -> bool: ...
    @property
    def ExtraAcquisitionTime(self) -> float: ...
    @ExtraAcquisitionTime.setter
    def ExtraAcquisitionTime(self, value: float) -> float: ...
    @property
    def FileAnalysisSettings(self) -> FileAnalysisSettings: ...
    @property
    def Graphs(self) -> GraphCollection: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def MeasurementType(self) -> MeasurementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def PassedLimitChecks(self) -> bool: ...
    @property
    def RampTime(self) -> float: ...
    @RampTime.setter
    def RampTime(self, value: float) -> float: ...
    @property
    def SelectorVisible(self) -> bool: ...
    @SelectorVisible.setter
    def SelectorVisible(self, value: bool) -> bool: ...
    @property
    def SequenceMeasurement(self) -> SequenceMeasurement: ...
    @property
    def StartLevel(self) -> float: ...
    @StartLevel.setter
    def StartLevel(self, value: float) -> float: ...
    @property
    def StopLevel(self) -> float: ...
    @StopLevel.setter
    def StopLevel(self, value: float) -> float: ...
    def AnalyzeFiles(self) -> bool: ...
    def CreateExportSettings(self) -> MeasurementExportSettings: ...
    def GetDataNotes(self, dataType: SourceDataType, dataIndex: int) -> str: ...
    def GetDataTimestamp(self, dataType: SourceDataType, dataIndex: int) -> DateTime: ...
    def GetDataVisible(self, dataType: SourceDataType, dataIndex: int) -> bool: ...
    def SetDataNotes(self, dataType: SourceDataType, dataIndex: int, notes: str) -> None: ...
    def SetDataVisible(self, dataType: SourceDataType, dataIndex: int, show: bool) -> None: ...
    def Start(self) -> bool: ...
    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, settings: MeasurementExportSettings) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, appendIfExists: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int, appendIfExists: bool) -> None:...

    # Skipped ShowGraph due to it being static, abstract and generic.

    ShowGraph : ShowGraph_MethodGroup
    class ShowGraph_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, name: str) -> None:...



class VersionInfo:
    @property
    def AdditionalVersionInfo(self) -> str: ...
    @property
    def AdjustmentDate(self) -> str: ...
    @property
    def ApplicationExpiration(self) -> DateTime: ...
    @property
    def ApplicationHasExpiration(self) -> bool: ...
    @property
    def APxKeyBoxInfo(self) -> APxKeyBoxInfo: ...
    @property
    def APxLicenseInfo(self) -> str: ...
    @property
    def HwModel(self) -> HwModel: ...
    @property
    def InstrumentID(self) -> str: ...
    @property
    def Is64BitProcess(self) -> bool: ...
    @property
    def IsCalibrationEnabled(self) -> bool: ...
    @property
    def IsValidBluetoothAddress(self) -> bool: ...
    @property
    def MaxAnalogInputChannelCount(self) -> int: ...
    @property
    def MaxAnalogOutputChannelCount(self) -> int: ...
    @property
    def Modules(self) -> InstrumentModuleCollection: ...
    @property
    def SoftwareVersion(self) -> str: ...
    def DoesOptionHaveExpiration(self, option: APxOption) -> bool: ...
    def GetMeasurementExpiration(self, measurementType: MeasurementType) -> DateTime: ...
    def GetOptionExpiration(self, option: APxOption) -> DateTime: ...
    def IsMeasurementLicensed(self, measurementType: MeasurementType) -> bool: ...
    def IsOptionPresent(self, option: APxOption) -> bool: ...


class VerticalAxis(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Left : VerticalAxis # 0
    Right : VerticalAxis # 1


class VerticalBarGraph:
    @property
    def Axis(self) -> GraphAxis: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def DisplayChannel(self) -> InputChannelIndex: ...
    @DisplayChannel.setter
    def DisplayChannel(self, value: InputChannelIndex) -> InputChannelIndex: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumBarsPerChannel(self) -> int: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    def CopyToClipboard(self) -> None: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetTraceColor(self, channelIndex: int, traceIndex: int) -> Color: ...
    def GetVales(self, ch: int) -> Array_1[GraphPoint]: ...
    def ResetTraceStyle(self, channelIndex: int, traceIndex: int) -> None: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetTraceColor(self, channelIndex: int, traceIndex: int, color: Color) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str) -> Array_1[GraphPoint]:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...



class VmaxConnectorType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    AnalogUnbalanced : VmaxConnectorType # 0
    AnalogBalanced : VmaxConnectorType # 1
    Speaker : VmaxConnectorType # 2
    TransducerLevel : VmaxConnectorType # 3
    TransducerPositiveOffset : VmaxConnectorType # 4
    TransducerNegativeOffset : VmaxConnectorType # 5
    PowerAmplifier : VmaxConnectorType # 6
    HeadphoneAmplifier : VmaxConnectorType # 7


class WaveformChannelAssignments(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Default : WaveformChannelAssignments # 0
    AllCh1 : WaveformChannelAssignments # 1
    AllCh2 : WaveformChannelAssignments # 2
    AllCh3 : WaveformChannelAssignments # 3
    AllCh4 : WaveformChannelAssignments # 4
    AllCh5 : WaveformChannelAssignments # 5
    AllCh6 : WaveformChannelAssignments # 6
    AllCh7 : WaveformChannelAssignments # 7
    AllCh8 : WaveformChannelAssignments # 8
    AllCh9 : WaveformChannelAssignments # 9
    AllCh10 : WaveformChannelAssignments # 10
    AllCh11 : WaveformChannelAssignments # 11
    AllCh12 : WaveformChannelAssignments # 12
    AllCh13 : WaveformChannelAssignments # 13
    AllCh14 : WaveformChannelAssignments # 14
    AllCh15 : WaveformChannelAssignments # 15
    AllCh16 : WaveformChannelAssignments # 16


class WaveformDataGraph:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def ExportWav(self, fileName: str, audioFileType: FileAudioType, bitDepth: SavedAcquisitionBitDepthType, dataType: SourceDataType, dataIndex: int, replaceFileIfExists: bool) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def HasDataOnAxis(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> bool: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetData due to it being static, abstract and generic.

    GetData : GetData_MethodGroup
    class GetData_MethodGroup:
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> XYValues:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int) -> XYValues:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class WaveformFileSettings:
    @property
    def BitExactDigitalOutput(self) -> bool: ...
    @BitExactDigitalOutput.setter
    def BitExactDigitalOutput(self, value: bool) -> bool: ...
    @property
    def Description(self) -> str: ...
    @property
    def DtsTransmitRate(self) -> DtsTransmitRate: ...
    @DtsTransmitRate.setter
    def DtsTransmitRate(self, value: DtsTransmitRate) -> DtsTransmitRate: ...
    @property
    def DtsXTransmitMode(self) -> DtsXPackMode: ...
    @DtsXTransmitMode.setter
    def DtsXTransmitMode(self, value: DtsXPackMode) -> DtsXPackMode: ...
    @property
    def DurationInSamples(self) -> int: ...
    @property
    def DurationInSeconds(self) -> float: ...
    @property
    def FileName(self) -> str: ...
    @property
    def HasTooManySamples(self) -> bool: ...
    @property
    def IsEncoded(self) -> bool: ...
    @property
    def ShowDurationInSeconds(self) -> bool: ...
    @ShowDurationInSeconds.setter
    def ShowDurationInSeconds(self, value: bool) -> bool: ...
    @property
    def StartOffsetInSamples(self) -> int: ...
    @StartOffsetInSamples.setter
    def StartOffsetInSamples(self, value: int) -> int: ...
    @property
    def StartOffsetInSeconds(self) -> float: ...
    @StartOffsetInSeconds.setter
    def StartOffsetInSeconds(self, value: float) -> float: ...
    def GetMultiWaveChannelAssignment(self, ch: OutputChannelIndex) -> WaveMultiChannelAssignment: ...
    def ResetChannelAssignments(self, setting: WaveformChannelAssignments) -> None: ...
    def SetMultiWaveChannelAssignment(self, ch: OutputChannelIndex, assignment: WaveMultiChannelAssignment) -> None: ...


class WaveformGenerator:
    @property
    def Waveform(self) -> str: ...
    @Waveform.setter
    def Waveform(self, value: str) -> str: ...
    @property
    def WaveformNames(self) -> Array_1[str]: ...


class WaveMultiChannelAssignment(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Ch1 : WaveMultiChannelAssignment # 0
    Ch2 : WaveMultiChannelAssignment # 1
    Ch3 : WaveMultiChannelAssignment # 2
    Ch4 : WaveMultiChannelAssignment # 3
    Ch5 : WaveMultiChannelAssignment # 4
    Ch6 : WaveMultiChannelAssignment # 5
    Ch7 : WaveMultiChannelAssignment # 6
    Ch8 : WaveMultiChannelAssignment # 7
    Ch9 : WaveMultiChannelAssignment # 8
    Ch10 : WaveMultiChannelAssignment # 9
    Ch11 : WaveMultiChannelAssignment # 10
    Ch12 : WaveMultiChannelAssignment # 11
    Ch13 : WaveMultiChannelAssignment # 12
    Ch14 : WaveMultiChannelAssignment # 13
    Ch15 : WaveMultiChannelAssignment # 14
    Ch16 : WaveMultiChannelAssignment # 15


class WavExportBitDepth(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    BitDepth16 : WavExportBitDepth # 0
    BitDepth24 : WavExportBitDepth # 1
    BitDepth32 : WavExportBitDepth # 2


class WeightingFilterType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    SignalPath : WeightingFilterType # 0
    wt_A : WeightingFilterType # 1
    wt_B : WeightingFilterType # 2
    wt_C : WeightingFilterType # 3
    wt_Ccir : WeightingFilterType # 4
    wt_Dolby2k : WeightingFilterType # 5
    wt_Ccitt : WeightingFilterType # 6
    wt_CMessage : WeightingFilterType # 7
    wt_Deemph50us : WeightingFilterType # 8
    wt_Deemph75us : WeightingFilterType # 9
    wt_Deemph50usA : WeightingFilterType # 10
    wt_Deemph75usA : WeightingFilterType # 11


class WindowType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Equiripple : WindowType # 0
    BlackmanHarris : WindowType # 1
    BlackmanHarris4 : WindowType # 2
    Dolph150 : WindowType # 3
    Dolph200 : WindowType # 4
    Dolph250 : WindowType # 5
    FlatTop : WindowType # 6
    Hann : WindowType # 7
    None_ : WindowType # 8
    NoneMoveToBinCenter : WindowType # 9


class XYCursor:
    @property
    def AttachedTrace(self) -> TraceInfo: ...
    @property
    def Color(self) -> Color: ...
    @Color.setter
    def Color(self, value: Color) -> Color: ...
    @property
    def HorizontalGraticule(self) -> Graticule: ...
    @HorizontalGraticule.setter
    def HorizontalGraticule(self, value: Graticule) -> Graticule: ...
    @property
    def Label(self) -> str: ...
    @Label.setter
    def Label(self, value: str) -> str: ...
    @property
    def LineStyle(self) -> DashStyle: ...
    @LineStyle.setter
    def LineStyle(self, value: DashStyle) -> DashStyle: ...
    @property
    def LineWidth(self) -> int: ...
    @LineWidth.setter
    def LineWidth(self, value: int) -> int: ...
    @property
    def Selected(self) -> bool: ...
    @Selected.setter
    def Selected(self, value: bool) -> bool: ...
    @property
    def Shape(self) -> CursorShape: ...
    @Shape.setter
    def Shape(self, value: CursorShape) -> CursorShape: ...
    @property
    def ShowLabel(self) -> bool: ...
    @ShowLabel.setter
    def ShowLabel(self, value: bool) -> bool: ...
    @property
    def VerticalGraticule(self) -> Graticule: ...
    @VerticalGraticule.setter
    def VerticalGraticule(self, value: Graticule) -> Graticule: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...
    @property
    def XValue(self) -> float: ...
    @XValue.setter
    def XValue(self, value: float) -> float: ...
    @property
    def YValue(self) -> float: ...
    @YValue.setter
    def YValue(self, value: float) -> float: ...
    def Center(self) -> None: ...
    def Detach(self) -> None: ...
    # Skipped Attach due to it being static, abstract and generic.

    Attach : Attach_MethodGroup
    class Attach_MethodGroup:
        @typing.overload
        def __call__(self, channel: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, channel: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, channel: InputChannelIndex, axis: VerticalAxis) -> None:...



class XyDataExportSpecification:
    @property
    def DataPoints(self) -> Array_1[float]: ...
    @DataPoints.setter
    def DataPoints(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def From(self) -> float: ...
    @From.setter
    def From(self, value: float) -> float: ...
    @property
    def NumberOfDataPoints(self) -> int: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: int) -> int: ...
    @property
    def RangeType(self) -> XyDataRange: ...
    @RangeType.setter
    def RangeType(self, value: XyDataRange) -> XyDataRange: ...
    @property
    def StepType(self) -> SweepStepType: ...
    @StepType.setter
    def StepType(self, value: SweepStepType) -> SweepStepType: ...
    @property
    def To(self) -> float: ...
    @To.setter
    def To(self, value: float) -> float: ...
    @property
    def XUnit(self) -> str: ...
    def SaveToFile(self, fileName: str) -> None: ...
    def SaveToProject(self, name: str, replaceIfExists: bool) -> str: ...


class XyDataRange(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    AllPointsInRange : XyDataRange # 0
    Custom : XyDataRange # 1


class XYDataSetType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    All : XYDataSetType # 0
    MostRecent : XYDataSetType # 1
    Specific : XYDataSetType # 2


class XYDataTrace:
    @property
    def AllChannels(self) -> bool: ...
    @AllChannels.setter
    def AllChannels(self, value: bool) -> bool: ...
    @property
    def DataSetType(self) -> XYDataSetType: ...
    @DataSetType.setter
    def DataSetType(self, value: XYDataSetType) -> XYDataSetType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def SourceDataSet(self) -> int: ...
    @SourceDataSet.setter
    def SourceDataSet(self, value: int) -> int: ...
    @property
    def SourceDataSetType(self) -> SourceDataType: ...
    @SourceDataSetType.setter
    def SourceDataSetType(self, value: SourceDataType) -> SourceDataType: ...
    def Delete(self) -> None: ...
    # Skipped IsChannelSelected due to it being static, abstract and generic.

    IsChannelSelected : IsChannelSelected_MethodGroup
    class IsChannelSelected_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped SelectChannel due to it being static, abstract and generic.

    SelectChannel : SelectChannel_MethodGroup
    class SelectChannel_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, selected: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, selected: bool) -> None:...



class XYDataTraceCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> XYDataTrace: ...
    def Add(self) -> XYDataTrace: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Remove(self, index: int) -> None: ...


class XYDistortionGraph:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ActiveAcquisition(self) -> int: ...
    @ActiveAcquisition.setter
    def ActiveAcquisition(self, value: int) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> CursorHarmonic: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> CursorHarmonic: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def CopyToClipboard(self) -> None: ...
    def Dock(self) -> None: ...
    def ExportData(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int) -> XYDistortionTraceStyleCollection: ...
    def ImportData(self, fileName: str, axis: VerticalAxis) -> None: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetActiveAcquisition(self, dataType: SourceDataType, index: int) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped GetAllHarmonicXValues due to it being static, abstract and generic.

    GetAllHarmonicXValues : GetAllHarmonicXValues_MethodGroup
    class GetAllHarmonicXValues_MethodGroup:
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int, unit: str) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, unit: str) -> Array_1[float]:...

    # Skipped GetAllHarmonicYValues due to it being static, abstract and generic.

    GetAllHarmonicYValues : GetAllHarmonicYValues_MethodGroup
    class GetAllHarmonicYValues_MethodGroup:
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int, unit: str) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, unit: str) -> Array_1[float]:...

    # Skipped GetHarmonicVisible due to it being static, abstract and generic.

    GetHarmonicVisible : GetHarmonicVisible_MethodGroup
    class GetHarmonicVisible_MethodGroup:
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int) -> bool:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex) -> bool:...

    # Skipped GetHarmonicXText due to it being static, abstract and generic.

    GetHarmonicXText : GetHarmonicXText_MethodGroup
    class GetHarmonicXText_MethodGroup:
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int) -> Array_1[str]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex) -> Array_1[str]:...
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int, acquisitionNumber: int) -> Array_1[str]:...
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int, unit: str) -> Array_1[str]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, acquisitionNumber: int) -> Array_1[str]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, unit: str) -> Array_1[str]:...
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int, acquisitionNumber: int, xUnit: str) -> Array_1[str]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, acquisitionNumber: int, xUnit: str) -> Array_1[str]:...

    # Skipped GetHarmonicXValues due to it being static, abstract and generic.

    GetHarmonicXValues : GetHarmonicXValues_MethodGroup
    class GetHarmonicXValues_MethodGroup:
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int, acquisitionNumber: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int, unit: str) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, acquisitionNumber: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, unit: str) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int, acquisitionNumber: int, xUnit: str) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, acquisitionNumber: int, xUnit: str) -> Array_1[float]:...

    # Skipped GetHarmonicYText due to it being static, abstract and generic.

    GetHarmonicYText : GetHarmonicYText_MethodGroup
    class GetHarmonicYText_MethodGroup:
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int) -> Array_1[str]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex) -> Array_1[str]:...
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int, acquisitionNumber: int) -> Array_1[str]:...
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int, unit: str) -> Array_1[str]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, acquisitionNumber: int) -> Array_1[str]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, unit: str) -> Array_1[str]:...
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int, acquisitionNumber: int, yUnit: str) -> Array_1[str]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, acquisitionNumber: int, yUnit: str) -> Array_1[str]:...

    # Skipped GetHarmonicYValues due to it being static, abstract and generic.

    GetHarmonicYValues : GetHarmonicYValues_MethodGroup
    class GetHarmonicYValues_MethodGroup:
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int, acquisitionNumber: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int, unit: str) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, acquisitionNumber: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, unit: str) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int, acquisitionNumber: int, yUnit: str) -> Array_1[float]:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, acquisitionNumber: int, yUnit: str) -> Array_1[float]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> XyDistortionValues:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int) -> XyDistortionValues:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetHarmonicVisible due to it being static, abstract and generic.

    SetHarmonicVisible : SetHarmonicVisible_MethodGroup
    class SetHarmonicVisible_MethodGroup:
        @typing.overload
        def __call__(self, channel: int, harmonicIndex: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, channel: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, visible: bool) -> None:...



class XYDistortionGraphLimit:
    @property
    def Enabled(self) -> bool: ...
    @Enabled.setter
    def Enabled(self, value: bool) -> bool: ...
    @property
    def PassedLimitCheck(self) -> bool: ...
    def Clear(self) -> None: ...
    def CopyFromGraphData(self, dataPoints: NumberOfGraphPoints) -> None: ...
    def ExportData(self, fileName: str) -> None: ...
    def ImportData(self, fileName: str) -> None: ...
    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, harmonicIndex: DistortionHarmonicIndex) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex) -> Array_1[float]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, harmonicIndex: DistortionHarmonicIndex) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex) -> Array_1[float]:...

    # Skipped HasLimitOnChannel due to it being static, abstract and generic.

    HasLimitOnChannel : HasLimitOnChannel_MethodGroup
    class HasLimitOnChannel_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped HasLimitOnHarmonic due to it being static, abstract and generic.

    HasLimitOnHarmonic : HasLimitOnHarmonic_MethodGroup
    class HasLimitOnHarmonic_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, harmonicIndex: int) -> bool:...
        @typing.overload
        def __call__(self, ch: int, harmonicIndex: DistortionHarmonicIndex) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonicIndex: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex) -> bool:...

    # Skipped OffsetValue due to it being static, abstract and generic.

    OffsetValue : OffsetValue_MethodGroup
    class OffsetValue_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, harmonic: int, adjustment: float) -> None:...
        @typing.overload
        def __call__(self, ch: int, harmonic: DistortionHarmonicIndex, adjustment: float) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonic: int, adjustment: float) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonic: DistortionHarmonicIndex, adjustment: float) -> None:...

    # Skipped OffsetValues due to it being static, abstract and generic.

    OffsetValues : OffsetValues_MethodGroup
    class OffsetValues_MethodGroup:
        @typing.overload
        def __call__(self, adjustment: float) -> None:...
        @typing.overload
        def __call__(self, ch: int, adjustment: Array_1[float]) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, adjustment: Array_1[float]) -> None:...

    # Skipped PassedLimitCheckOnChannel due to it being static, abstract and generic.

    PassedLimitCheckOnChannel : PassedLimitCheckOnChannel_MethodGroup
    class PassedLimitCheckOnChannel_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped PassedLimitCheckOnHarmonic due to it being static, abstract and generic.

    PassedLimitCheckOnHarmonic : PassedLimitCheckOnHarmonic_MethodGroup
    class PassedLimitCheckOnHarmonic_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, harmonicIndex: int) -> bool:...
        @typing.overload
        def __call__(self, ch: int, harmonicIndex: DistortionHarmonicIndex) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonicIndex: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex) -> bool:...

    # Skipped RemoveChannel due to it being static, abstract and generic.

    RemoveChannel : RemoveChannel_MethodGroup
    class RemoveChannel_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> None:...

    # Skipped RemoveHarmonic due to it being static, abstract and generic.

    RemoveHarmonic : RemoveHarmonic_MethodGroup
    class RemoveHarmonic_MethodGroup:
        @typing.overload
        def __call__(self, harmonicIndex: int) -> None:...
        @typing.overload
        def __call__(self, harmonicIndex: DistortionHarmonicIndex) -> None:...

    # Skipped SetValues due to it being static, abstract and generic.

    SetValues : SetValues_MethodGroup
    class SetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, harmonicIndex: DistortionHarmonicIndex, xValues: Array_1[float], yValues: Array_1[float]) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, xValues: Array_1[float], yValues: Array_1[float]) -> None:...

    # Skipped SetX due to it being static, abstract and generic.

    SetX : SetX_MethodGroup
    class SetX_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, harmonicIndex: DistortionHarmonicIndex, index: int, x: float) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, index: int, x: float) -> None:...

    # Skipped SetY due to it being static, abstract and generic.

    SetY : SetY_MethodGroup
    class SetY_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, harmonicIndex: DistortionHarmonicIndex, index: int, y: float) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, index: int, y: float) -> None:...



class XYDistortionTraceStyleCollection:
    @property
    def Count(self) -> int: ...
    def GetColor(self, traceIndex: int, harmonicIndex: int) -> Color: ...
    def GetLineStyle(self, traceIndex: int, harmonicIndex: int) -> DashStyle: ...
    def GetLineWidth(self, traceIndex: int, harmonicIndex: int) -> int: ...
    def GetName(self, traceIndex: int, harmonicIndex: int) -> str: ...
    def GetVisible(self, traceIndex: int, harmonicIndex: int) -> bool: ...
    def ResetTraceStyle(self, traceIndex: int, harmonicIndex: int) -> None: ...
    def SetColor(self, traceIndex: int, harmonicIndex: int, color: Color) -> None: ...
    def SetLineStyle(self, traceIndex: int, harmonicIndex: int, lineStyle: DashStyle) -> None: ...
    def SetLineWidth(self, traceIndex: int, harmonicIndex: int, lineWidth: int) -> None: ...
    def SetName(self, traceIndex: int, harmonicIndex: int, name: str) -> None: ...
    def SetVisible(self, traceIndex: int, harmonicIndex: int, visible: bool) -> None: ...


class XyDistortionValues:
    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, harmonicIndex: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, harmonicIndex: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, harmonicIndex: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, harmonicIndex: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, harmonicIndex: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, harmonicIndex: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, harmonicIndex: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, harmonicIndex: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, harmonicIndex: DistortionHarmonicIndex, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...



class XYGraph:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def HasDataOnAxis(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> bool: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetData due to it being static, abstract and generic.

    GetData : GetData_MethodGroup
    class GetData_MethodGroup:
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int) -> XYValues:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, dataIndex: int, numberOfGraphPoints: NumberOfGraphPoints, pointCount: int) -> XYValues:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, acquisitionNumber: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class XYGraphDataImport:
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...



class XYGraphExport:
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...



class XYGraphSettings:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def CopyToClipboard(self) -> None: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...



class XYGraphWithLimits:
    @property
    def AcquisitionCount(self) -> int: ...
    @property
    def ChannelCount(self) -> int: ...
    @property
    def ChannelNames(self) -> Array_1[str]: ...
    @property
    def Checked(self) -> bool: ...
    @Checked.setter
    def Checked(self, value: bool) -> bool: ...
    @property
    def DeltaCursor(self) -> DeltaCursor: ...
    @property
    def DerivedResultTypeNames(self) -> Array_1[str]: ...
    @property
    def DerivedResultTypes(self) -> Array_1[MeasurementResultType]: ...
    @property
    def ExportDataSpecifications(self) -> Array_1[str]: ...
    @property
    def ExportSpecification(self) -> str: ...
    @ExportSpecification.setter
    def ExportSpecification(self, value: str) -> str: ...
    @property
    def FailureCondition(self) -> FailureConditionType: ...
    @FailureCondition.setter
    def FailureCondition(self, value: FailureConditionType) -> FailureConditionType: ...
    @property
    def Input(self) -> APxInputSelection: ...
    @property
    def IsDerived(self) -> bool: ...
    @property
    def IsDocked(self) -> bool: ...
    @property
    def IsRightAxisResult(self) -> bool: ...
    @property
    def IsRightAxisResultDefined(self) -> bool: ...
    @property
    def IsSource(self) -> bool: ...
    @property
    def IsValid(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @property
    def LeftAxis(self) -> GraphAxis: ...
    @property
    def LegendVisible(self) -> bool: ...
    @LegendVisible.setter
    def LegendVisible(self, value: bool) -> bool: ...
    @property
    def LowerLimit(self) -> GraphLimit: ...
    @property
    def LowerLimitRight(self) -> GraphLimit: ...
    @property
    def Message(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfDataPoints(self) -> NumberOfGraphPoints: ...
    @NumberOfDataPoints.setter
    def NumberOfDataPoints(self, value: NumberOfGraphPoints) -> NumberOfGraphPoints: ...
    @property
    def NumberOfDataPointsCount(self) -> int: ...
    @NumberOfDataPointsCount.setter
    def NumberOfDataPointsCount(self, value: int) -> int: ...
    @property
    def PrimaryCursor(self) -> XYCursor: ...
    @property
    def Result(self) -> DynamicResultGraph: ...
    @property
    def RightAxis(self) -> GraphAxis: ...
    @property
    def RightAxisResult(self) -> DynamicResultGraph: ...
    @property
    def SecondaryCursor(self) -> XYCursor: ...
    @property
    def ShowCursors(self) -> bool: ...
    @ShowCursors.setter
    def ShowCursors(self, value: bool) -> bool: ...
    @property
    def ShowIndicators(self) -> ShowIndicatorsType: ...
    @ShowIndicators.setter
    def ShowIndicators(self, value: ShowIndicatorsType) -> ShowIndicatorsType: ...
    @property
    def ShowMarkers(self) -> bool: ...
    @ShowMarkers.setter
    def ShowMarkers(self, value: bool) -> bool: ...
    @property
    def ShowXLabels(self) -> bool: ...
    @ShowXLabels.setter
    def ShowXLabels(self, value: bool) -> bool: ...
    @property
    def ShowYLabels(self) -> bool: ...
    @ShowYLabels.setter
    def ShowYLabels(self, value: bool) -> bool: ...
    @property
    def TimeStamp(self) -> DateTime: ...
    @property
    def Title(self) -> GraphTitle: ...
    @property
    def TrackFirstLimitChannel(self) -> bool: ...
    @TrackFirstLimitChannel.setter
    def TrackFirstLimitChannel(self, value: bool) -> bool: ...
    @property
    def UpperLimit(self) -> GraphLimit: ...
    @property
    def UpperLimitRight(self) -> GraphLimit: ...
    @property
    def VerticalAxisType(self) -> VerticalAxis: ...
    @property
    def ViewType(self) -> MeasurementResultType: ...
    @property
    def XAxis(self) -> GraphAxis: ...
    @property
    def YAxis(self) -> GraphAxis: ...
    def ClearLimits(self) -> None: ...
    def ClearRightAxisResult(self) -> None: ...
    def CopyToClipboard(self) -> None: ...
    def CreateExportSpecification(self) -> XyDataExportSpecification: ...
    def CreateImportDataObject(self, xUnit: str, yUnit: str) -> XYImportData: ...
    def Dock(self) -> None: ...
    def FitDataToView(self) -> None: ...
    def GetDataIndex(self, index: int) -> int: ...
    def GetDataType(self, index: int) -> SourceDataType: ...
    def GetTraceStyles(self, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> XYTraceStyleCollection: ...
    def LoadExportSpecification(self, fileName: str, replaceIfExists: bool) -> XyDataExportSpecification: ...
    def SaveReport(self, fileName: str, format: ReportExportFormat) -> None: ...
    def SetZoomPanToOriginal(self) -> None: ...
    def Show(self) -> None: ...
    def Undock(self) -> None: ...
    # Skipped AddDerivedResult due to it being static, abstract and generic.

    AddDerivedResult : AddDerivedResult_MethodGroup
    class AddDerivedResult_MethodGroup:
        @typing.overload
        def __call__(self, derivedResultType: MeasurementResultType) -> Graph:...
        @typing.overload
        def __call__(self, derivedResultTypeName: str) -> Graph:...

    # Skipped ClearData due to it being static, abstract and generic.

    ClearData : ClearData_MethodGroup
    class ClearData_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> None:...
        @typing.overload
        def __call__(self, dataType: SourceDataType, index: int) -> None:...

    # Skipped DefineDerivedRightAxisResult due to it being static, abstract and generic.

    DefineDerivedRightAxisResult : DefineDerivedRightAxisResult_MethodGroup
    class DefineDerivedRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, derivedResultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, sourceResultType: MeasurementResultType, sourceResultInput: APxInputSelection, derivedResultType: MeasurementResultType) -> None:...

    # Skipped DefineRightAxisResult due to it being static, abstract and generic.

    DefineRightAxisResult : DefineRightAxisResult_MethodGroup
    class DefineRightAxisResult_MethodGroup:
        @typing.overload
        def __call__(self, resultType: MeasurementResultType) -> None:...
        @typing.overload
        def __call__(self, resultType: MeasurementResultType, input: APxInputSelection) -> None:...

    # Skipped ExportData due to it being static, abstract and generic.

    ExportData : ExportData_MethodGroup
    class ExportData_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis) -> None:...
        @typing.overload
        def __call__(self, fileName: str, exportSpecification: str, selectedChannels: Array_1[bool], dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...
        @typing.overload
        def __call__(self, fileName: str, xUnit: str, yUnit: str, dataType: SourceDataType, dataIndex: int, axis: VerticalAxis, append: bool) -> None:...

    # Skipped GetAllXValues due to it being static, abstract and generic.

    GetAllXValues : GetAllXValues_MethodGroup
    class GetAllXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetAllYValues due to it being static, abstract and generic.

    GetAllYValues : GetAllYValues_MethodGroup
    class GetAllYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetChannelVisible due to it being static, abstract and generic.

    GetChannelVisible : GetChannelVisible_MethodGroup
    class GetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped GetText due to it being static, abstract and generic.

    GetText : GetText_MethodGroup
    class GetText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphStringPoint]:...

    # Skipped GetValues due to it being static, abstract and generic.

    GetValues : GetValues_MethodGroup
    class GetValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, yUnit: str, axis: VerticalAxis) -> Array_1[GraphPoint]:...

    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, unit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, unit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped ImportData due to it being static, abstract and generic.

    ImportData : ImportData_MethodGroup
    class ImportData_MethodGroup:
        @typing.overload
        def __call__(self, importData: XYImportData) -> None:...
        @typing.overload
        def __call__(self, fileName: str, axis: VerticalAxis) -> None:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType) -> None:...
        @typing.overload
        def __call__(self, filename: str, type: GraphImageType, width: int, height: int) -> None:...

    # Skipped SetChannelVisible due to it being static, abstract and generic.

    SetChannelVisible : SetChannelVisible_MethodGroup
    class SetChannelVisible_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, visible: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, visible: bool) -> None:...



class XYImportData:
    @property
    def ChannelCount(self) -> int: ...
    @property
    def XUnit(self) -> str: ...
    @property
    def YUnit(self) -> str: ...
    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> Array_1[float]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> Array_1[float]:...

    # Skipped SetChannelData due to it being static, abstract and generic.

    SetChannelData : SetChannelData_MethodGroup
    class SetChannelData_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, xValues: Array_1[float], yValues: Array_1[float]) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xValues: Array_1[float], yValues: Array_1[float]) -> None:...



class XYLevelAndDistortionDataTrace:
    @property
    def AllChannels(self) -> bool: ...
    @AllChannels.setter
    def AllChannels(self, value: bool) -> bool: ...
    @property
    def DataSetType(self) -> XYDataSetType: ...
    @DataSetType.setter
    def DataSetType(self, value: XYDataSetType) -> XYDataSetType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def SourceDataSet(self) -> int: ...
    @SourceDataSet.setter
    def SourceDataSet(self, value: int) -> int: ...
    @property
    def SourceDataSetType(self) -> SourceDataType: ...
    @SourceDataSetType.setter
    def SourceDataSetType(self, value: SourceDataType) -> SourceDataType: ...
    def Delete(self) -> None: ...
    # Skipped IsChannelSelected due to it being static, abstract and generic.

    IsChannelSelected : IsChannelSelected_MethodGroup
    class IsChannelSelected_MethodGroup:
        @typing.overload
        def __call__(self, ch: int) -> bool:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex) -> bool:...

    # Skipped IsHarmonicSelected due to it being static, abstract and generic.

    IsHarmonicSelected : IsHarmonicSelected_MethodGroup
    class IsHarmonicSelected_MethodGroup:
        @typing.overload
        def __call__(self, harmIndex: int) -> bool:...
        @typing.overload
        def __call__(self, harmIndex: DistortionHarmonicIndex) -> bool:...

    # Skipped SelectChannel due to it being static, abstract and generic.

    SelectChannel : SelectChannel_MethodGroup
    class SelectChannel_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, selected: bool) -> None:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, selected: bool) -> None:...

    # Skipped SelectHarmonic due to it being static, abstract and generic.

    SelectHarmonic : SelectHarmonic_MethodGroup
    class SelectHarmonic_MethodGroup:
        @typing.overload
        def __call__(self, harmIndex: int, selected: bool) -> None:...
        @typing.overload
        def __call__(self, harmIndex: DistortionHarmonicIndex, selected: bool) -> None:...



class XYLevelAndDistortionDataTraceCollection(IEnumerable):
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> XYLevelAndDistortionDataTrace: ...
    def Add(self) -> XYLevelAndDistortionDataTrace: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Remove(self, index: int) -> None: ...


class XYStatisticsFunctionType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Min : XYStatisticsFunctionType # 0
    Max : XYStatisticsFunctionType # 1
    GeometricMean : XYStatisticsFunctionType # 2
    ArithmeticMean : XYStatisticsFunctionType # 3
    Rms : XYStatisticsFunctionType # 4
    StdDev : XYStatisticsFunctionType # 5
    PowerAverage : XYStatisticsFunctionType # 6


class XYTraceStyleCollection:
    @property
    def Count(self) -> int: ...
    def GetColor(self, traceIndex: int) -> Color: ...
    def GetLineStyle(self, traceIndex: int) -> DashStyle: ...
    def GetLineWidth(self, traceIndex: int) -> int: ...
    def GetName(self, traceIndex: int) -> str: ...
    def GetVisible(self, traceIndex: int) -> bool: ...
    def ResetTraceStyle(self, traceIndex: int) -> None: ...
    def SetColor(self, traceIndex: int, color: Color) -> None: ...
    def SetLineStyle(self, traceIndex: int, lineStyle: DashStyle) -> None: ...
    def SetLineWidth(self, traceIndex: int, lineWidth: int) -> None: ...
    def SetName(self, traceIndex: int, name: str) -> None: ...
    def SetVisible(self, traceIndex: int, visible: bool) -> None: ...


class XYValues:
    @property
    def ChannelCountLeft(self) -> int: ...
    @property
    def ChannelCountRight(self) -> int: ...
    @property
    def HasRightAxisData(self) -> bool: ...
    def GetTimeoutData(self, ch: int, axis: VerticalAxis) -> TimeoutData: ...
    # Skipped GetXText due to it being static, abstract and generic.

    GetXText : GetXText_MethodGroup
    class GetXText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetXValues due to it being static, abstract and generic.

    GetXValues : GetXValues_MethodGroup
    class GetXValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, xUnit: str, axis: VerticalAxis) -> Array_1[float]:...

    # Skipped GetYText due to it being static, abstract and generic.

    GetYText : GetYText_MethodGroup
    class GetYText_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: int, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, yUnit: str, axis: VerticalAxis) -> Array_1[str]:...

    # Skipped GetYValues due to it being static, abstract and generic.

    GetYValues : GetYValues_MethodGroup
    class GetYValues_MethodGroup:
        @typing.overload
        def __call__(self, ch: int, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: int, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...
        @typing.overload
        def __call__(self, ch: InputChannelIndex, yUnit: str, axis: VerticalAxis) -> Array_1[float]:...


